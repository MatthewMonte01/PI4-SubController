
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014030  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08014200  08014200  00024200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d3c  08014d3c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014d3c  08014d3c  00024d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d44  08014d44  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d44  08014d44  00024d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d48  08014d48  00024d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006714  200001f0  08014f3c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20006904  08014f3c  00036904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e67  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ec  00000000  00000000  000540ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f20  00000000  00000000  000593b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001844  00000000  00000000  0005b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299d2  00000000  00000000  0005cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a5ba  00000000  00000000  000864ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eef10  00000000  00000000  000b0aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000094b0  00000000  00000000  0019f9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a8e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080141e8 	.word	0x080141e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080141e8 	.word	0x080141e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <Bar30init+0x2a>
	{
		sensor->calibrationResult[i]=0;
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<7;i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	ddf2      	ble.n	8000fda <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sensor->conversionCompleteFlag=0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sensor->dT=0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->actualPressure=0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	sensor->rawPressure=0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 8001038:	231e      	movs	r3, #30
 800103a:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f107 020e 	add.w	r2, r7, #14
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	9100      	str	r1, [sp, #0]
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f004 f9a4 	bl	80053a0 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <Bar30reset+0x48>)
 800105e:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <Bar30reset+0x48>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000020c 	.word	0x2000020c

0800107c <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 800108c:	2302      	movs	r3, #2
 800108e:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e041      	b.n	800111a <Bar30getCalibration+0x9e>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3350      	adds	r3, #80	; 0x50
 800109a:	b2db      	uxtb	r3, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f107 020b 	add.w	r2, r7, #11
 80010ae:	f04f 31ff 	mov.w	r1, #4294967295
 80010b2:	9100      	str	r1, [sp, #0]
 80010b4:	21ec      	movs	r1, #236	; 0xec
 80010b6:	f004 f973 	bl	80053a0 <HAL_I2C_Master_Transmit>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <Bar30getCalibration+0xb8>)
 80010c0:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <Bar30getCalibration+0xb8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	9100      	str	r1, [sp, #0]
 80010e2:	21ec      	movs	r1, #236	; 0xec
 80010e4:	f004 fa5a 	bl	800559c <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <Bar30getCalibration+0xb8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	3301      	adds	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21b      	sxth	r3, r3
 8001104:	b299      	uxth	r1, r3
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3308      	adds	r3, #8
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	460a      	mov	r2, r1
 8001112:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<7;i++)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3301      	adds	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b06      	cmp	r3, #6
 800111e:	ddba      	ble.n	8001096 <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3

}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000020c 	.word	0x2000020c

08001138 <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f845 	bl	80011d4 <initiatePressureConversion>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <Bar30getData+0x98>)
 8001150:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <Bar30getData+0x98>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <Bar30getData+0x26>
		conversionGood=0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800115e:	2003      	movs	r0, #3
 8001160:	f002 fc26 	bl	80039b0 <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f871 	bl	800124c <readPressureData>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <Bar30getData+0x98>)
 8001170:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <Bar30getData+0x98>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <Bar30getData+0x46>
		conversionGood=0;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f846 	bl	8001210 <initiateTemperatureConversion>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <Bar30getData+0x98>)
 800118a:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <Bar30getData+0x98>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <Bar30getData+0x60>
		conversionGood=0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001198:	2003      	movs	r0, #3
 800119a:	f002 fc09 	bl	80039b0 <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f894 	bl	80012cc <readTemperatureData>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Bar30getData+0x98>)
 80011aa:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <Bar30getData+0x98>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <Bar30getData+0x80>
		conversionGood=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f921 	bl	8001400 <calculateTemperature>
	calculatePressure(sensor);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f964 	bl	800148c <calculatePressure>
	return conversionGood;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000020c 	.word	0x2000020c

080011d4 <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 80011dc:	2344      	movs	r3, #68	; 0x44
 80011de:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 020f 	add.w	r2, r7, #15
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	21ec      	movs	r1, #236	; 0xec
 80011f2:	f004 f8d5 	bl	80053a0 <HAL_I2C_Master_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <initiatePressureConversion+0x38>)
 80011fc:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <initiatePressureConversion+0x38>)
 8001200:	781b      	ldrb	r3, [r3, #0]


}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000020c 	.word	0x2000020c

08001210 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 8001218:	2354      	movs	r3, #84	; 0x54
 800121a:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	21ec      	movs	r1, #236	; 0xec
 800122e:	f004 f8b7 	bl	80053a0 <HAL_I2C_Master_Transmit>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <initiateTemperatureConversion+0x38>)
 8001238:	701a      	strb	r2, [r3, #0]
	return halStatus;
 800123a:	4b03      	ldr	r3, [pc, #12]	; (8001248 <initiateTemperatureConversion+0x38>)
 800123c:	781b      	ldrb	r3, [r3, #0]

}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000020c 	.word	0x2000020c

0800124c <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 020f 	add.w	r2, r7, #15
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	21ec      	movs	r1, #236	; 0xec
 800126a:	f004 f899 	bl	80053a0 <HAL_I2C_Master_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <readPressureData+0x7c>)
 8001274:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	21ec      	movs	r1, #236	; 0xec
 8001288:	f004 f988 	bl	800559c <HAL_I2C_Master_Receive>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <readPressureData+0x7c>)
 8001292:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	7bba      	ldrb	r2, [r7, #14]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
	return halStatus;
 80012bc:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <readPressureData+0x7c>)
 80012be:	781b      	ldrb	r3, [r3, #0]

}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000020c 	.word	0x2000020c

080012cc <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f107 020f 	add.w	r2, r7, #15
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	21ec      	movs	r1, #236	; 0xec
 80012ea:	f004 f859 	bl	80053a0 <HAL_I2C_Master_Transmit>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <readTemperatureData+0x7c>)
 80012f4:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2303      	movs	r3, #3
 8001306:	21ec      	movs	r1, #236	; 0xec
 8001308:	f004 f948 	bl	800559c <HAL_I2C_Master_Receive>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <readTemperatureData+0x7c>)
 8001312:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	7bba      	ldrb	r2, [r7, #14]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]


	return halStatus;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <readTemperatureData+0x7c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000020c 	.word	0x2000020c

0800134c <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
 800136a:	e035      	b.n	80013d8 <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4053      	eors	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	e009      	b.n	80013a4 <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013a4:	2308      	movs	r3, #8
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e010      	b.n	80013cc <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	e002      	b.n	80013c6 <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1eb      	bne.n	80013aa <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	3301      	adds	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d9c6      	bls.n	800136c <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	0b1b      	lsrs	r3, r3, #12
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3



}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 8001400:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 800140a:	2100      	movs	r1, #0
 800140c:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	6888      	ldr	r0, [r1, #8]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	8bc9      	ldrh	r1, [r1, #30]
 8001416:	0209      	lsls	r1, r1, #8
 8001418:	1a41      	subs	r1, r0, r1
 800141a:	4608      	mov	r0, r1
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	6248      	str	r0, [r1, #36]	; 0x24
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001424:	17c8      	asrs	r0, r1, #31
 8001426:	4688      	mov	r8, r1
 8001428:	4681      	mov	r9, r0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	8c09      	ldrh	r1, [r1, #32]
 800142e:	b289      	uxth	r1, r1
 8001430:	2000      	movs	r0, #0
 8001432:	460c      	mov	r4, r1
 8001434:	4605      	mov	r5, r0
 8001436:	fb04 f009 	mul.w	r0, r4, r9
 800143a:	fb08 f105 	mul.w	r1, r8, r5
 800143e:	4401      	add	r1, r0
 8001440:	fba8 2304 	umull	r2, r3, r8, r4
 8001444:	4419      	add	r1, r3
 8001446:	460b      	mov	r3, r1
 8001448:	2b00      	cmp	r3, #0
 800144a:	da06      	bge.n	800145a <calculateTemperature+0x5a>
 800144c:	490e      	ldr	r1, [pc, #56]	; (8001488 <calculateTemperature+0x88>)
 800144e:	eb12 0a01 	adds.w	sl, r2, r1
 8001452:	f143 0b00 	adc.w	fp, r3, #0
 8001456:	4652      	mov	r2, sl
 8001458:	465b      	mov	r3, fp
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	0dd0      	lsrs	r0, r2, #23
 8001464:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001468:	15d9      	asrs	r1, r3, #23
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4613      	mov	r3, r2
 8001470:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001474:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	611a      	str	r2, [r3, #16]


}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001486:	4770      	bx	lr
 8001488:	007fffff 	.word	0x007fffff

0800148c <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 800148c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001490:	b099      	sub	sp, #100	; 0x64
 8001492:	af00      	add	r7, sp, #0
 8001494:	6478      	str	r0, [r7, #68]	; 0x44
	int32_t dT=sensor->dT;
 8001496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int64_t offset=0;
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	int64_t sensitivity=0;
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	8b1b      	ldrh	r3, [r3, #24]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	461c      	mov	r4, r3
 80014be:	4615      	mov	r5, r2
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	0429      	lsls	r1, r5, #16
 80014ca:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 80014ce:	0420      	lsls	r0, r4, #16
 80014d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d2:	8b9b      	ldrh	r3, [r3, #28]
 80014d4:	461a      	mov	r2, r3
 80014d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <calculatePressure+0x56>
 80014e0:	337f      	adds	r3, #127	; 0x7f
 80014e2:	11db      	asrs	r3, r3, #7
 80014e4:	17da      	asrs	r2, r3, #31
 80014e6:	469a      	mov	sl, r3
 80014e8:	4693      	mov	fp, r2
 80014ea:	eb10 030a 	adds.w	r3, r0, sl
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	eb41 030b 	adc.w	r3, r1, fp
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001500:	8adb      	ldrh	r3, [r3, #22]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2200      	movs	r2, #0
 8001506:	4698      	mov	r8, r3
 8001508:	4691      	mov	r9, r2
 800150a:	f04f 0000 	mov.w	r0, #0
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 8001516:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 800151a:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 800151e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001520:	8b5b      	ldrh	r3, [r3, #26]
 8001522:	461a      	mov	r2, r3
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	da00      	bge.n	8001530 <calculatePressure+0xa4>
 800152e:	33ff      	adds	r3, #255	; 0xff
 8001530:	121b      	asrs	r3, r3, #8
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
 8001536:	637a      	str	r2, [r7, #52]	; 0x34
 8001538:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800153c:	4623      	mov	r3, r4
 800153e:	18c3      	adds	r3, r0, r3
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	462b      	mov	r3, r5
 8001544:	eb41 0303 	adc.w	r3, r1, r3
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800154e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 8001552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
 800155a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800155c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800155e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001562:	462a      	mov	r2, r5
 8001564:	fb02 f203 	mul.w	r2, r2, r3
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	4621      	mov	r1, r4
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001574:	4621      	mov	r1, r4
 8001576:	fba2 1201 	umull	r1, r2, r2, r1
 800157a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800157c:	460a      	mov	r2, r1
 800157e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001582:	4413      	add	r3, r2
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800158a:	2b00      	cmp	r3, #0
 800158c:	da07      	bge.n	800159e <calculatePressure+0x112>
 800158e:	491b      	ldr	r1, [pc, #108]	; (80015fc <calculatePressure+0x170>)
 8001590:	1851      	adds	r1, r2, r1
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	f143 0300 	adc.w	r3, r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800159e:	f04f 0000 	mov.w	r0, #0
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	0d50      	lsrs	r0, r2, #21
 80015a8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015ac:	1559      	asrs	r1, r3, #21
 80015ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015b2:	1a84      	subs	r4, r0, r2
 80015b4:	623c      	str	r4, [r7, #32]
 80015b6:	eb61 0303 	sbc.w	r3, r1, r3
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da08      	bge.n	80015d6 <calculatePressure+0x14a>
 80015c4:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80015c8:	1851      	adds	r1, r2, r1
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	f143 0300 	adc.w	r3, r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0b50      	lsrs	r0, r2, #13
 80015e0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015e4:	1359      	asrs	r1, r3, #13
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ec:	60da      	str	r2, [r3, #12]


}
 80015ee:	bf00      	nop
 80015f0:	3764      	adds	r7, #100	; 0x64
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	001fffff 	.word	0x001fffff

08001600 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	2201      	movs	r2, #1
 8001608:	21d0      	movs	r1, #208	; 0xd0
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <checkMPU6050Ready+0x20>)
 800160c:	f004 fea0 	bl	8006350 <HAL_I2C_IsDeviceReady>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <checkMPU6050Ready+0x1a>
	{
		return 1;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <checkMPU6050Ready+0x1c>
	}
	return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20002698 	.word	0x20002698

08001624 <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
 800162a:	4603      	mov	r3, r0
 800162c:	603a      	str	r2, [r7, #0]
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	460b      	mov	r3, r1
 8001632:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 8001634:	88ba      	ldrh	r2, [r7, #4]
 8001636:	88f9      	ldrh	r1, [r7, #6]
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <i2cWriteRegMPU6050+0x40>)
 800164a:	f004 f9cd 	bl	80059e8 <HAL_I2C_Mem_Write>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3

}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20002698 	.word	0x20002698

08001668 <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <MPU6050init+0x2c>
		imu->acc_mps2[i]=0;
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b02      	cmp	r3, #2
 8001698:	ddf1      	ble.n	800167e <MPU6050init+0x16>

	for(int i=0;i<3;i++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e00a      	b.n	80016b6 <MPU6050init+0x4e>
		imu->gyr_rps[i]=0;
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3304      	adds	r3, #4
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	ddf1      	ble.n	80016a0 <MPU6050init+0x38>

	for(int i=0; i<14;i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e008      	b.n	80016d4 <MPU6050init+0x6c>
		imu->rxData[i]=0;
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	3320      	adds	r3, #32
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b0d      	cmp	r3, #13
 80016d8:	ddf3      	ble.n	80016c2 <MPU6050init+0x5a>

	imu->rxFlag=0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	imu->dataReadyFlag=0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	imu->temp_degC=0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]

	uint8_t numErrors=0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 80016f6:	2302      	movs	r3, #2
 80016f8:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 80016fa:	f107 030a 	add.w	r3, r7, #10
 80016fe:	461a      	mov	r2, r3
 8001700:	211a      	movs	r1, #26
 8001702:	20d0      	movs	r0, #208	; 0xd0
 8001704:	f7ff ff8e 	bl	8001624 <i2cWriteRegMPU6050>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <MPU6050init+0xac>
		numErrors+=1;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	3301      	adds	r3, #1
 8001712:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 8001714:	2310      	movs	r3, #16
 8001716:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 8001718:	f107 030a 	add.w	r3, r7, #10
 800171c:	461a      	mov	r2, r3
 800171e:	2137      	movs	r1, #55	; 0x37
 8001720:	20d0      	movs	r0, #208	; 0xd0
 8001722:	f7ff ff7f 	bl	8001624 <i2cWriteRegMPU6050>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <MPU6050init+0xca>
		numErrors+=1;
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	3301      	adds	r3, #1
 8001730:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 8001732:	2301      	movs	r3, #1
 8001734:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 8001736:	f107 030a 	add.w	r3, r7, #10
 800173a:	461a      	mov	r2, r3
 800173c:	2138      	movs	r1, #56	; 0x38
 800173e:	20d0      	movs	r0, #208	; 0xd0
 8001740:	f7ff ff70 	bl	8001624 <i2cWriteRegMPU6050>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <MPU6050init+0xe8>
		numErrors+=1;
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	3301      	adds	r3, #1
 800174e:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 8001750:	2300      	movs	r3, #0
 8001752:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 8001754:	f107 030a 	add.w	r3, r7, #10
 8001758:	461a      	mov	r2, r3
 800175a:	216b      	movs	r1, #107	; 0x6b
 800175c:	20d0      	movs	r0, #208	; 0xd0
 800175e:	f7ff ff61 	bl	8001624 <i2cWriteRegMPU6050>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <MPU6050init+0x106>
		numErrors+=1;
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	3301      	adds	r3, #1
 800176c:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3

}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af02      	add	r7, sp, #8
 8001788:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3320      	adds	r3, #32
 8001792:	220e      	movs	r2, #14
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	223b      	movs	r2, #59	; 0x3b
 800179c:	21d0      	movs	r1, #208	; 0xd0
 800179e:	f004 fc43 	bl	8006028 <HAL_I2C_Mem_Read_DMA>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	if(readStatus==HAL_OK)return 1;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <MPU6050readDataDMA+0x36>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00a      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <MPU6050readDataDMA+0x40>
 80017be:	2302      	movs	r3, #2
 80017c0:	e005      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d101      	bne.n	80017cc <MPU6050readDataDMA+0x4a>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e000      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	4804      	ldr	r0, [pc, #16]	; (80017f4 <SELECT+0x1c>)
 80017e4:	f003 fc66 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f002 f8e1 	bl	80039b0 <HAL_Delay>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40020400 	.word	0x40020400

080017f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <DESELECT+0x1c>)
 8001804:	f003 fc56 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f002 f8d1 	bl	80039b0 <HAL_Delay>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40020400 	.word	0x40020400

08001818 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001822:	bf00      	nop
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <SPI_TxByte+0x30>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d1f8      	bne.n	8001824 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001832:	1df9      	adds	r1, r7, #7
 8001834:	2364      	movs	r3, #100	; 0x64
 8001836:	2201      	movs	r2, #1
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <SPI_TxByte+0x30>)
 800183a:	f007 feb2 	bl	80095a2 <HAL_SPI_Transmit>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200004b4 	.word	0x200004b4

0800184c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001858:	bf00      	nop
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <SPI_TxBuffer+0x30>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	d1f8      	bne.n	800185a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001868:	887a      	ldrh	r2, [r7, #2]
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <SPI_TxBuffer+0x30>)
 8001870:	f007 fe97 	bl	80095a2 <HAL_SPI_Transmit>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200004b4 	.word	0x200004b4

08001880 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001886:	23ff      	movs	r3, #255	; 0xff
 8001888:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800188a:	bf00      	nop
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <SPI_RxByte+0x34>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d1f8      	bne.n	800188c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800189a:	1dba      	adds	r2, r7, #6
 800189c:	1df9      	adds	r1, r7, #7
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <SPI_RxByte+0x34>)
 80018a6:	f007 ffb8 	bl	800981a <HAL_SPI_TransmitReceive>

	return data;
 80018aa:	79bb      	ldrb	r3, [r7, #6]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200004b4 	.word	0x200004b4

080018b8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80018c0:	f7ff ffde 	bl	8001880 <SPI_RxByte>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <SD_ReadyWait+0x30>)
 80018dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018e0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80018e2:	f7ff ffcd 	bl	8001880 <SPI_RxByte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2bff      	cmp	r3, #255	; 0xff
 80018ee:	d003      	beq.n	80018f8 <SD_ReadyWait+0x24>
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SD_ReadyWait+0x30>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f4      	bne.n	80018e2 <SD_ReadyWait+0xe>

	return res;
 80018f8:	79fb      	ldrb	r3, [r7, #7]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000210 	.word	0x20000210

08001908 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800190e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001912:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001914:	f7ff ff70 	bl	80017f8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	e005      	b.n	800192a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800191e:	20ff      	movs	r0, #255	; 0xff
 8001920:	f7ff ff7a 	bl	8001818 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3301      	adds	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b09      	cmp	r3, #9
 800192e:	ddf6      	ble.n	800191e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001930:	f7ff ff52 	bl	80017d8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001934:	2340      	movs	r3, #64	; 0x40
 8001936:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001948:	2395      	movs	r3, #149	; 0x95
 800194a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800194c:	463b      	mov	r3, r7
 800194e:	2106      	movs	r1, #6
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff7b 	bl	800184c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001956:	e002      	b.n	800195e <SD_PowerOn+0x56>
	{
		cnt--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3b01      	subs	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800195e:	f7ff ff8f 	bl	8001880 <SPI_RxByte>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d002      	beq.n	800196e <SD_PowerOn+0x66>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f4      	bne.n	8001958 <SD_PowerOn+0x50>
	}

	DESELECT();
 800196e:	f7ff ff43 	bl	80017f8 <DESELECT>
	SPI_TxByte(0XFF);
 8001972:	20ff      	movs	r0, #255	; 0xff
 8001974:	f7ff ff50 	bl	8001818 <SPI_TxByte>

	PowerFlag = 1;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <SD_PowerOn+0x80>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000213 	.word	0x20000213

0800198c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <SD_PowerOff+0x14>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000213 	.word	0x20000213

080019a4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <SD_CheckPower+0x14>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000213 	.word	0x20000213

080019bc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SD_RxDataBlock+0x58>)
 80019c8:	22c8      	movs	r2, #200	; 0xc8
 80019ca:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80019cc:	f7ff ff58 	bl	8001880 <SPI_RxByte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d103      	bne.n	80019e2 <SD_RxDataBlock+0x26>
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <SD_RxDataBlock+0x58>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f4      	bne.n	80019cc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2bfe      	cmp	r3, #254	; 0xfe
 80019e6:	d001      	beq.n	80019ec <SD_RxDataBlock+0x30>
 80019e8:	2300      	movs	r3, #0
 80019ea:	e00f      	b.n	8001a0c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff60 	bl	80018b8 <SPI_RxBytePtr>
	} while(len--);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	603a      	str	r2, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f4      	bne.n	80019ec <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001a02:	f7ff ff3d 	bl	8001880 <SPI_RxByte>
	SPI_RxByte();
 8001a06:	f7ff ff3b 	bl	8001880 <SPI_RxByte>

	return TRUE;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000020e 	.word	0x2000020e

08001a18 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001a28:	f7ff ff54 	bl	80018d4 <SD_ReadyWait>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d001      	beq.n	8001a36 <SD_TxDataBlock+0x1e>
 8001a32:	2300      	movs	r3, #0
 8001a34:	e02f      	b.n	8001a96 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff feed 	bl	8001818 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	2bfd      	cmp	r3, #253	; 0xfd
 8001a42:	d020      	beq.n	8001a86 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff feff 	bl	800184c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001a4e:	f7ff ff17 	bl	8001880 <SPI_RxByte>
		SPI_RxByte();
 8001a52:	f7ff ff15 	bl	8001880 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001a56:	e00b      	b.n	8001a70 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001a58:	f7ff ff12 	bl	8001880 <SPI_RxByte>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d006      	beq.n	8001a78 <SD_TxDataBlock+0x60>
			i++;
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d9f0      	bls.n	8001a58 <SD_TxDataBlock+0x40>
 8001a76:	e000      	b.n	8001a7a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001a78:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ff00 	bl	8001880 <SPI_RxByte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0fa      	beq.n	8001a7c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d101      	bne.n	8001a94 <SD_TxDataBlock+0x7c>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6039      	str	r1, [r7, #0]
 8001aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001aaa:	f7ff ff13 	bl	80018d4 <SD_ReadyWait>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2bff      	cmp	r3, #255	; 0xff
 8001ab2:	d001      	beq.n	8001ab8 <SD_SendCmd+0x1a>
 8001ab4:	23ff      	movs	r3, #255	; 0xff
 8001ab6:	e042      	b.n	8001b3e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff feac 	bl	8001818 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	0e1b      	lsrs	r3, r3, #24
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fea6 	bl	8001818 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fea0 	bl	8001818 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fe9a 	bl	8001818 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe95 	bl	8001818 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b40      	cmp	r3, #64	; 0x40
 8001af2:	d102      	bne.n	8001afa <SD_SendCmd+0x5c>
 8001af4:	2395      	movs	r3, #149	; 0x95
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e007      	b.n	8001b0a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b48      	cmp	r3, #72	; 0x48
 8001afe:	d102      	bne.n	8001b06 <SD_SendCmd+0x68>
 8001b00:	2387      	movs	r3, #135	; 0x87
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <SD_SendCmd+0x6c>
	else crc = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fe83 	bl	8001818 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b4c      	cmp	r3, #76	; 0x4c
 8001b16:	d101      	bne.n	8001b1c <SD_SendCmd+0x7e>
 8001b18:	f7ff feb2 	bl	8001880 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001b20:	f7ff feae 	bl	8001880 <SPI_RxByte>
 8001b24:	4603      	mov	r3, r0
 8001b26:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001b28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	da05      	bge.n	8001b3c <SD_SendCmd+0x9e>
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	73bb      	strb	r3, [r7, #14]
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f1      	bne.n	8001b20 <SD_SendCmd+0x82>

	return res;
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SD_disk_initialize+0x14>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d1      	b.n	8001d00 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <SD_disk_initialize+0x1c0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <SD_disk_initialize+0x2a>
 8001b6a:	4b67      	ldr	r3, [pc, #412]	; (8001d08 <SD_disk_initialize+0x1c0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	e0c6      	b.n	8001d00 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001b72:	f7ff fec9 	bl	8001908 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001b76:	f7ff fe2f 	bl	80017d8 <SELECT>

	/* check disk type */
	type = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2040      	movs	r0, #64	; 0x40
 8001b82:	f7ff ff8c 	bl	8001a9e <SD_SendCmd>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 80a1 	bne.w	8001cd0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <SD_disk_initialize+0x1c4>)
 8001b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b94:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b9a:	2048      	movs	r0, #72	; 0x48
 8001b9c:	f7ff ff7f 	bl	8001a9e <SD_SendCmd>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d155      	bne.n	8001c52 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e00c      	b.n	8001bc6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001bac:	7bfc      	ldrb	r4, [r7, #15]
 8001bae:	f7ff fe67 	bl	8001880 <SPI_RxByte>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f104 0310 	add.w	r3, r4, #16
 8001bba:	443b      	add	r3, r7
 8001bbc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d9ef      	bls.n	8001bac <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001bcc:	7abb      	ldrb	r3, [r7, #10]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d17e      	bne.n	8001cd0 <SD_disk_initialize+0x188>
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	2baa      	cmp	r3, #170	; 0xaa
 8001bd6:	d17b      	bne.n	8001cd0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2077      	movs	r0, #119	; 0x77
 8001bdc:	f7ff ff5f 	bl	8001a9e <SD_SendCmd>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d807      	bhi.n	8001bf6 <SD_disk_initialize+0xae>
 8001be6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bea:	2069      	movs	r0, #105	; 0x69
 8001bec:	f7ff ff57 	bl	8001a9e <SD_SendCmd>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <SD_disk_initialize+0x1c4>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ec      	bne.n	8001bd8 <SD_disk_initialize+0x90>
 8001bfe:	e000      	b.n	8001c02 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001c00:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <SD_disk_initialize+0x1c4>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d062      	beq.n	8001cd0 <SD_disk_initialize+0x188>
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207a      	movs	r0, #122	; 0x7a
 8001c0e:	f7ff ff46 	bl	8001a9e <SD_SendCmd>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d15b      	bne.n	8001cd0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e00c      	b.n	8001c38 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001c1e:	7bfc      	ldrb	r4, [r7, #15]
 8001c20:	f7ff fe2e 	bl	8001880 <SPI_RxByte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	f104 0310 	add.w	r3, r4, #16
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d9ef      	bls.n	8001c1e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001c3e:	7a3b      	ldrb	r3, [r7, #8]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SD_disk_initialize+0x104>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	e000      	b.n	8001c4e <SD_disk_initialize+0x106>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	73bb      	strb	r3, [r7, #14]
 8001c50:	e03e      	b.n	8001cd0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001c52:	2100      	movs	r1, #0
 8001c54:	2077      	movs	r0, #119	; 0x77
 8001c56:	f7ff ff22 	bl	8001a9e <SD_SendCmd>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d808      	bhi.n	8001c72 <SD_disk_initialize+0x12a>
 8001c60:	2100      	movs	r1, #0
 8001c62:	2069      	movs	r0, #105	; 0x69
 8001c64:	f7ff ff1b 	bl	8001a9e <SD_SendCmd>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d801      	bhi.n	8001c72 <SD_disk_initialize+0x12a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e000      	b.n	8001c74 <SD_disk_initialize+0x12c>
 8001c72:	2301      	movs	r3, #1
 8001c74:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d10e      	bne.n	8001c9a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2077      	movs	r0, #119	; 0x77
 8001c80:	f7ff ff0d 	bl	8001a9e <SD_SendCmd>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d80e      	bhi.n	8001ca8 <SD_disk_initialize+0x160>
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2069      	movs	r0, #105	; 0x69
 8001c8e:	f7ff ff06 	bl	8001a9e <SD_SendCmd>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <SD_disk_initialize+0x160>
 8001c98:	e00c      	b.n	8001cb4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2041      	movs	r0, #65	; 0x41
 8001c9e:	f7ff fefe 	bl	8001a9e <SD_SendCmd>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <SD_disk_initialize+0x1c4>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e2      	bne.n	8001c76 <SD_disk_initialize+0x12e>
 8001cb0:	e000      	b.n	8001cb4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001cb2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <SD_disk_initialize+0x1c4>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <SD_disk_initialize+0x184>
 8001cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc0:	2050      	movs	r0, #80	; 0x50
 8001cc2:	f7ff feec 	bl	8001a9e <SD_SendCmd>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SD_disk_initialize+0x188>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <SD_disk_initialize+0x1c8>)
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001cd6:	f7ff fd8f 	bl	80017f8 <DESELECT>
	SPI_RxByte();
 8001cda:	f7ff fdd1 	bl	8001880 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <SD_disk_initialize+0x1c0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SD_disk_initialize+0x1c0>)
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e001      	b.n	8001cfa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001cf6:	f7ff fe49 	bl	800198c <SD_PowerOff>
	}

	return Stat;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <SD_disk_initialize+0x1c0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	2000020e 	.word	0x2000020e
 8001d10:	20000212 	.word	0x20000212

08001d14 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SD_disk_status+0x14>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e002      	b.n	8001d2e <SD_disk_status+0x1a>
	return Stat;
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SD_disk_status+0x28>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b2db      	uxtb	r3, r3
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000

08001d40 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <SD_disk_read+0x1c>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <SD_disk_read+0x20>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e051      	b.n	8001e04 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <SD_disk_read+0xcc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SD_disk_read+0x32>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e048      	b.n	8001e04 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <SD_disk_read+0xd0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <SD_disk_read+0x44>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	025b      	lsls	r3, r3, #9
 8001d82:	607b      	str	r3, [r7, #4]

	SELECT();
 8001d84:	f7ff fd28 	bl	80017d8 <SELECT>

	if (count == 1)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d111      	bne.n	8001db2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	2051      	movs	r0, #81	; 0x51
 8001d92:	f7ff fe84 	bl	8001a9e <SD_SendCmd>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d129      	bne.n	8001df0 <SD_disk_read+0xb0>
 8001d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f7ff fe0b 	bl	80019bc <SD_RxDataBlock>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d021      	beq.n	8001df0 <SD_disk_read+0xb0>
 8001dac:	2300      	movs	r3, #0
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	e01e      	b.n	8001df0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	2052      	movs	r0, #82	; 0x52
 8001db6:	f7ff fe72 	bl	8001a9e <SD_SendCmd>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d117      	bne.n	8001df0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f7ff fdf9 	bl	80019bc <SD_RxDataBlock>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00a      	beq.n	8001de6 <SD_disk_read+0xa6>
				buff += 512;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dd6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ed      	bne.n	8001dc0 <SD_disk_read+0x80>
 8001de4:	e000      	b.n	8001de8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001de6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	204c      	movs	r0, #76	; 0x4c
 8001dec:	f7ff fe57 	bl	8001a9e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001df0:	f7ff fd02 	bl	80017f8 <DESELECT>
	SPI_RxByte();
 8001df4:	f7ff fd44 	bl	8001880 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000212 	.word	0x20000212

08001e14 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <SD_disk_write+0x1c>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <SD_disk_write+0x20>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e06b      	b.n	8001f0c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <SD_disk_write+0x100>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SD_disk_write+0x32>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e062      	b.n	8001f0c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <SD_disk_write+0x100>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SD_disk_write+0x44>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e059      	b.n	8001f0c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <SD_disk_write+0x104>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <SD_disk_write+0x56>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	607b      	str	r3, [r7, #4]

	SELECT();
 8001e6a:	f7ff fcb5 	bl	80017d8 <SELECT>

	if (count == 1)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d110      	bne.n	8001e96 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	2058      	movs	r0, #88	; 0x58
 8001e78:	f7ff fe11 	bl	8001a9e <SD_SendCmd>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d13a      	bne.n	8001ef8 <SD_disk_write+0xe4>
 8001e82:	21fe      	movs	r1, #254	; 0xfe
 8001e84:	68b8      	ldr	r0, [r7, #8]
 8001e86:	f7ff fdc7 	bl	8001a18 <SD_TxDataBlock>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d033      	beq.n	8001ef8 <SD_disk_write+0xe4>
			count = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	e030      	b.n	8001ef8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <SD_disk_write+0x104>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2077      	movs	r0, #119	; 0x77
 8001ea6:	f7ff fdfa 	bl	8001a9e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	2057      	movs	r0, #87	; 0x57
 8001eae:	f7ff fdf6 	bl	8001a9e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	2059      	movs	r0, #89	; 0x59
 8001eb6:	f7ff fdf2 	bl	8001a9e <SD_SendCmd>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ec0:	21fc      	movs	r1, #252	; 0xfc
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f7ff fda8 	bl	8001a18 <SD_TxDataBlock>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00a      	beq.n	8001ee4 <SD_disk_write+0xd0>
				buff += 512;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ed4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ee      	bne.n	8001ec0 <SD_disk_write+0xac>
 8001ee2:	e000      	b.n	8001ee6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ee4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001ee6:	21fd      	movs	r1, #253	; 0xfd
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fd95 	bl	8001a18 <SD_TxDataBlock>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <SD_disk_write+0xe4>
			{
				count = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001ef8:	f7ff fc7e 	bl	80017f8 <DESELECT>
	SPI_RxByte();
 8001efc:	f7ff fcc0 	bl	8001880 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000212 	.word	0x20000212

08001f1c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	603a      	str	r2, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SD_disk_ioctl+0x1e>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e115      	b.n	8002166 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d124      	bne.n	8001f90 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d012      	beq.n	8001f74 <SD_disk_ioctl+0x58>
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	dc1a      	bgt.n	8001f88 <SD_disk_ioctl+0x6c>
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <SD_disk_ioctl+0x40>
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d006      	beq.n	8001f68 <SD_disk_ioctl+0x4c>
 8001f5a:	e015      	b.n	8001f88 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001f5c:	f7ff fd16 	bl	800198c <SD_PowerOff>
			res = RES_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f66:	e0fc      	b.n	8002162 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001f68:	f7ff fcce 	bl	8001908 <SD_PowerOn>
			res = RES_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f72:	e0f6      	b.n	8002162 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	1c5c      	adds	r4, r3, #1
 8001f78:	f7ff fd14 	bl	80019a4 <SD_CheckPower>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f86:	e0ec      	b.n	8002162 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f8e:	e0e8      	b.n	8002162 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f90:	4b77      	ldr	r3, [pc, #476]	; (8002170 <SD_disk_ioctl+0x254>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SD_disk_ioctl+0x86>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0e1      	b.n	8002166 <SD_disk_ioctl+0x24a>

		SELECT();
 8001fa2:	f7ff fc19 	bl	80017d8 <SELECT>

		switch (ctrl)
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	2b0d      	cmp	r3, #13
 8001faa:	f200 80cb 	bhi.w	8002144 <SD_disk_ioctl+0x228>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <SD_disk_ioctl+0x98>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	080020af 	.word	0x080020af
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	0800209f 	.word	0x0800209f
 8001fc0:	08002145 	.word	0x08002145
 8001fc4:	08002145 	.word	0x08002145
 8001fc8:	08002145 	.word	0x08002145
 8001fcc:	08002145 	.word	0x08002145
 8001fd0:	08002145 	.word	0x08002145
 8001fd4:	08002145 	.word	0x08002145
 8001fd8:	08002145 	.word	0x08002145
 8001fdc:	08002145 	.word	0x08002145
 8001fe0:	080020c1 	.word	0x080020c1
 8001fe4:	080020e5 	.word	0x080020e5
 8001fe8:	08002109 	.word	0x08002109
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001fec:	2100      	movs	r1, #0
 8001fee:	2049      	movs	r0, #73	; 0x49
 8001ff0:	f7ff fd55 	bl	8001a9e <SD_SendCmd>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80a8 	bne.w	800214c <SD_disk_ioctl+0x230>
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2110      	movs	r1, #16
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fcda 	bl	80019bc <SD_RxDataBlock>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 809e 	beq.w	800214c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002010:	7b3b      	ldrb	r3, [r7, #12]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10e      	bne.n	8002038 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	b29a      	uxth	r2, r3
 800201e:	7d3b      	ldrb	r3, [r7, #20]
 8002020:	b29b      	uxth	r3, r3
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b29b      	uxth	r3, r3
 8002026:	4413      	add	r3, r2
 8002028:	b29b      	uxth	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800202e:	8bfb      	ldrh	r3, [r7, #30]
 8002030:	029a      	lsls	r2, r3, #10
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e02e      	b.n	8002096 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002038:	7c7b      	ldrb	r3, [r7, #17]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	b2da      	uxtb	r2, r3
 8002040:	7dbb      	ldrb	r3, [r7, #22]
 8002042:	09db      	lsrs	r3, r3, #7
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b2da      	uxtb	r2, r3
 800204a:	7d7b      	ldrb	r3, [r7, #21]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f003 0306 	and.w	r3, r3, #6
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4413      	add	r3, r2
 8002058:	b2db      	uxtb	r3, r3
 800205a:	3302      	adds	r3, #2
 800205c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002060:	7d3b      	ldrb	r3, [r7, #20]
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	b2db      	uxtb	r3, r3
 8002066:	b29a      	uxth	r2, r3
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	b29b      	uxth	r3, r3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	b29b      	uxth	r3, r3
 8002070:	4413      	add	r3, r2
 8002072:	b29a      	uxth	r2, r3
 8002074:	7cbb      	ldrb	r3, [r7, #18]
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	b29b      	uxth	r3, r3
 800207a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800207e:	b29b      	uxth	r3, r3
 8002080:	4413      	add	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002088:	8bfa      	ldrh	r2, [r7, #30]
 800208a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800208e:	3b09      	subs	r3, #9
 8002090:	409a      	lsls	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800209c:	e056      	b.n	800214c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020ac:	e055      	b.n	800215a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80020ae:	f7ff fc11 	bl	80018d4 <SD_ReadyWait>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2bff      	cmp	r3, #255	; 0xff
 80020b6:	d14b      	bne.n	8002150 <SD_disk_ioctl+0x234>
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020be:	e047      	b.n	8002150 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020c0:	2100      	movs	r1, #0
 80020c2:	2049      	movs	r0, #73	; 0x49
 80020c4:	f7ff fceb 	bl	8001a9e <SD_SendCmd>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d142      	bne.n	8002154 <SD_disk_ioctl+0x238>
 80020ce:	2110      	movs	r1, #16
 80020d0:	6a38      	ldr	r0, [r7, #32]
 80020d2:	f7ff fc73 	bl	80019bc <SD_RxDataBlock>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03b      	beq.n	8002154 <SD_disk_ioctl+0x238>
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020e2:	e037      	b.n	8002154 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80020e4:	2100      	movs	r1, #0
 80020e6:	204a      	movs	r0, #74	; 0x4a
 80020e8:	f7ff fcd9 	bl	8001a9e <SD_SendCmd>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d132      	bne.n	8002158 <SD_disk_ioctl+0x23c>
 80020f2:	2110      	movs	r1, #16
 80020f4:	6a38      	ldr	r0, [r7, #32]
 80020f6:	f7ff fc61 	bl	80019bc <SD_RxDataBlock>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d02b      	beq.n	8002158 <SD_disk_ioctl+0x23c>
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002106:	e027      	b.n	8002158 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002108:	2100      	movs	r1, #0
 800210a:	207a      	movs	r0, #122	; 0x7a
 800210c:	f7ff fcc7 	bl	8001a9e <SD_SendCmd>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800211c:	e00b      	b.n	8002136 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800211e:	6a3c      	ldr	r4, [r7, #32]
 8002120:	1c63      	adds	r3, r4, #1
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	f7ff fbac 	bl	8001880 <SPI_RxByte>
 8002128:	4603      	mov	r3, r0
 800212a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800212c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002130:	3301      	adds	r3, #1
 8002132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800213a:	2b03      	cmp	r3, #3
 800213c:	d9ef      	bls.n	800211e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002144:	2304      	movs	r3, #4
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800214a:	e006      	b.n	800215a <SD_disk_ioctl+0x23e>
			break;
 800214c:	bf00      	nop
 800214e:	e004      	b.n	800215a <SD_disk_ioctl+0x23e>
			break;
 8002150:	bf00      	nop
 8002152:	e002      	b.n	800215a <SD_disk_ioctl+0x23e>
			break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <SD_disk_ioctl+0x23e>
			break;
 8002158:	bf00      	nop
		}

		DESELECT();
 800215a:	f7ff fb4d 	bl	80017f8 <DESELECT>
		SPI_RxByte();
 800215e:	f7ff fb8f 	bl	8001880 <SPI_RxByte>
	}

	return res;
 8002162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002166:	4618      	mov	r0, r3
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000

08002174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <vApplicationGetIdleTaskMemory+0x30>)
 800218a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000214 	.word	0x20000214
 80021a4:	200002b4 	.word	0x200002b4

080021a8 <readJoystick>:
	uint16_t joystickData[2]; // [1]-> horizontal output, [2]->verticalOutput
	float joystickVoltage[2];
}Joystick;

void readJoystick(Joystick* stick)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1,stick->joystickData,2);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <readJoystick+0x24>)
 80021b8:	f001 fd72 	bl	8003ca0 <HAL_ADC_Start_DMA>
	convertRaw2Voltage(stick);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f807 	bl	80021d0 <convertRaw2Voltage>

}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200025f0 	.word	0x200025f0

080021d0 <convertRaw2Voltage>:

void convertRaw2Voltage( Joystick* stick)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	stick->joystickVoltage[0]=stick->joystickData[0]*3.3/4095.0f;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9c1 	bl	8000564 <__aeabi_i2d>
 80021e2:	a31b      	add	r3, pc, #108	; (adr r3, 8002250 <convertRaw2Voltage+0x80>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	a318      	add	r3, pc, #96	; (adr r3, 8002258 <convertRaw2Voltage+0x88>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fb47 	bl	800088c <__aeabi_ddiv>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fd0f 	bl	8000c28 <__aeabi_d2f>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
	stick->joystickVoltage[1]=stick->joystickData[1]*3.3/4095.0f;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	885b      	ldrh	r3, [r3, #2]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f9a5 	bl	8000564 <__aeabi_i2d>
 800221a:	a30d      	add	r3, pc, #52	; (adr r3, 8002250 <convertRaw2Voltage+0x80>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fa0a 	bl	8000638 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	a30a      	add	r3, pc, #40	; (adr r3, 8002258 <convertRaw2Voltage+0x88>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fb2b 	bl	800088c <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fcf3 	bl	8000c28 <__aeabi_d2f>
 8002242:	4602      	mov	r2, r0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]


}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	66666666 	.word	0x66666666
 8002254:	400a6666 	.word	0x400a6666
 8002258:	00000000 	.word	0x00000000
 800225c:	40affe00 	.word	0x40affe00

08002260 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d113      	bne.n	8002298 <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800227a:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // read MPU6050 data at 50 Hz
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b14      	cmp	r3, #20
 8002282:	d109      	bne.n	8002298 <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 8002284:	4807      	ldr	r0, [pc, #28]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002286:	f7ff fa7c 	bl	8001782 <MPU6050readDataDMA>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002290:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2000298d 	.word	0x2000298d
 80022a4:	20002934 	.word	0x20002934
 80022a8:	2000298c 	.word	0x2000298c

080022ac <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
//	    printf("az %.2f\r\n",*accelz);
//		printf("MPU6050 data read success");
//
//	}

}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <transmit_uart>:

void transmit_uart(char* string){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7fd fff1 	bl	80002b0 <strlen>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	23c8      	movs	r3, #200	; 0xc8
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <transmit_uart+0x28>)
 80022dc:	f008 fd03 	bl	800ace6 <HAL_UART_Transmit>
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20002890 	.word	0x20002890

080022ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
//	if(hadc->Instance==ADC1){
//		printf("Joystick x %.2f\r\n",joystick.joystickVoltage[0]);
//		printf("Joystick y %.2f\r\n",joystick.joystickVoltage[1]);
//	}

}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b0a2      	sub	sp, #136	; 0x88
 8002304:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002306:	f001 fb11 	bl	800392c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230a:	f000 f8d3 	bl	80024b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800230e:	f000 fbb7 	bl	8002a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8002312:	f000 fb77 	bl	8002a04 <MX_DMA_Init>
  MX_ADC1_Init();
 8002316:	f000 f939 	bl	800258c <MX_ADC1_Init>
  MX_I2C1_Init();
 800231a:	f000 f997 	bl	800264c <MX_I2C1_Init>
  MX_TIM3_Init();
 800231e:	f000 fa9b 	bl	8002858 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002322:	f000 f9c1 	bl	80026a8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002326:	f000 f9ed 	bl	8002704 <MX_SPI2_Init>
  MX_FATFS_Init();
 800232a:	f009 f851 	bl	800b3d0 <MX_FATFS_Init>
  MX_TIM2_Init();
 800232e:	f000 fa1f 	bl	8002770 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002332:	f000 fb0b 	bl	800294c <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002336:	f000 fb5d 	bl	80029f4 <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 800233a:	f000 fb31 	bl	80029a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,joystick.joystickData,2);
 800233e:	2202      	movs	r2, #2
 8002340:	494a      	ldr	r1, [pc, #296]	; (800246c <main+0x16c>)
 8002342:	484b      	ldr	r0, [pc, #300]	; (8002470 <main+0x170>)
 8002344:	f001 fcac 	bl	8003ca0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8002348:	484a      	ldr	r0, [pc, #296]	; (8002474 <main+0x174>)
 800234a:	f007 fd23 	bl	8009d94 <HAL_TIM_Base_Start>

  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 800234e:	f7ff f957 	bl	8001600 <checkMPU6050Ready>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1 );
 8002358:	4947      	ldr	r1, [pc, #284]	; (8002478 <main+0x178>)
 800235a:	4848      	ldr	r0, [pc, #288]	; (800247c <main+0x17c>)
 800235c:	f7ff f984 	bl	8001668 <MPU6050init>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 8002366:	2364      	movs	r3, #100	; 0x64
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	2275      	movs	r2, #117	; 0x75
 8002378:	21d0      	movs	r1, #208	; 0xd0
 800237a:	483f      	ldr	r0, [pc, #252]	; (8002478 <main+0x178>)
 800237c:	f003 fc2e 	bl	8005bdc <HAL_I2C_Mem_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75


  Bar30init(&pressureSensor, &hi2c2);
 8002386:	493e      	ldr	r1, [pc, #248]	; (8002480 <main+0x180>)
 8002388:	483e      	ldr	r0, [pc, #248]	; (8002484 <main+0x184>)
 800238a:	f7fe fe1b 	bl	8000fc4 <Bar30init>
  uint8_t i2cGood=0;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  i2cGood=Bar30reset(&pressureSensor);
 8002394:	483b      	ldr	r0, [pc, #236]	; (8002484 <main+0x184>)
 8002396:	f7fe fe4b 	bl	8001030 <Bar30reset>
 800239a:	4603      	mov	r3, r0
 800239c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  printf("Reset Command Result : %i\r\n",i2cGood );
 80023a0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80023a4:	4619      	mov	r1, r3
 80023a6:	4838      	ldr	r0, [pc, #224]	; (8002488 <main+0x188>)
 80023a8:	f00f fd58 	bl	8011e5c <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 80023ac:	4835      	ldr	r0, [pc, #212]	; (8002484 <main+0x184>)
 80023ae:	f7fe fe65 	bl	800107c <Bar30getCalibration>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  printf("Calibration phase result : %i\r\n",i2cGood );
 80023b8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80023bc:	4619      	mov	r1, r3
 80023be:	4833      	ldr	r0, [pc, #204]	; (800248c <main+0x18c>)
 80023c0:	f00f fd4c 	bl	8011e5c <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 80023c4:	4832      	ldr	r0, [pc, #200]	; (8002490 <main+0x190>)
 80023c6:	f7fe ffc1 	bl	800134c <Bar30CRCcheck>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityLow, 0, 128);
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <main+0x194>)
 80023d2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80023d6:	461d      	mov	r5, r3
 80023d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 80023e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00c fc1e 	bl	800ec2c <osThreadCreate>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4a29      	ldr	r2, [pc, #164]	; (8002498 <main+0x198>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityBelowNormal, 0, 1024);
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <main+0x19c>)
 80023f8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80023fc:	461d      	mov	r5, r3
 80023fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002402:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 800240a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f00c fc0b 	bl	800ec2c <osThreadCreate>
 8002416:	4603      	mov	r3, r0
 8002418:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <main+0x1a0>)
 800241a:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityAboveNormal, 0, 256);
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <main+0x1a4>)
 800241e:	f107 041c 	add.w	r4, r7, #28
 8002422:	461d      	mov	r5, r3
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800242c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f00c fbf8 	bl	800ec2c <osThreadCreate>
 800243c:	4603      	mov	r3, r0
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <main+0x1a8>)
 8002440:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityNormal, 0, 2048);
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <main+0x1ac>)
 8002444:	463c      	mov	r4, r7
 8002446:	461d      	mov	r5, r3
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 8002454:	463b      	mov	r3, r7
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f00c fbe7 	bl	800ec2c <osThreadCreate>
 800245e:	4603      	mov	r3, r0
 8002460:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <main+0x1b0>)
 8002462:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002464:	f00c fbdb 	bl	800ec1e <osKernelStart>
//  uartTxBuffer[3]=0x69;
//  uartTxBuffer[4]=0xBB;
//  HAL_UART_Transmit_DMA(&huart1,uartTxBuffer,5);


  while (1)
 8002468:	e7fe      	b.n	8002468 <main+0x168>
 800246a:	bf00      	nop
 800246c:	20002928 	.word	0x20002928
 8002470:	200025f0 	.word	0x200025f0
 8002474:	20002800 	.word	0x20002800
 8002478:	20002698 	.word	0x20002698
 800247c:	20002934 	.word	0x20002934
 8002480:	200026ec 	.word	0x200026ec
 8002484:	20002964 	.word	0x20002964
 8002488:	08014200 	.word	0x08014200
 800248c:	0801421c 	.word	0x0801421c
 8002490:	20002978 	.word	0x20002978
 8002494:	08014248 	.word	0x08014248
 8002498:	20002918 	.word	0x20002918
 800249c:	08014274 	.word	0x08014274
 80024a0:	2000291c 	.word	0x2000291c
 80024a4:	080142a0 	.word	0x080142a0
 80024a8:	20002920 	.word	0x20002920
 80024ac:	080142c8 	.word	0x080142c8
 80024b0:	20002924 	.word	0x20002924

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b094      	sub	sp, #80	; 0x50
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	2234      	movs	r2, #52	; 0x34
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00f fd3f 	bl	8011f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <SystemClock_Config+0xd0>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <SystemClock_Config+0xd0>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <SystemClock_Config+0xd0>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f4:	2300      	movs	r3, #0
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <SystemClock_Config+0xd4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <SystemClock_Config+0xd4>)
 80024fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <SystemClock_Config+0xd4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002510:	2301      	movs	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002518:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800251a:	2302      	movs	r3, #2
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800251e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002524:	2304      	movs	r3, #4
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002528:	23a8      	movs	r3, #168	; 0xa8
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800252c:	2302      	movs	r3, #2
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002530:	2307      	movs	r3, #7
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4618      	mov	r0, r3
 800253e:	f006 fd09 	bl	8008f54 <HAL_RCC_OscConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002548:	f000 fd1e 	bl	8002f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254c:	230f      	movs	r3, #15
 800254e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002550:	2302      	movs	r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002558:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800255c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2105      	movs	r1, #5
 800256a:	4618      	mov	r0, r3
 800256c:	f006 f976 	bl	800885c <HAL_RCC_ClockConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002576:	f000 fd07 	bl	8002f88 <Error_Handler>
  }
}
 800257a:	bf00      	nop
 800257c:	3750      	adds	r7, #80	; 0x50
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40007000 	.word	0x40007000

0800258c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002592:	463b      	mov	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <MX_ADC1_Init+0xbc>)
 80025a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025d0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025de:	2202      	movs	r2, #2
 80025e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025f0:	4814      	ldr	r0, [pc, #80]	; (8002644 <MX_ADC1_Init+0xb8>)
 80025f2:	f001 fa01 	bl	80039f8 <HAL_ADC_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80025fc:	f000 fcc4 	bl	8002f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002600:	2300      	movs	r3, #0
 8002602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002604:	2301      	movs	r3, #1
 8002606:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002608:	2306      	movs	r3, #6
 800260a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_ADC1_Init+0xb8>)
 8002612:	f001 fc73 	bl	8003efc <HAL_ADC_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800261c:	f000 fcb4 	bl	8002f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002620:	2301      	movs	r3, #1
 8002622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002624:	2302      	movs	r3, #2
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_ADC1_Init+0xb8>)
 800262e:	f001 fc65 	bl	8003efc <HAL_ADC_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002638:	f000 fca6 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200025f0 	.word	0x200025f0
 8002648:	40012000 	.word	0x40012000

0800264c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_I2C1_Init+0x50>)
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <MX_I2C1_Init+0x54>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_I2C1_Init+0x50>)
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_I2C1_Init+0x58>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_I2C1_Init+0x50>)
 800266a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_I2C1_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_I2C1_Init+0x50>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_I2C1_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_I2C1_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_I2C1_Init+0x50>)
 800268a:	f002 fd45 	bl	8005118 <HAL_I2C_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002694:	f000 fc78 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20002698 	.word	0x20002698
 80026a0:	40005400 	.word	0x40005400
 80026a4:	000186a0 	.word	0x000186a0

080026a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <MX_I2C2_Init+0x54>)
 80026b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <MX_I2C2_Init+0x58>)
 80026b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <MX_I2C2_Init+0x50>)
 80026e6:	f002 fd17 	bl	8005118 <HAL_I2C_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026f0:	f000 fc4a 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200026ec 	.word	0x200026ec
 80026fc:	40005800 	.word	0x40005800
 8002700:	000186a0 	.word	0x000186a0

08002704 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_SPI2_Init+0x64>)
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <MX_SPI2_Init+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_SPI2_Init+0x64>)
 8002710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002714:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_SPI2_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_SPI2_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_SPI2_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_SPI2_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_SPI2_Init+0x64>)
 8002730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002734:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_SPI2_Init+0x64>)
 8002738:	2208      	movs	r2, #8
 800273a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_SPI2_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_SPI2_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_SPI2_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_SPI2_Init+0x64>)
 8002750:	220a      	movs	r2, #10
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_SPI2_Init+0x64>)
 8002756:	f006 fe9b 	bl	8009490 <HAL_SPI_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002760:	f000 fc12 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200004b4 	.word	0x200004b4
 800276c:	40003800 	.word	0x40003800

08002770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	f107 0320 	add.w	r3, r7, #32
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027aa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80027ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ca:	4822      	ldr	r0, [pc, #136]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027cc:	f007 fa92 	bl	8009cf4 <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80027d6:	f000 fbd7 	bl	8002f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e4:	4619      	mov	r1, r3
 80027e6:	481b      	ldr	r0, [pc, #108]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027e8:	f007 fdc6 	bl	800a378 <HAL_TIM_ConfigClockSource>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80027f2:	f000 fbc9 	bl	8002f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027f6:	4817      	ldr	r0, [pc, #92]	; (8002854 <MX_TIM2_Init+0xe4>)
 80027f8:	f007 fba4 	bl	8009f44 <HAL_TIM_PWM_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002802:	f000 fbc1 	bl	8002f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002806:	2320      	movs	r3, #32
 8002808:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	4619      	mov	r1, r3
 8002814:	480f      	ldr	r0, [pc, #60]	; (8002854 <MX_TIM2_Init+0xe4>)
 8002816:	f008 f989 	bl	800ab2c <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002820:	f000 fbb2 	bl	8002f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002824:	2360      	movs	r3, #96	; 0x60
 8002826:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2200      	movs	r2, #0
 8002838:	4619      	mov	r1, r3
 800283a:	4806      	ldr	r0, [pc, #24]	; (8002854 <MX_TIM2_Init+0xe4>)
 800283c:	f007 fcda 	bl	800a1f4 <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002846:	f000 fb9f 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20002800 	.word	0x20002800

08002858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <MX_TIM3_Init+0xec>)
 800287c:	4a32      	ldr	r2, [pc, #200]	; (8002948 <MX_TIM3_Init+0xf0>)
 800287e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <MX_TIM3_Init+0xec>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <MX_TIM3_Init+0xec>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <MX_TIM3_Init+0xec>)
 800288e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <MX_TIM3_Init+0xec>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <MX_TIM3_Init+0xec>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028a0:	4828      	ldr	r0, [pc, #160]	; (8002944 <MX_TIM3_Init+0xec>)
 80028a2:	f007 fb4f 	bl	8009f44 <HAL_TIM_PWM_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028ac:	f000 fb6c 	bl	8002f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028b8:	f107 0320 	add.w	r3, r7, #32
 80028bc:	4619      	mov	r1, r3
 80028be:	4821      	ldr	r0, [pc, #132]	; (8002944 <MX_TIM3_Init+0xec>)
 80028c0:	f008 f934 	bl	800ab2c <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028ca:	f000 fb5d 	bl	8002f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ce:	2360      	movs	r3, #96	; 0x60
 80028d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4817      	ldr	r0, [pc, #92]	; (8002944 <MX_TIM3_Init+0xec>)
 80028e6:	f007 fc85 	bl	800a1f4 <HAL_TIM_PWM_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80028f0:	f000 fb4a 	bl	8002f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2204      	movs	r2, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4812      	ldr	r0, [pc, #72]	; (8002944 <MX_TIM3_Init+0xec>)
 80028fc:	f007 fc7a 	bl	800a1f4 <HAL_TIM_PWM_ConfigChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002906:	f000 fb3f 	bl	8002f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2208      	movs	r2, #8
 800290e:	4619      	mov	r1, r3
 8002910:	480c      	ldr	r0, [pc, #48]	; (8002944 <MX_TIM3_Init+0xec>)
 8002912:	f007 fc6f 	bl	800a1f4 <HAL_TIM_PWM_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800291c:	f000 fb34 	bl	8002f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	220c      	movs	r2, #12
 8002924:	4619      	mov	r1, r3
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <MX_TIM3_Init+0xec>)
 8002928:	f007 fc64 	bl	800a1f4 <HAL_TIM_PWM_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002932:	f000 fb29 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <MX_TIM3_Init+0xec>)
 8002938:	f000 fd70 	bl	800341c <HAL_TIM_MspPostInit>

}
 800293c:	bf00      	nop
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20002848 	.word	0x20002848
 8002948:	40000400 	.word	0x40000400

0800294c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <MX_USART2_UART_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800295c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002984:	f008 f962 	bl	800ac4c <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800298e:	f000 fafb 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20002890 	.word	0x20002890
 800299c:	40004400 	.word	0x40004400

080029a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <MX_USART3_UART_Init+0x50>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_USART3_UART_Init+0x4c>)
 80029d8:	f008 f938 	bl	800ac4c <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029e2:	f000 fad1 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200028d4 	.word	0x200028d4
 80029f0:	40004800 	.word	0x40004800

080029f4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_DMA_Init+0x78>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2105      	movs	r1, #5
 8002a46:	200b      	movs	r0, #11
 8002a48:	f001 fdca 	bl	80045e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a4c:	200b      	movs	r0, #11
 8002a4e:	f001 fde3 	bl	8004618 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2105      	movs	r1, #5
 8002a56:	202f      	movs	r0, #47	; 0x2f
 8002a58:	f001 fdc2 	bl	80045e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002a5c:	202f      	movs	r0, #47	; 0x2f
 8002a5e:	f001 fddb 	bl	8004618 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2105      	movs	r1, #5
 8002a66:	2038      	movs	r0, #56	; 0x38
 8002a68:	f001 fdba 	bl	80045e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a6c:	2038      	movs	r0, #56	; 0x38
 8002a6e:	f001 fdd3 	bl	8004618 <HAL_NVIC_EnableIRQ>

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b55      	ldr	r3, [pc, #340]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a4d      	ldr	r2, [pc, #308]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <MX_GPIO_Init+0x18c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002b0c:	4840      	ldr	r0, [pc, #256]	; (8002c10 <MX_GPIO_Init+0x190>)
 8002b0e:	f002 fad1 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2101      	movs	r1, #1
 8002b16:	483f      	ldr	r0, [pc, #252]	; (8002c14 <MX_GPIO_Init+0x194>)
 8002b18:	f002 facc 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b22:	483c      	ldr	r0, [pc, #240]	; (8002c14 <MX_GPIO_Init+0x194>)
 8002b24:	f002 fac6 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4836      	ldr	r0, [pc, #216]	; (8002c18 <MX_GPIO_Init+0x198>)
 8002b40:	f002 f924 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 8002b44:	2302      	movs	r3, #2
 8002b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	482f      	ldr	r0, [pc, #188]	; (8002c18 <MX_GPIO_Init+0x198>)
 8002b5a:	f002 f917 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8002b5e:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8002b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4619      	mov	r1, r3
 8002b76:	4826      	ldr	r0, [pc, #152]	; (8002c10 <MX_GPIO_Init+0x190>)
 8002b78:	f002 f908 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4820      	ldr	r0, [pc, #128]	; (8002c14 <MX_GPIO_Init+0x194>)
 8002b94:	f002 f8fa 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4818      	ldr	r0, [pc, #96]	; (8002c14 <MX_GPIO_Init+0x194>)
 8002bb2:	f002 f8eb 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4811      	ldr	r0, [pc, #68]	; (8002c10 <MX_GPIO_Init+0x190>)
 8002bcc:	f002 f8de 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002be2:	230a      	movs	r3, #10
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <MX_GPIO_Init+0x190>)
 8002bee:	f002 f8cd 	bl	8004d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fcf2 	bl	80045e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002bfc:	2007      	movs	r0, #7
 8002bfe:	f001 fd0b 	bl	8004618 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800

08002c1c <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002c24:	1d39      	adds	r1, r7, #4
 8002c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <__io_putchar+0x20>)
 8002c2e:	f008 f85a 	bl	800ace6 <HAL_UART_Transmit>
return ch;
 8002c32:	687b      	ldr	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20002890 	.word	0x20002890

08002c40 <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8002c48:	2064      	movs	r0, #100	; 0x64
 8002c4a:	f00c f83b 	bl	800ecc4 <osDelay>
 8002c4e:	e7fb      	b.n	8002c48 <defaultTask+0x8>

08002c50 <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendDataToScreen */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000); // update screen data every 1 second
 8002c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c5c:	f00c f832 	bl	800ecc4 <osDelay>
 8002c60:	e7fa      	b.n	8002c58 <sendDataToScreen+0x8>
	...

08002c64 <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	static uint8_t i2cGood=0;
  /* Infinite loop */
  for(;;)
  {

	readJoystick(&joystick);
 8002c6c:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <updateControlLoop+0x54>)
 8002c6e:	f7ff fa9b 	bl	80021a8 <readJoystick>
	printf("Joystick x %.2f\r\n",joystick.joystickVoltage[0]);
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <updateControlLoop+0x54>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc86 	bl	8000588 <__aeabi_f2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	480e      	ldr	r0, [pc, #56]	; (8002cbc <updateControlLoop+0x58>)
 8002c82:	f00f f8eb 	bl	8011e5c <iprintf>
	printf("Joystick y %.2f\r\n",joystick.joystickVoltage[1]);
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <updateControlLoop+0x54>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc7c 	bl	8000588 <__aeabi_f2d>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	480a      	ldr	r0, [pc, #40]	; (8002cc0 <updateControlLoop+0x5c>)
 8002c96:	f00f f8e1 	bl	8011e5c <iprintf>
	i2cGood=Bar30getData(&pressureSensor);
 8002c9a:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <updateControlLoop+0x60>)
 8002c9c:	f7fe fa4c 	bl	8001138 <Bar30getData>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <updateControlLoop+0x64>)
 8002ca6:	701a      	strb	r2, [r3, #0]
	yawSpeed=mpu6050.gyr_rps[2];
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <updateControlLoop+0x68>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <updateControlLoop+0x6c>)
 8002cae:	6013      	str	r3, [r2, #0]

	// calculate PID
	// write servo output

    osDelay(100); // update control loop every 100 ms
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f00c f807 	bl	800ecc4 <osDelay>
	readJoystick(&joystick);
 8002cb6:	e7d9      	b.n	8002c6c <updateControlLoop+0x8>
 8002cb8:	20002928 	.word	0x20002928
 8002cbc:	080142e4 	.word	0x080142e4
 8002cc0:	080142f8 	.word	0x080142f8
 8002cc4:	20002964 	.word	0x20002964
 8002cc8:	20002994 	.word	0x20002994
 8002ccc:	20002934 	.word	0x20002934
 8002cd0:	20002990 	.word	0x20002990

08002cd4 <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0a0      	sub	sp, #128	; 0x80
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  	 // HAL_Delay(500);
	    // Waiting for the Micro SD module to initialize
	  printf("SD card thread is called!");
 8002cdc:	4885      	ldr	r0, [pc, #532]	; (8002ef4 <recordSDdata+0x220>)
 8002cde:	f00f f8bd 	bl	8011e5c <iprintf>

	  	fres = f_mount(&fs, "", 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4984      	ldr	r1, [pc, #528]	; (8002ef8 <recordSDdata+0x224>)
 8002ce6:	4885      	ldr	r0, [pc, #532]	; (8002efc <recordSDdata+0x228>)
 8002ce8:	f00a fe00 	bl	800d8ec <f_mount>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <recordSDdata+0x22c>)
 8002cf2:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <recordSDdata+0x22c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <recordSDdata+0x30>
	  		transmit_uart("Micro SD card is mounted successfully!\n");
 8002cfc:	4881      	ldr	r0, [pc, #516]	; (8002f04 <recordSDdata+0x230>)
 8002cfe:	f7ff fadf 	bl	80022c0 <transmit_uart>
 8002d02:	e006      	b.n	8002d12 <recordSDdata+0x3e>
	  	} else if (fres != FR_OK) {
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <recordSDdata+0x22c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <recordSDdata+0x3e>
	  		transmit_uart("Micro SD card's mount error!\n");
 8002d0c:	487e      	ldr	r0, [pc, #504]	; (8002f08 <recordSDdata+0x234>)
 8002d0e:	f7ff fad7 	bl	80022c0 <transmit_uart>
	  	}

	  	// FA_OPEN_APPEND opens file if it exists and if not then creates it,
	  	// the pointer is set at the end of the file for appending
	  	fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002d12:	2233      	movs	r2, #51	; 0x33
 8002d14:	497d      	ldr	r1, [pc, #500]	; (8002f0c <recordSDdata+0x238>)
 8002d16:	487e      	ldr	r0, [pc, #504]	; (8002f10 <recordSDdata+0x23c>)
 8002d18:	f00a fe4c 	bl	800d9b4 <f_open>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <recordSDdata+0x22c>)
 8002d22:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <recordSDdata+0x22c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <recordSDdata+0x60>
	  		transmit_uart("File opened for reading and checking the free space.\n");
 8002d2c:	4879      	ldr	r0, [pc, #484]	; (8002f14 <recordSDdata+0x240>)
 8002d2e:	f7ff fac7 	bl	80022c0 <transmit_uart>
 8002d32:	e006      	b.n	8002d42 <recordSDdata+0x6e>
	  	} else if (fres != FR_OK) {
 8002d34:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <recordSDdata+0x22c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <recordSDdata+0x6e>
	  		transmit_uart("File was not opened for reading and checking the free space!\n");
 8002d3c:	4876      	ldr	r0, [pc, #472]	; (8002f18 <recordSDdata+0x244>)
 8002d3e:	f7ff fabf 	bl	80022c0 <transmit_uart>
	  	}

	  	fres = f_getfree("", &fre_clust, &pfs);
 8002d42:	4a76      	ldr	r2, [pc, #472]	; (8002f1c <recordSDdata+0x248>)
 8002d44:	4976      	ldr	r1, [pc, #472]	; (8002f20 <recordSDdata+0x24c>)
 8002d46:	486c      	ldr	r0, [pc, #432]	; (8002ef8 <recordSDdata+0x224>)
 8002d48:	f00b fc25 	bl	800e596 <f_getfree>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <recordSDdata+0x22c>)
 8002d52:	701a      	strb	r2, [r3, #0]
	  	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002d54:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <recordSDdata+0x248>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	3b02      	subs	r3, #2
 8002d5c:	4a6f      	ldr	r2, [pc, #444]	; (8002f1c <recordSDdata+0x248>)
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	8952      	ldrh	r2, [r2, #10]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fbec 	bl	8000544 <__aeabi_ui2d>
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <recordSDdata+0x250>)
 8002d72:	f7fd fc61 	bl	8000638 <__aeabi_dmul>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd ff33 	bl	8000be8 <__aeabi_d2uiz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <recordSDdata+0x254>)
 8002d86:	6013      	str	r3, [r2, #0]
	  	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <recordSDdata+0x248>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	895b      	ldrh	r3, [r3, #10]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <recordSDdata+0x24c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fbd3 	bl	8000544 <__aeabi_ui2d>
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <recordSDdata+0x250>)
 8002da4:	f7fd fc48 	bl	8000638 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd ff1a 	bl	8000be8 <__aeabi_d2uiz>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a5d      	ldr	r2, [pc, #372]	; (8002f2c <recordSDdata+0x258>)
 8002db8:	6013      	str	r3, [r2, #0]
	  	char mSz[12];
	  	sprintf(mSz, "%lu", freeSpace);
 8002dba:	4b5c      	ldr	r3, [pc, #368]	; (8002f2c <recordSDdata+0x258>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dc2:	495b      	ldr	r1, [pc, #364]	; (8002f30 <recordSDdata+0x25c>)
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f00f f85b 	bl	8011e80 <siprintf>
	  	if (fres == FR_OK) {
 8002dca:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <recordSDdata+0x22c>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <recordSDdata+0x116>
	  		transmit_uart("The free space is: ");
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <recordSDdata+0x260>)
 8002dd4:	f7ff fa74 	bl	80022c0 <transmit_uart>
	  		transmit_uart(mSz);
 8002dd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fa6f 	bl	80022c0 <transmit_uart>
	  		transmit_uart("\n");
 8002de2:	4855      	ldr	r0, [pc, #340]	; (8002f38 <recordSDdata+0x264>)
 8002de4:	f7ff fa6c 	bl	80022c0 <transmit_uart>
 8002de8:	e006      	b.n	8002df8 <recordSDdata+0x124>
	  	} else if (fres != FR_OK) {
 8002dea:	4b45      	ldr	r3, [pc, #276]	; (8002f00 <recordSDdata+0x22c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <recordSDdata+0x124>
	  		transmit_uart("The free space could not be determined!\n");
 8002df2:	4852      	ldr	r0, [pc, #328]	; (8002f3c <recordSDdata+0x268>)
 8002df4:	f7ff fa64 	bl	80022c0 <transmit_uart>
	  	}

	  	for (uint8_t i = 0; i < 10; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002dfe:	e008      	b.n	8002e12 <recordSDdata+0x13e>
	  		f_puts("CHILLING BLING LING.\n", &fil);
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <recordSDdata+0x23c>)
 8002e02:	484f      	ldr	r0, [pc, #316]	; (8002f40 <recordSDdata+0x26c>)
 8002e04:	f00b fd37 	bl	800e876 <f_puts>
	  	for (uint8_t i = 0; i < 10; i++) {
 8002e08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d9f2      	bls.n	8002e00 <recordSDdata+0x12c>
	  	}

	  	fres = f_close(&fil);
 8002e1a:	483d      	ldr	r0, [pc, #244]	; (8002f10 <recordSDdata+0x23c>)
 8002e1c:	f00b fb8c 	bl	800e538 <f_close>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <recordSDdata+0x22c>)
 8002e26:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <recordSDdata+0x22c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <recordSDdata+0x164>
	  		transmit_uart("The file is closed.\n");
 8002e30:	4844      	ldr	r0, [pc, #272]	; (8002f44 <recordSDdata+0x270>)
 8002e32:	f7ff fa45 	bl	80022c0 <transmit_uart>
 8002e36:	e006      	b.n	8002e46 <recordSDdata+0x172>
	  	} else if (fres != FR_OK) {
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <recordSDdata+0x22c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <recordSDdata+0x172>
	  		transmit_uart("The file was not closed.\n");
 8002e40:	4841      	ldr	r0, [pc, #260]	; (8002f48 <recordSDdata+0x274>)
 8002e42:	f7ff fa3d 	bl	80022c0 <transmit_uart>
	  	}

	  	// Open file to read
	  	fres = f_open(&fil, "log-file.txt", FA_READ);
 8002e46:	2201      	movs	r2, #1
 8002e48:	4930      	ldr	r1, [pc, #192]	; (8002f0c <recordSDdata+0x238>)
 8002e4a:	4831      	ldr	r0, [pc, #196]	; (8002f10 <recordSDdata+0x23c>)
 8002e4c:	f00a fdb2 	bl	800d9b4 <f_open>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <recordSDdata+0x22c>)
 8002e56:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <recordSDdata+0x22c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <recordSDdata+0x194>
	  		transmit_uart("File opened for reading.\n");
 8002e60:	483a      	ldr	r0, [pc, #232]	; (8002f4c <recordSDdata+0x278>)
 8002e62:	f7ff fa2d 	bl	80022c0 <transmit_uart>
 8002e66:	e00e      	b.n	8002e86 <recordSDdata+0x1b2>
	  	} else if (fres != FR_OK) {
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <recordSDdata+0x22c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <recordSDdata+0x1b2>
	  		transmit_uart("File was not opened for reading!\n");
 8002e70:	4837      	ldr	r0, [pc, #220]	; (8002f50 <recordSDdata+0x27c>)
 8002e72:	f7ff fa25 	bl	80022c0 <transmit_uart>
	  	}

	  	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8002e76:	e006      	b.n	8002e86 <recordSDdata+0x1b2>
	  		char mRd[100];
	  		sprintf(mRd, "%s", buffer);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4a35      	ldr	r2, [pc, #212]	; (8002f54 <recordSDdata+0x280>)
 8002e7e:	4936      	ldr	r1, [pc, #216]	; (8002f58 <recordSDdata+0x284>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00e fffd 	bl	8011e80 <siprintf>
	  	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <recordSDdata+0x23c>)
 8002e88:	2164      	movs	r1, #100	; 0x64
 8002e8a:	4832      	ldr	r0, [pc, #200]	; (8002f54 <recordSDdata+0x280>)
 8002e8c:	f00b fc3f 	bl	800e70e <f_gets>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <recordSDdata+0x1a4>
	  		//transmit_uart(mRd);

	  	}

	  	 //Close file
	  	fres = f_close(&fil);
 8002e96:	481e      	ldr	r0, [pc, #120]	; (8002f10 <recordSDdata+0x23c>)
 8002e98:	f00b fb4e 	bl	800e538 <f_close>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <recordSDdata+0x22c>)
 8002ea2:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <recordSDdata+0x22c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <recordSDdata+0x1e0>
	  		transmit_uart("The file is closed.\n");
 8002eac:	4825      	ldr	r0, [pc, #148]	; (8002f44 <recordSDdata+0x270>)
 8002eae:	f7ff fa07 	bl	80022c0 <transmit_uart>
 8002eb2:	e006      	b.n	8002ec2 <recordSDdata+0x1ee>
	  	} else if (fres != FR_OK) {
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <recordSDdata+0x22c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <recordSDdata+0x1ee>
	  		transmit_uart("The file was not closed.\n");
 8002ebc:	4822      	ldr	r0, [pc, #136]	; (8002f48 <recordSDdata+0x274>)
 8002ebe:	f7ff f9ff 	bl	80022c0 <transmit_uart>
	  	}

	  	f_mount(NULL, "", 1);
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <recordSDdata+0x224>)
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f00a fd10 	bl	800d8ec <f_mount>
	  	if (fres == FR_OK) {
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <recordSDdata+0x22c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <recordSDdata+0x208>
	  		transmit_uart("The Micro SD card is unmounted!\n");
 8002ed4:	4821      	ldr	r0, [pc, #132]	; (8002f5c <recordSDdata+0x288>)
 8002ed6:	f7ff f9f3 	bl	80022c0 <transmit_uart>
 8002eda:	e006      	b.n	8002eea <recordSDdata+0x216>
	  	} else if (fres != FR_OK) {
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <recordSDdata+0x22c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <recordSDdata+0x216>
	  		transmit_uart("The Micro SD was not unmounted!");
 8002ee4:	481e      	ldr	r0, [pc, #120]	; (8002f60 <recordSDdata+0x28c>)
 8002ee6:	f7ff f9eb 	bl	80022c0 <transmit_uart>
	  	}
    osDelay(5000); // write SD card data every 5 seconds
 8002eea:	f241 3088 	movw	r0, #5000	; 0x1388
 8002eee:	f00b fee9 	bl	800ecc4 <osDelay>
  {
 8002ef2:	e6f3      	b.n	8002cdc <recordSDdata+0x8>
 8002ef4:	0801430c 	.word	0x0801430c
 8002ef8:	08014328 	.word	0x08014328
 8002efc:	2000050c 	.word	0x2000050c
 8002f00:	2000257c 	.word	0x2000257c
 8002f04:	0801432c 	.word	0x0801432c
 8002f08:	08014354 	.word	0x08014354
 8002f0c:	08014374 	.word	0x08014374
 8002f10:	2000154c 	.word	0x2000154c
 8002f14:	08014384 	.word	0x08014384
 8002f18:	080143bc 	.word	0x080143bc
 8002f1c:	20001548 	.word	0x20001548
 8002f20:	20002580 	.word	0x20002580
 8002f24:	3fe00000 	.word	0x3fe00000
 8002f28:	20002584 	.word	0x20002584
 8002f2c:	20002588 	.word	0x20002588
 8002f30:	080143fc 	.word	0x080143fc
 8002f34:	08014400 	.word	0x08014400
 8002f38:	08014414 	.word	0x08014414
 8002f3c:	08014418 	.word	0x08014418
 8002f40:	08014444 	.word	0x08014444
 8002f44:	0801445c 	.word	0x0801445c
 8002f48:	08014474 	.word	0x08014474
 8002f4c:	08014490 	.word	0x08014490
 8002f50:	080144ac 	.word	0x080144ac
 8002f54:	2000258c 	.word	0x2000258c
 8002f58:	080144d0 	.word	0x080144d0
 8002f5c:	080144d4 	.word	0x080144d4
 8002f60:	080144f8 	.word	0x080144f8

08002f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f76:	f000 fcfb 	bl	8003970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000

08002f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8c:	b672      	cpsid	i
}
 8002f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <Error_Handler+0x8>
	...

08002f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_MspInit+0x54>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	210f      	movs	r1, #15
 8002fd6:	f06f 0001 	mvn.w	r0, #1
 8002fda:	f001 fb01 	bl	80045e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <HAL_ADC_MspInit+0xec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d15f      	bne.n	80030ce <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_ADC_MspInit+0xf0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003046:	2303      	movs	r3, #3
 8003048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800304a:	2303      	movs	r3, #3
 800304c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4821      	ldr	r0, [pc, #132]	; (80030e0 <HAL_ADC_MspInit+0xf4>)
 800305a:	f001 fe97 	bl	8004d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003060:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <HAL_ADC_MspInit+0xfc>)
 8003062:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003070:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800307c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003084:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800308c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 8003096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800309a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030a2:	4810      	ldr	r0, [pc, #64]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 80030a4:	f001 fac6 	bl	8004634 <HAL_DMA_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030ae:	f7ff ff6b 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_ADC_MspInit+0xf8>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2105      	movs	r1, #5
 80030c2:	2012      	movs	r0, #18
 80030c4:	f001 fa8c 	bl	80045e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80030c8:	2012      	movs	r0, #18
 80030ca:	f001 faa5 	bl	8004618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40012000 	.word	0x40012000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	20002638 	.word	0x20002638
 80030e8:	40026410 	.word	0x40026410

080030ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	; 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a76      	ldr	r2, [pc, #472]	; (80032e4 <HAL_I2C_MspInit+0x1f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	f040 808c 	bne.w	8003228 <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800312c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003132:	2312      	movs	r3, #18
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800313e:	2304      	movs	r3, #4
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4868      	ldr	r0, [pc, #416]	; (80032ec <HAL_I2C_MspInit+0x200>)
 800314a:	f001 fe1f 	bl	8004d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a64      	ldr	r2, [pc, #400]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b62      	ldr	r3, [pc, #392]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800316a:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 800316c:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <HAL_I2C_MspInit+0x208>)
 800316e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003170:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 8003172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003176:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003178:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003184:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 8003186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800318c:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 80031a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a6:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80031ac:	4850      	ldr	r0, [pc, #320]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 80031ae:	f001 fa41 	bl	8004634 <HAL_DMA_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80031b8:	f7ff fee6 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
 80031c2:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_I2C_MspInit+0x204>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031ca:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_I2C_MspInit+0x210>)
 80031cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031d6:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031e2:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ea:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f0:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 80031fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003202:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003204:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800320a:	483b      	ldr	r0, [pc, #236]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 800320c:	f001 fa12 	bl	8004634 <HAL_DMA_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8003216:	f7ff feb7 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 800321e:	635a      	str	r2, [r3, #52]	; 0x34
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <HAL_I2C_MspInit+0x20c>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003226:	e058      	b.n	80032da <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_I2C_MspInit+0x214>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d153      	bne.n	80032da <HAL_I2C_MspInit+0x1ee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a2b      	ldr	r2, [pc, #172]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800326a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003270:	2312      	movs	r3, #18
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003278:	2303      	movs	r3, #3
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800327c:	2304      	movs	r3, #4
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	4619      	mov	r1, r3
 8003286:	4819      	ldr	r0, [pc, #100]	; (80032ec <HAL_I2C_MspInit+0x200>)
 8003288:	f001 fd80 	bl	8004d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800328c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003292:	2312      	movs	r3, #18
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800329e:	2304      	movs	r3, #4
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4816      	ldr	r0, [pc, #88]	; (8003304 <HAL_I2C_MspInit+0x218>)
 80032aa:	f001 fd6f 	bl	8004d8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 80032b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_I2C_MspInit+0x1fc>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2105      	movs	r1, #5
 80032ce:	2021      	movs	r0, #33	; 0x21
 80032d0:	f001 f986 	bl	80045e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80032d4:	2021      	movs	r0, #33	; 0x21
 80032d6:	f001 f99f 	bl	8004618 <HAL_NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3730      	adds	r7, #48	; 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40005400 	.word	0x40005400
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020400 	.word	0x40020400
 80032f0:	20002740 	.word	0x20002740
 80032f4:	40026010 	.word	0x40026010
 80032f8:	200027a0 	.word	0x200027a0
 80032fc:	400260b8 	.word	0x400260b8
 8003300:	40005800 	.word	0x40005800
 8003304:	40020800 	.word	0x40020800

08003308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <HAL_SPI_MspInit+0x84>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d12c      	bne.n	8003384 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_SPI_MspInit+0x88>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_SPI_MspInit+0x88>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_SPI_MspInit+0x88>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_SPI_MspInit+0x88>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_SPI_MspInit+0x88>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_SPI_MspInit+0x88>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003362:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003374:	2305      	movs	r3, #5
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <HAL_SPI_MspInit+0x8c>)
 8003380:	f001 fd04 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40003800 	.word	0x40003800
 8003390:	40023800 	.word	0x40023800
 8003394:	40020400 	.word	0x40020400

08003398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d10d      	bne.n	80033c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_TIM_Base_MspInit+0x3c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <HAL_TIM_Base_MspInit+0x3c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_TIM_Base_MspInit+0x3c>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <HAL_TIM_PWM_MspInit+0x3c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10d      	bne.n	8003406 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_TIM_PWM_MspInit+0x40>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_TIM_PWM_MspInit+0x40>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_TIM_PWM_MspInit+0x40>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40000400 	.word	0x40000400
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_TIM_MspPostInit+0x68>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d11e      	bne.n	800347c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_TIM_MspPostInit+0x6c>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_TIM_MspPostInit+0x6c>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_TIM_MspPostInit+0x6c>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800345a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800345e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346c:	2302      	movs	r3, #2
 800346e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	4619      	mov	r1, r3
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <HAL_TIM_MspPostInit+0x70>)
 8003478:	f001 fc88 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800347c:	bf00      	nop
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40000400 	.word	0x40000400
 8003488:	40023800 	.word	0x40023800
 800348c:	40020800 	.word	0x40020800

08003490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_UART_MspInit+0xe8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d12c      	bne.n	800350c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_UART_MspInit+0xec>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_UART_MspInit+0xec>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_UART_MspInit+0xec>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_UART_MspInit+0xec>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_UART_MspInit+0xec>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_UART_MspInit+0xec>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034ea:	230c      	movs	r3, #12
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034fa:	2307      	movs	r3, #7
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f107 031c 	add.w	r3, r7, #28
 8003502:	4619      	mov	r1, r3
 8003504:	481e      	ldr	r0, [pc, #120]	; (8003580 <HAL_UART_MspInit+0xf0>)
 8003506:	f001 fc41 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800350a:	e031      	b.n	8003570 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_UART_MspInit+0xf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d12c      	bne.n	8003570 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_UART_MspInit+0xec>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_UART_MspInit+0xec>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_UART_MspInit+0xec>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_UART_MspInit+0xec>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_UART_MspInit+0xec>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_UART_MspInit+0xec>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800354e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003560:	2307      	movs	r3, #7
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4807      	ldr	r0, [pc, #28]	; (8003588 <HAL_UART_MspInit+0xf8>)
 800356c:	f001 fc0e 	bl	8004d8c <HAL_GPIO_Init>
}
 8003570:	bf00      	nop
 8003572:	3730      	adds	r7, #48	; 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40004400 	.word	0x40004400
 800357c:	40023800 	.word	0x40023800
 8003580:	40020000 	.word	0x40020000
 8003584:	40004800 	.word	0x40004800
 8003588:	40020800 	.word	0x40020800

0800358c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08c      	sub	sp, #48	; 0x30
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_InitTick+0xd4>)
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <HAL_InitTick+0xd4>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6453      	str	r3, [r2, #68]	; 0x44
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_InitTick+0xd4>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035b8:	f107 020c 	add.w	r2, r7, #12
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 fa64 	bl	8008a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80035c8:	f005 fa4e 	bl	8008a68 <HAL_RCC_GetPCLK2Freq>
 80035cc:	4603      	mov	r3, r0
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_InitTick+0xd8>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9b      	lsrs	r3, r3, #18
 80035dc:	3b01      	subs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_InitTick+0xdc>)
 80035e2:	4a22      	ldr	r2, [pc, #136]	; (800366c <HAL_InitTick+0xe0>)
 80035e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_InitTick+0xdc>)
 80035e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_InitTick+0xdc>)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_InitTick+0xdc>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_InitTick+0xdc>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_InitTick+0xdc>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003606:	4818      	ldr	r0, [pc, #96]	; (8003668 <HAL_InitTick+0xdc>)
 8003608:	f006 fb74 	bl	8009cf4 <HAL_TIM_Base_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11b      	bne.n	8003652 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800361a:	4813      	ldr	r0, [pc, #76]	; (8003668 <HAL_InitTick+0xdc>)
 800361c:	f006 fc22 	bl	8009e64 <HAL_TIM_Base_Start_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800362a:	2b00      	cmp	r3, #0
 800362c:	d111      	bne.n	8003652 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800362e:	2019      	movs	r0, #25
 8003630:	f000 fff2 	bl	8004618 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	d808      	bhi.n	800364c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800363a:	2200      	movs	r2, #0
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	2019      	movs	r0, #25
 8003640:	f000 ffce 	bl	80045e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_InitTick+0xe4>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e002      	b.n	8003652 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	431bde83 	.word	0x431bde83
 8003668:	20002998 	.word	0x20002998
 800366c:	40010000 	.word	0x40010000
 8003670:	20000008 	.word	0x20000008

08003674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003678:	e7fe      	b.n	8003678 <NMI_Handler+0x4>

0800367a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800367e:	e7fe      	b.n	800367e <HardFault_Handler+0x4>

08003680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <MemManage_Handler+0x4>

08003686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <BusFault_Handler+0x4>

0800368c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <UsageFault_Handler+0x4>

08003692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 80036a4:	2002      	movs	r0, #2
 80036a6:	f001 fd1f 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <DMA1_Stream0_IRQHandler+0x10>)
 80036b6:	f001 f8e5 	bl	8004884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20002740 	.word	0x20002740

080036c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <ADC_IRQHandler+0x10>)
 80036ca:	f000 f9d8 	bl	8003a7e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200025f0 	.word	0x200025f0

080036d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036de:	f006 fc80 	bl	8009fe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20002998 	.word	0x20002998

080036ec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <I2C2_EV_IRQHandler+0x10>)
 80036f2:	f002 ff5b 	bl	80065ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200026ec 	.word	0x200026ec

08003700 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Stream7_IRQHandler+0x10>)
 8003706:	f001 f8bd 	bl	8004884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200027a0 	.word	0x200027a0

08003714 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA2_Stream0_IRQHandler+0x10>)
 800371a:	f001 f8b3 	bl	8004884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20002638 	.word	0x20002638

08003728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return 1;
 800372c:	2301      	movs	r3, #1
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <_kill>:

int _kill(int pid, int sig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003742:	f00e fca9 	bl	8012098 <__errno>
 8003746:	4603      	mov	r3, r0
 8003748:	2216      	movs	r2, #22
 800374a:	601a      	str	r2, [r3, #0]
  return -1;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_exit>:

void _exit (int status)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003760:	f04f 31ff 	mov.w	r1, #4294967295
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ffe7 	bl	8003738 <_kill>
  while (1) {}    /* Make sure we hang here */
 800376a:	e7fe      	b.n	800376a <_exit+0x12>

0800376c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e00a      	b.n	8003794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800377e:	f3af 8000 	nop.w
 8003782:	4601      	mov	r1, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	60ba      	str	r2, [r7, #8]
 800378a:	b2ca      	uxtb	r2, r1
 800378c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	dbf0      	blt.n	800377e <_read+0x12>
  }

  return len;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e009      	b.n	80037cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	60ba      	str	r2, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fa2b 	bl	8002c1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	dbf1      	blt.n	80037b8 <_write+0x12>
  }
  return len;
 80037d4:	687b      	ldr	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_close>:

int _close(int file)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003806:	605a      	str	r2, [r3, #4]
  return 0;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_isatty>:

int _isatty(int file)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800381e:	2301      	movs	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <_sbrk+0x5c>)
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <_sbrk+0x60>)
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <_sbrk+0x64>)
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <_sbrk+0x68>)
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <_sbrk+0x64>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	429a      	cmp	r2, r3
 8003876:	d207      	bcs.n	8003888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003878:	f00e fc0e 	bl	8012098 <__errno>
 800387c:	4603      	mov	r3, r0
 800387e:	220c      	movs	r2, #12
 8003880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e009      	b.n	800389c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <_sbrk+0x64>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <_sbrk+0x64>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	4a05      	ldr	r2, [pc, #20]	; (80038ac <_sbrk+0x64>)
 8003898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800389a:	68fb      	ldr	r3, [r7, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20020000 	.word	0x20020000
 80038a8:	00000400 	.word	0x00000400
 80038ac:	200029e0 	.word	0x200029e0
 80038b0:	20006908 	.word	0x20006908

080038b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <SystemInit+0x20>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <SystemInit+0x20>)
 80038c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038dc:	480d      	ldr	r0, [pc, #52]	; (8003914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038de:	490e      	ldr	r1, [pc, #56]	; (8003918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e4:	e002      	b.n	80038ec <LoopCopyDataInit>

080038e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ea:	3304      	adds	r3, #4

080038ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f0:	d3f9      	bcc.n	80038e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038f4:	4c0b      	ldr	r4, [pc, #44]	; (8003924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f8:	e001      	b.n	80038fe <LoopFillZerobss>

080038fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038fc:	3204      	adds	r2, #4

080038fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003900:	d3fb      	bcc.n	80038fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003902:	f7ff ffd7 	bl	80038b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003906:	f00e fbcd 	bl	80120a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390a:	f7fe fcf9 	bl	8002300 <main>
  bx  lr    
 800390e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003918:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800391c:	08014d4c 	.word	0x08014d4c
  ldr r2, =_sbss
 8003920:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003924:	20006904 	.word	0x20006904

08003928 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003928:	e7fe      	b.n	8003928 <CAN1_RX0_IRQHandler>
	...

0800392c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_Init+0x40>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_Init+0x40>)
 8003936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_Init+0x40>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <HAL_Init+0x40>)
 8003942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_Init+0x40>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_Init+0x40>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003954:	2003      	movs	r0, #3
 8003956:	f000 fe38 	bl	80045ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800395a:	200f      	movs	r0, #15
 800395c:	f7ff fe16 	bl	800358c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003960:	f7ff fb18 	bl	8002f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00

08003970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_IncTick+0x20>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_IncTick+0x24>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <HAL_IncTick+0x24>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c
 8003994:	200029e4 	.word	0x200029e4

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_GetTick+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	200029e4 	.word	0x200029e4

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7ff ffee 	bl	8003998 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d005      	beq.n	80039d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_Delay+0x44>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039d6:	bf00      	nop
 80039d8:	f7ff ffde 	bl	8003998 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d8f7      	bhi.n	80039d8 <HAL_Delay+0x28>
  {
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e033      	b.n	8003a76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fae8 	bl	8002fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb88 	bl	8004160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
 8003a66:	e001      	b.n	8003a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <HAL_ADC_IRQHandler+0xca>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d046      	beq.n	8003b48 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d12b      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d127      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d119      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0220 	bic.w	r2, r2, #32
 8003b12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fe fbd7 	bl	80022ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0212 	mvn.w	r2, #18
 8003b46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d057      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x190>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d054      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d139      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d12b      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d124      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11d      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d119      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc2c 	bl	800445c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 020c 	mvn.w	r2, #12
 8003c0c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x1d6>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d014      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10d      	bne.n	8003c54 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f945 	bl	8003ed4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0201 	mvn.w	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c62:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x218>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f043 0202 	orr.w	r2, r3, #2
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f92e 	bl	8003ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0220 	mvn.w	r2, #32
 8003c94:	601a      	str	r2, [r3, #0]
  }
}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Start_DMA+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0e9      	b.n	8003e92 <HAL_ADC_Start_DMA+0x1f2>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d018      	beq.n	8003d06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_ADC_Start_DMA+0x1fc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6d      	ldr	r2, [pc, #436]	; (8003ea0 <HAL_ADC_Start_DMA+0x200>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0c9a      	lsrs	r2, r3, #18
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	d107      	bne.n	8003d26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 80a1 	bne.w	8003e78 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d74:	d106      	bne.n	8003d84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f023 0206 	bic.w	r2, r3, #6
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
 8003d82:	e002      	b.n	8003d8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_ADC_Start_DMA+0x204>)
 8003d94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4a43      	ldr	r2, [pc, #268]	; (8003ea8 <HAL_ADC_Start_DMA+0x208>)
 8003d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4a42      	ldr	r2, [pc, #264]	; (8003eac <HAL_ADC_Start_DMA+0x20c>)
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4a41      	ldr	r2, [pc, #260]	; (8003eb0 <HAL_ADC_Start_DMA+0x210>)
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003db6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	334c      	adds	r3, #76	; 0x4c
 8003de2:	4619      	mov	r1, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f000 fcd2 	bl	8004790 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d12a      	bne.n	8003e4e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <HAL_ADC_Start_DMA+0x214>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d015      	beq.n	8003e2e <HAL_ADC_Start_DMA+0x18e>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_ADC_Start_DMA+0x218>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_Start_DMA+0x178>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_ADC_Start_DMA+0x204>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <HAL_ADC_Start_DMA+0x21c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d136      	bne.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_ADC_Start_DMA+0x204>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d130      	bne.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d129      	bne.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e020      	b.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_ADC_Start_DMA+0x214>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d11b      	bne.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	e00b      	b.n	8003e90 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f043 0210 	orr.w	r2, r3, #16
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000004 	.word	0x20000004
 8003ea0:	431bde83 	.word	0x431bde83
 8003ea4:	40012300 	.word	0x40012300
 8003ea8:	08004359 	.word	0x08004359
 8003eac:	08004413 	.word	0x08004413
 8003eb0:	0800442f 	.word	0x0800442f
 8003eb4:	40012000 	.word	0x40012000
 8003eb8:	40012100 	.word	0x40012100
 8003ebc:	40012200 	.word	0x40012200

08003ec0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e113      	b.n	8004140 <HAL_ADC_ConfigChannel+0x244>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b09      	cmp	r3, #9
 8003f26:	d925      	bls.n	8003f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	2207      	movs	r2, #7
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43da      	mvns	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4403      	add	r3, r0
 8003f66:	3b1e      	subs	r3, #30
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e022      	b.n	8003fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6919      	ldr	r1, [r3, #16]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	2207      	movs	r2, #7
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	400a      	ands	r2, r1
 8003f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4403      	add	r3, r0
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d824      	bhi.n	800400c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b05      	subs	r3, #5
 8003fd4:	221f      	movs	r2, #31
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b05      	subs	r3, #5
 8003ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	635a      	str	r2, [r3, #52]	; 0x34
 800400a:	e04c      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d824      	bhi.n	800405e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	3b23      	subs	r3, #35	; 0x23
 8004026:	221f      	movs	r2, #31
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43da      	mvns	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	400a      	ands	r2, r1
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	4618      	mov	r0, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	3b23      	subs	r3, #35	; 0x23
 8004050:	fa00 f203 	lsl.w	r2, r0, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e023      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	3b41      	subs	r3, #65	; 0x41
 8004070:	221f      	movs	r2, #31
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	4618      	mov	r0, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	3b41      	subs	r3, #65	; 0x41
 800409a:	fa00 f203 	lsl.w	r2, r0, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_ADC_ConfigChannel+0x250>)
 80040a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_ADC_ConfigChannel+0x254>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10f      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d8>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b12      	cmp	r3, #18
 80040ba:	d10b      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_ADC_ConfigChannel+0x254>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12b      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_ADC_ConfigChannel+0x258>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x1f4>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b11      	cmp	r3, #17
 80040ee:	d122      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <HAL_ADC_ConfigChannel+0x258>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_ADC_ConfigChannel+0x25c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_ADC_ConfigChannel+0x260>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0c9a      	lsrs	r2, r3, #18
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004128:	e002      	b.n	8004130 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3b01      	subs	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f9      	bne.n	800412a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012300 	.word	0x40012300
 8004150:	40012000 	.word	0x40012000
 8004154:	10000012 	.word	0x10000012
 8004158:	20000004 	.word	0x20000004
 800415c:	431bde83 	.word	0x431bde83

08004160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004168:	4b79      	ldr	r3, [pc, #484]	; (8004350 <ADC_Init+0x1f0>)
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	4a58      	ldr	r2, [pc, #352]	; (8004354 <ADC_Init+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e00f      	b.n	800425e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800424c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800425c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0202 	bic.w	r2, r2, #2
 800426c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
 8004278:	005a      	lsls	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	035a      	lsls	r2, r3, #13
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e007      	b.n	80042d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	051a      	lsls	r2, r3, #20
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004316:	025a      	lsls	r2, r3, #9
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	029a      	lsls	r2, r3, #10
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012300 	.word	0x40012300
 8004354:	0f000001 	.word	0x0f000001

08004358 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d13c      	bne.n	80043ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d12b      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d127      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d119      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0220 	bic.w	r2, r2, #32
 80043be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fd ff81 	bl	80022ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043ea:	e00e      	b.n	800440a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fd75 	bl	8003ee8 <HAL_ADC_ErrorCallback>
}
 80043fe:	e004      	b.n	800440a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff fd4d 	bl	8003ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2240      	movs	r2, #64	; 0x40
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fd4a 	bl	8003ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	; (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
         );
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff ff4c 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045f2:	f7ff ff61 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 80045f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f7ff ffb1 	bl	8004564 <NVIC_EncodePriority>
 8004602:	4602      	mov	r2, r0
 8004604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff80 	bl	8004510 <__NVIC_SetPriority>
}
 8004610:	bf00      	nop
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff54 	bl	80044d4 <__NVIC_EnableIRQ>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff f9aa 	bl	8003998 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e099      	b.n	8004784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004670:	e00f      	b.n	8004692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004672:	f7ff f991 	bl	8003998 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b05      	cmp	r3, #5
 800467e:	d908      	bls.n	8004692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e078      	b.n	8004784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e8      	bne.n	8004672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_DMA_Init+0x158>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4313      	orrs	r3, r2
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b04      	cmp	r3, #4
 8004724:	d117      	bne.n	8004756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 faab 	bl	8004c94 <DMA_CheckFifoParam>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004752:	2301      	movs	r3, #1
 8004754:	e016      	b.n	8004784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa62 	bl	8004c28 <DMA_CalcBaseAndBitshift>
 8004764:	4603      	mov	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	f010803f 	.word	0xf010803f

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_DMA_Start_IT+0x26>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e040      	b.n	8004838 <HAL_DMA_Start_IT+0xa8>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d12f      	bne.n	800482a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f9f4 	bl	8004bcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	223f      	movs	r2, #63	; 0x3f
 80047ea:	409a      	lsls	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0216 	orr.w	r2, r2, #22
 80047fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e005      	b.n	8004836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d004      	beq.n	800485e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e00c      	b.n	8004878 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2205      	movs	r2, #5
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004890:	4b8e      	ldr	r3, [pc, #568]	; (8004acc <HAL_DMA_IRQHandler+0x248>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a8e      	ldr	r2, [pc, #568]	; (8004ad0 <HAL_DMA_IRQHandler+0x24c>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	0a9b      	lsrs	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	2208      	movs	r2, #8
 80048b0:	409a      	lsls	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01a      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	2208      	movs	r2, #8
 80048de:	409a      	lsls	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f043 0201 	orr.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d012      	beq.n	8004926 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	2201      	movs	r2, #1
 8004914:	409a      	lsls	r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f043 0202 	orr.w	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2204      	movs	r2, #4
 800492c:	409a      	lsls	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d012      	beq.n	800495c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	2204      	movs	r2, #4
 800494a:	409a      	lsls	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0204 	orr.w	r2, r3, #4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2210      	movs	r2, #16
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d043      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03c      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	2210      	movs	r2, #16
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d018      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d024      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
 80049b2:	e01f      	b.n	80049f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	e016      	b.n	80049f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0208 	bic.w	r2, r2, #8
 80049e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f8:	2220      	movs	r2, #32
 80049fa:	409a      	lsls	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 808f 	beq.w	8004b24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8087 	beq.w	8004b24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d136      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0216 	bic.w	r2, r2, #22
 8004a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x1da>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0208 	bic.w	r2, r2, #8
 8004a6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	223f      	movs	r2, #63	; 0x3f
 8004a74:	409a      	lsls	r2, r3
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d07e      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
        }
        return;
 8004a9a:	e079      	b.n	8004b90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
 8004ac8:	e02c      	b.n	8004b24 <HAL_DMA_IRQHandler+0x2a0>
 8004aca:	bf00      	nop
 8004acc:	20000004 	.word	0x20000004
 8004ad0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d023      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
 8004ae4:	e01e      	b.n	8004b24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0210 	bic.w	r2, r2, #16
 8004b02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d032      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d022      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d307      	bcc.n	8004b6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f2      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x2cc>
 8004b6a:	e000      	b.n	8004b6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
 8004b8e:	e000      	b.n	8004b92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b90:	bf00      	nop
    }
  }
}
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba6:	b2db      	uxtb	r3, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004be8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d108      	bne.n	8004c0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c0a:	e007      	b.n	8004c1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3b10      	subs	r3, #16
 8004c38:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <DMA_CalcBaseAndBitshift+0x64>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <DMA_CalcBaseAndBitshift+0x68>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d909      	bls.n	8004c6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	659a      	str	r2, [r3, #88]	; 0x58
 8004c68:	e007      	b.n	8004c7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	08014580 	.word	0x08014580

08004c94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11f      	bne.n	8004cee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d856      	bhi.n	8004d62 <DMA_CheckFifoParam+0xce>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <DMA_CheckFifoParam+0x28>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cdf 	.word	0x08004cdf
 8004cc4:	08004ccd 	.word	0x08004ccd
 8004cc8:	08004d63 	.word	0x08004d63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d046      	beq.n	8004d66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cdc:	e043      	b.n	8004d66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ce6:	d140      	bne.n	8004d6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cec:	e03d      	b.n	8004d6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf6:	d121      	bne.n	8004d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d837      	bhi.n	8004d6e <DMA_CheckFifoParam+0xda>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <DMA_CheckFifoParam+0x70>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d1b 	.word	0x08004d1b
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004d2d 	.word	0x08004d2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e030      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d025      	beq.n	8004d72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e022      	b.n	8004d72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d34:	d11f      	bne.n	8004d76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d3a:	e01c      	b.n	8004d76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d903      	bls.n	8004d4a <DMA_CheckFifoParam+0xb6>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d003      	beq.n	8004d50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d48:	e018      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4e:	e015      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e00b      	b.n	8004d7a <DMA_CheckFifoParam+0xe6>
      break;
 8004d62:	bf00      	nop
 8004d64:	e00a      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d66:	bf00      	nop
 8004d68:	e008      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e006      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e004      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e002      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e165      	b.n	8005074 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f040 8154 	bne.w	800506e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d005      	beq.n	8004dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d130      	bne.n	8004e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e14:	2201      	movs	r2, #1
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 0201 	and.w	r2, r3, #1
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d017      	beq.n	8004e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d123      	bne.n	8004ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	08da      	lsrs	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3208      	adds	r2, #8
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80ae 	beq.w	800506e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b5d      	ldr	r3, [pc, #372]	; (800508c <HAL_GPIO_Init+0x300>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	4a5c      	ldr	r2, [pc, #368]	; (800508c <HAL_GPIO_Init+0x300>)
 8004f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f20:	6453      	str	r3, [r2, #68]	; 0x44
 8004f22:	4b5a      	ldr	r3, [pc, #360]	; (800508c <HAL_GPIO_Init+0x300>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a58      	ldr	r2, [pc, #352]	; (8005090 <HAL_GPIO_Init+0x304>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4f      	ldr	r2, [pc, #316]	; (8005094 <HAL_GPIO_Init+0x308>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d025      	beq.n	8004fa6 <HAL_GPIO_Init+0x21a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4e      	ldr	r2, [pc, #312]	; (8005098 <HAL_GPIO_Init+0x30c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <HAL_GPIO_Init+0x216>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a4d      	ldr	r2, [pc, #308]	; (800509c <HAL_GPIO_Init+0x310>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d019      	beq.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4c      	ldr	r2, [pc, #304]	; (80050a0 <HAL_GPIO_Init+0x314>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_GPIO_Init+0x20e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a4b      	ldr	r2, [pc, #300]	; (80050a4 <HAL_GPIO_Init+0x318>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00d      	beq.n	8004f96 <HAL_GPIO_Init+0x20a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4a      	ldr	r2, [pc, #296]	; (80050a8 <HAL_GPIO_Init+0x31c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0x206>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a49      	ldr	r2, [pc, #292]	; (80050ac <HAL_GPIO_Init+0x320>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_GPIO_Init+0x202>
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	e00c      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f8e:	2307      	movs	r3, #7
 8004f90:	e00a      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f92:	2305      	movs	r3, #5
 8004f94:	e008      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f96:	2304      	movs	r3, #4
 8004f98:	e006      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e004      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e002      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f002 0203 	and.w	r2, r2, #3
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	4093      	lsls	r3, r2
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb8:	4935      	ldr	r1, [pc, #212]	; (8005090 <HAL_GPIO_Init+0x304>)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fea:	4a31      	ldr	r2, [pc, #196]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800501a:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_GPIO_Init+0x324>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_GPIO_Init+0x324>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005068:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <HAL_GPIO_Init+0x324>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	f67f ae96 	bls.w	8004da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3724      	adds	r7, #36	; 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	40013800 	.word	0x40013800
 8005094:	40020000 	.word	0x40020000
 8005098:	40020400 	.word	0x40020400
 800509c:	40020800 	.word	0x40020800
 80050a0:	40020c00 	.word	0x40020c00
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40021400 	.word	0x40021400
 80050ac:	40021800 	.word	0x40021800
 80050b0:	40013c00 	.word	0x40013c00

080050b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]
 80050c0:	4613      	mov	r3, r2
 80050c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c4:	787b      	ldrb	r3, [r7, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050d0:	e003      	b.n	80050da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	041a      	lsls	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050fe:	4a05      	ldr	r2, [pc, #20]	; (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd f8aa 	bl	8002260 <HAL_GPIO_EXTI_Callback>
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e12b      	b.n	8005382 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd ffd4 	bl	80030ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800516a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800517a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800517c:	f003 fc60 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 8005180:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4a81      	ldr	r2, [pc, #516]	; (800538c <HAL_I2C_Init+0x274>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d807      	bhi.n	800519c <HAL_I2C_Init+0x84>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a80      	ldr	r2, [pc, #512]	; (8005390 <HAL_I2C_Init+0x278>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bf94      	ite	ls
 8005194:	2301      	movls	r3, #1
 8005196:	2300      	movhi	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e006      	b.n	80051aa <HAL_I2C_Init+0x92>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a7d      	ldr	r2, [pc, #500]	; (8005394 <HAL_I2C_Init+0x27c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	bf94      	ite	ls
 80051a4:	2301      	movls	r3, #1
 80051a6:	2300      	movhi	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0e7      	b.n	8005382 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a78      	ldr	r2, [pc, #480]	; (8005398 <HAL_I2C_Init+0x280>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0c9b      	lsrs	r3, r3, #18
 80051bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a6a      	ldr	r2, [pc, #424]	; (800538c <HAL_I2C_Init+0x274>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d802      	bhi.n	80051ec <HAL_I2C_Init+0xd4>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3301      	adds	r3, #1
 80051ea:	e009      	b.n	8005200 <HAL_I2C_Init+0xe8>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a69      	ldr	r2, [pc, #420]	; (800539c <HAL_I2C_Init+0x284>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	099b      	lsrs	r3, r3, #6
 80051fe:	3301      	adds	r3, #1
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005212:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	495c      	ldr	r1, [pc, #368]	; (800538c <HAL_I2C_Init+0x274>)
 800521c:	428b      	cmp	r3, r1
 800521e:	d819      	bhi.n	8005254 <HAL_I2C_Init+0x13c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e59      	subs	r1, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fbb1 f3f3 	udiv	r3, r1, r3
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005234:	400b      	ands	r3, r1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_I2C_Init+0x138>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1e59      	subs	r1, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fbb1 f3f3 	udiv	r3, r1, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524e:	e051      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 8005250:	2304      	movs	r3, #4
 8005252:	e04f      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d111      	bne.n	8005280 <HAL_I2C_Init+0x168>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1e58      	subs	r0, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	440b      	add	r3, r1
 800526a:	fbb0 f3f3 	udiv	r3, r0, r3
 800526e:	3301      	adds	r3, #1
 8005270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e012      	b.n	80052a6 <HAL_I2C_Init+0x18e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1e58      	subs	r0, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	0099      	lsls	r1, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	fbb0 f3f3 	udiv	r3, r0, r3
 8005296:	3301      	adds	r3, #1
 8005298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Init+0x196>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e022      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10e      	bne.n	80052d4 <HAL_I2C_Init+0x1bc>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1e58      	subs	r0, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	440b      	add	r3, r1
 80052c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c8:	3301      	adds	r3, #1
 80052ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	e00f      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1e58      	subs	r0, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	0099      	lsls	r1, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	6809      	ldr	r1, [r1, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6911      	ldr	r1, [r2, #16]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68d2      	ldr	r2, [r2, #12]
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	430b      	orrs	r3, r1
 8005336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	000186a0 	.word	0x000186a0
 8005390:	001e847f 	.word	0x001e847f
 8005394:	003d08ff 	.word	0x003d08ff
 8005398:	431bde83 	.word	0x431bde83
 800539c:	10624dd3 	.word	0x10624dd3

080053a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	461a      	mov	r2, r3
 80053ac:	460b      	mov	r3, r1
 80053ae:	817b      	strh	r3, [r7, #10]
 80053b0:	4613      	mov	r3, r2
 80053b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7fe faf0 	bl	8003998 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	f040 80e0 	bne.w	8005588 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2319      	movs	r3, #25
 80053ce:	2201      	movs	r2, #1
 80053d0:	4970      	ldr	r1, [pc, #448]	; (8005594 <HAL_I2C_Master_Transmit+0x1f4>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f003 f818 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
 80053e0:	e0d3      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0x50>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0cc      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d007      	beq.n	8005416 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2210      	movs	r2, #16
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	893a      	ldrh	r2, [r7, #8]
 8005446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a50      	ldr	r2, [pc, #320]	; (8005598 <HAL_I2C_Master_Transmit+0x1f8>)
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f002 fb4a 	bl	8007af8 <I2C_MasterRequestWrite>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e08d      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005484:	e066      	b.n	8005554 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f003 f892 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06b      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_I2C_Master_Transmit+0x188>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	6a39      	ldr	r1, [r7, #32]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f003 f882 	bl	8008636 <I2C_WaitOnBTFFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b04      	cmp	r3, #4
 800553e:	d107      	bne.n	8005550 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e01a      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d194      	bne.n	8005486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000

0800559c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	461a      	mov	r2, r3
 80055a8:	460b      	mov	r3, r1
 80055aa:	817b      	strh	r3, [r7, #10]
 80055ac:	4613      	mov	r3, r2
 80055ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b0:	f7fe f9f2 	bl	8003998 <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f040 820b 	bne.w	80059da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2319      	movs	r3, #25
 80055ca:	2201      	movs	r2, #1
 80055cc:	497c      	ldr	r1, [pc, #496]	; (80057c0 <HAL_I2C_Master_Receive+0x224>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f002 ff1a 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	e1fe      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_Master_Receive+0x50>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e1f7      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d007      	beq.n	8005612 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2222      	movs	r2, #34	; 0x22
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2210      	movs	r2, #16
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a5c      	ldr	r2, [pc, #368]	; (80057c4 <HAL_I2C_Master_Receive+0x228>)
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f002 face 	bl	8007bfc <I2C_MasterRequestRead>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1b8      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d113      	bne.n	800569a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005672:	2300      	movs	r3, #0
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e18c      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d11b      	bne.n	80056da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e16c      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d11b      	bne.n	800571a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	e14c      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005740:	e138      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	2b03      	cmp	r3, #3
 8005748:	f200 80f1 	bhi.w	800592e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005750:	2b01      	cmp	r3, #1
 8005752:	d123      	bne.n	800579c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f002 ffdf 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e139      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
 800579a:	e10b      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d14e      	bne.n	8005842 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2200      	movs	r2, #0
 80057ac:	4906      	ldr	r1, [pc, #24]	; (80057c8 <HAL_I2C_Master_Receive+0x22c>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f002 fe2a 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e10e      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
 80057be:	bf00      	nop
 80057c0:	00100002 	.word	0x00100002
 80057c4:	ffff0000 	.word	0xffff0000
 80057c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005840:	e0b8      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2200      	movs	r2, #0
 800584a:	4966      	ldr	r1, [pc, #408]	; (80059e4 <HAL_I2C_Master_Receive+0x448>)
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f002 fddb 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0bf      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	494f      	ldr	r1, [pc, #316]	; (80059e4 <HAL_I2C_Master_Receive+0x448>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f002 fdad 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e091      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800592c:	e042      	b.n	80059b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f002 fef2 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e04c      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d118      	bne.n	80059b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f aec2 	bne.w	8005742 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00010004 	.word	0x00010004

080059e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	817b      	strh	r3, [r7, #10]
 80059fa:	460b      	mov	r3, r1
 80059fc:	813b      	strh	r3, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a02:	f7fd ffc9 	bl	8003998 <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	f040 80d9 	bne.w	8005bc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	2319      	movs	r3, #25
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	496d      	ldr	r1, [pc, #436]	; (8005bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f002 fcf1 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e0cc      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Mem_Write+0x56>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0c5      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d007      	beq.n	8005a64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2221      	movs	r2, #33	; 0x21
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a4d      	ldr	r2, [pc, #308]	; (8005bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aa6:	88f8      	ldrh	r0, [r7, #6]
 8005aa8:	893a      	ldrh	r2, [r7, #8]
 8005aaa:	8979      	ldrh	r1, [r7, #10]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f002 f96e 	bl	8007d98 <I2C_RequestMemoryWrite>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d052      	beq.n	8005b68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e081      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f002 fd72 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d107      	bne.n	8005aee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e06b      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d11b      	bne.n	8005b68 <HAL_I2C_Mem_Write+0x180>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1aa      	bne.n	8005ac6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f002 fd5e 	bl	8008636 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00d      	beq.n	8005b9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d107      	bne.n	8005b98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e016      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	00100002 	.word	0x00100002
 8005bd8:	ffff0000 	.word	0xffff0000

08005bdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	; 0x30
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	461a      	mov	r2, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	817b      	strh	r3, [r7, #10]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	813b      	strh	r3, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bf6:	f7fd fecf 	bl	8003998 <HAL_GetTick>
 8005bfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	f040 8208 	bne.w	800601a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2319      	movs	r3, #25
 8005c10:	2201      	movs	r2, #1
 8005c12:	497b      	ldr	r1, [pc, #492]	; (8005e00 <HAL_I2C_Mem_Read+0x224>)
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f002 fbf7 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
 8005c22:	e1fb      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2C_Mem_Read+0x56>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e1f4      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d007      	beq.n	8005c58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2222      	movs	r2, #34	; 0x22
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a5b      	ldr	r2, [pc, #364]	; (8005e04 <HAL_I2C_Mem_Read+0x228>)
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c9a:	88f8      	ldrh	r0, [r7, #6]
 8005c9c:	893a      	ldrh	r2, [r7, #8]
 8005c9e:	8979      	ldrh	r1, [r7, #10]
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	4603      	mov	r3, r0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f002 f90a 	bl	8007ec4 <I2C_RequestMemoryRead>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e1b0      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e184      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d11b      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e164      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d11b      	bne.n	8005d6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	e144      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d80:	e138      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	f200 80f1 	bhi.w	8005f6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d123      	bne.n	8005ddc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f002 fcbf 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e139      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dda:	e10b      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d14e      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	2200      	movs	r2, #0
 8005dec:	4906      	ldr	r1, [pc, #24]	; (8005e08 <HAL_I2C_Mem_Read+0x22c>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f002 fb0a 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e10e      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
 8005dfe:	bf00      	nop
 8005e00:	00100002 	.word	0x00100002
 8005e04:	ffff0000 	.word	0xffff0000
 8005e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e80:	e0b8      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4966      	ldr	r1, [pc, #408]	; (8006024 <HAL_I2C_Mem_Read+0x448>)
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f002 fabb 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0bf      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	494f      	ldr	r1, [pc, #316]	; (8006024 <HAL_I2C_Mem_Read+0x448>)
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f002 fa8d 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e091      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f6c:	e042      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f002 fbd2 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e04c      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d118      	bne.n	8005ff4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f47f aec2 	bne.w	8005d82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	00010004 	.word	0x00010004

08006028 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08c      	sub	sp, #48	; 0x30
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	461a      	mov	r2, r3
 8006036:	4603      	mov	r3, r0
 8006038:	817b      	strh	r3, [r7, #10]
 800603a:	460b      	mov	r3, r1
 800603c:	813b      	strh	r3, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006042:	f7fd fca9 	bl	8003998 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b20      	cmp	r3, #32
 8006056:	f040 8176 	bne.w	8006346 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800605a:	4b95      	ldr	r3, [pc, #596]	; (80062b0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	08db      	lsrs	r3, r3, #3
 8006060:	4a94      	ldr	r2, [pc, #592]	; (80062b4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	0a1a      	lsrs	r2, r3, #8
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009a      	lsls	r2, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3b01      	subs	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d116      	bne.n	80060ae <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e14c      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d0db      	beq.n	8006074 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_I2C_Mem_Read_DMA+0xa2>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e13e      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d007      	beq.n	80060f0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2222      	movs	r2, #34	; 0x22
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a62      	ldr	r2, [pc, #392]	; (80062b8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006130:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006132:	897a      	ldrh	r2, [r7, #10]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006138:	893a      	ldrh	r2, [r7, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80cc 	beq.w	80062ec <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d02d      	beq.n	80061b8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	4a56      	ldr	r2, [pc, #344]	; (80062bc <HAL_I2C_Mem_Read_DMA+0x294>)
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	4a55      	ldr	r2, [pc, #340]	; (80062c0 <HAL_I2C_Mem_Read_DMA+0x298>)
 800616a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	2200      	movs	r2, #0
 800617a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	2200      	movs	r2, #0
 8006182:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	2200      	movs	r2, #0
 800618a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3310      	adds	r3, #16
 8006196:	4619      	mov	r1, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	461a      	mov	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	f7fe faf5 	bl	8004790 <HAL_DMA_Start_IT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 8087 	bne.w	80062c4 <HAL_I2C_Mem_Read_DMA+0x29c>
 80061b6:	e013      	b.n	80061e0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0b3      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80061e0:	88f8      	ldrh	r0, [r7, #6]
 80061e2:	893a      	ldrh	r2, [r7, #8]
 80061e4:	8979      	ldrh	r1, [r7, #10]
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	2323      	movs	r3, #35	; 0x23
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4603      	mov	r3, r0
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 fe67 	bl	8007ec4 <I2C_RequestMemoryRead>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d023      	beq.n	8006244 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fb1d 	bl	8004840 <HAL_DMA_Abort_IT>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	2200      	movs	r2, #0
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006222:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e081      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e007      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800626c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062aa:	605a      	str	r2, [r3, #4]
 80062ac:	e049      	b.n	8006342 <HAL_I2C_Mem_Read_DMA+0x31a>
 80062ae:	bf00      	nop
 80062b0:	20000004 	.word	0x20000004
 80062b4:	14f8b589 	.word	0x14f8b589
 80062b8:	ffff0000 	.word	0xffff0000
 80062bc:	08008095 	.word	0x08008095
 80062c0:	0800823f 	.word	0x0800823f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f043 0210 	orr.w	r2, r3, #16
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e02d      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80062ec:	88f8      	ldrh	r0, [r7, #6]
 80062ee:	893a      	ldrh	r2, [r7, #8]
 80062f0:	8979      	ldrh	r1, [r7, #10]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	2323      	movs	r3, #35	; 0x23
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4603      	mov	r3, r0
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f001 fde1 	bl	8007ec4 <I2C_RequestMemoryRead>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e01d      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e000      	b.n	8006348 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8006346:	2302      	movs	r3, #2
  }
}
 8006348:	4618      	mov	r0, r3
 800634a:	3728      	adds	r7, #40	; 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	460b      	mov	r3, r1
 800635e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7fd fb1a 	bl	8003998 <HAL_GetTick>
 8006364:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b20      	cmp	r3, #32
 8006374:	f040 8111 	bne.w	800659a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2319      	movs	r3, #25
 800637e:	2201      	movs	r2, #1
 8006380:	4988      	ldr	r1, [pc, #544]	; (80065a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f002 f840 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
 8006390:	e104      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_I2C_IsDeviceReady+0x50>
 800639c:	2302      	movs	r3, #2
 800639e:	e0fd      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d007      	beq.n	80063c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2224      	movs	r2, #36	; 0x24
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a70      	ldr	r2, [pc, #448]	; (80065a8 <HAL_I2C_IsDeviceReady+0x258>)
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f001 fffe 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006420:	d103      	bne.n	800642a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006428:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0b6      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800643c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800643e:	f7fd faab 	bl	8003998 <HAL_GetTick>
 8006442:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b02      	cmp	r3, #2
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006468:	bf0c      	ite	eq
 800646a:	2301      	moveq	r3, #1
 800646c:	2300      	movne	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006472:	e025      	b.n	80064c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006474:	f7fd fa90 	bl	8003998 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <HAL_I2C_IsDeviceReady+0x13a>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	22a0      	movs	r2, #160	; 0xa0
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2ba0      	cmp	r3, #160	; 0xa0
 80064ca:	d005      	beq.n	80064d8 <HAL_I2C_IsDeviceReady+0x188>
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <HAL_I2C_IsDeviceReady+0x188>
 80064d2:	7dbb      	ldrb	r3, [r7, #22]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0cd      	beq.n	8006474 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d129      	bne.n	8006542 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	2319      	movs	r3, #25
 800651a:	2201      	movs	r2, #1
 800651c:	4921      	ldr	r1, [pc, #132]	; (80065a4 <HAL_I2C_IsDeviceReady+0x254>)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f001 ff72 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e036      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e02c      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800655a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2319      	movs	r3, #25
 8006562:	2201      	movs	r2, #1
 8006564:	490f      	ldr	r1, [pc, #60]	; (80065a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f001 ff4e 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e012      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	3301      	adds	r3, #1
 800657a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	f4ff af32 	bcc.w	80063ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	00100002 	.word	0x00100002
 80065a8:	ffff0000 	.word	0xffff0000

080065ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d003      	beq.n	80065e4 <HAL_I2C_EV_IRQHandler+0x38>
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	f040 80b1 	bne.w	8006746 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <HAL_I2C_EV_IRQHandler+0x6e>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006604:	d003      	beq.n	800660e <HAL_I2C_EV_IRQHandler+0x62>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800660c:	d101      	bne.n	8006612 <HAL_I2C_EV_IRQHandler+0x66>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x68>
 8006612:	2300      	movs	r3, #0
 8006614:	2b01      	cmp	r3, #1
 8006616:	f000 8114 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_I2C_EV_IRQHandler+0x90>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800662a:	2b00      	cmp	r3, #0
 800662c:	d006      	beq.n	800663c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f002 f8f9 	bl	8008826 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fcb5 	bl	8006fa4 <I2C_Master_SB>
 800663a:	e083      	b.n	8006744 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <HAL_I2C_EV_IRQHandler+0xac>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fd2d 	bl	80070b0 <I2C_Master_ADD10>
 8006656:	e075      	b.n	8006744 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <HAL_I2C_EV_IRQHandler+0xc8>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd49 	bl	8007104 <I2C_Master_ADDR>
 8006672:	e067      	b.n	8006744 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d036      	beq.n	80066ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668c:	f000 80db 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f92d 	bl	800690e <I2C_MasterTransmit_TXE>
 80066b4:	e046      	b.n	8006744 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80c2 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80bc 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b21      	cmp	r3, #33	; 0x21
 80066d2:	d103      	bne.n	80066dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f9b6 	bl	8006a46 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066da:	e0b4      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	f040 80b1 	bne.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa24 	bl	8006b32 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066ea:	e0ac      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fa:	f000 80a4 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00d      	beq.n	8006724 <HAL_I2C_EV_IRQHandler+0x178>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <HAL_I2C_EV_IRQHandler+0x178>
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fa9c 	bl	8006c5a <I2C_MasterReceive_RXNE>
 8006722:	e00f      	b.n	8006744 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 808b 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 8085 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb47 	bl	8006dd0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006742:	e080      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
 8006744:	e07f      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	e007      	b.n	8006768 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800678c:	69b9      	ldr	r1, [r7, #24]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ff07 	bl	80075a2 <I2C_Slave_ADDR>
 8006794:	e05a      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_I2C_EV_IRQHandler+0x206>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 ff42 	bl	8007634 <I2C_Slave_STOPF>
 80067b0:	e04c      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b21      	cmp	r3, #33	; 0x21
 80067b6:	d002      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0x212>
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b29      	cmp	r3, #41	; 0x29
 80067bc:	d120      	bne.n	8006800 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <HAL_I2C_EV_IRQHandler+0x238>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_I2C_EV_IRQHandler+0x238>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fe22 	bl	8007426 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067e2:	e032      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02d      	beq.n	800684a <HAL_I2C_EV_IRQHandler+0x29e>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d028      	beq.n	800684a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fe51 	bl	80074a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067fe:	e024      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <HAL_I2C_EV_IRQHandler+0x27a>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_I2C_EV_IRQHandler+0x27a>
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fe5f 	bl	80074e2 <I2C_SlaveReceive_RXNE>
 8006824:	e012      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00d      	beq.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fe8f 	bl	800755e <I2C_SlaveReceive_BTF>
 8006840:	e004      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800684a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
 80068ae:	4613      	mov	r3, r2
 80068b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006924:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d150      	bne.n	80069d6 <I2C_MasterTransmit_TXE+0xc8>
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b21      	cmp	r3, #33	; 0x21
 8006938:	d14d      	bne.n	80069d6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d01d      	beq.n	800697c <I2C_MasterTransmit_TXE+0x6e>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b20      	cmp	r3, #32
 8006944:	d01a      	beq.n	800697c <I2C_MasterTransmit_TXE+0x6e>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800694c:	d016      	beq.n	800697c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800695c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2211      	movs	r2, #17
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ff6c 	bl	8006852 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800697a:	e060      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800698a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d107      	bne.n	80069c6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff87 	bl	80068d2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069c4:	e03b      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ff3f 	bl	8006852 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069d4:	e033      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b21      	cmp	r3, #33	; 0x21
 80069da:	d005      	beq.n	80069e8 <I2C_MasterTransmit_TXE+0xda>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d12d      	bne.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b22      	cmp	r3, #34	; 0x22
 80069e6:	d12a      	bne.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d108      	bne.n	8006a04 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a02:	e01c      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d103      	bne.n	8006a18 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f88e 	bl	8006b32 <I2C_MemoryTransmit_TXE_BTF>
}
 8006a16:	e012      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a3c:	e7ff      	b.n	8006a3e <I2C_MasterTransmit_TXE+0x130>
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b21      	cmp	r3, #33	; 0x21
 8006a5e:	d164      	bne.n	8006b2a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d012      	beq.n	8006a90 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006a8e:	e04c      	b.n	8006b2a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d01d      	beq.n	8006ad2 <I2C_MasterTransmit_BTF+0x8c>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d01a      	beq.n	8006ad2 <I2C_MasterTransmit_BTF+0x8c>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aa2:	d016      	beq.n	8006ad2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ab2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2211      	movs	r2, #17
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fec1 	bl	8006852 <HAL_I2C_MasterTxCpltCallback>
}
 8006ad0:	e02b      	b.n	8006b2a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ae0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d107      	bne.n	8006b1c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff fedc 	bl	80068d2 <HAL_I2C_MemTxCpltCallback>
}
 8006b1a:	e006      	b.n	8006b2a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fe94 	bl	8006852 <HAL_I2C_MasterTxCpltCallback>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11d      	bne.n	8006b86 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10b      	bne.n	8006b6a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006b68:	e073      	b.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	121b      	asrs	r3, r3, #8
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b84:	e065      	b.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10b      	bne.n	8006ba6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ba4:	e055      	b.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d151      	bne.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b22      	cmp	r3, #34	; 0x22
 8006bb2:	d10d      	bne.n	8006bd0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bce:	e040      	b.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d015      	beq.n	8006c06 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b21      	cmp	r3, #33	; 0x21
 8006bde:	d112      	bne.n	8006c06 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c04:	e025      	b.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d120      	bne.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b21      	cmp	r3, #33	; 0x21
 8006c14:	d11d      	bne.n	8006c52 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c24:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c34:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fe40 	bl	80068d2 <HAL_I2C_MemTxCpltCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b22      	cmp	r3, #34	; 0x22
 8006c6c:	f040 80ac 	bne.w	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d921      	bls.n	8006cc2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	f040 808c 	bne.w	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006cc0:	e082      	b.n	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d075      	beq.n	8006db6 <I2C_MasterReceive_RXNE+0x15c>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d002      	beq.n	8006cd6 <I2C_MasterReceive_RXNE+0x7c>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d16f      	bne.n	8006db6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fcee 	bl	80086b8 <I2C_WaitOnSTOPRequestThroughIT>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d142      	bne.n	8006d68 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d10a      	bne.n	8006d52 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb faae 	bl	80022ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d50:	e03a      	b.n	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2212      	movs	r2, #18
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fd80 	bl	8006866 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d66:	e02f      	b.n	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d76:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fd99 	bl	80068e6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006db4:	e008      	b.n	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc4:	605a      	str	r2, [r3, #4]
}
 8006dc6:	e7ff      	b.n	8006dc8 <I2C_MasterReceive_RXNE+0x16e>
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d11b      	bne.n	8006e20 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006e1e:	e0bd      	b.n	8006f9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d129      	bne.n	8006e7e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d00a      	beq.n	8006e56 <I2C_MasterReceive_BTF+0x86>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d007      	beq.n	8006e56 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e7c:	e08e      	b.n	8006f9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d176      	bne.n	8006f76 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d002      	beq.n	8006e94 <I2C_MasterReceive_BTF+0xc4>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d108      	bne.n	8006ea6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e019      	b.n	8006eda <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d002      	beq.n	8006eb2 <I2C_MasterReceive_BTF+0xe2>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d108      	bne.n	8006ec4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e00a      	b.n	8006eda <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b10      	cmp	r3, #16
 8006ec8:	d007      	beq.n	8006eda <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d10a      	bne.n	8006f60 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fb f9a7 	bl	80022ac <HAL_I2C_MemRxCpltCallback>
}
 8006f5e:	e01d      	b.n	8006f9c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2212      	movs	r2, #18
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fc79 	bl	8006866 <HAL_I2C_MasterRxCpltCallback>
}
 8006f74:	e012      	b.n	8006f9c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d117      	bne.n	8006fe8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fd0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006fd2:	e067      	b.n	80070a4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	611a      	str	r2, [r3, #16]
}
 8006fe6:	e05d      	b.n	80070a4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff0:	d133      	bne.n	800705a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b21      	cmp	r3, #33	; 0x21
 8006ffc:	d109      	bne.n	8007012 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800700e:	611a      	str	r2, [r3, #16]
 8007010:	e008      	b.n	8007024 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <I2C_Master_SB+0x92>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d108      	bne.n	8007048 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	2b00      	cmp	r3, #0
 800703c:	d032      	beq.n	80070a4 <I2C_Master_SB+0x100>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02d      	beq.n	80070a4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007056:	605a      	str	r2, [r3, #4]
}
 8007058:	e024      	b.n	80070a4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10e      	bne.n	8007080 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	b29b      	uxth	r3, r3
 8007068:	11db      	asrs	r3, r3, #7
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 0306 	and.w	r3, r3, #6
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f063 030f 	orn	r3, r3, #15
 8007076:	b2da      	uxtb	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	611a      	str	r2, [r3, #16]
}
 800707e:	e011      	b.n	80070a4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10d      	bne.n	80070a4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	b29b      	uxth	r3, r3
 800708e:	11db      	asrs	r3, r3, #7
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 0306 	and.w	r3, r3, #6
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f063 030e 	orn	r3, r3, #14
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <I2C_Master_ADD10+0x26>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d108      	bne.n	80070e8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00c      	beq.n	80070f8 <I2C_Master_ADD10+0x48>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007104:	b480      	push	{r7}
 8007106:	b091      	sub	sp, #68	; 0x44
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b22      	cmp	r3, #34	; 0x22
 800712c:	f040 8169 	bne.w	8007402 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <I2C_Master_ADDR+0x54>
 8007138:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d10b      	bne.n	8007158 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007140:	2300      	movs	r3, #0
 8007142:	633b      	str	r3, [r7, #48]	; 0x30
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	633b      	str	r3, [r7, #48]	; 0x30
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	633b      	str	r3, [r7, #48]	; 0x30
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	e160      	b.n	800741a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11d      	bne.n	800719c <I2C_Master_ADDR+0x98>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007168:	d118      	bne.n	800719c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800716a:	2300      	movs	r3, #0
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	651a      	str	r2, [r3, #80]	; 0x50
 800719a:	e13e      	b.n	800741a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d113      	bne.n	80071ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a6:	2300      	movs	r3, #0
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e115      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 808a 	bne.w	80072ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071e0:	d137      	bne.n	8007252 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007200:	d113      	bne.n	800722a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007210:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	e0e7      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e0d3      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	2b08      	cmp	r3, #8
 8007256:	d02e      	beq.n	80072b6 <I2C_Master_ADDR+0x1b2>
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	2b20      	cmp	r3, #32
 800725c:	d02b      	beq.n	80072b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	2b12      	cmp	r3, #18
 8007262:	d102      	bne.n	800726a <I2C_Master_ADDR+0x166>
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	2b01      	cmp	r3, #1
 8007268:	d125      	bne.n	80072b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	2b04      	cmp	r3, #4
 800726e:	d00e      	beq.n	800728e <I2C_Master_ADDR+0x18a>
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2b02      	cmp	r3, #2
 8007274:	d00b      	beq.n	800728e <I2C_Master_ADDR+0x18a>
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	2b10      	cmp	r3, #16
 800727a:	d008      	beq.n	800728e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e007      	b.n	800729e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800729c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	e0a1      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e085      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d14d      	bne.n	8007394 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d016      	beq.n	800732c <I2C_Master_ADDR+0x228>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	2b02      	cmp	r3, #2
 8007302:	d013      	beq.n	800732c <I2C_Master_ADDR+0x228>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b10      	cmp	r3, #16
 8007308:	d010      	beq.n	800732c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007318:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e007      	b.n	800733c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800733a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734a:	d117      	bne.n	800737c <I2C_Master_ADDR+0x278>
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007352:	d00b      	beq.n	800736c <I2C_Master_ADDR+0x268>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	2b01      	cmp	r3, #1
 8007358:	d008      	beq.n	800736c <I2C_Master_ADDR+0x268>
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b08      	cmp	r3, #8
 800735e:	d005      	beq.n	800736c <I2C_Master_ADDR+0x268>
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	2b10      	cmp	r3, #16
 8007364:	d002      	beq.n	800736c <I2C_Master_ADDR+0x268>
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b20      	cmp	r3, #32
 800736a:	d107      	bne.n	800737c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800737a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	e032      	b.n	80073fa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073a2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b2:	d117      	bne.n	80073e4 <I2C_Master_ADDR+0x2e0>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073ba:	d00b      	beq.n	80073d4 <I2C_Master_ADDR+0x2d0>
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d008      	beq.n	80073d4 <I2C_Master_ADDR+0x2d0>
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d005      	beq.n	80073d4 <I2C_Master_ADDR+0x2d0>
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d002      	beq.n	80073d4 <I2C_Master_ADDR+0x2d0>
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d107      	bne.n	80073e4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007400:	e00b      	b.n	800741a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
}
 8007418:	e7ff      	b.n	800741a <I2C_Master_ADDR+0x316>
 800741a:	bf00      	nop
 800741c:	3744      	adds	r7, #68	; 0x44
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007434:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02b      	beq.n	8007498 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d114      	bne.n	8007498 <I2C_SlaveTransmit_TXE+0x72>
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b29      	cmp	r3, #41	; 0x29
 8007472:	d111      	bne.n	8007498 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007482:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2221      	movs	r2, #33	; 0x21
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2228      	movs	r2, #40	; 0x28
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff f9f1 	bl	800687a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d011      	beq.n	80074d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02c      	beq.n	8007556 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d114      	bne.n	8007556 <I2C_SlaveReceive_RXNE+0x74>
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d111      	bne.n	8007556 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007540:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2222      	movs	r2, #34	; 0x22
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2228      	movs	r2, #40	; 0x28
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff f99c 	bl	800688e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d012      	beq.n	8007596 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075bc:	2b28      	cmp	r3, #40	; 0x28
 80075be:	d125      	bne.n	800760c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	81bb      	strh	r3, [r7, #12]
 80075ee:	e002      	b.n	80075f6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80075fe:	89ba      	ldrh	r2, [r7, #12]
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff f94c 	bl	80068a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800760a:	e00e      	b.n	800762a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800760c:	2300      	movs	r3, #0
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007642:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007652:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007654:	2300      	movs	r3, #0
 8007656:	60bb      	str	r3, [r7, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	60bb      	str	r3, [r7, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007680:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007690:	d172      	bne.n	8007778 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b22      	cmp	r3, #34	; 0x22
 8007696:	d002      	beq.n	800769e <I2C_Slave_STOPF+0x6a>
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b2a      	cmp	r3, #42	; 0x2a
 800769c:	d135      	bne.n	800770a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f043 0204 	orr.w	r2, r3, #4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd fa5e 	bl	8004b98 <HAL_DMA_GetState>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d049      	beq.n	8007776 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	4a69      	ldr	r2, [pc, #420]	; (800788c <I2C_Slave_STOPF+0x258>)
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fd f8a6 	bl	8004840 <HAL_DMA_Abort_IT>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d03d      	beq.n	8007776 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007708:	e035      	b.n	8007776 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800773c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	4618      	mov	r0, r3
 8007744:	f7fd fa28 	bl	8004b98 <HAL_DMA_GetState>
 8007748:	4603      	mov	r3, r0
 800774a:	2b01      	cmp	r3, #1
 800774c:	d014      	beq.n	8007778 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	4a4e      	ldr	r2, [pc, #312]	; (800788c <I2C_Slave_STOPF+0x258>)
 8007754:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd f870 	bl	8004840 <HAL_DMA_Abort_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	e000      	b.n	8007778 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007776:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d03e      	beq.n	8007800 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b04      	cmp	r3, #4
 800778e:	d112      	bne.n	80077b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d112      	bne.n	80077ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	f043 0204 	orr.w	r2, r3, #4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f843 	bl	8007894 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800780e:	e039      	b.n	8007884 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b2a      	cmp	r3, #42	; 0x2a
 8007814:	d109      	bne.n	800782a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2228      	movs	r2, #40	; 0x28
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff f832 	bl	800688e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b28      	cmp	r3, #40	; 0x28
 8007834:	d111      	bne.n	800785a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a15      	ldr	r2, [pc, #84]	; (8007890 <I2C_Slave_STOPF+0x25c>)
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff f833 	bl	80068be <HAL_I2C_ListenCpltCallback>
}
 8007858:	e014      	b.n	8007884 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	2b22      	cmp	r3, #34	; 0x22
 8007860:	d002      	beq.n	8007868 <I2C_Slave_STOPF+0x234>
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b22      	cmp	r3, #34	; 0x22
 8007866:	d10d      	bne.n	8007884 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff f805 	bl	800688e <HAL_I2C_SlaveRxCpltCallback>
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	080082b9 	.word	0x080082b9
 8007890:	ffff0000 	.word	0xffff0000

08007894 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d002      	beq.n	80078b8 <I2C_ITError+0x24>
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d10a      	bne.n	80078ce <I2C_ITError+0x3a>
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b22      	cmp	r3, #34	; 0x22
 80078bc:	d107      	bne.n	80078ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078d4:	2b28      	cmp	r3, #40	; 0x28
 80078d6:	d107      	bne.n	80078e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2228      	movs	r2, #40	; 0x28
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078e6:	e015      	b.n	8007914 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f6:	d00a      	beq.n	800790e <I2C_ITError+0x7a>
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b60      	cmp	r3, #96	; 0x60
 80078fc:	d007      	beq.n	800790e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800791e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007922:	d162      	bne.n	80079ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007932:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d020      	beq.n	8007984 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	4a6a      	ldr	r2, [pc, #424]	; (8007af0 <I2C_ITError+0x25c>)
 8007948:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc ff76 	bl	8004840 <HAL_DMA_Abort_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8089 	beq.w	8007a6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800797e:	4610      	mov	r0, r2
 8007980:	4798      	blx	r3
 8007982:	e074      	b.n	8007a6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	4a59      	ldr	r2, [pc, #356]	; (8007af0 <I2C_ITError+0x25c>)
 800798a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	4618      	mov	r0, r3
 8007992:	f7fc ff55 	bl	8004840 <HAL_DMA_Abort_IT>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d068      	beq.n	8007a6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d10b      	bne.n	80079c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	e041      	b.n	8007a6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b60      	cmp	r3, #96	; 0x60
 80079f4:	d125      	bne.n	8007a42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d10b      	bne.n	8007a2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fe ff5d 	bl	80068fa <HAL_I2C_AbortCpltCallback>
 8007a40:	e015      	b.n	8007a6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d10b      	bne.n	8007a68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fe ff3c 	bl	80068e6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10e      	bne.n	8007a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aaa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d113      	bne.n	8007ae8 <I2C_ITError+0x254>
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b28      	cmp	r3, #40	; 0x28
 8007ac4:	d110      	bne.n	8007ae8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <I2C_ITError+0x260>)
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fe feeb 	bl	80068be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	080082b9 	.word	0x080082b9
 8007af4:	ffff0000 	.word	0xffff0000

08007af8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	460b      	mov	r3, r1
 8007b06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d006      	beq.n	8007b22 <I2C_MasterRequestWrite+0x2a>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d003      	beq.n	8007b22 <I2C_MasterRequestWrite+0x2a>
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b20:	d108      	bne.n	8007b34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	e00b      	b.n	8007b4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	2b12      	cmp	r3, #18
 8007b3a:	d107      	bne.n	8007b4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fc55 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00d      	beq.n	8007b80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b72:	d103      	bne.n	8007b7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e035      	b.n	8007bec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b88:	d108      	bne.n	8007b9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8a:	897b      	ldrh	r3, [r7, #10]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	e01b      	b.n	8007bd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b9c:	897b      	ldrh	r3, [r7, #10]
 8007b9e:	11db      	asrs	r3, r3, #7
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f003 0306 	and.w	r3, r3, #6
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f063 030f 	orn	r3, r3, #15
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	490e      	ldr	r1, [pc, #56]	; (8007bf4 <I2C_MasterRequestWrite+0xfc>)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fc7b 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e010      	b.n	8007bec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4907      	ldr	r1, [pc, #28]	; (8007bf8 <I2C_MasterRequestWrite+0x100>)
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fc6b 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e000      	b.n	8007bec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	00010008 	.word	0x00010008
 8007bf8:	00010002 	.word	0x00010002

08007bfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d006      	beq.n	8007c36 <I2C_MasterRequestRead+0x3a>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d003      	beq.n	8007c36 <I2C_MasterRequestRead+0x3a>
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c34:	d108      	bne.n	8007c48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e00b      	b.n	8007c60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	2b11      	cmp	r3, #17
 8007c4e:	d107      	bne.n	8007c60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fbcb 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	d103      	bne.n	8007c90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e079      	b.n	8007d88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c9c:	d108      	bne.n	8007cb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	611a      	str	r2, [r3, #16]
 8007cae:	e05f      	b.n	8007d70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cb0:	897b      	ldrh	r3, [r7, #10]
 8007cb2:	11db      	asrs	r3, r3, #7
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 0306 	and.w	r3, r3, #6
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f063 030f 	orn	r3, r3, #15
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4930      	ldr	r1, [pc, #192]	; (8007d90 <I2C_MasterRequestRead+0x194>)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fbf1 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e054      	b.n	8007d88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007cde:	897b      	ldrh	r3, [r7, #10]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4929      	ldr	r1, [pc, #164]	; (8007d94 <I2C_MasterRequestRead+0x198>)
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fbe1 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e044      	b.n	8007d88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 fb69 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00d      	beq.n	8007d58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4a:	d103      	bne.n	8007d54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e017      	b.n	8007d88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007d58:	897b      	ldrh	r3, [r7, #10]
 8007d5a:	11db      	asrs	r3, r3, #7
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0306 	and.w	r3, r3, #6
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f063 030e 	orn	r3, r3, #14
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <I2C_MasterRequestRead+0x198>)
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fb9d 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	00010008 	.word	0x00010008
 8007d94:	00010002 	.word	0x00010002

08007d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	4608      	mov	r0, r1
 8007da2:	4611      	mov	r1, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	4603      	mov	r3, r0
 8007da8:	817b      	strh	r3, [r7, #10]
 8007daa:	460b      	mov	r3, r1
 8007dac:	813b      	strh	r3, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fb1a 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de8:	d103      	bne.n	8007df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e05f      	b.n	8007eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007df6:	897b      	ldrh	r3, [r7, #10]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	492d      	ldr	r1, [pc, #180]	; (8007ec0 <I2C_RequestMemoryWrite+0x128>)
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fb52 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e04c      	b.n	8007eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e34:	6a39      	ldr	r1, [r7, #32]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fbbc 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d107      	bne.n	8007e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e02b      	b.n	8007eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d105      	bne.n	8007e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	611a      	str	r2, [r3, #16]
 8007e6e:	e021      	b.n	8007eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e70:	893b      	ldrh	r3, [r7, #8]
 8007e72:	0a1b      	lsrs	r3, r3, #8
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e80:	6a39      	ldr	r1, [r7, #32]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fb96 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d107      	bne.n	8007ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e005      	b.n	8007eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	00010002 	.word	0x00010002

08007ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	4608      	mov	r0, r1
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	817b      	strh	r3, [r7, #10]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	813b      	strh	r3, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fa7c 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00d      	beq.n	8007f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f24:	d103      	bne.n	8007f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e0aa      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f32:	897b      	ldrh	r3, [r7, #10]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	4952      	ldr	r1, [pc, #328]	; (8008090 <I2C_RequestMemoryRead+0x1cc>)
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fab4 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e097      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f70:	6a39      	ldr	r1, [r7, #32]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fb1e 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d107      	bne.n	8007f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e076      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d105      	bne.n	8007fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa0:	893b      	ldrh	r3, [r7, #8]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	611a      	str	r2, [r3, #16]
 8007faa:	e021      	b.n	8007ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fac:	893b      	ldrh	r3, [r7, #8]
 8007fae:	0a1b      	lsrs	r3, r3, #8
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbc:	6a39      	ldr	r1, [r7, #32]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 faf8 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00d      	beq.n	8007fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d107      	bne.n	8007fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e050      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fe6:	893b      	ldrh	r3, [r7, #8]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff2:	6a39      	ldr	r1, [r7, #32]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fadd 	bl	80085b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00d      	beq.n	800801c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	2b04      	cmp	r3, #4
 8008006:	d107      	bne.n	8008018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e035      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800802a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	2200      	movs	r2, #0
 8008034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f9e5 	bl	8008408 <I2C_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	d103      	bne.n	800805c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800805a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e013      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008060:	897b      	ldrh	r3, [r7, #10]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f043 0301 	orr.w	r3, r3, #1
 8008068:	b2da      	uxtb	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	4906      	ldr	r1, [pc, #24]	; (8008090 <I2C_RequestMemoryRead+0x1cc>)
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fa1d 	bl	80084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e000      	b.n	8008088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	00010002 	.word	0x00010002

08008094 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d4:	2200      	movs	r2, #0
 80080d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	2200      	movs	r2, #0
 80080e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80080e8:	7cfb      	ldrb	r3, [r7, #19]
 80080ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80080ee:	2b21      	cmp	r3, #33	; 0x21
 80080f0:	d007      	beq.n	8008102 <I2C_DMAXferCplt+0x6e>
 80080f2:	7cfb      	ldrb	r3, [r7, #19]
 80080f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80080f8:	2b22      	cmp	r3, #34	; 0x22
 80080fa:	d131      	bne.n	8008160 <I2C_DMAXferCplt+0xcc>
 80080fc:	7cbb      	ldrb	r3, [r7, #18]
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d12e      	bne.n	8008160 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008110:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2200      	movs	r2, #0
 8008116:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008118:	7cfb      	ldrb	r3, [r7, #19]
 800811a:	2b29      	cmp	r3, #41	; 0x29
 800811c:	d10a      	bne.n	8008134 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2221      	movs	r2, #33	; 0x21
 8008122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2228      	movs	r2, #40	; 0x28
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800812c:	6978      	ldr	r0, [r7, #20]
 800812e:	f7fe fba4 	bl	800687a <HAL_I2C_SlaveTxCpltCallback>
 8008132:	e00c      	b.n	800814e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d109      	bne.n	800814e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2222      	movs	r2, #34	; 0x22
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2228      	movs	r2, #40	; 0x28
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008148:	6978      	ldr	r0, [r7, #20]
 800814a:	f7fe fba0 	bl	800688e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800815c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800815e:	e06a      	b.n	8008236 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d064      	beq.n	8008236 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	d107      	bne.n	8008186 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008184:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008194:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800819c:	d009      	beq.n	80081b2 <I2C_DMAXferCplt+0x11e>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d006      	beq.n	80081b2 <I2C_DMAXferCplt+0x11e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081aa:	d002      	beq.n	80081b2 <I2C_DMAXferCplt+0x11e>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d107      	bne.n	80081c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2200      	movs	r2, #0
 80081e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80081f0:	6978      	ldr	r0, [r7, #20]
 80081f2:	f7fe fb78 	bl	80068e6 <HAL_I2C_ErrorCallback>
}
 80081f6:	e01e      	b.n	8008236 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d10a      	bne.n	8008222 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2200      	movs	r2, #0
 8008218:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f7fa f846 	bl	80022ac <HAL_I2C_MemRxCpltCallback>
}
 8008220:	e009      	b.n	8008236 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2212      	movs	r2, #18
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008230:	6978      	ldr	r0, [r7, #20]
 8008232:	f7fe fb18 	bl	8006866 <HAL_I2C_MasterRxCpltCallback>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008258:	2200      	movs	r2, #0
 800825a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	2200      	movs	r2, #0
 800826a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7fc fca1 	bl	8004bb4 <HAL_DMA_GetError>
 8008272:	4603      	mov	r3, r0
 8008274:	2b02      	cmp	r3, #2
 8008276:	d01b      	beq.n	80082b0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008286:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f043 0210 	orr.w	r2, r3, #16
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7fe fb1b 	bl	80068e6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <I2C_DMAAbort+0x148>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	08db      	lsrs	r3, r3, #3
 80082d8:	4a4a      	ldr	r2, [pc, #296]	; (8008404 <I2C_DMAAbort+0x14c>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	0a1a      	lsrs	r2, r3, #8
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	00da      	lsls	r2, r3, #3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80082fe:	e00a      	b.n	8008316 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3b01      	subs	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008314:	d0ea      	beq.n	80082ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	2200      	movs	r2, #0
 8008324:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	2200      	movs	r2, #0
 8008334:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008344:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	2200      	movs	r2, #0
 800835a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	2200      	movs	r2, #0
 800836a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0201 	bic.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b60      	cmp	r3, #96	; 0x60
 8008386:	d10e      	bne.n	80083a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2200      	movs	r2, #0
 800839c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f7fe faab 	bl	80068fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083a4:	e027      	b.n	80083f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083a6:	7cfb      	ldrb	r3, [r7, #19]
 80083a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083ac:	2b28      	cmp	r3, #40	; 0x28
 80083ae:	d117      	bne.n	80083e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2200      	movs	r2, #0
 80083d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2228      	movs	r2, #40	; 0x28
 80083da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083de:	e007      	b.n	80083f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80083f0:	6978      	ldr	r0, [r7, #20]
 80083f2:	f7fe fa78 	bl	80068e6 <HAL_I2C_ErrorCallback>
}
 80083f6:	bf00      	nop
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000004 	.word	0x20000004
 8008404:	14f8b589 	.word	0x14f8b589

08008408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008418:	e025      	b.n	8008466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008420:	d021      	beq.n	8008466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008422:	f7fb fab9 	bl	8003998 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d302      	bcc.n	8008438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d116      	bne.n	8008466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f043 0220 	orr.w	r2, r3, #32
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e023      	b.n	80084ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	0c1b      	lsrs	r3, r3, #16
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d10d      	bne.n	800848c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	43da      	mvns	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4013      	ands	r3, r2
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	bf0c      	ite	eq
 8008482:	2301      	moveq	r3, #1
 8008484:	2300      	movne	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	e00c      	b.n	80084a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	43da      	mvns	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4013      	ands	r3, r2
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf0c      	ite	eq
 800849e:	2301      	moveq	r3, #1
 80084a0:	2300      	movne	r3, #0
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d0b6      	beq.n	800841a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084c4:	e051      	b.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d123      	bne.n	800851e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	f043 0204 	orr.w	r2, r3, #4
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e046      	b.n	80085ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d021      	beq.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008526:	f7fb fa37 	bl	8003998 <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d116      	bne.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f043 0220 	orr.w	r2, r3, #32
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e020      	b.n	80085ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	0c1b      	lsrs	r3, r3, #16
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	43da      	mvns	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4013      	ands	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	bf14      	ite	ne
 8008586:	2301      	movne	r3, #1
 8008588:	2300      	moveq	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	e00b      	b.n	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	43da      	mvns	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4013      	ands	r3, r2
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf14      	ite	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	2300      	moveq	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d18d      	bne.n	80084c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085c0:	e02d      	b.n	800861e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f900 	bl	80087c8 <I2C_IsAcknowledgeFailed>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e02d      	b.n	800862e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d021      	beq.n	800861e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085da:	f7fb f9dd 	bl	8003998 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d302      	bcc.n	80085f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d116      	bne.n	800861e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	f043 0220 	orr.w	r2, r3, #32
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e007      	b.n	800862e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d1ca      	bne.n	80085c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008642:	e02d      	b.n	80086a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f8bf 	bl	80087c8 <I2C_IsAcknowledgeFailed>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e02d      	b.n	80086b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d021      	beq.n	80086a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800865c:	f7fb f99c 	bl	8003998 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d116      	bne.n	80086a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	f043 0220 	orr.w	r2, r3, #32
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e007      	b.n	80086b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d1ca      	bne.n	8008644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	08db      	lsrs	r3, r3, #3
 80086ca:	4a13      	ldr	r2, [pc, #76]	; (8008718 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	0a1a      	lsrs	r2, r3, #8
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b01      	subs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d107      	bne.n	80086f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f043 0220 	orr.w	r2, r3, #32
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e008      	b.n	8008708 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008704:	d0e9      	beq.n	80086da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20000004 	.word	0x20000004
 8008718:	14f8b589 	.word	0x14f8b589

0800871c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008728:	e042      	b.n	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b10      	cmp	r3, #16
 8008736:	d119      	bne.n	800876c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0210 	mvn.w	r2, #16
 8008740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e029      	b.n	80087c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876c:	f7fb f914 	bl	8003998 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	d302      	bcc.n	8008782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e007      	b.n	80087c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d1b5      	bne.n	800872a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087de:	d11b      	bne.n	8008818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	f043 0204 	orr.w	r2, r3, #4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008836:	d103      	bne.n	8008840 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800883e:	e007      	b.n	8008850 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008848:	d102      	bne.n	8008850 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2208      	movs	r2, #8
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e0cc      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008870:	4b68      	ldr	r3, [pc, #416]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d90c      	bls.n	8008898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887e:	4b65      	ldr	r3, [pc, #404]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008886:	4b63      	ldr	r3, [pc, #396]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d001      	beq.n	8008898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e0b8      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d020      	beq.n	80088e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088b0:	4b59      	ldr	r3, [pc, #356]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	4a58      	ldr	r2, [pc, #352]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088c8:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4a52      	ldr	r2, [pc, #328]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088d4:	4b50      	ldr	r3, [pc, #320]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	494d      	ldr	r1, [pc, #308]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d044      	beq.n	800897c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088fa:	4b47      	ldr	r3, [pc, #284]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d119      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e07f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d003      	beq.n	800891a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008916:	2b03      	cmp	r3, #3
 8008918:	d107      	bne.n	800892a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800891a:	4b3f      	ldr	r3, [pc, #252]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e06f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	4b3b      	ldr	r3, [pc, #236]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e067      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f023 0203 	bic.w	r2, r3, #3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	4934      	ldr	r1, [pc, #208]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 8008948:	4313      	orrs	r3, r2
 800894a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800894c:	f7fb f824 	bl	8003998 <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008952:	e00a      	b.n	800896a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008954:	f7fb f820 	bl	8003998 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008962:	4293      	cmp	r3, r2
 8008964:	d901      	bls.n	800896a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e04f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896a:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 020c 	and.w	r2, r3, #12
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	429a      	cmp	r2, r3
 800897a:	d1eb      	bne.n	8008954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800897c:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d20c      	bcs.n	80089a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e032      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	4916      	ldr	r1, [pc, #88]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	490e      	ldr	r1, [pc, #56]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089e2:	f000 f887 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	490a      	ldr	r1, [pc, #40]	; (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 80089f4:	5ccb      	ldrb	r3, [r1, r3]
 80089f6:	fa22 f303 	lsr.w	r3, r2, r3
 80089fa:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fa fdc2 	bl	800358c <HAL_InitTick>

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40023c00 	.word	0x40023c00
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	08014568 	.word	0x08014568
 8008a20:	20000004 	.word	0x20000004
 8008a24:	20000008 	.word	0x20000008

08008a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a2c:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20000004 	.word	0x20000004

08008a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a44:	f7ff fff0 	bl	8008a28 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	0a9b      	lsrs	r3, r3, #10
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4903      	ldr	r1, [pc, #12]	; (8008a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40023800 	.word	0x40023800
 8008a64:	08014578 	.word	0x08014578

08008a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a6c:	f7ff ffdc 	bl	8008a28 <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	0b5b      	lsrs	r3, r3, #13
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4903      	ldr	r1, [pc, #12]	; (8008a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	08014578 	.word	0x08014578

08008a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	220f      	movs	r2, #15
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008aa0:	4b12      	ldr	r3, [pc, #72]	; (8008aec <HAL_RCC_GetClockConfig+0x5c>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 0203 	and.w	r2, r3, #3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <HAL_RCC_GetClockConfig+0x5c>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <HAL_RCC_GetClockConfig+0x5c>)
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <HAL_RCC_GetClockConfig+0x5c>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <HAL_RCC_GetClockConfig+0x60>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 020f 	and.w	r2, r3, #15
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	601a      	str	r2, [r3, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40023800 	.word	0x40023800
 8008af0:	40023c00 	.word	0x40023c00

08008af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af8:	b0ae      	sub	sp, #184	; 0xb8
 8008afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b1a:	4bcb      	ldr	r3, [pc, #812]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 030c 	and.w	r3, r3, #12
 8008b22:	2b0c      	cmp	r3, #12
 8008b24:	f200 8206 	bhi.w	8008f34 <HAL_RCC_GetSysClockFreq+0x440>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b65 	.word	0x08008b65
 8008b34:	08008f35 	.word	0x08008f35
 8008b38:	08008f35 	.word	0x08008f35
 8008b3c:	08008f35 	.word	0x08008f35
 8008b40:	08008b6d 	.word	0x08008b6d
 8008b44:	08008f35 	.word	0x08008f35
 8008b48:	08008f35 	.word	0x08008f35
 8008b4c:	08008f35 	.word	0x08008f35
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008f35 	.word	0x08008f35
 8008b58:	08008f35 	.word	0x08008f35
 8008b5c:	08008f35 	.word	0x08008f35
 8008b60:	08008d65 	.word	0x08008d65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b64:	4bb9      	ldr	r3, [pc, #740]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8008b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008b6a:	e1e7      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b6c:	4bb8      	ldr	r3, [pc, #736]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b72:	e1e3      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b74:	4bb4      	ldr	r3, [pc, #720]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b80:	4bb1      	ldr	r3, [pc, #708]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d071      	beq.n	8008c70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b8c:	4bae      	ldr	r3, [pc, #696]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	099b      	lsrs	r3, r3, #6
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	f04f 0000 	mov.w	r0, #0
 8008bba:	f04f 0100 	mov.w	r1, #0
 8008bbe:	0159      	lsls	r1, r3, #5
 8008bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bc4:	0150      	lsls	r0, r2, #5
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4621      	mov	r1, r4
 8008bcc:	1a51      	subs	r1, r2, r1
 8008bce:	6439      	str	r1, [r7, #64]	; 0x40
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8008bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008be4:	4649      	mov	r1, r9
 8008be6:	018b      	lsls	r3, r1, #6
 8008be8:	4641      	mov	r1, r8
 8008bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bee:	4641      	mov	r1, r8
 8008bf0:	018a      	lsls	r2, r1, #6
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	1a51      	subs	r1, r2, r1
 8008bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	00cb      	lsls	r3, r1, #3
 8008c10:	4641      	mov	r1, r8
 8008c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c16:	4641      	mov	r1, r8
 8008c18:	00ca      	lsls	r2, r1, #3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4622      	mov	r2, r4
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	633b      	str	r3, [r7, #48]	; 0x30
 8008c26:	462b      	mov	r3, r5
 8008c28:	460a      	mov	r2, r1
 8008c2a:	eb42 0303 	adc.w	r3, r2, r3
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	024b      	lsls	r3, r1, #9
 8008c40:	4621      	mov	r1, r4
 8008c42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c46:	4621      	mov	r1, r4
 8008c48:	024a      	lsls	r2, r1, #9
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008c60:	f7f8 f832 	bl	8000cc8 <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4613      	mov	r3, r2
 8008c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c6e:	e067      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c70:	4b75      	ldr	r3, [pc, #468]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	099b      	lsrs	r3, r3, #6
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008c92:	4622      	mov	r2, r4
 8008c94:	462b      	mov	r3, r5
 8008c96:	f04f 0000 	mov.w	r0, #0
 8008c9a:	f04f 0100 	mov.w	r1, #0
 8008c9e:	0159      	lsls	r1, r3, #5
 8008ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca4:	0150      	lsls	r0, r2, #5
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4621      	mov	r1, r4
 8008cac:	1a51      	subs	r1, r2, r1
 8008cae:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	018b      	lsls	r3, r1, #6
 8008cc8:	4641      	mov	r1, r8
 8008cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cce:	4641      	mov	r1, r8
 8008cd0:	018a      	lsls	r2, r1, #6
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cd8:	4649      	mov	r1, r9
 8008cda:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cf2:	4692      	mov	sl, r2
 8008cf4:	469b      	mov	fp, r3
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	eb1a 0303 	adds.w	r3, sl, r3
 8008cfc:	623b      	str	r3, [r7, #32]
 8008cfe:	462b      	mov	r3, r5
 8008d00:	eb4b 0303 	adc.w	r3, fp, r3
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	f04f 0300 	mov.w	r3, #0
 8008d0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008d12:	4629      	mov	r1, r5
 8008d14:	028b      	lsls	r3, r1, #10
 8008d16:	4621      	mov	r1, r4
 8008d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	028a      	lsls	r2, r1, #10
 8008d20:	4610      	mov	r0, r2
 8008d22:	4619      	mov	r1, r3
 8008d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d28:	2200      	movs	r2, #0
 8008d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d2c:	677a      	str	r2, [r7, #116]	; 0x74
 8008d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008d32:	f7f7 ffc9 	bl	8000cc8 <__aeabi_uldivmod>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d40:	4b41      	ldr	r3, [pc, #260]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	0c1b      	lsrs	r3, r3, #16
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d62:	e0eb      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d64:	4b38      	ldr	r3, [pc, #224]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d70:	4b35      	ldr	r3, [pc, #212]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d06b      	beq.n	8008e54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d7c:	4b32      	ldr	r3, [pc, #200]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	099b      	lsrs	r3, r3, #6
 8008d82:	2200      	movs	r2, #0
 8008d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8008d90:	2300      	movs	r3, #0
 8008d92:	667b      	str	r3, [r7, #100]	; 0x64
 8008d94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008d98:	4622      	mov	r2, r4
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	f04f 0000 	mov.w	r0, #0
 8008da0:	f04f 0100 	mov.w	r1, #0
 8008da4:	0159      	lsls	r1, r3, #5
 8008da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008daa:	0150      	lsls	r0, r2, #5
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4621      	mov	r1, r4
 8008db2:	1a51      	subs	r1, r2, r1
 8008db4:	61b9      	str	r1, [r7, #24]
 8008db6:	4629      	mov	r1, r5
 8008db8:	eb63 0301 	sbc.w	r3, r3, r1
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008dca:	4659      	mov	r1, fp
 8008dcc:	018b      	lsls	r3, r1, #6
 8008dce:	4651      	mov	r1, sl
 8008dd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	018a      	lsls	r2, r1, #6
 8008dd8:	4651      	mov	r1, sl
 8008dda:	ebb2 0801 	subs.w	r8, r2, r1
 8008dde:	4659      	mov	r1, fp
 8008de0:	eb63 0901 	sbc.w	r9, r3, r1
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008df8:	4690      	mov	r8, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	eb18 0303 	adds.w	r3, r8, r3
 8008e02:	613b      	str	r3, [r7, #16]
 8008e04:	462b      	mov	r3, r5
 8008e06:	eb49 0303 	adc.w	r3, r9, r3
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e18:	4629      	mov	r1, r5
 8008e1a:	024b      	lsls	r3, r1, #9
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e22:	4621      	mov	r1, r4
 8008e24:	024a      	lsls	r2, r1, #9
 8008e26:	4610      	mov	r0, r2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e2e:	2200      	movs	r2, #0
 8008e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008e34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e38:	f7f7 ff46 	bl	8000cc8 <__aeabi_uldivmod>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4613      	mov	r3, r2
 8008e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e46:	e065      	b.n	8008f14 <HAL_RCC_GetSysClockFreq+0x420>
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	00f42400 	.word	0x00f42400
 8008e50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e54:	4b3d      	ldr	r3, [pc, #244]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x458>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	099b      	lsrs	r3, r3, #6
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	4611      	mov	r1, r2
 8008e60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e64:	653b      	str	r3, [r7, #80]	; 0x50
 8008e66:	2300      	movs	r3, #0
 8008e68:	657b      	str	r3, [r7, #84]	; 0x54
 8008e6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008e6e:	4642      	mov	r2, r8
 8008e70:	464b      	mov	r3, r9
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f04f 0100 	mov.w	r1, #0
 8008e7a:	0159      	lsls	r1, r3, #5
 8008e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e80:	0150      	lsls	r0, r2, #5
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4641      	mov	r1, r8
 8008e88:	1a51      	subs	r1, r2, r1
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	018b      	lsls	r3, r1, #6
 8008ea4:	4651      	mov	r1, sl
 8008ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008eaa:	4651      	mov	r1, sl
 8008eac:	018a      	lsls	r2, r1, #6
 8008eae:	4651      	mov	r1, sl
 8008eb0:	1a54      	subs	r4, r2, r1
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	eb63 0501 	sbc.w	r5, r3, r1
 8008eb8:	f04f 0200 	mov.w	r2, #0
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	00eb      	lsls	r3, r5, #3
 8008ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ec6:	00e2      	lsls	r2, r4, #3
 8008ec8:	4614      	mov	r4, r2
 8008eca:	461d      	mov	r5, r3
 8008ecc:	4643      	mov	r3, r8
 8008ece:	18e3      	adds	r3, r4, r3
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	eb45 0303 	adc.w	r3, r5, r3
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	028b      	lsls	r3, r1, #10
 8008eea:	4621      	mov	r1, r4
 8008eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	028a      	lsls	r2, r1, #10
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008efc:	2200      	movs	r2, #0
 8008efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f06:	f7f7 fedf 	bl	8000cc8 <__aeabi_uldivmod>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4613      	mov	r3, r2
 8008f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f14:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x458>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	0f1b      	lsrs	r3, r3, #28
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f32:	e003      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f34:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	37b8      	adds	r7, #184	; 0xb8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	00f42400 	.word	0x00f42400

08008f54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e28d      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 8083 	beq.w	800907a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f74:	4b94      	ldr	r3, [pc, #592]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 030c 	and.w	r3, r3, #12
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d019      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f80:	4b91      	ldr	r3, [pc, #580]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d106      	bne.n	8008f9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f8c:	4b8e      	ldr	r3, [pc, #568]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f98:	d00c      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f9a:	4b8b      	ldr	r3, [pc, #556]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fa2:	2b0c      	cmp	r3, #12
 8008fa4:	d112      	bne.n	8008fcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fa6:	4b88      	ldr	r3, [pc, #544]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb2:	d10b      	bne.n	8008fcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fb4:	4b84      	ldr	r3, [pc, #528]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05b      	beq.n	8009078 <HAL_RCC_OscConfig+0x124>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d157      	bne.n	8009078 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e25a      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd4:	d106      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x90>
 8008fd6:	4b7c      	ldr	r3, [pc, #496]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a7b      	ldr	r2, [pc, #492]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e01d      	b.n	8009020 <HAL_RCC_OscConfig+0xcc>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fec:	d10c      	bne.n	8009008 <HAL_RCC_OscConfig+0xb4>
 8008fee:	4b76      	ldr	r3, [pc, #472]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a75      	ldr	r2, [pc, #468]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	4b73      	ldr	r3, [pc, #460]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a72      	ldr	r2, [pc, #456]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	e00b      	b.n	8009020 <HAL_RCC_OscConfig+0xcc>
 8009008:	4b6f      	ldr	r3, [pc, #444]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a6e      	ldr	r2, [pc, #440]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800900e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a6b      	ldr	r2, [pc, #428]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800901a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800901e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d013      	beq.n	8009050 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7fa fcb6 	bl	8003998 <HAL_GetTick>
 800902c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009030:	f7fa fcb2 	bl	8003998 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b64      	cmp	r3, #100	; 0x64
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e21f      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009042:	4b61      	ldr	r3, [pc, #388]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0f0      	beq.n	8009030 <HAL_RCC_OscConfig+0xdc>
 800904e:	e014      	b.n	800907a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009050:	f7fa fca2 	bl	8003998 <HAL_GetTick>
 8009054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009056:	e008      	b.n	800906a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009058:	f7fa fc9e 	bl	8003998 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b64      	cmp	r3, #100	; 0x64
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e20b      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800906a:	4b57      	ldr	r3, [pc, #348]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1f0      	bne.n	8009058 <HAL_RCC_OscConfig+0x104>
 8009076:	e000      	b.n	800907a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d06f      	beq.n	8009166 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009086:	4b50      	ldr	r3, [pc, #320]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 030c 	and.w	r3, r3, #12
 800908e:	2b00      	cmp	r3, #0
 8009090:	d017      	beq.n	80090c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009092:	4b4d      	ldr	r3, [pc, #308]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800909a:	2b08      	cmp	r3, #8
 800909c:	d105      	bne.n	80090aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800909e:	4b4a      	ldr	r3, [pc, #296]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090aa:	4b47      	ldr	r3, [pc, #284]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090b2:	2b0c      	cmp	r3, #12
 80090b4:	d11c      	bne.n	80090f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090b6:	4b44      	ldr	r3, [pc, #272]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d116      	bne.n	80090f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c2:	4b41      	ldr	r3, [pc, #260]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_RCC_OscConfig+0x186>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d001      	beq.n	80090da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e1d3      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090da:	4b3b      	ldr	r3, [pc, #236]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	4937      	ldr	r1, [pc, #220]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ee:	e03a      	b.n	8009166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d020      	beq.n	800913a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090f8:	4b34      	ldr	r3, [pc, #208]	; (80091cc <HAL_RCC_OscConfig+0x278>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fe:	f7fa fc4b 	bl	8003998 <HAL_GetTick>
 8009102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009104:	e008      	b.n	8009118 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009106:	f7fa fc47 	bl	8003998 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e1b4      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009118:	4b2b      	ldr	r3, [pc, #172]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0f0      	beq.n	8009106 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009124:	4b28      	ldr	r3, [pc, #160]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4925      	ldr	r1, [pc, #148]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 8009134:	4313      	orrs	r3, r2
 8009136:	600b      	str	r3, [r1, #0]
 8009138:	e015      	b.n	8009166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <HAL_RCC_OscConfig+0x278>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7fa fc2a 	bl	8003998 <HAL_GetTick>
 8009144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009148:	f7fa fc26 	bl	8003998 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e193      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800915a:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f0      	bne.n	8009148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d036      	beq.n	80091e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d016      	beq.n	80091a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800917a:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <HAL_RCC_OscConfig+0x27c>)
 800917c:	2201      	movs	r2, #1
 800917e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009180:	f7fa fc0a 	bl	8003998 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009186:	e008      	b.n	800919a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009188:	f7fa fc06 	bl	8003998 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d901      	bls.n	800919a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e173      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <HAL_RCC_OscConfig+0x274>)
 800919c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0f0      	beq.n	8009188 <HAL_RCC_OscConfig+0x234>
 80091a6:	e01b      	b.n	80091e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <HAL_RCC_OscConfig+0x27c>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ae:	f7fa fbf3 	bl	8003998 <HAL_GetTick>
 80091b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b4:	e00e      	b.n	80091d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091b6:	f7fa fbef 	bl	8003998 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d907      	bls.n	80091d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e15c      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
 80091c8:	40023800 	.word	0x40023800
 80091cc:	42470000 	.word	0x42470000
 80091d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d4:	4b8a      	ldr	r3, [pc, #552]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80091d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1ea      	bne.n	80091b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8097 	beq.w	800931c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091f2:	4b83      	ldr	r3, [pc, #524]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10f      	bne.n	800921e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091fe:	2300      	movs	r3, #0
 8009200:	60bb      	str	r3, [r7, #8]
 8009202:	4b7f      	ldr	r3, [pc, #508]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	4a7e      	ldr	r2, [pc, #504]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920c:	6413      	str	r3, [r2, #64]	; 0x40
 800920e:	4b7c      	ldr	r3, [pc, #496]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	60bb      	str	r3, [r7, #8]
 8009218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800921a:	2301      	movs	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921e:	4b79      	ldr	r3, [pc, #484]	; (8009404 <HAL_RCC_OscConfig+0x4b0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009226:	2b00      	cmp	r3, #0
 8009228:	d118      	bne.n	800925c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800922a:	4b76      	ldr	r3, [pc, #472]	; (8009404 <HAL_RCC_OscConfig+0x4b0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a75      	ldr	r2, [pc, #468]	; (8009404 <HAL_RCC_OscConfig+0x4b0>)
 8009230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009236:	f7fa fbaf 	bl	8003998 <HAL_GetTick>
 800923a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800923c:	e008      	b.n	8009250 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800923e:	f7fa fbab 	bl	8003998 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	d901      	bls.n	8009250 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e118      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009250:	4b6c      	ldr	r3, [pc, #432]	; (8009404 <HAL_RCC_OscConfig+0x4b0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0f0      	beq.n	800923e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d106      	bne.n	8009272 <HAL_RCC_OscConfig+0x31e>
 8009264:	4b66      	ldr	r3, [pc, #408]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009268:	4a65      	ldr	r2, [pc, #404]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 800926a:	f043 0301 	orr.w	r3, r3, #1
 800926e:	6713      	str	r3, [r2, #112]	; 0x70
 8009270:	e01c      	b.n	80092ac <HAL_RCC_OscConfig+0x358>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b05      	cmp	r3, #5
 8009278:	d10c      	bne.n	8009294 <HAL_RCC_OscConfig+0x340>
 800927a:	4b61      	ldr	r3, [pc, #388]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	4a60      	ldr	r2, [pc, #384]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009280:	f043 0304 	orr.w	r3, r3, #4
 8009284:	6713      	str	r3, [r2, #112]	; 0x70
 8009286:	4b5e      	ldr	r3, [pc, #376]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928a:	4a5d      	ldr	r2, [pc, #372]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	6713      	str	r3, [r2, #112]	; 0x70
 8009292:	e00b      	b.n	80092ac <HAL_RCC_OscConfig+0x358>
 8009294:	4b5a      	ldr	r3, [pc, #360]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009298:	4a59      	ldr	r2, [pc, #356]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	6713      	str	r3, [r2, #112]	; 0x70
 80092a0:	4b57      	ldr	r3, [pc, #348]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	4a56      	ldr	r2, [pc, #344]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80092a6:	f023 0304 	bic.w	r3, r3, #4
 80092aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d015      	beq.n	80092e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b4:	f7fa fb70 	bl	8003998 <HAL_GetTick>
 80092b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ba:	e00a      	b.n	80092d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092bc:	f7fa fb6c 	bl	8003998 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e0d7      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d2:	4b4b      	ldr	r3, [pc, #300]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80092d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0ee      	beq.n	80092bc <HAL_RCC_OscConfig+0x368>
 80092de:	e014      	b.n	800930a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e0:	f7fa fb5a 	bl	8003998 <HAL_GetTick>
 80092e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092e6:	e00a      	b.n	80092fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092e8:	f7fa fb56 	bl	8003998 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e0c1      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092fe:	4b40      	ldr	r3, [pc, #256]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ee      	bne.n	80092e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d105      	bne.n	800931c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009310:	4b3b      	ldr	r3, [pc, #236]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	4a3a      	ldr	r2, [pc, #232]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800931a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80ad 	beq.w	8009480 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009326:	4b36      	ldr	r3, [pc, #216]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 030c 	and.w	r3, r3, #12
 800932e:	2b08      	cmp	r3, #8
 8009330:	d060      	beq.n	80093f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d145      	bne.n	80093c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800933a:	4b33      	ldr	r3, [pc, #204]	; (8009408 <HAL_RCC_OscConfig+0x4b4>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009340:	f7fa fb2a 	bl	8003998 <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009348:	f7fa fb26 	bl	8003998 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e093      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800935a:	4b29      	ldr	r3, [pc, #164]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f0      	bne.n	8009348 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	69da      	ldr	r2, [r3, #28]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	019b      	lsls	r3, r3, #6
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	3b01      	subs	r3, #1
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	061b      	lsls	r3, r3, #24
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	071b      	lsls	r3, r3, #28
 8009392:	491b      	ldr	r1, [pc, #108]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 8009394:	4313      	orrs	r3, r2
 8009396:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009398:	4b1b      	ldr	r3, [pc, #108]	; (8009408 <HAL_RCC_OscConfig+0x4b4>)
 800939a:	2201      	movs	r2, #1
 800939c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939e:	f7fa fafb 	bl	8003998 <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a4:	e008      	b.n	80093b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093a6:	f7fa faf7 	bl	8003998 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e064      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b8:	4b11      	ldr	r3, [pc, #68]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0f0      	beq.n	80093a6 <HAL_RCC_OscConfig+0x452>
 80093c4:	e05c      	b.n	8009480 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <HAL_RCC_OscConfig+0x4b4>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093cc:	f7fa fae4 	bl	8003998 <HAL_GetTick>
 80093d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093d4:	f7fa fae0 	bl	8003998 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e04d      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <HAL_RCC_OscConfig+0x4ac>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1f0      	bne.n	80093d4 <HAL_RCC_OscConfig+0x480>
 80093f2:	e045      	b.n	8009480 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e040      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
 8009400:	40023800 	.word	0x40023800
 8009404:	40007000 	.word	0x40007000
 8009408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800940c:	4b1f      	ldr	r3, [pc, #124]	; (800948c <HAL_RCC_OscConfig+0x538>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d030      	beq.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009424:	429a      	cmp	r2, r3
 8009426:	d129      	bne.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009432:	429a      	cmp	r2, r3
 8009434:	d122      	bne.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800943c:	4013      	ands	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009444:	4293      	cmp	r3, r2
 8009446:	d119      	bne.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	085b      	lsrs	r3, r3, #1
 8009454:	3b01      	subs	r3, #1
 8009456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d10f      	bne.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009468:	429a      	cmp	r2, r3
 800946a:	d107      	bne.n	800947c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009478:	429a      	cmp	r2, r3
 800947a:	d001      	beq.n	8009480 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	40023800 	.word	0x40023800

08009490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e07b      	b.n	800959a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d108      	bne.n	80094bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094b2:	d009      	beq.n	80094c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	61da      	str	r2, [r3, #28]
 80094ba:	e005      	b.n	80094c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7f9 ff10 	bl	8003308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954c:	ea42 0103 	orr.w	r1, r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	f003 0104 	and.w	r1, r3, #4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	f003 0210 	and.w	r2, r3, #16
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b088      	sub	sp, #32
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_SPI_Transmit+0x22>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e126      	b.n	8009812 <HAL_SPI_Transmit+0x270>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095cc:	f7fa f9e4 	bl	8003998 <HAL_GetTick>
 80095d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d002      	beq.n	80095e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095e2:	2302      	movs	r3, #2
 80095e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095e6:	e10b      	b.n	8009800 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_SPI_Transmit+0x52>
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095f8:	e102      	b.n	8009800 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2203      	movs	r2, #3
 80095fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009640:	d10f      	bne.n	8009662 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009660:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	d007      	beq.n	8009680 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800967e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009688:	d14b      	bne.n	8009722 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <HAL_SPI_Transmit+0xf6>
 8009692:	8afb      	ldrh	r3, [r7, #22]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d13e      	bne.n	8009716 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969c:	881a      	ldrh	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	1c9a      	adds	r2, r3, #2
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80096bc:	e02b      	b.n	8009716 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d112      	bne.n	80096f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	1c9a      	adds	r2, r3, #2
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80096f0:	e011      	b.n	8009716 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096f2:	f7fa f951 	bl	8003998 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d803      	bhi.n	800970a <HAL_SPI_Transmit+0x168>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d102      	bne.n	8009710 <HAL_SPI_Transmit+0x16e>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009714:	e074      	b.n	8009800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1ce      	bne.n	80096be <HAL_SPI_Transmit+0x11c>
 8009720:	e04c      	b.n	80097bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <HAL_SPI_Transmit+0x18e>
 800972a:	8afb      	ldrh	r3, [r7, #22]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d140      	bne.n	80097b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	330c      	adds	r3, #12
 800973a:	7812      	ldrb	r2, [r2, #0]
 800973c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009756:	e02c      	b.n	80097b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d113      	bne.n	800978e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	7812      	ldrb	r2, [r2, #0]
 8009772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	86da      	strh	r2, [r3, #54]	; 0x36
 800978c:	e011      	b.n	80097b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800978e:	f7fa f903 	bl	8003998 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d803      	bhi.n	80097a6 <HAL_SPI_Transmit+0x204>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d102      	bne.n	80097ac <HAL_SPI_Transmit+0x20a>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097b0:	e026      	b.n	8009800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1cd      	bne.n	8009758 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fa55 	bl	8009c70 <SPI_EndRxTxTransaction>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e000      	b.n	8009800 <HAL_SPI_Transmit+0x25e>
  }

error:
 80097fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009810:	7ffb      	ldrb	r3, [r7, #31]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b08c      	sub	sp, #48	; 0x30
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009828:	2301      	movs	r3, #1
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x26>
 800983c:	2302      	movs	r3, #2
 800983e:	e18a      	b.n	8009b56 <HAL_SPI_TransmitReceive+0x33c>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009848:	f7fa f8a6 	bl	8003998 <HAL_GetTick>
 800984c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800985e:	887b      	ldrh	r3, [r7, #2]
 8009860:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009866:	2b01      	cmp	r3, #1
 8009868:	d00f      	beq.n	800988a <HAL_SPI_TransmitReceive+0x70>
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009870:	d107      	bne.n	8009882 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d103      	bne.n	8009882 <HAL_SPI_TransmitReceive+0x68>
 800987a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800987e:	2b04      	cmp	r3, #4
 8009880:	d003      	beq.n	800988a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009882:	2302      	movs	r3, #2
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009888:	e15b      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <HAL_SPI_TransmitReceive+0x82>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <HAL_SPI_TransmitReceive+0x82>
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80098a2:	e14e      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d003      	beq.n	80098b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2205      	movs	r2, #5
 80098b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	887a      	ldrh	r2, [r7, #2]
 80098c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	887a      	ldrh	r2, [r7, #2]
 80098ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	887a      	ldrh	r2, [r7, #2]
 80098da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	887a      	ldrh	r2, [r7, #2]
 80098e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	d007      	beq.n	800990c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800990a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009914:	d178      	bne.n	8009a08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x10a>
 800991e:	8b7b      	ldrh	r3, [r7, #26]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d166      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	881a      	ldrh	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	1c9a      	adds	r2, r3, #2
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009948:	e053      	b.n	80099f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b02      	cmp	r3, #2
 8009956:	d11b      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x176>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800995c:	b29b      	uxth	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d016      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x176>
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	2b01      	cmp	r3, #1
 8009966:	d113      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	881a      	ldrh	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	1c9a      	adds	r2, r3, #2
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009982:	b29b      	uxth	r3, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b01      	cmp	r3, #1
 800999c:	d119      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x1b8>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d014      	beq.n	80099d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	b292      	uxth	r2, r2
 80099b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099ce:	2301      	movs	r3, #1
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099d2:	f7f9 ffe1 	bl	8003998 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099de:	429a      	cmp	r2, r3
 80099e0:	d807      	bhi.n	80099f2 <HAL_SPI_TransmitReceive+0x1d8>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d003      	beq.n	80099f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099f0:	e0a7      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1a6      	bne.n	800994a <HAL_SPI_TransmitReceive+0x130>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1a1      	bne.n	800994a <HAL_SPI_TransmitReceive+0x130>
 8009a06:	e07c      	b.n	8009b02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <HAL_SPI_TransmitReceive+0x1fc>
 8009a10:	8b7b      	ldrh	r3, [r7, #26]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d16b      	bne.n	8009aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	330c      	adds	r3, #12
 8009a20:	7812      	ldrb	r2, [r2, #0]
 8009a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a3c:	e057      	b.n	8009aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d11c      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x26c>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d017      	beq.n	8009a86 <HAL_SPI_TransmitReceive+0x26c>
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d114      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	7812      	ldrb	r2, [r2, #0]
 8009a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d119      	bne.n	8009ac8 <HAL_SPI_TransmitReceive+0x2ae>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d014      	beq.n	8009ac8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68da      	ldr	r2, [r3, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ac8:	f7f9 ff66 	bl	8003998 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d803      	bhi.n	8009ae0 <HAL_SPI_TransmitReceive+0x2c6>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d102      	bne.n	8009ae6 <HAL_SPI_TransmitReceive+0x2cc>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009aec:	e029      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1a2      	bne.n	8009a3e <HAL_SPI_TransmitReceive+0x224>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d19d      	bne.n	8009a3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 f8b2 	bl	8009c70 <SPI_EndRxTxTransaction>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d006      	beq.n	8009b20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009b1e:	e010      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10b      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	617b      	str	r3, [r7, #20]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	e000      	b.n	8009b42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3730      	adds	r7, #48	; 0x30
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b70:	f7f9 ff12 	bl	8003998 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	1a9b      	subs	r3, r3, r2
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b80:	f7f9 ff0a 	bl	8003998 <HAL_GetTick>
 8009b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b86:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	015b      	lsls	r3, r3, #5
 8009b8c:	0d1b      	lsrs	r3, r3, #20
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	fb02 f303 	mul.w	r3, r2, r3
 8009b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b96:	e054      	b.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d050      	beq.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ba0:	f7f9 fefa 	bl	8003998 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d902      	bls.n	8009bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d13d      	bne.n	8009c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bce:	d111      	bne.n	8009bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd8:	d004      	beq.n	8009be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be2:	d107      	bne.n	8009bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfc:	d10f      	bne.n	8009c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e017      	b.n	8009c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	bf0c      	ite	eq
 8009c52:	2301      	moveq	r3, #1
 8009c54:	2300      	movne	r3, #0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d19b      	bne.n	8009b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000004 	.word	0x20000004

08009c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c7c:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <SPI_EndRxTxTransaction+0x7c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a1b      	ldr	r2, [pc, #108]	; (8009cf0 <SPI_EndRxTxTransaction+0x80>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	0d5b      	lsrs	r3, r3, #21
 8009c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c8c:	fb02 f303 	mul.w	r3, r2, r3
 8009c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c9a:	d112      	bne.n	8009cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7ff ff5a 	bl	8009b60 <SPI_WaitFlagStateUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d016      	beq.n	8009ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	f043 0220 	orr.w	r2, r3, #32
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e00f      	b.n	8009ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00a      	beq.n	8009cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd8:	2b80      	cmp	r3, #128	; 0x80
 8009cda:	d0f2      	beq.n	8009cc2 <SPI_EndRxTxTransaction+0x52>
 8009cdc:	e000      	b.n	8009ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cde:	bf00      	nop
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000004 	.word	0x20000004
 8009cf0:	165e9f81 	.word	0x165e9f81

08009cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e041      	b.n	8009d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7f9 fb3c 	bl	8003398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f000 fc10 	bl	800a558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d001      	beq.n	8009dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e046      	b.n	8009e3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a23      	ldr	r2, [pc, #140]	; (8009e48 <HAL_TIM_Base_Start+0xb4>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d022      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc6:	d01d      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1f      	ldr	r2, [pc, #124]	; (8009e4c <HAL_TIM_Base_Start+0xb8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d018      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1e      	ldr	r2, [pc, #120]	; (8009e50 <HAL_TIM_Base_Start+0xbc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1c      	ldr	r2, [pc, #112]	; (8009e54 <HAL_TIM_Base_Start+0xc0>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00e      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1b      	ldr	r2, [pc, #108]	; (8009e58 <HAL_TIM_Base_Start+0xc4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d009      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_TIM_Base_Start+0xc8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <HAL_TIM_Base_Start+0x70>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <HAL_TIM_Base_Start+0xcc>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d111      	bne.n	8009e28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b06      	cmp	r3, #6
 8009e14:	d010      	beq.n	8009e38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f042 0201 	orr.w	r2, r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	e007      	b.n	8009e38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0201 	orr.w	r2, r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	40000800 	.word	0x40000800
 8009e54:	40000c00 	.word	0x40000c00
 8009e58:	40010400 	.word	0x40010400
 8009e5c:	40014000 	.word	0x40014000
 8009e60:	40001800 	.word	0x40001800

08009e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d001      	beq.n	8009e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e04e      	b.n	8009f1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 0201 	orr.w	r2, r2, #1
 8009e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a23      	ldr	r2, [pc, #140]	; (8009f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d022      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea6:	d01d      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d018      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	; (8009f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d013      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1c      	ldr	r2, [pc, #112]	; (8009f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d00e      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1b      	ldr	r2, [pc, #108]	; (8009f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d009      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d004      	beq.n	8009ee4 <HAL_TIM_Base_Start_IT+0x80>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a18      	ldr	r2, [pc, #96]	; (8009f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d111      	bne.n	8009f08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b06      	cmp	r3, #6
 8009ef4:	d010      	beq.n	8009f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0201 	orr.w	r2, r2, #1
 8009f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f06:	e007      	b.n	8009f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	40010000 	.word	0x40010000
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40010400 	.word	0x40010400
 8009f3c:	40014000 	.word	0x40014000
 8009f40:	40001800 	.word	0x40001800

08009f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e041      	b.n	8009fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f9 fa34 	bl	80033d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f000 fae8 	bl	800a558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d122      	bne.n	800a03e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b02      	cmp	r3, #2
 800a004:	d11b      	bne.n	800a03e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f06f 0202 	mvn.w	r2, #2
 800a00e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa78 	bl	800a51a <HAL_TIM_IC_CaptureCallback>
 800a02a:	e005      	b.n	800a038 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa6a 	bl	800a506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa7b 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d122      	bne.n	800a092 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0304 	and.w	r3, r3, #4
 800a056:	2b04      	cmp	r3, #4
 800a058:	d11b      	bne.n	800a092 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f06f 0204 	mvn.w	r2, #4
 800a062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fa4e 	bl	800a51a <HAL_TIM_IC_CaptureCallback>
 800a07e:	e005      	b.n	800a08c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa40 	bl	800a506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fa51 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d122      	bne.n	800a0e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b08      	cmp	r3, #8
 800a0ac:	d11b      	bne.n	800a0e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f06f 0208 	mvn.w	r2, #8
 800a0b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa24 	bl	800a51a <HAL_TIM_IC_CaptureCallback>
 800a0d2:	e005      	b.n	800a0e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fa16 	bl	800a506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa27 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f003 0310 	and.w	r3, r3, #16
 800a0f0:	2b10      	cmp	r3, #16
 800a0f2:	d122      	bne.n	800a13a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f003 0310 	and.w	r3, r3, #16
 800a0fe:	2b10      	cmp	r3, #16
 800a100:	d11b      	bne.n	800a13a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f06f 0210 	mvn.w	r2, #16
 800a10a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2208      	movs	r2, #8
 800a110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9fa 	bl	800a51a <HAL_TIM_IC_CaptureCallback>
 800a126:	e005      	b.n	800a134 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f9ec 	bl	800a506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f9fd 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b01      	cmp	r3, #1
 800a146:	d10e      	bne.n	800a166 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b01      	cmp	r3, #1
 800a154:	d107      	bne.n	800a166 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f06f 0201 	mvn.w	r2, #1
 800a15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7f8 feff 	bl	8002f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a170:	2b80      	cmp	r3, #128	; 0x80
 800a172:	d10e      	bne.n	800a192 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17e:	2b80      	cmp	r3, #128	; 0x80
 800a180:	d107      	bne.n	800a192 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fd53 	bl	800ac38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19c:	2b40      	cmp	r3, #64	; 0x40
 800a19e:	d10e      	bne.n	800a1be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1aa:	2b40      	cmp	r3, #64	; 0x40
 800a1ac:	d107      	bne.n	800a1be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f9c2 	bl	800a542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	f003 0320 	and.w	r3, r3, #32
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d10e      	bne.n	800a1ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f003 0320 	and.w	r3, r3, #32
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	d107      	bne.n	800a1ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f06f 0220 	mvn.w	r2, #32
 800a1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fd1d 	bl	800ac24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a20e:	2302      	movs	r3, #2
 800a210:	e0ae      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b0c      	cmp	r3, #12
 800a21e:	f200 809f 	bhi.w	800a360 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a25d 	.word	0x0800a25d
 800a22c:	0800a361 	.word	0x0800a361
 800a230:	0800a361 	.word	0x0800a361
 800a234:	0800a361 	.word	0x0800a361
 800a238:	0800a29d 	.word	0x0800a29d
 800a23c:	0800a361 	.word	0x0800a361
 800a240:	0800a361 	.word	0x0800a361
 800a244:	0800a361 	.word	0x0800a361
 800a248:	0800a2df 	.word	0x0800a2df
 800a24c:	0800a361 	.word	0x0800a361
 800a250:	0800a361 	.word	0x0800a361
 800a254:	0800a361 	.word	0x0800a361
 800a258:	0800a31f 	.word	0x0800a31f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fa18 	bl	800a698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	699a      	ldr	r2, [r3, #24]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 0208 	orr.w	r2, r2, #8
 800a276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699a      	ldr	r2, [r3, #24]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0204 	bic.w	r2, r2, #4
 800a286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6999      	ldr	r1, [r3, #24]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	691a      	ldr	r2, [r3, #16]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	619a      	str	r2, [r3, #24]
      break;
 800a29a:	e064      	b.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fa68 	bl	800a778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6999      	ldr	r1, [r3, #24]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	021a      	lsls	r2, r3, #8
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	619a      	str	r2, [r3, #24]
      break;
 800a2dc:	e043      	b.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fabd 	bl	800a864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69da      	ldr	r2, [r3, #28]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f042 0208 	orr.w	r2, r2, #8
 800a2f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69da      	ldr	r2, [r3, #28]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0204 	bic.w	r2, r2, #4
 800a308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69d9      	ldr	r1, [r3, #28]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	691a      	ldr	r2, [r3, #16]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	61da      	str	r2, [r3, #28]
      break;
 800a31c:	e023      	b.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fb11 	bl	800a94c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69da      	ldr	r2, [r3, #28]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69d9      	ldr	r1, [r3, #28]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	021a      	lsls	r2, r3, #8
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	61da      	str	r2, [r3, #28]
      break;
 800a35e:	e002      	b.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
      break;
 800a364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_TIM_ConfigClockSource+0x1c>
 800a390:	2302      	movs	r3, #2
 800a392:	e0b4      	b.n	800a4fe <HAL_TIM_ConfigClockSource+0x186>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3cc:	d03e      	beq.n	800a44c <HAL_TIM_ConfigClockSource+0xd4>
 800a3ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3d2:	f200 8087 	bhi.w	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3da:	f000 8086 	beq.w	800a4ea <HAL_TIM_ConfigClockSource+0x172>
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e2:	d87f      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3e4:	2b70      	cmp	r3, #112	; 0x70
 800a3e6:	d01a      	beq.n	800a41e <HAL_TIM_ConfigClockSource+0xa6>
 800a3e8:	2b70      	cmp	r3, #112	; 0x70
 800a3ea:	d87b      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ec:	2b60      	cmp	r3, #96	; 0x60
 800a3ee:	d050      	beq.n	800a492 <HAL_TIM_ConfigClockSource+0x11a>
 800a3f0:	2b60      	cmp	r3, #96	; 0x60
 800a3f2:	d877      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f4:	2b50      	cmp	r3, #80	; 0x50
 800a3f6:	d03c      	beq.n	800a472 <HAL_TIM_ConfigClockSource+0xfa>
 800a3f8:	2b50      	cmp	r3, #80	; 0x50
 800a3fa:	d873      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3fc:	2b40      	cmp	r3, #64	; 0x40
 800a3fe:	d058      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x13a>
 800a400:	2b40      	cmp	r3, #64	; 0x40
 800a402:	d86f      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a404:	2b30      	cmp	r3, #48	; 0x30
 800a406:	d064      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a408:	2b30      	cmp	r3, #48	; 0x30
 800a40a:	d86b      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	d060      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a410:	2b20      	cmp	r3, #32
 800a412:	d867      	bhi.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d05c      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a418:	2b10      	cmp	r3, #16
 800a41a:	d05a      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a41c:	e062      	b.n	800a4e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	6899      	ldr	r1, [r3, #8]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	f000 fb5d 	bl	800aaec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	609a      	str	r2, [r3, #8]
      break;
 800a44a:	e04f      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	6899      	ldr	r1, [r3, #8]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f000 fb46 	bl	800aaec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a46e:	609a      	str	r2, [r3, #8]
      break;
 800a470:	e03c      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	461a      	mov	r2, r3
 800a480:	f000 faba 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2150      	movs	r1, #80	; 0x50
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fb13 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 800a490:	e02c      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6859      	ldr	r1, [r3, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f000 fad9 	bl	800aa56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2160      	movs	r1, #96	; 0x60
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fb03 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 800a4b0:	e01c      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6859      	ldr	r1, [r3, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f000 fa9a 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2140      	movs	r1, #64	; 0x40
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 faf3 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 800a4d0:	e00c      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f000 faea 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 800a4e2:	e003      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e8:	e000      	b.n	800a4ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a522:	bf00      	nop
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a40      	ldr	r2, [pc, #256]	; (800a66c <TIM_Base_SetConfig+0x114>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d013      	beq.n	800a598 <TIM_Base_SetConfig+0x40>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a576:	d00f      	beq.n	800a598 <TIM_Base_SetConfig+0x40>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a3d      	ldr	r2, [pc, #244]	; (800a670 <TIM_Base_SetConfig+0x118>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d00b      	beq.n	800a598 <TIM_Base_SetConfig+0x40>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a3c      	ldr	r2, [pc, #240]	; (800a674 <TIM_Base_SetConfig+0x11c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d007      	beq.n	800a598 <TIM_Base_SetConfig+0x40>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a3b      	ldr	r2, [pc, #236]	; (800a678 <TIM_Base_SetConfig+0x120>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d003      	beq.n	800a598 <TIM_Base_SetConfig+0x40>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a3a      	ldr	r2, [pc, #232]	; (800a67c <TIM_Base_SetConfig+0x124>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d108      	bne.n	800a5aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a2f      	ldr	r2, [pc, #188]	; (800a66c <TIM_Base_SetConfig+0x114>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d02b      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b8:	d027      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a2c      	ldr	r2, [pc, #176]	; (800a670 <TIM_Base_SetConfig+0x118>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d023      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a2b      	ldr	r2, [pc, #172]	; (800a674 <TIM_Base_SetConfig+0x11c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d01f      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a2a      	ldr	r2, [pc, #168]	; (800a678 <TIM_Base_SetConfig+0x120>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d01b      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a29      	ldr	r2, [pc, #164]	; (800a67c <TIM_Base_SetConfig+0x124>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d017      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a28      	ldr	r2, [pc, #160]	; (800a680 <TIM_Base_SetConfig+0x128>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d013      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a27      	ldr	r2, [pc, #156]	; (800a684 <TIM_Base_SetConfig+0x12c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00f      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a26      	ldr	r2, [pc, #152]	; (800a688 <TIM_Base_SetConfig+0x130>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d00b      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a25      	ldr	r2, [pc, #148]	; (800a68c <TIM_Base_SetConfig+0x134>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d007      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a24      	ldr	r2, [pc, #144]	; (800a690 <TIM_Base_SetConfig+0x138>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d003      	beq.n	800a60a <TIM_Base_SetConfig+0xb2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a23      	ldr	r2, [pc, #140]	; (800a694 <TIM_Base_SetConfig+0x13c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d108      	bne.n	800a61c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	4313      	orrs	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <TIM_Base_SetConfig+0x114>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d003      	beq.n	800a650 <TIM_Base_SetConfig+0xf8>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a0c      	ldr	r2, [pc, #48]	; (800a67c <TIM_Base_SetConfig+0x124>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d103      	bne.n	800a658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	691a      	ldr	r2, [r3, #16]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	615a      	str	r2, [r3, #20]
}
 800a65e:	bf00      	nop
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	40010000 	.word	0x40010000
 800a670:	40000400 	.word	0x40000400
 800a674:	40000800 	.word	0x40000800
 800a678:	40000c00 	.word	0x40000c00
 800a67c:	40010400 	.word	0x40010400
 800a680:	40014000 	.word	0x40014000
 800a684:	40014400 	.word	0x40014400
 800a688:	40014800 	.word	0x40014800
 800a68c:	40001800 	.word	0x40001800
 800a690:	40001c00 	.word	0x40001c00
 800a694:	40002000 	.word	0x40002000

0800a698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f023 0201 	bic.w	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f023 0302 	bic.w	r3, r3, #2
 800a6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a20      	ldr	r2, [pc, #128]	; (800a770 <TIM_OC1_SetConfig+0xd8>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d003      	beq.n	800a6fc <TIM_OC1_SetConfig+0x64>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a1f      	ldr	r2, [pc, #124]	; (800a774 <TIM_OC1_SetConfig+0xdc>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d10c      	bne.n	800a716 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f023 0308 	bic.w	r3, r3, #8
 800a702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f023 0304 	bic.w	r3, r3, #4
 800a714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a15      	ldr	r2, [pc, #84]	; (800a770 <TIM_OC1_SetConfig+0xd8>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d003      	beq.n	800a726 <TIM_OC1_SetConfig+0x8e>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a14      	ldr	r2, [pc, #80]	; (800a774 <TIM_OC1_SetConfig+0xdc>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d111      	bne.n	800a74a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a72c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	4313      	orrs	r3, r2
 800a748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	621a      	str	r2, [r3, #32]
}
 800a764:	bf00      	nop
 800a766:	371c      	adds	r7, #28
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	40010000 	.word	0x40010000
 800a774:	40010400 	.word	0x40010400

0800a778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f023 0210 	bic.w	r2, r3, #16
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f023 0320 	bic.w	r3, r3, #32
 800a7c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	011b      	lsls	r3, r3, #4
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a22      	ldr	r2, [pc, #136]	; (800a85c <TIM_OC2_SetConfig+0xe4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d003      	beq.n	800a7e0 <TIM_OC2_SetConfig+0x68>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a21      	ldr	r2, [pc, #132]	; (800a860 <TIM_OC2_SetConfig+0xe8>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d10d      	bne.n	800a7fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a17      	ldr	r2, [pc, #92]	; (800a85c <TIM_OC2_SetConfig+0xe4>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_OC2_SetConfig+0x94>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a16      	ldr	r2, [pc, #88]	; (800a860 <TIM_OC2_SetConfig+0xe8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d113      	bne.n	800a834 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a81a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	621a      	str	r2, [r3, #32]
}
 800a84e:	bf00      	nop
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40010000 	.word	0x40010000
 800a860:	40010400 	.word	0x40010400

0800a864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a21      	ldr	r2, [pc, #132]	; (800a944 <TIM_OC3_SetConfig+0xe0>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d003      	beq.n	800a8ca <TIM_OC3_SetConfig+0x66>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a20      	ldr	r2, [pc, #128]	; (800a948 <TIM_OC3_SetConfig+0xe4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d10d      	bne.n	800a8e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a16      	ldr	r2, [pc, #88]	; (800a944 <TIM_OC3_SetConfig+0xe0>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d003      	beq.n	800a8f6 <TIM_OC3_SetConfig+0x92>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a15      	ldr	r2, [pc, #84]	; (800a948 <TIM_OC3_SetConfig+0xe4>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d113      	bne.n	800a91e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	621a      	str	r2, [r3, #32]
}
 800a938:	bf00      	nop
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	40010000 	.word	0x40010000
 800a948:	40010400 	.word	0x40010400

0800a94c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	031b      	lsls	r3, r3, #12
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a12      	ldr	r2, [pc, #72]	; (800a9f0 <TIM_OC4_SetConfig+0xa4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d003      	beq.n	800a9b4 <TIM_OC4_SetConfig+0x68>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a11      	ldr	r2, [pc, #68]	; (800a9f4 <TIM_OC4_SetConfig+0xa8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d109      	bne.n	800a9c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	019b      	lsls	r3, r3, #6
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	621a      	str	r2, [r3, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40010400 	.word	0x40010400

0800a9f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	f023 0201 	bic.w	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f023 030a 	bic.w	r3, r3, #10
 800aa34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b087      	sub	sp, #28
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f023 0210 	bic.w	r2, r3, #16
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	031b      	lsls	r3, r3, #12
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	621a      	str	r2, [r3, #32]
}
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aacc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	f043 0307 	orr.w	r3, r3, #7
 800aad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	609a      	str	r2, [r3, #8]
}
 800aae0:	bf00      	nop
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	021a      	lsls	r2, r3, #8
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	609a      	str	r2, [r3, #8]
}
 800ab20:	bf00      	nop
 800ab22:	371c      	adds	r7, #28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e05a      	b.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a21      	ldr	r2, [pc, #132]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d022      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab90:	d01d      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a1d      	ldr	r2, [pc, #116]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d018      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d013      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a1a      	ldr	r2, [pc, #104]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00e      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a18      	ldr	r2, [pc, #96]	; (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d009      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a17      	ldr	r2, [pc, #92]	; (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d004      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a15      	ldr	r2, [pc, #84]	; (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d10c      	bne.n	800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	4313      	orrs	r3, r2
 800abde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40010000 	.word	0x40010000
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	40000800 	.word	0x40000800
 800ac14:	40000c00 	.word	0x40000c00
 800ac18:	40010400 	.word	0x40010400
 800ac1c:	40014000 	.word	0x40014000
 800ac20:	40001800 	.word	0x40001800

0800ac24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e03f      	b.n	800acde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7f8 fc0c 	bl	8003490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2224      	movs	r2, #36	; 0x24
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f929 	bl	800aee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	691a      	ldr	r2, [r3, #16]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	695a      	ldr	r2, [r3, #20]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68da      	ldr	r2, [r3, #12]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b08a      	sub	sp, #40	; 0x28
 800acea:	af02      	add	r7, sp, #8
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	603b      	str	r3, [r7, #0]
 800acf2:	4613      	mov	r3, r2
 800acf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	d17c      	bne.n	800ae00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <HAL_UART_Transmit+0x2c>
 800ad0c:	88fb      	ldrh	r3, [r7, #6]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e075      	b.n	800ae02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_UART_Transmit+0x3e>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e06e      	b.n	800ae02 <HAL_UART_Transmit+0x11c>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2221      	movs	r2, #33	; 0x21
 800ad36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad3a:	f7f8 fe2d 	bl	8003998 <HAL_GetTick>
 800ad3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	88fa      	ldrh	r2, [r7, #6]
 800ad44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	88fa      	ldrh	r2, [r7, #6]
 800ad4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad54:	d108      	bne.n	800ad68 <HAL_UART_Transmit+0x82>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d104      	bne.n	800ad68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	61bb      	str	r3, [r7, #24]
 800ad66:	e003      	b.n	800ad70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ad78:	e02a      	b.n	800add0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	2180      	movs	r1, #128	; 0x80
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 f840 	bl	800ae0a <UART_WaitOnFlagUntilTimeout>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e036      	b.n	800ae02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	3302      	adds	r3, #2
 800adae:	61bb      	str	r3, [r7, #24]
 800adb0:	e007      	b.n	800adc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	3301      	adds	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	b29a      	uxth	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800add4:	b29b      	uxth	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1cf      	bne.n	800ad7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2200      	movs	r2, #0
 800ade2:	2140      	movs	r1, #64	; 0x40
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f810 	bl	800ae0a <UART_WaitOnFlagUntilTimeout>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e006      	b.n	800ae02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	e000      	b.n	800ae02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ae00:	2302      	movs	r3, #2
  }
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b090      	sub	sp, #64	; 0x40
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	4613      	mov	r3, r2
 800ae18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae1a:	e050      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae22:	d04c      	beq.n	800aebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <UART_WaitOnFlagUntilTimeout+0x30>
 800ae2a:	f7f8 fdb5 	bl	8003998 <HAL_GetTick>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d241      	bcs.n	800aebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	330c      	adds	r3, #12
 800ae40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	330c      	adds	r3, #12
 800ae58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae5a:	637a      	str	r2, [r7, #52]	; 0x34
 800ae5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e5      	bne.n	800ae3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3314      	adds	r3, #20
 800ae74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3314      	adds	r3, #20
 800ae8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae8e:	623a      	str	r2, [r7, #32]
 800ae90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	69f9      	ldr	r1, [r7, #28]
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e5      	bne.n	800ae6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e00f      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4013      	ands	r3, r2
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	bf0c      	ite	eq
 800aece:	2301      	moveq	r3, #1
 800aed0:	2300      	movne	r3, #0
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d09f      	beq.n	800ae1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3740      	adds	r7, #64	; 0x40
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aeec:	b0c0      	sub	sp, #256	; 0x100
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af04:	68d9      	ldr	r1, [r3, #12]
 800af06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	ea40 0301 	orr.w	r3, r0, r1
 800af10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	431a      	orrs	r2, r3
 800af20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	431a      	orrs	r2, r3
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	4313      	orrs	r3, r2
 800af30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af40:	f021 010c 	bic.w	r1, r1, #12
 800af44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af4e:	430b      	orrs	r3, r1
 800af50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af62:	6999      	ldr	r1, [r3, #24]
 800af64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	ea40 0301 	orr.w	r3, r0, r1
 800af6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	4b8f      	ldr	r3, [pc, #572]	; (800b1b4 <UART_SetConfig+0x2cc>)
 800af78:	429a      	cmp	r2, r3
 800af7a:	d005      	beq.n	800af88 <UART_SetConfig+0xa0>
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4b8d      	ldr	r3, [pc, #564]	; (800b1b8 <UART_SetConfig+0x2d0>)
 800af84:	429a      	cmp	r2, r3
 800af86:	d104      	bne.n	800af92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af88:	f7fd fd6e 	bl	8008a68 <HAL_RCC_GetPCLK2Freq>
 800af8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af90:	e003      	b.n	800af9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af92:	f7fd fd55 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 800af96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa4:	f040 810c 	bne.w	800b1c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afac:	2200      	movs	r2, #0
 800afae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800afb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800afba:	4622      	mov	r2, r4
 800afbc:	462b      	mov	r3, r5
 800afbe:	1891      	adds	r1, r2, r2
 800afc0:	65b9      	str	r1, [r7, #88]	; 0x58
 800afc2:	415b      	adcs	r3, r3
 800afc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800afca:	4621      	mov	r1, r4
 800afcc:	eb12 0801 	adds.w	r8, r2, r1
 800afd0:	4629      	mov	r1, r5
 800afd2:	eb43 0901 	adc.w	r9, r3, r1
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	f04f 0300 	mov.w	r3, #0
 800afde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afea:	4690      	mov	r8, r2
 800afec:	4699      	mov	r9, r3
 800afee:	4623      	mov	r3, r4
 800aff0:	eb18 0303 	adds.w	r3, r8, r3
 800aff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aff8:	462b      	mov	r3, r5
 800affa:	eb49 0303 	adc.w	r3, r9, r3
 800affe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b00e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b016:	460b      	mov	r3, r1
 800b018:	18db      	adds	r3, r3, r3
 800b01a:	653b      	str	r3, [r7, #80]	; 0x50
 800b01c:	4613      	mov	r3, r2
 800b01e:	eb42 0303 	adc.w	r3, r2, r3
 800b022:	657b      	str	r3, [r7, #84]	; 0x54
 800b024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b02c:	f7f5 fe4c 	bl	8000cc8 <__aeabi_uldivmod>
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	4b61      	ldr	r3, [pc, #388]	; (800b1bc <UART_SetConfig+0x2d4>)
 800b036:	fba3 2302 	umull	r2, r3, r3, r2
 800b03a:	095b      	lsrs	r3, r3, #5
 800b03c:	011c      	lsls	r4, r3, #4
 800b03e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b042:	2200      	movs	r2, #0
 800b044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b04c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	1891      	adds	r1, r2, r2
 800b056:	64b9      	str	r1, [r7, #72]	; 0x48
 800b058:	415b      	adcs	r3, r3
 800b05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b05c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b060:	4641      	mov	r1, r8
 800b062:	eb12 0a01 	adds.w	sl, r2, r1
 800b066:	4649      	mov	r1, r9
 800b068:	eb43 0b01 	adc.w	fp, r3, r1
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b07c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b080:	4692      	mov	sl, r2
 800b082:	469b      	mov	fp, r3
 800b084:	4643      	mov	r3, r8
 800b086:	eb1a 0303 	adds.w	r3, sl, r3
 800b08a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b08e:	464b      	mov	r3, r9
 800b090:	eb4b 0303 	adc.w	r3, fp, r3
 800b094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	18db      	adds	r3, r3, r3
 800b0b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	eb42 0303 	adc.w	r3, r2, r3
 800b0b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b0ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0c2:	f7f5 fe01 	bl	8000cc8 <__aeabi_uldivmod>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	4b3b      	ldr	r3, [pc, #236]	; (800b1bc <UART_SetConfig+0x2d4>)
 800b0ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	2264      	movs	r2, #100	; 0x64
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	1acb      	subs	r3, r1, r3
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <UART_SetConfig+0x2d4>)
 800b0e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b0e8:	095b      	lsrs	r3, r3, #5
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0f0:	441c      	add	r4, r3
 800b0f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b104:	4642      	mov	r2, r8
 800b106:	464b      	mov	r3, r9
 800b108:	1891      	adds	r1, r2, r2
 800b10a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b10c:	415b      	adcs	r3, r3
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b114:	4641      	mov	r1, r8
 800b116:	1851      	adds	r1, r2, r1
 800b118:	6339      	str	r1, [r7, #48]	; 0x30
 800b11a:	4649      	mov	r1, r9
 800b11c:	414b      	adcs	r3, r1
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
 800b120:	f04f 0200 	mov.w	r2, #0
 800b124:	f04f 0300 	mov.w	r3, #0
 800b128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b12c:	4659      	mov	r1, fp
 800b12e:	00cb      	lsls	r3, r1, #3
 800b130:	4651      	mov	r1, sl
 800b132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b136:	4651      	mov	r1, sl
 800b138:	00ca      	lsls	r2, r1, #3
 800b13a:	4610      	mov	r0, r2
 800b13c:	4619      	mov	r1, r3
 800b13e:	4603      	mov	r3, r0
 800b140:	4642      	mov	r2, r8
 800b142:	189b      	adds	r3, r3, r2
 800b144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b148:	464b      	mov	r3, r9
 800b14a:	460a      	mov	r2, r1
 800b14c:	eb42 0303 	adc.w	r3, r2, r3
 800b150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b168:	460b      	mov	r3, r1
 800b16a:	18db      	adds	r3, r3, r3
 800b16c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b16e:	4613      	mov	r3, r2
 800b170:	eb42 0303 	adc.w	r3, r2, r3
 800b174:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b17a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b17e:	f7f5 fda3 	bl	8000cc8 <__aeabi_uldivmod>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <UART_SetConfig+0x2d4>)
 800b188:	fba3 1302 	umull	r1, r3, r3, r2
 800b18c:	095b      	lsrs	r3, r3, #5
 800b18e:	2164      	movs	r1, #100	; 0x64
 800b190:	fb01 f303 	mul.w	r3, r1, r3
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	3332      	adds	r3, #50	; 0x32
 800b19a:	4a08      	ldr	r2, [pc, #32]	; (800b1bc <UART_SetConfig+0x2d4>)
 800b19c:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a0:	095b      	lsrs	r3, r3, #5
 800b1a2:	f003 0207 	and.w	r2, r3, #7
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4422      	add	r2, r4
 800b1ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1b0:	e106      	b.n	800b3c0 <UART_SetConfig+0x4d8>
 800b1b2:	bf00      	nop
 800b1b4:	40011000 	.word	0x40011000
 800b1b8:	40011400 	.word	0x40011400
 800b1bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b1d2:	4642      	mov	r2, r8
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	1891      	adds	r1, r2, r2
 800b1d8:	6239      	str	r1, [r7, #32]
 800b1da:	415b      	adcs	r3, r3
 800b1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1e2:	4641      	mov	r1, r8
 800b1e4:	1854      	adds	r4, r2, r1
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	eb43 0501 	adc.w	r5, r3, r1
 800b1ec:	f04f 0200 	mov.w	r2, #0
 800b1f0:	f04f 0300 	mov.w	r3, #0
 800b1f4:	00eb      	lsls	r3, r5, #3
 800b1f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1fa:	00e2      	lsls	r2, r4, #3
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	461d      	mov	r5, r3
 800b200:	4643      	mov	r3, r8
 800b202:	18e3      	adds	r3, r4, r3
 800b204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b208:	464b      	mov	r3, r9
 800b20a:	eb45 0303 	adc.w	r3, r5, r3
 800b20e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b21e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b22e:	4629      	mov	r1, r5
 800b230:	008b      	lsls	r3, r1, #2
 800b232:	4621      	mov	r1, r4
 800b234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b238:	4621      	mov	r1, r4
 800b23a:	008a      	lsls	r2, r1, #2
 800b23c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b240:	f7f5 fd42 	bl	8000cc8 <__aeabi_uldivmod>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4b60      	ldr	r3, [pc, #384]	; (800b3cc <UART_SetConfig+0x4e4>)
 800b24a:	fba3 2302 	umull	r2, r3, r3, r2
 800b24e:	095b      	lsrs	r3, r3, #5
 800b250:	011c      	lsls	r4, r3, #4
 800b252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b256:	2200      	movs	r2, #0
 800b258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b25c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	1891      	adds	r1, r2, r2
 800b26a:	61b9      	str	r1, [r7, #24]
 800b26c:	415b      	adcs	r3, r3
 800b26e:	61fb      	str	r3, [r7, #28]
 800b270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b274:	4641      	mov	r1, r8
 800b276:	1851      	adds	r1, r2, r1
 800b278:	6139      	str	r1, [r7, #16]
 800b27a:	4649      	mov	r1, r9
 800b27c:	414b      	adcs	r3, r1
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b28c:	4659      	mov	r1, fp
 800b28e:	00cb      	lsls	r3, r1, #3
 800b290:	4651      	mov	r1, sl
 800b292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b296:	4651      	mov	r1, sl
 800b298:	00ca      	lsls	r2, r1, #3
 800b29a:	4610      	mov	r0, r2
 800b29c:	4619      	mov	r1, r3
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	189b      	adds	r3, r3, r2
 800b2a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	460a      	mov	r2, r1
 800b2ac:	eb42 0303 	adc.w	r3, r2, r3
 800b2b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2be:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2c0:	f04f 0200 	mov.w	r2, #0
 800b2c4:	f04f 0300 	mov.w	r3, #0
 800b2c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	008b      	lsls	r3, r1, #2
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	008a      	lsls	r2, r1, #2
 800b2da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b2de:	f7f5 fcf3 	bl	8000cc8 <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4b38      	ldr	r3, [pc, #224]	; (800b3cc <UART_SetConfig+0x4e4>)
 800b2ea:	fba3 2301 	umull	r2, r3, r3, r1
 800b2ee:	095b      	lsrs	r3, r3, #5
 800b2f0:	2264      	movs	r2, #100	; 0x64
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	1acb      	subs	r3, r1, r3
 800b2f8:	011b      	lsls	r3, r3, #4
 800b2fa:	3332      	adds	r3, #50	; 0x32
 800b2fc:	4a33      	ldr	r2, [pc, #204]	; (800b3cc <UART_SetConfig+0x4e4>)
 800b2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b302:	095b      	lsrs	r3, r3, #5
 800b304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b308:	441c      	add	r4, r3
 800b30a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b30e:	2200      	movs	r2, #0
 800b310:	673b      	str	r3, [r7, #112]	; 0x70
 800b312:	677a      	str	r2, [r7, #116]	; 0x74
 800b314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b318:	4642      	mov	r2, r8
 800b31a:	464b      	mov	r3, r9
 800b31c:	1891      	adds	r1, r2, r2
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	415b      	adcs	r3, r3
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b328:	4641      	mov	r1, r8
 800b32a:	1851      	adds	r1, r2, r1
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	4649      	mov	r1, r9
 800b330:	414b      	adcs	r3, r1
 800b332:	607b      	str	r3, [r7, #4]
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	f04f 0300 	mov.w	r3, #0
 800b33c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b340:	4659      	mov	r1, fp
 800b342:	00cb      	lsls	r3, r1, #3
 800b344:	4651      	mov	r1, sl
 800b346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b34a:	4651      	mov	r1, sl
 800b34c:	00ca      	lsls	r2, r1, #3
 800b34e:	4610      	mov	r0, r2
 800b350:	4619      	mov	r1, r3
 800b352:	4603      	mov	r3, r0
 800b354:	4642      	mov	r2, r8
 800b356:	189b      	adds	r3, r3, r2
 800b358:	66bb      	str	r3, [r7, #104]	; 0x68
 800b35a:	464b      	mov	r3, r9
 800b35c:	460a      	mov	r2, r1
 800b35e:	eb42 0303 	adc.w	r3, r2, r3
 800b362:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	663b      	str	r3, [r7, #96]	; 0x60
 800b36e:	667a      	str	r2, [r7, #100]	; 0x64
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b37c:	4649      	mov	r1, r9
 800b37e:	008b      	lsls	r3, r1, #2
 800b380:	4641      	mov	r1, r8
 800b382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b386:	4641      	mov	r1, r8
 800b388:	008a      	lsls	r2, r1, #2
 800b38a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b38e:	f7f5 fc9b 	bl	8000cc8 <__aeabi_uldivmod>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <UART_SetConfig+0x4e4>)
 800b398:	fba3 1302 	umull	r1, r3, r3, r2
 800b39c:	095b      	lsrs	r3, r3, #5
 800b39e:	2164      	movs	r1, #100	; 0x64
 800b3a0:	fb01 f303 	mul.w	r3, r1, r3
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	011b      	lsls	r3, r3, #4
 800b3a8:	3332      	adds	r3, #50	; 0x32
 800b3aa:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <UART_SetConfig+0x4e4>)
 800b3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b0:	095b      	lsrs	r3, r3, #5
 800b3b2:	f003 020f 	and.w	r2, r3, #15
 800b3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4422      	add	r2, r4
 800b3be:	609a      	str	r2, [r3, #8]
}
 800b3c0:	bf00      	nop
 800b3c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3cc:	51eb851f 	.word	0x51eb851f

0800b3d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b3d4:	4904      	ldr	r1, [pc, #16]	; (800b3e8 <MX_FATFS_Init+0x18>)
 800b3d6:	4805      	ldr	r0, [pc, #20]	; (800b3ec <MX_FATFS_Init+0x1c>)
 800b3d8:	f003 fabe 	bl	800e958 <FATFS_LinkDriver>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <MX_FATFS_Init+0x20>)
 800b3e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b3e4:	bf00      	nop
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	200029ec 	.word	0x200029ec
 800b3ec:	20000010 	.word	0x20000010
 800b3f0:	200029e8 	.word	0x200029e8

0800b3f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b3f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	4618      	mov	r0, r3
 800b412:	f7f6 fb99 	bl	8001b48 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800b416:	bf00      	nop
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7f6 fc71 	bl	8001d14 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800b432:	bf00      	nop
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800b44c:	7bf8      	ldrb	r0, [r7, #15]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	f7f6 fc74 	bl	8001d40 <SD_disk_read>
  /* USER CODE END READ */
}
 800b458:	bf00      	nop
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	603b      	str	r3, [r7, #0]
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800b472:	7bf8      	ldrb	r0, [r7, #15]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	68b9      	ldr	r1, [r7, #8]
 800b47a:	f7f6 fccb 	bl	8001e14 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800b47e:	bf00      	nop
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	603a      	str	r2, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
 800b494:	460b      	mov	r3, r1
 800b496:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	79b9      	ldrb	r1, [r7, #6]
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f6 fd3c 	bl	8001f1c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800b4a4:	bf00      	nop
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	4a08      	ldr	r2, [pc, #32]	; (800b4e0 <disk_status+0x30>)
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	79fa      	ldrb	r2, [r7, #7]
 800b4c8:	4905      	ldr	r1, [pc, #20]	; (800b4e0 <disk_status+0x30>)
 800b4ca:	440a      	add	r2, r1
 800b4cc:	7a12      	ldrb	r2, [r2, #8]
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20002a18 	.word	0x20002a18

0800b4e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	4a0d      	ldr	r2, [pc, #52]	; (800b52c <disk_initialize+0x48>)
 800b4f6:	5cd3      	ldrb	r3, [r2, r3]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d111      	bne.n	800b520 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b4fc:	79fb      	ldrb	r3, [r7, #7]
 800b4fe:	4a0b      	ldr	r2, [pc, #44]	; (800b52c <disk_initialize+0x48>)
 800b500:	2101      	movs	r1, #1
 800b502:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	4a09      	ldr	r2, [pc, #36]	; (800b52c <disk_initialize+0x48>)
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	79fa      	ldrb	r2, [r7, #7]
 800b512:	4906      	ldr	r1, [pc, #24]	; (800b52c <disk_initialize+0x48>)
 800b514:	440a      	add	r2, r1
 800b516:	7a12      	ldrb	r2, [r2, #8]
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20002a18 	.word	0x20002a18

0800b530 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4a0a      	ldr	r2, [pc, #40]	; (800b56c <disk_read+0x3c>)
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	689c      	ldr	r4, [r3, #8]
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	4a07      	ldr	r2, [pc, #28]	; (800b56c <disk_read+0x3c>)
 800b550:	4413      	add	r3, r2
 800b552:	7a18      	ldrb	r0, [r3, #8]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	47a0      	blx	r4
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b560:	7dfb      	ldrb	r3, [r7, #23]
}
 800b562:	4618      	mov	r0, r3
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd90      	pop	{r4, r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20002a18 	.word	0x20002a18

0800b570 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b570:	b590      	push	{r4, r7, lr}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4603      	mov	r3, r0
 800b57e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	4a0a      	ldr	r2, [pc, #40]	; (800b5ac <disk_write+0x3c>)
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	68dc      	ldr	r4, [r3, #12]
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	4a07      	ldr	r2, [pc, #28]	; (800b5ac <disk_write+0x3c>)
 800b590:	4413      	add	r3, r2
 800b592:	7a18      	ldrb	r0, [r3, #8]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	47a0      	blx	r4
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd90      	pop	{r4, r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20002a18 	.word	0x20002a18

0800b5b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	603a      	str	r2, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
 800b5c2:	4a09      	ldr	r2, [pc, #36]	; (800b5e8 <disk_ioctl+0x38>)
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	79fa      	ldrb	r2, [r7, #7]
 800b5ce:	4906      	ldr	r1, [pc, #24]	; (800b5e8 <disk_ioctl+0x38>)
 800b5d0:	440a      	add	r2, r1
 800b5d2:	7a10      	ldrb	r0, [r2, #8]
 800b5d4:	79b9      	ldrb	r1, [r7, #6]
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	4798      	blx	r3
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20002a18 	.word	0x20002a18

0800b5ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b5fc:	89fb      	ldrh	r3, [r7, #14]
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	b21a      	sxth	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	b21b      	sxth	r3, r3
 800b608:	4313      	orrs	r3, r2
 800b60a:	b21b      	sxth	r3, r3
 800b60c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b60e:	89fb      	ldrh	r3, [r7, #14]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3303      	adds	r3, #3
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	3202      	adds	r2, #2
 800b634:	7812      	ldrb	r2, [r2, #0]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	3201      	adds	r2, #1
 800b642:	7812      	ldrb	r2, [r2, #0]
 800b644:	4313      	orrs	r3, r2
 800b646:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	021b      	lsls	r3, r3, #8
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	4313      	orrs	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]
	return rv;
 800b654:	68fb      	ldr	r3, [r7, #12]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	887a      	ldrh	r2, [r7, #2]
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	887b      	ldrh	r3, [r7, #2]
 800b67c:	0a1b      	lsrs	r3, r3, #8
 800b67e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	607a      	str	r2, [r7, #4]
 800b686:	887a      	ldrh	r2, [r7, #2]
 800b688:	b2d2      	uxtb	r2, r2
 800b68a:	701a      	strb	r2, [r3, #0]
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	b2d2      	uxtb	r2, r2
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	0a1b      	lsrs	r3, r3, #8
 800b6b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	607a      	str	r2, [r7, #4]
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	701a      	strb	r2, [r3, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00d      	beq.n	800b726 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	1c53      	adds	r3, r2, #1
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	1c59      	adds	r1, r3, #1
 800b714:	6179      	str	r1, [r7, #20]
 800b716:	7812      	ldrb	r2, [r2, #0]
 800b718:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	607b      	str	r3, [r7, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1f1      	bne.n	800b70a <mem_cpy+0x1a>
	}
}
 800b726:	bf00      	nop
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b732:	b480      	push	{r7}
 800b734:	b087      	sub	sp, #28
 800b736:	af00      	add	r7, sp, #0
 800b738:	60f8      	str	r0, [r7, #12]
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	617a      	str	r2, [r7, #20]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	3b01      	subs	r3, #1
 800b752:	607b      	str	r3, [r7, #4]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f3      	bne.n	800b742 <mem_set+0x10>
}
 800b75a:	bf00      	nop
 800b75c:	bf00      	nop
 800b75e:	371c      	adds	r7, #28
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b768:	b480      	push	{r7}
 800b76a:	b089      	sub	sp, #36	; 0x24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	61fb      	str	r3, [r7, #28]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	61fa      	str	r2, [r7, #28]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	61ba      	str	r2, [r7, #24]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	1acb      	subs	r3, r1, r3
 800b794:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3b01      	subs	r3, #1
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <mem_cmp+0x40>
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d0eb      	beq.n	800b780 <mem_cmp+0x18>

	return r;
 800b7a8:	697b      	ldr	r3, [r7, #20]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3724      	adds	r7, #36	; 0x24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b7c0:	e002      	b.n	800b7c8 <chk_chr+0x12>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	607b      	str	r3, [r7, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d005      	beq.n	800b7dc <chk_chr+0x26>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d1f2      	bne.n	800b7c2 <chk_chr+0xc>
	return *str;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	781b      	ldrb	r3, [r3, #0]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <lock_fs+0x22>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f003 f9ac 	bl	800eb5c <ff_req_grant>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <lock_fs+0x22>
 800b80a:	2301      	movs	r3, #1
 800b80c:	e000      	b.n	800b810 <lock_fs+0x24>
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00d      	beq.n	800b846 <unlock_fs+0x2e>
 800b82a:	78fb      	ldrb	r3, [r7, #3]
 800b82c:	2b0c      	cmp	r3, #12
 800b82e:	d00a      	beq.n	800b846 <unlock_fs+0x2e>
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	2b0b      	cmp	r3, #11
 800b834:	d007      	beq.n	800b846 <unlock_fs+0x2e>
 800b836:	78fb      	ldrb	r3, [r7, #3]
 800b838:	2b0f      	cmp	r3, #15
 800b83a:	d004      	beq.n	800b846 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	4618      	mov	r0, r3
 800b842:	f003 f9a0 	bl	800eb86 <ff_rel_grant>
	}
}
 800b846:	bf00      	nop
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
	...

0800b850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	60bb      	str	r3, [r7, #8]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	e029      	b.n	800b8b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b864:	4a27      	ldr	r2, [pc, #156]	; (800b904 <chk_lock+0xb4>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	4413      	add	r3, r2
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d01d      	beq.n	800b8ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b872:	4a24      	ldr	r2, [pc, #144]	; (800b904 <chk_lock+0xb4>)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d116      	bne.n	800b8b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b884:	4a1f      	ldr	r2, [pc, #124]	; (800b904 <chk_lock+0xb4>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	4413      	add	r3, r2
 800b88c:	3304      	adds	r3, #4
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b894:	429a      	cmp	r2, r3
 800b896:	d10c      	bne.n	800b8b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b898:	4a1a      	ldr	r2, [pc, #104]	; (800b904 <chk_lock+0xb4>)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	4413      	add	r3, r2
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d102      	bne.n	800b8b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b8ac:	e007      	b.n	800b8be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d9d2      	bls.n	800b864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d109      	bne.n	800b8d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <chk_lock+0x80>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d101      	bne.n	800b8d4 <chk_lock+0x84>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e010      	b.n	800b8f6 <chk_lock+0xa6>
 800b8d4:	2312      	movs	r3, #18
 800b8d6:	e00e      	b.n	800b8f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d108      	bne.n	800b8f0 <chk_lock+0xa0>
 800b8de:	4a09      	ldr	r2, [pc, #36]	; (800b904 <chk_lock+0xb4>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	011b      	lsls	r3, r3, #4
 800b8e4:	4413      	add	r3, r2
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ee:	d101      	bne.n	800b8f4 <chk_lock+0xa4>
 800b8f0:	2310      	movs	r3, #16
 800b8f2:	e000      	b.n	800b8f6 <chk_lock+0xa6>
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	200029f8 	.word	0x200029f8

0800b908 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	e002      	b.n	800b91a <enq_lock+0x12>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3301      	adds	r3, #1
 800b918:	607b      	str	r3, [r7, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d806      	bhi.n	800b92e <enq_lock+0x26>
 800b920:	4a09      	ldr	r2, [pc, #36]	; (800b948 <enq_lock+0x40>)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	011b      	lsls	r3, r3, #4
 800b926:	4413      	add	r3, r2
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f2      	bne.n	800b914 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b02      	cmp	r3, #2
 800b932:	bf14      	ite	ne
 800b934:	2301      	movne	r3, #1
 800b936:	2300      	moveq	r3, #0
 800b938:	b2db      	uxtb	r3, r3
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	200029f8 	.word	0x200029f8

0800b94c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	e01f      	b.n	800b99c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b95c:	4a41      	ldr	r2, [pc, #260]	; (800ba64 <inc_lock+0x118>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	4413      	add	r3, r2
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d113      	bne.n	800b996 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b96e:	4a3d      	ldr	r2, [pc, #244]	; (800ba64 <inc_lock+0x118>)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	4413      	add	r3, r2
 800b976:	3304      	adds	r3, #4
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b97e:	429a      	cmp	r2, r3
 800b980:	d109      	bne.n	800b996 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b982:	4a38      	ldr	r2, [pc, #224]	; (800ba64 <inc_lock+0x118>)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	011b      	lsls	r3, r3, #4
 800b988:	4413      	add	r3, r2
 800b98a:	3308      	adds	r3, #8
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b992:	429a      	cmp	r2, r3
 800b994:	d006      	beq.n	800b9a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d9dc      	bls.n	800b95c <inc_lock+0x10>
 800b9a2:	e000      	b.n	800b9a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b9a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d132      	bne.n	800ba12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	e002      	b.n	800b9b8 <inc_lock+0x6c>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d806      	bhi.n	800b9cc <inc_lock+0x80>
 800b9be:	4a29      	ldr	r2, [pc, #164]	; (800ba64 <inc_lock+0x118>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	4413      	add	r3, r2
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f2      	bne.n	800b9b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d101      	bne.n	800b9d6 <inc_lock+0x8a>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e040      	b.n	800ba58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4922      	ldr	r1, [pc, #136]	; (800ba64 <inc_lock+0x118>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	440b      	add	r3, r1
 800b9e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	491e      	ldr	r1, [pc, #120]	; (800ba64 <inc_lock+0x118>)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	440b      	add	r3, r1
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	491a      	ldr	r1, [pc, #104]	; (800ba64 <inc_lock+0x118>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	440b      	add	r3, r1
 800ba00:	3308      	adds	r3, #8
 800ba02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba04:	4a17      	ldr	r2, [pc, #92]	; (800ba64 <inc_lock+0x118>)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	4413      	add	r3, r2
 800ba0c:	330c      	adds	r3, #12
 800ba0e:	2200      	movs	r2, #0
 800ba10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d009      	beq.n	800ba2c <inc_lock+0xe0>
 800ba18:	4a12      	ldr	r2, [pc, #72]	; (800ba64 <inc_lock+0x118>)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	4413      	add	r3, r2
 800ba20:	330c      	adds	r3, #12
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <inc_lock+0xe0>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e015      	b.n	800ba58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d108      	bne.n	800ba44 <inc_lock+0xf8>
 800ba32:	4a0c      	ldr	r2, [pc, #48]	; (800ba64 <inc_lock+0x118>)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	330c      	adds	r3, #12
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	e001      	b.n	800ba48 <inc_lock+0xfc>
 800ba44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba48:	4906      	ldr	r1, [pc, #24]	; (800ba64 <inc_lock+0x118>)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	011b      	lsls	r3, r3, #4
 800ba4e:	440b      	add	r3, r1
 800ba50:	330c      	adds	r3, #12
 800ba52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	3301      	adds	r3, #1
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	200029f8 	.word	0x200029f8

0800ba68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	607b      	str	r3, [r7, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d825      	bhi.n	800bac8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ba7c:	4a17      	ldr	r2, [pc, #92]	; (800badc <dec_lock+0x74>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	4413      	add	r3, r2
 800ba84:	330c      	adds	r3, #12
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba8a:	89fb      	ldrh	r3, [r7, #14]
 800ba8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba90:	d101      	bne.n	800ba96 <dec_lock+0x2e>
 800ba92:	2300      	movs	r3, #0
 800ba94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba96:	89fb      	ldrh	r3, [r7, #14]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <dec_lock+0x3a>
 800ba9c:	89fb      	ldrh	r3, [r7, #14]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800baa2:	4a0e      	ldr	r2, [pc, #56]	; (800badc <dec_lock+0x74>)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	4413      	add	r3, r2
 800baaa:	330c      	adds	r3, #12
 800baac:	89fa      	ldrh	r2, [r7, #14]
 800baae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bab0:	89fb      	ldrh	r3, [r7, #14]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d105      	bne.n	800bac2 <dec_lock+0x5a>
 800bab6:	4a09      	ldr	r2, [pc, #36]	; (800badc <dec_lock+0x74>)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	737b      	strb	r3, [r7, #13]
 800bac6:	e001      	b.n	800bacc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bac8:	2302      	movs	r3, #2
 800baca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bacc:	7b7b      	ldrb	r3, [r7, #13]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	200029f8 	.word	0x200029f8

0800bae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	e010      	b.n	800bb10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800baee:	4a0d      	ldr	r2, [pc, #52]	; (800bb24 <clear_lock+0x44>)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	4413      	add	r3, r2
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d105      	bne.n	800bb0a <clear_lock+0x2a>
 800bafe:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <clear_lock+0x44>)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d9eb      	bls.n	800baee <clear_lock+0xe>
	}
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	200029f8 	.word	0x200029f8

0800bb28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	78db      	ldrb	r3, [r3, #3]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d034      	beq.n	800bba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	7858      	ldrb	r0, [r3, #1]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	f7ff fd0e 	bl	800b570 <disk_write>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	73fb      	strb	r3, [r7, #15]
 800bb5e:	e022      	b.n	800bba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	1ad2      	subs	r2, r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d217      	bcs.n	800bba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	789b      	ldrb	r3, [r3, #2]
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	e010      	b.n	800bba0 <sync_window+0x78>
					wsect += fs->fsize;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4413      	add	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7858      	ldrb	r0, [r3, #1]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb92:	2301      	movs	r3, #1
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	f7ff fceb 	bl	800b570 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d8eb      	bhi.n	800bb7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d01b      	beq.n	800bc00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff ffad 	bl	800bb28 <sync_window>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d113      	bne.n	800bc00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7858      	ldrb	r0, [r3, #1]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	f7ff fca3 	bl	800b530 <disk_read>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff ff87 	bl	800bb28 <sync_window>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d159      	bne.n	800bcd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d149      	bne.n	800bcc0 <sync_fs+0xb4>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	791b      	ldrb	r3, [r3, #4]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d145      	bne.n	800bcc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	899b      	ldrh	r3, [r3, #12]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	2100      	movs	r1, #0
 800bc42:	f7ff fd76 	bl	800b732 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	333c      	adds	r3, #60	; 0x3c
 800bc4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff fd05 	bl	800b662 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	333c      	adds	r3, #60	; 0x3c
 800bc5c:	4921      	ldr	r1, [pc, #132]	; (800bce4 <sync_fs+0xd8>)
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7ff fd1a 	bl	800b698 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	333c      	adds	r3, #60	; 0x3c
 800bc68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc6c:	491e      	ldr	r1, [pc, #120]	; (800bce8 <sync_fs+0xdc>)
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff fd12 	bl	800b698 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	333c      	adds	r3, #60	; 0x3c
 800bc78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7ff fd08 	bl	800b698 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	333c      	adds	r3, #60	; 0x3c
 800bc8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7ff fcfe 	bl	800b698 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7858      	ldrb	r0, [r3, #1]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f7ff fc5b 	bl	800b570 <disk_write>
			fs->fsi_flag = 0;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	785b      	ldrb	r3, [r3, #1]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff fc71 	bl	800b5b0 <disk_ioctl>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <sync_fs+0xcc>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	41615252 	.word	0x41615252
 800bce8:	61417272 	.word	0x61417272

0800bcec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	3b02      	subs	r3, #2
 800bcfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	3b02      	subs	r3, #2
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d301      	bcc.n	800bd0c <clust2sect+0x20>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e008      	b.n	800bd1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	895b      	ldrh	r3, [r3, #10]
 800bd10:	461a      	mov	r2, r3
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	fb03 f202 	mul.w	r2, r3, r2
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	4413      	add	r3, r2
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b086      	sub	sp, #24
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d904      	bls.n	800bd4a <get_fat+0x20>
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d302      	bcc.n	800bd50 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	e0bb      	b.n	800bec8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd50:	f04f 33ff 	mov.w	r3, #4294967295
 800bd54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	f000 8083 	beq.w	800be66 <get_fat+0x13c>
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	f300 80a7 	bgt.w	800beb4 <get_fat+0x18a>
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d002      	beq.n	800bd70 <get_fat+0x46>
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d056      	beq.n	800be1c <get_fat+0xf2>
 800bd6e:	e0a1      	b.n	800beb4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	085b      	lsrs	r3, r3, #1
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	899b      	ldrh	r3, [r3, #12]
 800bd86:	4619      	mov	r1, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd8e:	4413      	add	r3, r2
 800bd90:	4619      	mov	r1, r3
 800bd92:	6938      	ldr	r0, [r7, #16]
 800bd94:	f7ff ff0c 	bl	800bbb0 <move_window>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f040 808d 	bne.w	800beba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	60fa      	str	r2, [r7, #12]
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	8992      	ldrh	r2, [r2, #12]
 800bdaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdae:	fb01 f202 	mul.w	r2, r1, r2
 800bdb2:	1a9b      	subs	r3, r3, r2
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	899b      	ldrh	r3, [r3, #12]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdce:	4413      	add	r3, r2
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6938      	ldr	r0, [r7, #16]
 800bdd4:	f7ff feec 	bl	800bbb0 <move_window>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d16f      	bne.n	800bebe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	899b      	ldrh	r3, [r3, #12]
 800bde2:	461a      	mov	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdea:	fb01 f202 	mul.w	r2, r1, r2
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf8:	021b      	lsls	r3, r3, #8
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <get_fat+0xe8>
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	091b      	lsrs	r3, r3, #4
 800be10:	e002      	b.n	800be18 <get_fat+0xee>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be18:	617b      	str	r3, [r7, #20]
			break;
 800be1a:	e055      	b.n	800bec8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	899b      	ldrh	r3, [r3, #12]
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	b29b      	uxth	r3, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800be30:	4413      	add	r3, r2
 800be32:	4619      	mov	r1, r3
 800be34:	6938      	ldr	r0, [r7, #16]
 800be36:	f7ff febb 	bl	800bbb0 <move_window>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d140      	bne.n	800bec2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	8992      	ldrh	r2, [r2, #12]
 800be4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800be52:	fb00 f202 	mul.w	r2, r0, r2
 800be56:	1a9b      	subs	r3, r3, r2
 800be58:	440b      	add	r3, r1
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fbc6 	bl	800b5ec <ld_word>
 800be60:	4603      	mov	r3, r0
 800be62:	617b      	str	r3, [r7, #20]
			break;
 800be64:	e030      	b.n	800bec8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	899b      	ldrh	r3, [r3, #12]
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	b29b      	uxth	r3, r3
 800be72:	4619      	mov	r1, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	fbb3 f3f1 	udiv	r3, r3, r1
 800be7a:	4413      	add	r3, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	6938      	ldr	r0, [r7, #16]
 800be80:	f7ff fe96 	bl	800bbb0 <move_window>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d11d      	bne.n	800bec6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	8992      	ldrh	r2, [r2, #12]
 800be98:	fbb3 f0f2 	udiv	r0, r3, r2
 800be9c:	fb00 f202 	mul.w	r2, r0, r2
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	440b      	add	r3, r1
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fbb9 	bl	800b61c <ld_dword>
 800beaa:	4603      	mov	r3, r0
 800beac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beb0:	617b      	str	r3, [r7, #20]
			break;
 800beb2:	e009      	b.n	800bec8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e006      	b.n	800bec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beba:	bf00      	nop
 800bebc:	e004      	b.n	800bec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bebe:	bf00      	nop
 800bec0:	e002      	b.n	800bec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bec2:	bf00      	nop
 800bec4:	e000      	b.n	800bec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bec6:	bf00      	nop
		}
	}

	return val;
 800bec8:	697b      	ldr	r3, [r7, #20]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bed2:	b590      	push	{r4, r7, lr}
 800bed4:	b089      	sub	sp, #36	; 0x24
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bede:	2302      	movs	r3, #2
 800bee0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	f240 8109 	bls.w	800c0fc <put_fat+0x22a>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	f080 8103 	bcs.w	800c0fc <put_fat+0x22a>
		switch (fs->fs_type) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	2b03      	cmp	r3, #3
 800befc:	f000 80b6 	beq.w	800c06c <put_fat+0x19a>
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	f300 80fb 	bgt.w	800c0fc <put_fat+0x22a>
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d003      	beq.n	800bf12 <put_fat+0x40>
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	f000 8083 	beq.w	800c016 <put_fat+0x144>
 800bf10:	e0f4      	b.n	800c0fc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	899b      	ldrh	r3, [r3, #12]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf30:	4413      	add	r3, r2
 800bf32:	4619      	mov	r1, r3
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fe3b 	bl	800bbb0 <move_window>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f040 80d4 	bne.w	800c0ee <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	61ba      	str	r2, [r7, #24]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	8992      	ldrh	r2, [r2, #12]
 800bf56:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf5a:	fb00 f202 	mul.w	r2, r0, r2
 800bf5e:	1a9b      	subs	r3, r3, r2
 800bf60:	440b      	add	r3, r1
 800bf62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00d      	beq.n	800bf8a <put_fat+0xb8>
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	b25b      	sxtb	r3, r3
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	b25a      	sxtb	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	011b      	lsls	r3, r3, #4
 800bf80:	b25b      	sxtb	r3, r3
 800bf82:	4313      	orrs	r3, r2
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	e001      	b.n	800bf8e <put_fat+0xbc>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	899b      	ldrh	r3, [r3, #12]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfa8:	4413      	add	r3, r2
 800bfaa:	4619      	mov	r1, r3
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fdff 	bl	800bbb0 <move_window>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfb6:	7ffb      	ldrb	r3, [r7, #31]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 809a 	bne.w	800c0f2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	899b      	ldrh	r3, [r3, #12]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfd0:	fb00 f202 	mul.w	r2, r0, r2
 800bfd4:	1a9b      	subs	r3, r3, r2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d003      	beq.n	800bfec <put_fat+0x11a>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	091b      	lsrs	r3, r3, #4
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	e00e      	b.n	800c00a <put_fat+0x138>
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	f023 030f 	bic.w	r3, r3, #15
 800bff6:	b25a      	sxtb	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	0a1b      	lsrs	r3, r3, #8
 800bffc:	b25b      	sxtb	r3, r3
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	b25b      	sxtb	r3, r3
 800c004:	4313      	orrs	r3, r2
 800c006:	b25b      	sxtb	r3, r3
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	70da      	strb	r2, [r3, #3]
			break;
 800c014:	e072      	b.n	800c0fc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	899b      	ldrh	r3, [r3, #12]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	b29b      	uxth	r3, r3
 800c022:	4619      	mov	r1, r3
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	fbb3 f3f1 	udiv	r3, r3, r1
 800c02a:	4413      	add	r3, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff fdbe 	bl	800bbb0 <move_window>
 800c034:	4603      	mov	r3, r0
 800c036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c038:	7ffb      	ldrb	r3, [r7, #31]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d15b      	bne.n	800c0f6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	8992      	ldrh	r2, [r2, #12]
 800c04c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c050:	fb00 f202 	mul.w	r2, r0, r2
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	440b      	add	r3, r1
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	b292      	uxth	r2, r2
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff faff 	bl	800b662 <st_word>
			fs->wflag = 1;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	70da      	strb	r2, [r3, #3]
			break;
 800c06a:	e047      	b.n	800c0fc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	899b      	ldrh	r3, [r3, #12]
 800c074:	089b      	lsrs	r3, r3, #2
 800c076:	b29b      	uxth	r3, r3
 800c078:	4619      	mov	r1, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c080:	4413      	add	r3, r2
 800c082:	4619      	mov	r1, r3
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff fd93 	bl	800bbb0 <move_window>
 800c08a:	4603      	mov	r3, r0
 800c08c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d132      	bne.n	800c0fa <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	8992      	ldrh	r2, [r2, #12]
 800c0a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0ac:	fb00 f202 	mul.w	r2, r0, r2
 800c0b0:	1a9b      	subs	r3, r3, r2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fab1 	bl	800b61c <ld_dword>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0c0:	4323      	orrs	r3, r4
 800c0c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	8992      	ldrh	r2, [r2, #12]
 800c0d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0d6:	fb00 f202 	mul.w	r2, r0, r2
 800c0da:	1a9b      	subs	r3, r3, r2
 800c0dc:	440b      	add	r3, r1
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fad9 	bl	800b698 <st_dword>
			fs->wflag = 1;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	70da      	strb	r2, [r3, #3]
			break;
 800c0ec:	e006      	b.n	800c0fc <put_fat+0x22a>
			if (res != FR_OK) break;
 800c0ee:	bf00      	nop
 800c0f0:	e004      	b.n	800c0fc <put_fat+0x22a>
			if (res != FR_OK) break;
 800c0f2:	bf00      	nop
 800c0f4:	e002      	b.n	800c0fc <put_fat+0x22a>
			if (res != FR_OK) break;
 800c0f6:	bf00      	nop
 800c0f8:	e000      	b.n	800c0fc <put_fat+0x22a>
			if (res != FR_OK) break;
 800c0fa:	bf00      	nop
		}
	}
	return res;
 800c0fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3724      	adds	r7, #36	; 0x24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd90      	pop	{r4, r7, pc}

0800c106 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b088      	sub	sp, #32
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d904      	bls.n	800c12c <remove_chain+0x26>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d301      	bcc.n	800c130 <remove_chain+0x2a>
 800c12c:	2302      	movs	r3, #2
 800c12e:	e04b      	b.n	800c1c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00c      	beq.n	800c150 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c136:	f04f 32ff 	mov.w	r2, #4294967295
 800c13a:	6879      	ldr	r1, [r7, #4]
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f7ff fec8 	bl	800bed2 <put_fat>
 800c142:	4603      	mov	r3, r0
 800c144:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c146:	7ffb      	ldrb	r3, [r7, #31]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <remove_chain+0x4a>
 800c14c:	7ffb      	ldrb	r3, [r7, #31]
 800c14e:	e03b      	b.n	800c1c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff fde9 	bl	800bd2a <get_fat>
 800c158:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d031      	beq.n	800c1c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <remove_chain+0x64>
 800c166:	2302      	movs	r3, #2
 800c168:	e02e      	b.n	800c1c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c170:	d101      	bne.n	800c176 <remove_chain+0x70>
 800c172:	2301      	movs	r3, #1
 800c174:	e028      	b.n	800c1c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c176:	2200      	movs	r2, #0
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	69b8      	ldr	r0, [r7, #24]
 800c17c:	f7ff fea9 	bl	800bed2 <put_fat>
 800c180:	4603      	mov	r3, r0
 800c182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c184:	7ffb      	ldrb	r3, [r7, #31]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <remove_chain+0x88>
 800c18a:	7ffb      	ldrb	r3, [r7, #31]
 800c18c:	e01c      	b.n	800c1c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	69da      	ldr	r2, [r3, #28]
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	3b02      	subs	r3, #2
 800c198:	429a      	cmp	r2, r3
 800c19a:	d20b      	bcs.n	800c1b4 <remove_chain+0xae>
			fs->free_clst++;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	791b      	ldrb	r3, [r3, #4]
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d3c6      	bcc.n	800c150 <remove_chain+0x4a>
 800c1c2:	e000      	b.n	800c1c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10d      	bne.n	800c202 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <create_chain+0x2c>
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d31b      	bcc.n	800c234 <create_chain+0x64>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	61bb      	str	r3, [r7, #24]
 800c200:	e018      	b.n	800c234 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff fd90 	bl	800bd2a <get_fat>
 800c20a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d801      	bhi.n	800c216 <create_chain+0x46>
 800c212:	2301      	movs	r3, #1
 800c214:	e070      	b.n	800c2f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21c:	d101      	bne.n	800c222 <create_chain+0x52>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	e06a      	b.n	800c2f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d201      	bcs.n	800c230 <create_chain+0x60>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	e063      	b.n	800c2f8 <create_chain+0x128>
		scl = clst;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	3301      	adds	r3, #1
 800c23c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	429a      	cmp	r2, r3
 800c246:	d307      	bcc.n	800c258 <create_chain+0x88>
				ncl = 2;
 800c248:	2302      	movs	r3, #2
 800c24a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c24c:	69fa      	ldr	r2, [r7, #28]
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	429a      	cmp	r2, r3
 800c252:	d901      	bls.n	800c258 <create_chain+0x88>
 800c254:	2300      	movs	r3, #0
 800c256:	e04f      	b.n	800c2f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c258:	69f9      	ldr	r1, [r7, #28]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7ff fd65 	bl	800bd2a <get_fat>
 800c260:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00e      	beq.n	800c286 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d003      	beq.n	800c276 <create_chain+0xa6>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c274:	d101      	bne.n	800c27a <create_chain+0xaa>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	e03e      	b.n	800c2f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c27a:	69fa      	ldr	r2, [r7, #28]
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d1da      	bne.n	800c238 <create_chain+0x68>
 800c282:	2300      	movs	r3, #0
 800c284:	e038      	b.n	800c2f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c286:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c288:	f04f 32ff 	mov.w	r2, #4294967295
 800c28c:	69f9      	ldr	r1, [r7, #28]
 800c28e:	6938      	ldr	r0, [r7, #16]
 800c290:	f7ff fe1f 	bl	800bed2 <put_fat>
 800c294:	4603      	mov	r3, r0
 800c296:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <create_chain+0xe2>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d006      	beq.n	800c2b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2a4:	69fa      	ldr	r2, [r7, #28]
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6938      	ldr	r0, [r7, #16]
 800c2aa:	f7ff fe12 	bl	800bed2 <put_fat>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d116      	bne.n	800c2e6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	69fa      	ldr	r2, [r7, #28]
 800c2bc:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	69da      	ldr	r2, [r3, #28]
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	3b02      	subs	r3, #2
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d804      	bhi.n	800c2d6 <create_chain+0x106>
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	69db      	ldr	r3, [r3, #28]
 800c2d0:	1e5a      	subs	r2, r3, #1
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	791b      	ldrb	r3, [r3, #4]
 800c2da:	f043 0301 	orr.w	r3, r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	711a      	strb	r2, [r3, #4]
 800c2e4:	e007      	b.n	800c2f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d102      	bne.n	800c2f2 <create_chain+0x122>
 800c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f0:	e000      	b.n	800c2f4 <create_chain+0x124>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2f6:	69fb      	ldr	r3, [r7, #28]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c300:	b480      	push	{r7}
 800c302:	b087      	sub	sp, #28
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c314:	3304      	adds	r3, #4
 800c316:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	899b      	ldrh	r3, [r3, #12]
 800c31c:	461a      	mov	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	fbb3 f3f2 	udiv	r3, r3, r2
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	8952      	ldrh	r2, [r2, #10]
 800c328:	fbb3 f3f2 	udiv	r3, r3, r2
 800c32c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	1d1a      	adds	r2, r3, #4
 800c332:	613a      	str	r2, [r7, #16]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <clmt_clust+0x42>
 800c33e:	2300      	movs	r3, #0
 800c340:	e010      	b.n	800c364 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	429a      	cmp	r2, r3
 800c348:	d307      	bcc.n	800c35a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	3304      	adds	r3, #4
 800c356:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c358:	e7e9      	b.n	800c32e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c35a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	4413      	add	r3, r2
}
 800c364:	4618      	mov	r0, r3
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c386:	d204      	bcs.n	800c392 <dir_sdi+0x22>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f003 031f 	and.w	r3, r3, #31
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c392:	2302      	movs	r3, #2
 800c394:	e071      	b.n	800c47a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <dir_sdi+0x46>
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d902      	bls.n	800c3b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10c      	bne.n	800c3d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	095b      	lsrs	r3, r3, #5
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	8912      	ldrh	r2, [r2, #8]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d301      	bcc.n	800c3cc <dir_sdi+0x5c>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e056      	b.n	800c47a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	61da      	str	r2, [r3, #28]
 800c3d4:	e02d      	b.n	800c432 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	895b      	ldrh	r3, [r3, #10]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	899b      	ldrh	r3, [r3, #12]
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
 800c3e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3e6:	e019      	b.n	800c41c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6979      	ldr	r1, [r7, #20]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fc9c 	bl	800bd2a <get_fat>
 800c3f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fa:	d101      	bne.n	800c400 <dir_sdi+0x90>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e03c      	b.n	800c47a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d904      	bls.n	800c410 <dir_sdi+0xa0>
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d301      	bcc.n	800c414 <dir_sdi+0xa4>
 800c410:	2302      	movs	r3, #2
 800c412:	e032      	b.n	800c47a <dir_sdi+0x10a>
			ofs -= csz;
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	429a      	cmp	r2, r3
 800c422:	d2e1      	bcs.n	800c3e8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c424:	6979      	ldr	r1, [r7, #20]
 800c426:	6938      	ldr	r0, [r7, #16]
 800c428:	f7ff fc60 	bl	800bcec <clust2sect>
 800c42c:	4602      	mov	r2, r0
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <dir_sdi+0xd4>
 800c440:	2302      	movs	r3, #2
 800c442:	e01a      	b.n	800c47a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	69da      	ldr	r2, [r3, #28]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	899b      	ldrh	r3, [r3, #12]
 800c44c:	4619      	mov	r1, r3
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	fbb3 f3f1 	udiv	r3, r3, r1
 800c454:	441a      	add	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	899b      	ldrh	r3, [r3, #12]
 800c464:	461a      	mov	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	fbb3 f0f2 	udiv	r0, r3, r2
 800c46c:	fb00 f202 	mul.w	r2, r0, r2
 800c470:	1a9b      	subs	r3, r3, r2
 800c472:	18ca      	adds	r2, r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	3320      	adds	r3, #32
 800c498:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <dir_next+0x28>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4a8:	d301      	bcc.n	800c4ae <dir_next+0x2c>
 800c4aa:	2304      	movs	r3, #4
 800c4ac:	e0bb      	b.n	800c626 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	899b      	ldrh	r3, [r3, #12]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4ba:	fb01 f202 	mul.w	r2, r1, r2
 800c4be:	1a9b      	subs	r3, r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 809d 	bne.w	800c600 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	095b      	lsrs	r3, r3, #5
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	8912      	ldrh	r2, [r2, #8]
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	f0c0 808d 	bcc.w	800c600 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	61da      	str	r2, [r3, #28]
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	e09a      	b.n	800c626 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	899b      	ldrh	r3, [r3, #12]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	8952      	ldrh	r2, [r2, #10]
 800c500:	3a01      	subs	r2, #1
 800c502:	4013      	ands	r3, r2
 800c504:	2b00      	cmp	r3, #0
 800c506:	d17b      	bne.n	800c600 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	699b      	ldr	r3, [r3, #24]
 800c50e:	4619      	mov	r1, r3
 800c510:	4610      	mov	r0, r2
 800c512:	f7ff fc0a 	bl	800bd2a <get_fat>
 800c516:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d801      	bhi.n	800c522 <dir_next+0xa0>
 800c51e:	2302      	movs	r3, #2
 800c520:	e081      	b.n	800c626 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c528:	d101      	bne.n	800c52e <dir_next+0xac>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e07b      	b.n	800c626 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	429a      	cmp	r2, r3
 800c536:	d359      	bcc.n	800c5ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d104      	bne.n	800c548 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	61da      	str	r2, [r3, #28]
 800c544:	2304      	movs	r3, #4
 800c546:	e06e      	b.n	800c626 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7ff fe3d 	bl	800c1d0 <create_chain>
 800c556:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <dir_next+0xe0>
 800c55e:	2307      	movs	r3, #7
 800c560:	e061      	b.n	800c626 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d101      	bne.n	800c56c <dir_next+0xea>
 800c568:	2302      	movs	r3, #2
 800c56a:	e05c      	b.n	800c626 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d101      	bne.n	800c578 <dir_next+0xf6>
 800c574:	2301      	movs	r3, #1
 800c576:	e056      	b.n	800c626 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7ff fad5 	bl	800bb28 <sync_window>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <dir_next+0x106>
 800c584:	2301      	movs	r3, #1
 800c586:	e04e      	b.n	800c626 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	899b      	ldrh	r3, [r3, #12]
 800c592:	461a      	mov	r2, r3
 800c594:	2100      	movs	r1, #0
 800c596:	f7ff f8cc 	bl	800b732 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	6979      	ldr	r1, [r7, #20]
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff fba3 	bl	800bcec <clust2sect>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38
 800c5ac:	e012      	b.n	800c5d4 <dir_next+0x152>
						fs->wflag = 1;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff fab7 	bl	800bb28 <sync_window>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <dir_next+0x142>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e030      	b.n	800c626 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	613b      	str	r3, [r7, #16]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	895b      	ldrh	r3, [r3, #10]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d3e6      	bcc.n	800c5ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5f2:	6979      	ldr	r1, [r7, #20]
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7ff fb79 	bl	800bcec <clust2sect>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	899b      	ldrh	r3, [r3, #12]
 800c610:	461a      	mov	r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	fbb3 f0f2 	udiv	r0, r3, r2
 800c618:	fb00 f202 	mul.w	r2, r0, r2
 800c61c:	1a9b      	subs	r3, r3, r2
 800c61e:	18ca      	adds	r2, r1, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b086      	sub	sp, #24
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fe95 	bl	800c370 <dir_sdi>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d12b      	bne.n	800c6a8 <dir_alloc+0x7a>
		n = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	4619      	mov	r1, r3
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7ff faa8 	bl	800bbb0 <move_window>
 800c660:	4603      	mov	r3, r0
 800c662:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d11d      	bne.n	800c6a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2be5      	cmp	r3, #229	; 0xe5
 800c672:	d004      	beq.n	800c67e <dir_alloc+0x50>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6a1b      	ldr	r3, [r3, #32]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d107      	bne.n	800c68e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	3301      	adds	r3, #1
 800c682:	613b      	str	r3, [r7, #16]
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d102      	bne.n	800c692 <dir_alloc+0x64>
 800c68c:	e00c      	b.n	800c6a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c692:	2101      	movs	r1, #1
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff fef4 	bl	800c482 <dir_next>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0d7      	beq.n	800c654 <dir_alloc+0x26>
 800c6a4:	e000      	b.n	800c6a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d101      	bne.n	800c6b2 <dir_alloc+0x84>
 800c6ae:	2307      	movs	r3, #7
 800c6b0:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	331a      	adds	r3, #26
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe ff8e 	bl	800b5ec <ld_word>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d109      	bne.n	800c6f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	3314      	adds	r3, #20
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fe ff83 	bl	800b5ec <ld_word>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	041b      	lsls	r3, r3, #16
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	331a      	adds	r3, #26
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	b292      	uxth	r2, r2
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe ffa6 	bl	800b662 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d109      	bne.n	800c732 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f103 0214 	add.w	r2, r3, #20
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	0c1b      	lsrs	r3, r3, #16
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4619      	mov	r1, r3
 800c72c:	4610      	mov	r0, r2
 800c72e:	f7fe ff98 	bl	800b662 <st_word>
	}
}
 800c732:	bf00      	nop
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	331a      	adds	r3, #26
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe ff4e 	bl	800b5ec <ld_word>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <cmp_lfn+0x1e>
 800c756:	2300      	movs	r3, #0
 800c758:	e059      	b.n	800c80e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c762:	1e5a      	subs	r2, r3, #1
 800c764:	4613      	mov	r3, r2
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	4413      	add	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c770:	2301      	movs	r3, #1
 800c772:	81fb      	strh	r3, [r7, #14]
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]
 800c778:	e033      	b.n	800c7e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c77a:	4a27      	ldr	r2, [pc, #156]	; (800c818 <cmp_lfn+0xdc>)
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	4413      	add	r3, r2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	4413      	add	r3, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fe ff2f 	bl	800b5ec <ld_word>
 800c78e:	4603      	mov	r3, r0
 800c790:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c792:	89fb      	ldrh	r3, [r7, #14]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01a      	beq.n	800c7ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2bfe      	cmp	r3, #254	; 0xfe
 800c79c:	d812      	bhi.n	800c7c4 <cmp_lfn+0x88>
 800c79e:	89bb      	ldrh	r3, [r7, #12]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f002 f925 	bl	800e9f0 <ff_wtoupper>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461c      	mov	r4, r3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	617a      	str	r2, [r7, #20]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f002 f919 	bl	800e9f0 <ff_wtoupper>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	d001      	beq.n	800c7c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	e022      	b.n	800c80e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7c8:	89bb      	ldrh	r3, [r7, #12]
 800c7ca:	81fb      	strh	r3, [r7, #14]
 800c7cc:	e006      	b.n	800c7dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7ce:	89bb      	ldrh	r3, [r7, #12]
 800c7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d001      	beq.n	800c7dc <cmp_lfn+0xa0>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e018      	b.n	800c80e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b0c      	cmp	r3, #12
 800c7e6:	d9c8      	bls.n	800c77a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00b      	beq.n	800c80c <cmp_lfn+0xd0>
 800c7f4:	89fb      	ldrh	r3, [r7, #14]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d008      	beq.n	800c80c <cmp_lfn+0xd0>
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	4413      	add	r3, r2
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <cmp_lfn+0xd0>
 800c808:	2300      	movs	r3, #0
 800c80a:	e000      	b.n	800c80e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c80c:	2301      	movs	r3, #1
}
 800c80e:	4618      	mov	r0, r3
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	bd90      	pop	{r4, r7, pc}
 800c816:	bf00      	nop
 800c818:	08014608 	.word	0x08014608

0800c81c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4611      	mov	r1, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	460b      	mov	r3, r1
 800c82c:	71fb      	strb	r3, [r7, #7]
 800c82e:	4613      	mov	r3, r2
 800c830:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	330d      	adds	r3, #13
 800c836:	79ba      	ldrb	r2, [r7, #6]
 800c838:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	330b      	adds	r3, #11
 800c83e:	220f      	movs	r2, #15
 800c840:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	330c      	adds	r3, #12
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	331a      	adds	r3, #26
 800c84e:	2100      	movs	r1, #0
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe ff06 	bl	800b662 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	1e5a      	subs	r2, r3, #1
 800c85a:	4613      	mov	r3, r2
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4413      	add	r3, r2
 800c864:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	82fb      	strh	r3, [r7, #22]
 800c86a:	2300      	movs	r3, #0
 800c86c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c86e:	8afb      	ldrh	r3, [r7, #22]
 800c870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c874:	4293      	cmp	r3, r2
 800c876:	d007      	beq.n	800c888 <put_lfn+0x6c>
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	61fa      	str	r2, [r7, #28]
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4413      	add	r3, r2
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c888:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <put_lfn+0xcc>)
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	4413      	add	r3, r2
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	461a      	mov	r2, r3
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	4413      	add	r3, r2
 800c896:	8afa      	ldrh	r2, [r7, #22]
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fee1 	bl	800b662 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c8a0:	8afb      	ldrh	r3, [r7, #22]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <put_lfn+0x90>
 800c8a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	61bb      	str	r3, [r7, #24]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b0c      	cmp	r3, #12
 800c8b6:	d9da      	bls.n	800c86e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c8b8:	8afb      	ldrh	r3, [r7, #22]
 800c8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d006      	beq.n	800c8d0 <put_lfn+0xb4>
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d103      	bne.n	800c8d8 <put_lfn+0xbc>
 800c8d0:	79fb      	ldrb	r3, [r7, #7]
 800c8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	79fa      	ldrb	r2, [r7, #7]
 800c8dc:	701a      	strb	r2, [r3, #0]
}
 800c8de:	bf00      	nop
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	08014608 	.word	0x08014608

0800c8ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	; 0x30
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c8fa:	220b      	movs	r2, #11
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7fe fef6 	bl	800b6f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b05      	cmp	r3, #5
 800c908:	d92b      	bls.n	800c962 <gen_numname+0x76>
		sr = seq;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c90e:	e022      	b.n	800c956 <gen_numname+0x6a>
			wc = *lfn++;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	1c9a      	adds	r2, r3, #2
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c91a:	2300      	movs	r3, #0
 800c91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c91e:	e017      	b.n	800c950 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	005a      	lsls	r2, r3, #1
 800c924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	4413      	add	r3, r2
 800c92c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c92e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c930:	085b      	lsrs	r3, r3, #1
 800c932:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d005      	beq.n	800c94a <gen_numname+0x5e>
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c944:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c948:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	3301      	adds	r3, #1
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d9e4      	bls.n	800c920 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1d8      	bne.n	800c910 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c962:	2307      	movs	r3, #7
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	3330      	adds	r3, #48	; 0x30
 800c972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c97a:	2b39      	cmp	r3, #57	; 0x39
 800c97c:	d904      	bls.n	800c988 <gen_numname+0x9c>
 800c97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c982:	3307      	adds	r3, #7
 800c984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	1e5a      	subs	r2, r3, #1
 800c98c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c98e:	3330      	adds	r3, #48	; 0x30
 800c990:	443b      	add	r3, r7
 800c992:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c996:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	091b      	lsrs	r3, r3, #4
 800c99e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1df      	bne.n	800c966 <gen_numname+0x7a>
	ns[i] = '~';
 800c9a6:	f107 0214 	add.w	r2, r7, #20
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	4413      	add	r3, r2
 800c9ae:	227e      	movs	r2, #126	; 0x7e
 800c9b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c9b6:	e002      	b.n	800c9be <gen_numname+0xd2>
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d205      	bcs.n	800c9d2 <gen_numname+0xe6>
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	4413      	add	r3, r2
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b20      	cmp	r3, #32
 800c9d0:	d1f2      	bne.n	800c9b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	2b07      	cmp	r3, #7
 800c9d6:	d807      	bhi.n	800c9e8 <gen_numname+0xfc>
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	62ba      	str	r2, [r7, #40]	; 0x28
 800c9de:	3330      	adds	r3, #48	; 0x30
 800c9e0:	443b      	add	r3, r7
 800c9e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c9e6:	e000      	b.n	800c9ea <gen_numname+0xfe>
 800c9e8:	2120      	movs	r1, #32
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	627a      	str	r2, [r7, #36]	; 0x24
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	2b07      	cmp	r3, #7
 800c9fc:	d9e9      	bls.n	800c9d2 <gen_numname+0xe6>
}
 800c9fe:	bf00      	nop
 800ca00:	bf00      	nop
 800ca02:	3730      	adds	r7, #48	; 0x30
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ca14:	230b      	movs	r3, #11
 800ca16:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	0852      	lsrs	r2, r2, #1
 800ca1e:	01db      	lsls	r3, r3, #7
 800ca20:	4313      	orrs	r3, r2
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	1c59      	adds	r1, r3, #1
 800ca28:	6079      	str	r1, [r7, #4]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	60bb      	str	r3, [r7, #8]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1ed      	bne.n	800ca18 <sum_sfn+0x10>
	return sum;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca58:	2100      	movs	r1, #0
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff fc88 	bl	800c370 <dir_sdi>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <dir_find+0x24>
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	e0a9      	b.n	800cbc2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca6e:	23ff      	movs	r3, #255	; 0xff
 800ca70:	753b      	strb	r3, [r7, #20]
 800ca72:	7d3b      	ldrb	r3, [r7, #20]
 800ca74:	757b      	strb	r3, [r7, #21]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	4619      	mov	r1, r3
 800ca84:	6938      	ldr	r0, [r7, #16]
 800ca86:	f7ff f893 	bl	800bbb0 <move_window>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f040 8090 	bne.w	800cbb6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca9e:	7dbb      	ldrb	r3, [r7, #22]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <dir_find+0x60>
 800caa4:	2304      	movs	r3, #4
 800caa6:	75fb      	strb	r3, [r7, #23]
 800caa8:	e08a      	b.n	800cbc0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	330b      	adds	r3, #11
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cab6:	73fb      	strb	r3, [r7, #15]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	7bfa      	ldrb	r2, [r7, #15]
 800cabc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cabe:	7dbb      	ldrb	r3, [r7, #22]
 800cac0:	2be5      	cmp	r3, #229	; 0xe5
 800cac2:	d007      	beq.n	800cad4 <dir_find+0x8a>
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	f003 0308 	and.w	r3, r3, #8
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <dir_find+0x98>
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	2b0f      	cmp	r3, #15
 800cad2:	d006      	beq.n	800cae2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cad4:	23ff      	movs	r3, #255	; 0xff
 800cad6:	757b      	strb	r3, [r7, #21]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f04f 32ff 	mov.w	r2, #4294967295
 800cade:	631a      	str	r2, [r3, #48]	; 0x30
 800cae0:	e05e      	b.n	800cba0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	2b0f      	cmp	r3, #15
 800cae6:	d136      	bne.n	800cb56 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d154      	bne.n	800cba0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800caf6:	7dbb      	ldrb	r3, [r7, #22]
 800caf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00d      	beq.n	800cb1c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	7b5b      	ldrb	r3, [r3, #13]
 800cb06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb08:	7dbb      	ldrb	r3, [r7, #22]
 800cb0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb0e:	75bb      	strb	r3, [r7, #22]
 800cb10:	7dbb      	ldrb	r3, [r7, #22]
 800cb12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	695a      	ldr	r2, [r3, #20]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb1c:	7dba      	ldrb	r2, [r7, #22]
 800cb1e:	7d7b      	ldrb	r3, [r7, #21]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d115      	bne.n	800cb50 <dir_find+0x106>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	330d      	adds	r3, #13
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	7d3a      	ldrb	r2, [r7, #20]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d10e      	bne.n	800cb50 <dir_find+0x106>
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	691a      	ldr	r2, [r3, #16]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	f7ff fdfd 	bl	800c73c <cmp_lfn>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <dir_find+0x106>
 800cb48:	7d7b      	ldrb	r3, [r7, #21]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	e000      	b.n	800cb52 <dir_find+0x108>
 800cb50:	23ff      	movs	r3, #255	; 0xff
 800cb52:	757b      	strb	r3, [r7, #21]
 800cb54:	e024      	b.n	800cba0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb56:	7d7b      	ldrb	r3, [r7, #21]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d109      	bne.n	800cb70 <dir_find+0x126>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a1b      	ldr	r3, [r3, #32]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff ff51 	bl	800ca08 <sum_sfn>
 800cb66:	4603      	mov	r3, r0
 800cb68:	461a      	mov	r2, r3
 800cb6a:	7d3b      	ldrb	r3, [r7, #20]
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d024      	beq.n	800cbba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <dir_find+0x14a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a18      	ldr	r0, [r3, #32]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	3324      	adds	r3, #36	; 0x24
 800cb86:	220b      	movs	r2, #11
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7fe fded 	bl	800b768 <mem_cmp>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d014      	beq.n	800cbbe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb94:	23ff      	movs	r3, #255	; 0xff
 800cb96:	757b      	strb	r3, [r7, #21]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cba0:	2100      	movs	r1, #0
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff fc6d 	bl	800c482 <dir_next>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f43f af65 	beq.w	800ca7e <dir_find+0x34>
 800cbb4:	e004      	b.n	800cbc0 <dir_find+0x176>
		if (res != FR_OK) break;
 800cbb6:	bf00      	nop
 800cbb8:	e002      	b.n	800cbc0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbba:	bf00      	nop
 800cbbc:	e000      	b.n	800cbc0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbbe:	bf00      	nop

	return res;
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	; 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbe0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <dir_register+0x20>
 800cbe8:	2306      	movs	r3, #6
 800cbea:	e0e0      	b.n	800cdae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbec:	2300      	movs	r3, #0
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf0:	e002      	b.n	800cbf8 <dir_register+0x2c>
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	691a      	ldr	r2, [r3, #16]
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1f4      	bne.n	800cbf2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc0e:	f107 030c 	add.w	r3, r7, #12
 800cc12:	220c      	movs	r2, #12
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fd6b 	bl	800b6f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d032      	beq.n	800cc8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2240      	movs	r2, #64	; 0x40
 800cc28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc30:	e016      	b.n	800cc60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	691a      	ldr	r2, [r3, #16]
 800cc3c:	f107 010c 	add.w	r1, r7, #12
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	f7ff fe53 	bl	800c8ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff feff 	bl	800ca4a <dir_find>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cc52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d106      	bne.n	800cc68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	2b63      	cmp	r3, #99	; 0x63
 800cc64:	d9e5      	bls.n	800cc32 <dir_register+0x66>
 800cc66:	e000      	b.n	800cc6a <dir_register+0x9e>
			if (res != FR_OK) break;
 800cc68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	2b64      	cmp	r3, #100	; 0x64
 800cc6e:	d101      	bne.n	800cc74 <dir_register+0xa8>
 800cc70:	2307      	movs	r3, #7
 800cc72:	e09c      	b.n	800cdae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d002      	beq.n	800cc82 <dir_register+0xb6>
 800cc7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc80:	e095      	b.n	800cdae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc82:	7dfa      	ldrb	r2, [r7, #23]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	f003 0302 	and.w	r3, r3, #2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <dir_register+0xd8>
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	330c      	adds	r3, #12
 800cc98:	4a47      	ldr	r2, [pc, #284]	; (800cdb8 <dir_register+0x1ec>)
 800cc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9e:	089b      	lsrs	r3, r3, #2
 800cca0:	3301      	adds	r3, #1
 800cca2:	e000      	b.n	800cca6 <dir_register+0xda>
 800cca4:	2301      	movs	r3, #1
 800cca6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cca8:	6a39      	ldr	r1, [r7, #32]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff fcbf 	bl	800c62e <dir_alloc>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ccb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d148      	bne.n	800cd50 <dir_register+0x184>
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	623b      	str	r3, [r7, #32]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d042      	beq.n	800cd50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	695a      	ldr	r2, [r3, #20]
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	015b      	lsls	r3, r3, #5
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7ff fb4a 	bl	800c370 <dir_sdi>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d132      	bne.n	800cd50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3324      	adds	r3, #36	; 0x24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff fe8a 	bl	800ca08 <sum_sfn>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	69db      	ldr	r3, [r3, #28]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	69f8      	ldr	r0, [r7, #28]
 800cd00:	f7fe ff56 	bl	800bbb0 <move_window>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cd0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d11d      	bne.n	800cd4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	6918      	ldr	r0, [r3, #16]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a19      	ldr	r1, [r3, #32]
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	7efb      	ldrb	r3, [r7, #27]
 800cd20:	f7ff fd7c 	bl	800c81c <put_lfn>
				fs->wflag = 1;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2201      	movs	r2, #1
 800cd28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f7ff fba8 	bl	800c482 <dir_next>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cd38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d107      	bne.n	800cd50 <dir_register+0x184>
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	623b      	str	r3, [r7, #32]
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1d5      	bne.n	800ccf8 <dir_register+0x12c>
 800cd4c:	e000      	b.n	800cd50 <dir_register+0x184>
				if (res != FR_OK) break;
 800cd4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d128      	bne.n	800cdaa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	69db      	ldr	r3, [r3, #28]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	69f8      	ldr	r0, [r7, #28]
 800cd60:	f7fe ff26 	bl	800bbb0 <move_window>
 800cd64:	4603      	mov	r3, r0
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d11b      	bne.n	800cdaa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	2220      	movs	r2, #32
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe fcd9 	bl	800b732 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a18      	ldr	r0, [r3, #32]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3324      	adds	r3, #36	; 0x24
 800cd88:	220b      	movs	r2, #11
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f7fe fcb0 	bl	800b6f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	330c      	adds	r3, #12
 800cd9c:	f002 0218 	and.w	r2, r2, #24
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2201      	movs	r2, #1
 800cda8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3730      	adds	r7, #48	; 0x30
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	4ec4ec4f 	.word	0x4ec4ec4f

0800cdbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	; 0x28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	613b      	str	r3, [r7, #16]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	617b      	str	r3, [r7, #20]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	61ba      	str	r2, [r7, #24]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4413      	add	r3, r2
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cdea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdec:	2b1f      	cmp	r3, #31
 800cdee:	d940      	bls.n	800ce72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cdf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdf2:	2b2f      	cmp	r3, #47	; 0x2f
 800cdf4:	d006      	beq.n	800ce04 <create_name+0x48>
 800cdf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdf8:	2b5c      	cmp	r3, #92	; 0x5c
 800cdfa:	d110      	bne.n	800ce1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cdfc:	e002      	b.n	800ce04 <create_name+0x48>
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	3301      	adds	r3, #1
 800ce02:	61bb      	str	r3, [r7, #24]
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	4413      	add	r3, r2
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce0e:	d0f6      	beq.n	800cdfe <create_name+0x42>
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	4413      	add	r3, r2
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b5c      	cmp	r3, #92	; 0x5c
 800ce1a:	d0f0      	beq.n	800cdfe <create_name+0x42>
			break;
 800ce1c:	e02a      	b.n	800ce74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2bfe      	cmp	r3, #254	; 0xfe
 800ce22:	d901      	bls.n	800ce28 <create_name+0x6c>
 800ce24:	2306      	movs	r3, #6
 800ce26:	e17d      	b.n	800d124 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce30:	2101      	movs	r1, #1
 800ce32:	4618      	mov	r0, r3
 800ce34:	f001 fda0 	bl	800e978 <ff_convert>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <create_name+0x8a>
 800ce42:	2306      	movs	r3, #6
 800ce44:	e16e      	b.n	800d124 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce48:	2b7f      	cmp	r3, #127	; 0x7f
 800ce4a:	d809      	bhi.n	800ce60 <create_name+0xa4>
 800ce4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce4e:	4619      	mov	r1, r3
 800ce50:	488d      	ldr	r0, [pc, #564]	; (800d088 <create_name+0x2cc>)
 800ce52:	f7fe fcb0 	bl	800b7b6 <chk_chr>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d001      	beq.n	800ce60 <create_name+0xa4>
 800ce5c:	2306      	movs	r3, #6
 800ce5e:	e161      	b.n	800d124 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	1c5a      	adds	r2, r3, #1
 800ce64:	617a      	str	r2, [r7, #20]
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ce70:	e7b4      	b.n	800cddc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ce72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	441a      	add	r2, r3
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce80:	2b1f      	cmp	r3, #31
 800ce82:	d801      	bhi.n	800ce88 <create_name+0xcc>
 800ce84:	2304      	movs	r3, #4
 800ce86:	e000      	b.n	800ce8a <create_name+0xce>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce8e:	e011      	b.n	800ceb4 <create_name+0xf8>
		w = lfn[di - 1];
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce96:	3b01      	subs	r3, #1
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cea4:	2b20      	cmp	r3, #32
 800cea6:	d002      	beq.n	800ceae <create_name+0xf2>
 800cea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ceac:	d106      	bne.n	800cebc <create_name+0x100>
		di--;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1ea      	bne.n	800ce90 <create_name+0xd4>
 800ceba:	e000      	b.n	800cebe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cebc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4413      	add	r3, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <create_name+0x118>
 800ced0:	2306      	movs	r3, #6
 800ced2:	e127      	b.n	800d124 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3324      	adds	r3, #36	; 0x24
 800ced8:	220b      	movs	r2, #11
 800ceda:	2120      	movs	r1, #32
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fc28 	bl	800b732 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cee2:	2300      	movs	r3, #0
 800cee4:	61bb      	str	r3, [r7, #24]
 800cee6:	e002      	b.n	800ceee <create_name+0x132>
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	3301      	adds	r3, #1
 800ceec:	61bb      	str	r3, [r7, #24]
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	4413      	add	r3, r2
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	2b20      	cmp	r3, #32
 800cefa:	d0f5      	beq.n	800cee8 <create_name+0x12c>
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	2b2e      	cmp	r3, #46	; 0x2e
 800cf08:	d0ee      	beq.n	800cee8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d009      	beq.n	800cf24 <create_name+0x168>
 800cf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf14:	f043 0303 	orr.w	r3, r3, #3
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf1c:	e002      	b.n	800cf24 <create_name+0x168>
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <create_name+0x182>
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf30:	3b01      	subs	r3, #1
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf3c:	d1ef      	bne.n	800cf1e <create_name+0x162>

	i = b = 0; ni = 8;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf44:	2300      	movs	r3, #0
 800cf46:	623b      	str	r3, [r7, #32]
 800cf48:	2308      	movs	r3, #8
 800cf4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	61ba      	str	r2, [r7, #24]
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cf5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 8090 	beq.w	800d084 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cf64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf66:	2b20      	cmp	r3, #32
 800cf68:	d006      	beq.n	800cf78 <create_name+0x1bc>
 800cf6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6e:	d10a      	bne.n	800cf86 <create_name+0x1ca>
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d006      	beq.n	800cf86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cf78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf7c:	f043 0303 	orr.w	r3, r3, #3
 800cf80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf84:	e07d      	b.n	800d082 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cf86:	6a3a      	ldr	r2, [r7, #32]
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d203      	bcs.n	800cf96 <create_name+0x1da>
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d123      	bne.n	800cfde <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	2b0b      	cmp	r3, #11
 800cf9a:	d106      	bne.n	800cfaa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa0:	f043 0303 	orr.w	r3, r3, #3
 800cfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfa8:	e075      	b.n	800d096 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d005      	beq.n	800cfbe <create_name+0x202>
 800cfb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb6:	f043 0303 	orr.w	r3, r3, #3
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d866      	bhi.n	800d094 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	2308      	movs	r3, #8
 800cfcc:	623b      	str	r3, [r7, #32]
 800cfce:	230b      	movs	r3, #11
 800cfd0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cfd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfdc:	e051      	b.n	800d082 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cfde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfe0:	2b7f      	cmp	r3, #127	; 0x7f
 800cfe2:	d914      	bls.n	800d00e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f001 fcc5 	bl	800e978 <ff_convert>
 800cfee:	4603      	mov	r3, r0
 800cff0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <create_name+0x246>
 800cff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cffa:	3b80      	subs	r3, #128	; 0x80
 800cffc:	4a23      	ldr	r2, [pc, #140]	; (800d08c <create_name+0x2d0>)
 800cffe:	5cd3      	ldrb	r3, [r2, r3]
 800d000:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d00e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d010:	2b00      	cmp	r3, #0
 800d012:	d007      	beq.n	800d024 <create_name+0x268>
 800d014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d016:	4619      	mov	r1, r3
 800d018:	481d      	ldr	r0, [pc, #116]	; (800d090 <create_name+0x2d4>)
 800d01a:	f7fe fbcc 	bl	800b7b6 <chk_chr>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d024:	235f      	movs	r3, #95	; 0x5f
 800d026:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d02c:	f043 0303 	orr.w	r3, r3, #3
 800d030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d034:	e01b      	b.n	800d06e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d038:	2b40      	cmp	r3, #64	; 0x40
 800d03a:	d909      	bls.n	800d050 <create_name+0x294>
 800d03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d03e:	2b5a      	cmp	r3, #90	; 0x5a
 800d040:	d806      	bhi.n	800d050 <create_name+0x294>
					b |= 2;
 800d042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d046:	f043 0302 	orr.w	r3, r3, #2
 800d04a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d04e:	e00e      	b.n	800d06e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d052:	2b60      	cmp	r3, #96	; 0x60
 800d054:	d90b      	bls.n	800d06e <create_name+0x2b2>
 800d056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d058:	2b7a      	cmp	r3, #122	; 0x7a
 800d05a:	d808      	bhi.n	800d06e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d05c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d060:	f043 0301 	orr.w	r3, r3, #1
 800d064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d06a:	3b20      	subs	r3, #32
 800d06c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	623a      	str	r2, [r7, #32]
 800d074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d076:	b2d1      	uxtb	r1, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	4413      	add	r3, r2
 800d07c:	460a      	mov	r2, r1
 800d07e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d082:	e763      	b.n	800cf4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d084:	bf00      	nop
 800d086:	e006      	b.n	800d096 <create_name+0x2da>
 800d088:	08014518 	.word	0x08014518
 800d08c:	08014588 	.word	0x08014588
 800d090:	08014524 	.word	0x08014524
			if (si > di) break;			/* No extension */
 800d094:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d09c:	2be5      	cmp	r3, #229	; 0xe5
 800d09e:	d103      	bne.n	800d0a8 <create_name+0x2ec>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2205      	movs	r2, #5
 800d0a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	2b08      	cmp	r3, #8
 800d0ac:	d104      	bne.n	800d0b8 <create_name+0x2fc>
 800d0ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0bc:	f003 030c 	and.w	r3, r3, #12
 800d0c0:	2b0c      	cmp	r3, #12
 800d0c2:	d005      	beq.n	800d0d0 <create_name+0x314>
 800d0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d105      	bne.n	800d0dc <create_name+0x320>
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	f043 0302 	orr.w	r3, r3, #2
 800d0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e0:	f003 0302 	and.w	r3, r3, #2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d117      	bne.n	800d118 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d0e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d105      	bne.n	800d100 <create_name+0x344>
 800d0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f8:	f043 0310 	orr.w	r3, r3, #16
 800d0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d104:	f003 030c 	and.w	r3, r3, #12
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d105      	bne.n	800d118 <create_name+0x35c>
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d110:	f043 0308 	orr.w	r3, r3, #8
 800d114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d11e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d122:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d124:	4618      	mov	r0, r3
 800d126:	3728      	adds	r7, #40	; 0x28
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d140:	e002      	b.n	800d148 <follow_path+0x1c>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	603b      	str	r3, [r7, #0]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b2f      	cmp	r3, #47	; 0x2f
 800d14e:	d0f8      	beq.n	800d142 <follow_path+0x16>
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b5c      	cmp	r3, #92	; 0x5c
 800d156:	d0f4      	beq.n	800d142 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	2200      	movs	r2, #0
 800d15c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b1f      	cmp	r3, #31
 800d164:	d80a      	bhi.n	800d17c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2280      	movs	r2, #128	; 0x80
 800d16a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d16e:	2100      	movs	r1, #0
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff f8fd 	bl	800c370 <dir_sdi>
 800d176:	4603      	mov	r3, r0
 800d178:	75fb      	strb	r3, [r7, #23]
 800d17a:	e048      	b.n	800d20e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d17c:	463b      	mov	r3, r7
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7ff fe1b 	bl	800cdbc <create_name>
 800d186:	4603      	mov	r3, r0
 800d188:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d139      	bne.n	800d204 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff fc5a 	bl	800ca4a <dir_find>
 800d196:	4603      	mov	r3, r0
 800d198:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
 800d1aa:	2b04      	cmp	r3, #4
 800d1ac:	d12c      	bne.n	800d208 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d1ae:	7afb      	ldrb	r3, [r7, #11]
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d127      	bne.n	800d208 <follow_path+0xdc>
 800d1b8:	2305      	movs	r3, #5
 800d1ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d1bc:	e024      	b.n	800d208 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1be:	7afb      	ldrb	r3, [r7, #11]
 800d1c0:	f003 0304 	and.w	r3, r3, #4
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d121      	bne.n	800d20c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	799b      	ldrb	r3, [r3, #6]
 800d1cc:	f003 0310 	and.w	r3, r3, #16
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d102      	bne.n	800d1da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d1d4:	2305      	movs	r3, #5
 800d1d6:	75fb      	strb	r3, [r7, #23]
 800d1d8:	e019      	b.n	800d20e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	695b      	ldr	r3, [r3, #20]
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	8992      	ldrh	r2, [r2, #12]
 800d1e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1ec:	fb00 f202 	mul.w	r2, r0, r2
 800d1f0:	1a9b      	subs	r3, r3, r2
 800d1f2:	440b      	add	r3, r1
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff fa60 	bl	800c6bc <ld_clust>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d202:	e7bb      	b.n	800d17c <follow_path+0x50>
			if (res != FR_OK) break;
 800d204:	bf00      	nop
 800d206:	e002      	b.n	800d20e <follow_path+0xe2>
				break;
 800d208:	bf00      	nop
 800d20a:	e000      	b.n	800d20e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d20c:	bf00      	nop
			}
		}
	}

	return res;
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d218:	b480      	push	{r7}
 800d21a:	b087      	sub	sp, #28
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d220:	f04f 33ff 	mov.w	r3, #4294967295
 800d224:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d031      	beq.n	800d292 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	e002      	b.n	800d23c <get_ldnumber+0x24>
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	3301      	adds	r3, #1
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b1f      	cmp	r3, #31
 800d242:	d903      	bls.n	800d24c <get_ldnumber+0x34>
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b3a      	cmp	r3, #58	; 0x3a
 800d24a:	d1f4      	bne.n	800d236 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	2b3a      	cmp	r3, #58	; 0x3a
 800d252:	d11c      	bne.n	800d28e <get_ldnumber+0x76>
			tp = *path;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	60fa      	str	r2, [r7, #12]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	3b30      	subs	r3, #48	; 0x30
 800d264:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d80e      	bhi.n	800d28a <get_ldnumber+0x72>
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	429a      	cmp	r2, r3
 800d272:	d10a      	bne.n	800d28a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d107      	bne.n	800d28a <get_ldnumber+0x72>
					vol = (int)i;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	3301      	adds	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	e002      	b.n	800d294 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d28e:	2300      	movs	r3, #0
 800d290:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d292:	693b      	ldr	r3, [r7, #16]
}
 800d294:	4618      	mov	r0, r3
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	70da      	strb	r2, [r3, #3]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7fe fc78 	bl	800bbb0 <move_window>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <check_fs+0x2a>
 800d2c6:	2304      	movs	r3, #4
 800d2c8:	e038      	b.n	800d33c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	333c      	adds	r3, #60	; 0x3c
 800d2ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe f98a 	bl	800b5ec <ld_word>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d001      	beq.n	800d2e8 <check_fs+0x48>
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e029      	b.n	800d33c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ee:	2be9      	cmp	r3, #233	; 0xe9
 800d2f0:	d009      	beq.n	800d306 <check_fs+0x66>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2f8:	2beb      	cmp	r3, #235	; 0xeb
 800d2fa:	d11e      	bne.n	800d33a <check_fs+0x9a>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d302:	2b90      	cmp	r3, #144	; 0x90
 800d304:	d119      	bne.n	800d33a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	333c      	adds	r3, #60	; 0x3c
 800d30a:	3336      	adds	r3, #54	; 0x36
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe f985 	bl	800b61c <ld_dword>
 800d312:	4603      	mov	r3, r0
 800d314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d318:	4a0a      	ldr	r2, [pc, #40]	; (800d344 <check_fs+0xa4>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d101      	bne.n	800d322 <check_fs+0x82>
 800d31e:	2300      	movs	r3, #0
 800d320:	e00c      	b.n	800d33c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	333c      	adds	r3, #60	; 0x3c
 800d326:	3352      	adds	r3, #82	; 0x52
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe f977 	bl	800b61c <ld_dword>
 800d32e:	4603      	mov	r3, r0
 800d330:	4a05      	ldr	r2, [pc, #20]	; (800d348 <check_fs+0xa8>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d101      	bne.n	800d33a <check_fs+0x9a>
 800d336:	2300      	movs	r3, #0
 800d338:	e000      	b.n	800d33c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d33a:	2302      	movs	r3, #2
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	00544146 	.word	0x00544146
 800d348:	33544146 	.word	0x33544146

0800d34c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b096      	sub	sp, #88	; 0x58
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2200      	movs	r2, #0
 800d35e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff ff59 	bl	800d218 <get_ldnumber>
 800d366:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	da01      	bge.n	800d372 <find_volume+0x26>
 800d36e:	230b      	movs	r3, #11
 800d370:	e26a      	b.n	800d848 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d372:	4aa3      	ldr	r2, [pc, #652]	; (800d600 <find_volume+0x2b4>)
 800d374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d37a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <find_volume+0x3a>
 800d382:	230c      	movs	r3, #12
 800d384:	e260      	b.n	800d848 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800d386:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d388:	f7fe fa30 	bl	800b7ec <lock_fs>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <find_volume+0x4a>
 800d392:	230f      	movs	r3, #15
 800d394:	e258      	b.n	800d848 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d39a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	f023 0301 	bic.w	r3, r3, #1
 800d3a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01a      	beq.n	800d3e2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	785b      	ldrb	r3, [r3, #1]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe f87d 	bl	800b4b0 <disk_status>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d3bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10c      	bne.n	800d3e2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <find_volume+0x92>
 800d3ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3d2:	f003 0304 	and.w	r3, r3, #4
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d3da:	230a      	movs	r3, #10
 800d3dc:	e234      	b.n	800d848 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e232      	b.n	800d848 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	785b      	ldrb	r3, [r3, #1]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fe f875 	bl	800b4e4 <disk_initialize>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d40c:	2303      	movs	r3, #3
 800d40e:	e21b      	b.n	800d848 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <find_volume+0xda>
 800d416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d41a:	f003 0304 	and.w	r3, r3, #4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d422:	230a      	movs	r3, #10
 800d424:	e210      	b.n	800d848 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	7858      	ldrb	r0, [r3, #1]
 800d42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42c:	330c      	adds	r3, #12
 800d42e:	461a      	mov	r2, r3
 800d430:	2102      	movs	r1, #2
 800d432:	f7fe f8bd 	bl	800b5b0 <disk_ioctl>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <find_volume+0xf4>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e203      	b.n	800d848 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d442:	899b      	ldrh	r3, [r3, #12]
 800d444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d448:	d80d      	bhi.n	800d466 <find_volume+0x11a>
 800d44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44c:	899b      	ldrh	r3, [r3, #12]
 800d44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d452:	d308      	bcc.n	800d466 <find_volume+0x11a>
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	899b      	ldrh	r3, [r3, #12]
 800d458:	461a      	mov	r2, r3
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	899b      	ldrh	r3, [r3, #12]
 800d45e:	3b01      	subs	r3, #1
 800d460:	4013      	ands	r3, r2
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <find_volume+0x11e>
 800d466:	2301      	movs	r3, #1
 800d468:	e1ee      	b.n	800d848 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d46e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d472:	f7ff ff15 	bl	800d2a0 <check_fs>
 800d476:	4603      	mov	r3, r0
 800d478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d47c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d480:	2b02      	cmp	r3, #2
 800d482:	d149      	bne.n	800d518 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d484:	2300      	movs	r3, #0
 800d486:	643b      	str	r3, [r7, #64]	; 0x40
 800d488:	e01e      	b.n	800d4c8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d492:	011b      	lsls	r3, r3, #4
 800d494:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d498:	4413      	add	r3, r2
 800d49a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	3304      	adds	r3, #4
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d006      	beq.n	800d4b4 <find_volume+0x168>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe f8b6 	bl	800b61c <ld_dword>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	e000      	b.n	800d4b6 <find_volume+0x16a>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	3358      	adds	r3, #88	; 0x58
 800d4bc:	443b      	add	r3, r7
 800d4be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ca:	2b03      	cmp	r3, #3
 800d4cc:	d9dd      	bls.n	800d48a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <find_volume+0x192>
 800d4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	3358      	adds	r3, #88	; 0x58
 800d4e4:	443b      	add	r3, r7
 800d4e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d4ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <find_volume+0x1b2>
 800d4f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4f6:	f7ff fed3 	bl	800d2a0 <check_fs>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	e000      	b.n	800d500 <find_volume+0x1b4>
 800d4fe:	2303      	movs	r3, #3
 800d500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d905      	bls.n	800d518 <find_volume+0x1cc>
 800d50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50e:	3301      	adds	r3, #1
 800d510:	643b      	str	r3, [r7, #64]	; 0x40
 800d512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d514:	2b03      	cmp	r3, #3
 800d516:	d9e2      	bls.n	800d4de <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d101      	bne.n	800d524 <find_volume+0x1d8>
 800d520:	2301      	movs	r3, #1
 800d522:	e191      	b.n	800d848 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d901      	bls.n	800d530 <find_volume+0x1e4>
 800d52c:	230d      	movs	r3, #13
 800d52e:	e18b      	b.n	800d848 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	333c      	adds	r3, #60	; 0x3c
 800d534:	330b      	adds	r3, #11
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe f858 	bl	800b5ec <ld_word>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	899b      	ldrh	r3, [r3, #12]
 800d544:	429a      	cmp	r2, r3
 800d546:	d001      	beq.n	800d54c <find_volume+0x200>
 800d548:	230d      	movs	r3, #13
 800d54a:	e17d      	b.n	800d848 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54e:	333c      	adds	r3, #60	; 0x3c
 800d550:	3316      	adds	r3, #22
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe f84a 	bl	800b5ec <ld_word>
 800d558:	4603      	mov	r3, r0
 800d55a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <find_volume+0x224>
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	333c      	adds	r3, #60	; 0x3c
 800d566:	3324      	adds	r3, #36	; 0x24
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe f857 	bl	800b61c <ld_dword>
 800d56e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d574:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	789b      	ldrb	r3, [r3, #2]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d005      	beq.n	800d594 <find_volume+0x248>
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	789b      	ldrb	r3, [r3, #2]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d001      	beq.n	800d594 <find_volume+0x248>
 800d590:	230d      	movs	r3, #13
 800d592:	e159      	b.n	800d848 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	789b      	ldrb	r3, [r3, #2]
 800d598:	461a      	mov	r2, r3
 800d59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d59c:	fb02 f303 	mul.w	r3, r2, r3
 800d5a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	895b      	ldrh	r3, [r3, #10]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d008      	beq.n	800d5c8 <find_volume+0x27c>
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	895b      	ldrh	r3, [r3, #10]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <find_volume+0x280>
 800d5c8:	230d      	movs	r3, #13
 800d5ca:	e13d      	b.n	800d848 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	333c      	adds	r3, #60	; 0x3c
 800d5d0:	3311      	adds	r3, #17
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f80a 	bl	800b5ec <ld_word>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	891b      	ldrh	r3, [r3, #8]
 800d5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e6:	8992      	ldrh	r2, [r2, #12]
 800d5e8:	0952      	lsrs	r2, r2, #5
 800d5ea:	b292      	uxth	r2, r2
 800d5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5f0:	fb01 f202 	mul.w	r2, r1, r2
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <find_volume+0x2b8>
 800d5fc:	230d      	movs	r3, #13
 800d5fe:	e123      	b.n	800d848 <find_volume+0x4fc>
 800d600:	200029f0 	.word	0x200029f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	333c      	adds	r3, #60	; 0x3c
 800d608:	3313      	adds	r3, #19
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fd ffee 	bl	800b5ec <ld_word>
 800d610:	4603      	mov	r3, r0
 800d612:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <find_volume+0x2dc>
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	333c      	adds	r3, #60	; 0x3c
 800d61e:	3320      	adds	r3, #32
 800d620:	4618      	mov	r0, r3
 800d622:	f7fd fffb 	bl	800b61c <ld_dword>
 800d626:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	333c      	adds	r3, #60	; 0x3c
 800d62c:	330e      	adds	r3, #14
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd ffdc 	bl	800b5ec <ld_word>
 800d634:	4603      	mov	r3, r0
 800d636:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <find_volume+0x2f6>
 800d63e:	230d      	movs	r3, #13
 800d640:	e102      	b.n	800d848 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d642:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d646:	4413      	add	r3, r2
 800d648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64a:	8911      	ldrh	r1, [r2, #8]
 800d64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d64e:	8992      	ldrh	r2, [r2, #12]
 800d650:	0952      	lsrs	r2, r2, #5
 800d652:	b292      	uxth	r2, r2
 800d654:	fbb1 f2f2 	udiv	r2, r1, r2
 800d658:	b292      	uxth	r2, r2
 800d65a:	4413      	add	r3, r2
 800d65c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d65e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	429a      	cmp	r2, r3
 800d664:	d201      	bcs.n	800d66a <find_volume+0x31e>
 800d666:	230d      	movs	r3, #13
 800d668:	e0ee      	b.n	800d848 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d672:	8952      	ldrh	r2, [r2, #10]
 800d674:	fbb3 f3f2 	udiv	r3, r3, r2
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <find_volume+0x338>
 800d680:	230d      	movs	r3, #13
 800d682:	e0e1      	b.n	800d848 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800d684:	2303      	movs	r3, #3
 800d686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d690:	4293      	cmp	r3, r2
 800d692:	d802      	bhi.n	800d69a <find_volume+0x34e>
 800d694:	2302      	movs	r3, #2
 800d696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d802      	bhi.n	800d6aa <find_volume+0x35e>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	1c9a      	adds	r2, r3, #2
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6b6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6bc:	441a      	add	r2, r3
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d6c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	441a      	add	r2, r3
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d0:	2b03      	cmp	r3, #3
 800d6d2:	d11e      	bne.n	800d712 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	333c      	adds	r3, #60	; 0x3c
 800d6d8:	332a      	adds	r3, #42	; 0x2a
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd ff86 	bl	800b5ec <ld_word>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <find_volume+0x39e>
 800d6e6:	230d      	movs	r3, #13
 800d6e8:	e0ae      	b.n	800d848 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ec:	891b      	ldrh	r3, [r3, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <find_volume+0x3aa>
 800d6f2:	230d      	movs	r3, #13
 800d6f4:	e0a8      	b.n	800d848 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f8:	333c      	adds	r3, #60	; 0x3c
 800d6fa:	332c      	adds	r3, #44	; 0x2c
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fd ff8d 	bl	800b61c <ld_dword>
 800d702:	4602      	mov	r2, r0
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	647b      	str	r3, [r7, #68]	; 0x44
 800d710:	e01f      	b.n	800d752 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	891b      	ldrh	r3, [r3, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <find_volume+0x3d2>
 800d71a:	230d      	movs	r3, #13
 800d71c:	e094      	b.n	800d848 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d724:	441a      	add	r2, r3
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d72a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d103      	bne.n	800d73a <find_volume+0x3ee>
 800d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	e00a      	b.n	800d750 <find_volume+0x404>
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	6a1a      	ldr	r2, [r3, #32]
 800d73e:	4613      	mov	r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	4413      	add	r3, r2
 800d744:	085a      	lsrs	r2, r3, #1
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d750:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	899b      	ldrh	r3, [r3, #12]
 800d75a:	4619      	mov	r1, r3
 800d75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d75e:	440b      	add	r3, r1
 800d760:	3b01      	subs	r3, #1
 800d762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d764:	8989      	ldrh	r1, [r1, #12]
 800d766:	fbb3 f3f1 	udiv	r3, r3, r1
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d201      	bcs.n	800d772 <find_volume+0x426>
 800d76e:	230d      	movs	r3, #13
 800d770:	e06a      	b.n	800d848 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d774:	f04f 32ff 	mov.w	r2, #4294967295
 800d778:	61da      	str	r2, [r3, #28]
 800d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77c:	69da      	ldr	r2, [r3, #28]
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d784:	2280      	movs	r2, #128	; 0x80
 800d786:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d78c:	2b03      	cmp	r3, #3
 800d78e:	d149      	bne.n	800d824 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	333c      	adds	r3, #60	; 0x3c
 800d794:	3330      	adds	r3, #48	; 0x30
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd ff28 	bl	800b5ec <ld_word>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d140      	bne.n	800d824 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7aa:	f7fe fa01 	bl	800bbb0 <move_window>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d137      	bne.n	800d824 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	333c      	adds	r3, #60	; 0x3c
 800d7be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd ff12 	bl	800b5ec <ld_word>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d127      	bne.n	800d824 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	333c      	adds	r3, #60	; 0x3c
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fd ff1f 	bl	800b61c <ld_dword>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4a1b      	ldr	r2, [pc, #108]	; (800d850 <find_volume+0x504>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d11e      	bne.n	800d824 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	333c      	adds	r3, #60	; 0x3c
 800d7ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fd ff14 	bl	800b61c <ld_dword>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	4a17      	ldr	r2, [pc, #92]	; (800d854 <find_volume+0x508>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d113      	bne.n	800d824 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fe:	333c      	adds	r3, #60	; 0x3c
 800d800:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d804:	4618      	mov	r0, r3
 800d806:	f7fd ff09 	bl	800b61c <ld_dword>
 800d80a:	4602      	mov	r2, r0
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d812:	333c      	adds	r3, #60	; 0x3c
 800d814:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fd feff 	bl	800b61c <ld_dword>
 800d81e:	4602      	mov	r2, r0
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d82a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <find_volume+0x50c>)
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	b29a      	uxth	r2, r3
 800d834:	4b08      	ldr	r3, [pc, #32]	; (800d858 <find_volume+0x50c>)
 800d836:	801a      	strh	r2, [r3, #0]
 800d838:	4b07      	ldr	r3, [pc, #28]	; (800d858 <find_volume+0x50c>)
 800d83a:	881a      	ldrh	r2, [r3, #0]
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d842:	f7fe f94d 	bl	800bae0 <clear_lock>
#endif
	return FR_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3758      	adds	r7, #88	; 0x58
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	41615252 	.word	0x41615252
 800d854:	61417272 	.word	0x61417272
 800d858:	200029f4 	.word	0x200029f4

0800d85c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d866:	2309      	movs	r3, #9
 800d868:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d02e      	beq.n	800d8ce <validate+0x72>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d02a      	beq.n	800d8ce <validate+0x72>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d025      	beq.n	800d8ce <validate+0x72>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	889a      	ldrh	r2, [r3, #4]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	88db      	ldrh	r3, [r3, #6]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d11e      	bne.n	800d8ce <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd ffa9 	bl	800b7ec <lock_fs>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d014      	beq.n	800d8ca <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd fe02 	bl	800b4b0 <disk_status>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <validate+0x60>
				res = FR_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	73fb      	strb	r3, [r7, #15]
 800d8ba:	e008      	b.n	800d8ce <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd ffa8 	bl	800b818 <unlock_fs>
 800d8c8:	e001      	b.n	800d8ce <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d8ca:	230f      	movs	r3, #15
 800d8cc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <validate+0x7e>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	e000      	b.n	800d8dc <validate+0x80>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	6013      	str	r3, [r2, #0]
	return res;
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d8fe:	f107 0310 	add.w	r3, r7, #16
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fc88 	bl	800d218 <get_ldnumber>
 800d908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da01      	bge.n	800d914 <f_mount+0x28>
 800d910:	230b      	movs	r3, #11
 800d912:	e048      	b.n	800d9a6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d914:	4a26      	ldr	r2, [pc, #152]	; (800d9b0 <f_mount+0xc4>)
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00f      	beq.n	800d944 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d924:	69b8      	ldr	r0, [r7, #24]
 800d926:	f7fe f8db 	bl	800bae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	4618      	mov	r0, r3
 800d930:	f001 f908 	bl	800eb44 <ff_del_syncobj>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <f_mount+0x52>
 800d93a:	2302      	movs	r3, #2
 800d93c:	e033      	b.n	800d9a6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2200      	movs	r2, #0
 800d942:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00f      	beq.n	800d96a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	b2da      	uxtb	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3314      	adds	r3, #20
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f001 f8d2 	bl	800eb04 <ff_cre_syncobj>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <f_mount+0x7e>
 800d966:	2302      	movs	r3, #2
 800d968:	e01d      	b.n	800d9a6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	4910      	ldr	r1, [pc, #64]	; (800d9b0 <f_mount+0xc4>)
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d002      	beq.n	800d980 <f_mount+0x94>
 800d97a:	79fb      	ldrb	r3, [r7, #7]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d001      	beq.n	800d984 <f_mount+0x98>
 800d980:	2300      	movs	r3, #0
 800d982:	e010      	b.n	800d9a6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d984:	f107 010c 	add.w	r1, r7, #12
 800d988:	f107 0308 	add.w	r3, r7, #8
 800d98c:	2200      	movs	r2, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff fcdc 	bl	800d34c <find_volume>
 800d994:	4603      	mov	r3, r0
 800d996:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	7dfa      	ldrb	r2, [r7, #23]
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fd ff3a 	bl	800b818 <unlock_fs>
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3720      	adds	r7, #32
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	200029f0 	.word	0x200029f0

0800d9b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b09a      	sub	sp, #104	; 0x68
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d101      	bne.n	800d9cc <f_open+0x18>
 800d9c8:	2309      	movs	r3, #9
 800d9ca:	e1d7      	b.n	800dd7c <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d9cc:	79fb      	ldrb	r3, [r7, #7]
 800d9ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d9d4:	79fa      	ldrb	r2, [r7, #7]
 800d9d6:	f107 0110 	add.w	r1, r7, #16
 800d9da:	f107 0308 	add.w	r3, r7, #8
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff fcb4 	bl	800d34c <find_volume>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d9ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f040 81b4 	bne.w	800dd5c <f_open+0x3a8>
		dj.obj.fs = fs;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d9f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d9fc:	f001 f8ce 	bl	800eb9c <ff_memalloc>
 800da00:	65b8      	str	r0, [r7, #88]	; 0x58
 800da02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da04:	2b00      	cmp	r3, #0
 800da06:	d106      	bne.n	800da16 <f_open+0x62>
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	2111      	movs	r1, #17
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fd ff03 	bl	800b818 <unlock_fs>
 800da12:	2311      	movs	r3, #17
 800da14:	e1b2      	b.n	800dd7c <f_open+0x3c8>
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da1a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	f107 0314 	add.w	r3, r7, #20
 800da22:	4611      	mov	r1, r2
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff fb81 	bl	800d12c <follow_path>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da34:	2b00      	cmp	r3, #0
 800da36:	d11a      	bne.n	800da6e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800da38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da3c:	b25b      	sxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	da03      	bge.n	800da4a <f_open+0x96>
				res = FR_INVALID_NAME;
 800da42:	2306      	movs	r3, #6
 800da44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da48:	e011      	b.n	800da6e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	f023 0301 	bic.w	r3, r3, #1
 800da50:	2b00      	cmp	r3, #0
 800da52:	bf14      	ite	ne
 800da54:	2301      	movne	r3, #1
 800da56:	2300      	moveq	r3, #0
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	461a      	mov	r2, r3
 800da5c:	f107 0314 	add.w	r3, r7, #20
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f7fd fef4 	bl	800b850 <chk_lock>
 800da68:	4603      	mov	r3, r0
 800da6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da6e:	79fb      	ldrb	r3, [r7, #7]
 800da70:	f003 031c 	and.w	r3, r3, #28
 800da74:	2b00      	cmp	r3, #0
 800da76:	d07f      	beq.n	800db78 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800da78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d017      	beq.n	800dab0 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da84:	2b04      	cmp	r3, #4
 800da86:	d10e      	bne.n	800daa6 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da88:	f7fd ff3e 	bl	800b908 <enq_lock>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <f_open+0xec>
 800da92:	f107 0314 	add.w	r3, r7, #20
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff f898 	bl	800cbcc <dir_register>
 800da9c:	4603      	mov	r3, r0
 800da9e:	e000      	b.n	800daa2 <f_open+0xee>
 800daa0:	2312      	movs	r3, #18
 800daa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	f043 0308 	orr.w	r3, r3, #8
 800daac:	71fb      	strb	r3, [r7, #7]
 800daae:	e010      	b.n	800dad2 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dab0:	7ebb      	ldrb	r3, [r7, #26]
 800dab2:	f003 0311 	and.w	r3, r3, #17
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <f_open+0x10e>
					res = FR_DENIED;
 800daba:	2307      	movs	r3, #7
 800dabc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dac0:	e007      	b.n	800dad2 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	f003 0304 	and.w	r3, r3, #4
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <f_open+0x11e>
 800dacc:	2308      	movs	r3, #8
 800dace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d168      	bne.n	800dbac <f_open+0x1f8>
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	f003 0308 	and.w	r3, r3, #8
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d063      	beq.n	800dbac <f_open+0x1f8>
				dw = GET_FATTIME();
 800dae4:	f7fd fc86 	bl	800b3f4 <get_fattime>
 800dae8:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800daea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daec:	330e      	adds	r3, #14
 800daee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fd fdd1 	bl	800b698 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800daf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf8:	3316      	adds	r3, #22
 800dafa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fd fdcb 	bl	800b698 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	330b      	adds	r3, #11
 800db06:	2220      	movs	r2, #32
 800db08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe fdd3 	bl	800c6bc <ld_clust>
 800db16:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db1c:	2200      	movs	r2, #0
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fdeb 	bl	800c6fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db26:	331c      	adds	r3, #28
 800db28:	2100      	movs	r1, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fd fdb4 	bl	800b698 <st_dword>
					fs->wflag = 1;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2201      	movs	r2, #1
 800db34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d037      	beq.n	800dbac <f_open+0x1f8>
						dw = fs->winsect;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800db42:	f107 0314 	add.w	r3, r7, #20
 800db46:	2200      	movs	r2, #0
 800db48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fadb 	bl	800c106 <remove_chain>
 800db50:	4603      	mov	r3, r0
 800db52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800db56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d126      	bne.n	800dbac <f_open+0x1f8>
							res = move_window(fs, dw);
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe f824 	bl	800bbb0 <move_window>
 800db68:	4603      	mov	r3, r0
 800db6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db72:	3a01      	subs	r2, #1
 800db74:	619a      	str	r2, [r3, #24]
 800db76:	e019      	b.n	800dbac <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d115      	bne.n	800dbac <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db80:	7ebb      	ldrb	r3, [r7, #26]
 800db82:	f003 0310 	and.w	r3, r3, #16
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <f_open+0x1de>
					res = FR_NO_FILE;
 800db8a:	2304      	movs	r3, #4
 800db8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800db90:	e00c      	b.n	800dbac <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d007      	beq.n	800dbac <f_open+0x1f8>
 800db9c:	7ebb      	ldrb	r3, [r7, #26]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <f_open+0x1f8>
						res = FR_DENIED;
 800dba6:	2307      	movs	r3, #7
 800dba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d128      	bne.n	800dc06 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <f_open+0x212>
				mode |= FA_MODIFIED;
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbd4:	79fb      	ldrb	r3, [r7, #7]
 800dbd6:	f023 0301 	bic.w	r3, r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	bf14      	ite	ne
 800dbde:	2301      	movne	r3, #1
 800dbe0:	2300      	moveq	r3, #0
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	f107 0314 	add.w	r3, r7, #20
 800dbea:	4611      	mov	r1, r2
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fd fead 	bl	800b94c <inc_lock>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d102      	bne.n	800dc06 <f_open+0x252>
 800dc00:	2302      	movs	r3, #2
 800dc02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f040 80a3 	bne.w	800dd56 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fe fd50 	bl	800c6bc <ld_clust>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	331c      	adds	r3, #28
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fd fcf8 	bl	800b61c <ld_dword>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	88da      	ldrh	r2, [r3, #6]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	79fa      	ldrb	r2, [r7, #7]
 800dc4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3330      	adds	r3, #48	; 0x30
 800dc62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fd fd62 	bl	800b732 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 0320 	and.w	r3, r3, #32
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d06e      	beq.n	800dd56 <f_open+0x3a2>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06a      	beq.n	800dd56 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68da      	ldr	r2, [r3, #12]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	895b      	ldrh	r3, [r3, #10]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	899b      	ldrh	r3, [r3, #12]
 800dc92:	fb02 f303 	mul.w	r3, r2, r3
 800dc96:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dca4:	e016      	b.n	800dcd4 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fe f83d 	bl	800bd2a <get_fat>
 800dcb0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dcb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d802      	bhi.n	800dcbe <f_open+0x30a>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dcbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc4:	d102      	bne.n	800dccc <f_open+0x318>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <f_open+0x330>
 800dcdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d8e0      	bhi.n	800dca6 <f_open+0x2f2>
				}
				fp->clust = clst;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dcea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d131      	bne.n	800dd56 <f_open+0x3a2>
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	899b      	ldrh	r3, [r3, #12]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcfe:	fb01 f202 	mul.w	r2, r1, r2
 800dd02:	1a9b      	subs	r3, r3, r2
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d026      	beq.n	800dd56 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fd ffed 	bl	800bcec <clust2sect>
 800dd12:	64b8      	str	r0, [r7, #72]	; 0x48
 800dd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d103      	bne.n	800dd22 <f_open+0x36e>
						res = FR_INT_ERR;
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd20:	e019      	b.n	800dd56 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	899b      	ldrh	r3, [r3, #12]
 800dd26:	461a      	mov	r2, r3
 800dd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd30:	441a      	add	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	7858      	ldrb	r0, [r3, #1]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6a1a      	ldr	r2, [r3, #32]
 800dd44:	2301      	movs	r3, #1
 800dd46:	f7fd fbf3 	bl	800b530 <disk_read>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <f_open+0x3a2>
 800dd50:	2301      	movs	r3, #1
 800dd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800dd56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dd58:	f000 ff2c 	bl	800ebb4 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <f_open+0x3b6>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800dd70:	4611      	mov	r1, r2
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fd fd50 	bl	800b818 <unlock_fs>
 800dd78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3768      	adds	r7, #104	; 0x68
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08e      	sub	sp, #56	; 0x38
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f107 0214 	add.w	r2, r7, #20
 800dda2:	4611      	mov	r1, r2
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff fd59 	bl	800d85c <validate>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ddb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d107      	bne.n	800ddc8 <f_read+0x44>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	7d5b      	ldrb	r3, [r3, #21]
 800ddbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ddc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d009      	beq.n	800dddc <f_read+0x58>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fd fd21 	bl	800b818 <unlock_fs>
 800ddd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddda:	e15d      	b.n	800e098 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	7d1b      	ldrb	r3, [r3, #20]
 800dde0:	f003 0301 	and.w	r3, r3, #1
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d106      	bne.n	800ddf6 <f_read+0x72>
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2107      	movs	r1, #7
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fd fd13 	bl	800b818 <unlock_fs>
 800ddf2:	2307      	movs	r3, #7
 800ddf4:	e150      	b.n	800e098 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	429a      	cmp	r2, r3
 800de08:	f240 813c 	bls.w	800e084 <f_read+0x300>
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800de10:	e138      	b.n	800e084 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	8992      	ldrh	r2, [r2, #12]
 800de1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de1e:	fb01 f202 	mul.w	r2, r1, r2
 800de22:	1a9b      	subs	r3, r3, r2
 800de24:	2b00      	cmp	r3, #0
 800de26:	f040 80f3 	bne.w	800e010 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	8992      	ldrh	r2, [r2, #12]
 800de32:	fbb3 f3f2 	udiv	r3, r3, r2
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	8952      	ldrh	r2, [r2, #10]
 800de3a:	3a01      	subs	r2, #1
 800de3c:	4013      	ands	r3, r2
 800de3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d139      	bne.n	800deba <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d103      	bne.n	800de56 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	633b      	str	r3, [r7, #48]	; 0x30
 800de54:	e013      	b.n	800de7e <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d007      	beq.n	800de6e <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	4619      	mov	r1, r3
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f7fe fa4b 	bl	800c300 <clmt_clust>
 800de6a:	6338      	str	r0, [r7, #48]	; 0x30
 800de6c:	e007      	b.n	800de7e <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	4619      	mov	r1, r3
 800de76:	4610      	mov	r0, r2
 800de78:	f7fd ff57 	bl	800bd2a <get_fat>
 800de7c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	2b01      	cmp	r3, #1
 800de82:	d809      	bhi.n	800de98 <f_read+0x114>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2202      	movs	r2, #2
 800de88:	755a      	strb	r2, [r3, #21]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2102      	movs	r1, #2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fd fcc2 	bl	800b818 <unlock_fs>
 800de94:	2302      	movs	r3, #2
 800de96:	e0ff      	b.n	800e098 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9e:	d109      	bne.n	800deb4 <f_read+0x130>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2201      	movs	r2, #1
 800dea4:	755a      	strb	r2, [r3, #21]
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2101      	movs	r1, #1
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd fcb4 	bl	800b818 <unlock_fs>
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0f1      	b.n	800e098 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deb8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	4619      	mov	r1, r3
 800dec2:	4610      	mov	r0, r2
 800dec4:	f7fd ff12 	bl	800bcec <clust2sect>
 800dec8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d109      	bne.n	800dee4 <f_read+0x160>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2202      	movs	r2, #2
 800ded4:	755a      	strb	r2, [r3, #21]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2102      	movs	r1, #2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fd fc9c 	bl	800b818 <unlock_fs>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e0d9      	b.n	800e098 <f_read+0x314>
			sect += csect;
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	4413      	add	r3, r2
 800deea:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	899b      	ldrh	r3, [r3, #12]
 800def0:	461a      	mov	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	fbb3 f3f2 	udiv	r3, r3, r2
 800def8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	2b00      	cmp	r3, #0
 800defe:	d046      	beq.n	800df8e <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df00:	69fa      	ldr	r2, [r7, #28]
 800df02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df04:	4413      	add	r3, r2
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	8952      	ldrh	r2, [r2, #10]
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d905      	bls.n	800df1a <f_read+0x196>
					cc = fs->csize - csect;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	895b      	ldrh	r3, [r3, #10]
 800df12:	461a      	mov	r2, r3
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	7858      	ldrb	r0, [r3, #1]
 800df1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df24:	f7fd fb04 	bl	800b530 <disk_read>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <f_read+0x1be>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2201      	movs	r2, #1
 800df32:	755a      	strb	r2, [r3, #21]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2101      	movs	r1, #1
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fd fc6d 	bl	800b818 <unlock_fs>
 800df3e:	2301      	movs	r3, #1
 800df40:	e0aa      	b.n	800e098 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	7d1b      	ldrb	r3, [r3, #20]
 800df46:	b25b      	sxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	da18      	bge.n	800df7e <f_read+0x1fa>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a1a      	ldr	r2, [r3, #32]
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df56:	429a      	cmp	r2, r3
 800df58:	d911      	bls.n	800df7e <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a1a      	ldr	r2, [r3, #32]
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	8992      	ldrh	r2, [r2, #12]
 800df66:	fb02 f303 	mul.w	r3, r2, r3
 800df6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df6c:	18d0      	adds	r0, r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	899b      	ldrh	r3, [r3, #12]
 800df78:	461a      	mov	r2, r3
 800df7a:	f7fd fbb9 	bl	800b6f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	899b      	ldrh	r3, [r3, #12]
 800df82:	461a      	mov	r2, r3
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800df8c:	e066      	b.n	800e05c <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	69ba      	ldr	r2, [r7, #24]
 800df94:	429a      	cmp	r2, r3
 800df96:	d038      	beq.n	800e00a <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7d1b      	ldrb	r3, [r3, #20]
 800df9c:	b25b      	sxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	da1d      	bge.n	800dfde <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	7858      	ldrb	r0, [r3, #1]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6a1a      	ldr	r2, [r3, #32]
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	f7fd fadd 	bl	800b570 <disk_write>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <f_read+0x24c>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	755a      	strb	r2, [r3, #21]
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fd fc26 	bl	800b818 <unlock_fs>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e063      	b.n	800e098 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
 800dfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	7858      	ldrb	r0, [r3, #1]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfe8:	2301      	movs	r3, #1
 800dfea:	69ba      	ldr	r2, [r7, #24]
 800dfec:	f7fd faa0 	bl	800b530 <disk_read>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d009      	beq.n	800e00a <f_read+0x286>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2201      	movs	r2, #1
 800dffa:	755a      	strb	r2, [r3, #21]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2101      	movs	r1, #1
 800e000:	4618      	mov	r0, r3
 800e002:	f7fd fc09 	bl	800b818 <unlock_fs>
 800e006:	2301      	movs	r3, #1
 800e008:	e046      	b.n	800e098 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	899b      	ldrh	r3, [r3, #12]
 800e014:	4618      	mov	r0, r3
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	699b      	ldr	r3, [r3, #24]
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	8992      	ldrh	r2, [r2, #12]
 800e01e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e022:	fb01 f202 	mul.w	r2, r1, r2
 800e026:	1a9b      	subs	r3, r3, r2
 800e028:	1ac3      	subs	r3, r0, r3
 800e02a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d901      	bls.n	800e038 <f_read+0x2b4>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	8992      	ldrh	r2, [r2, #12]
 800e046:	fbb3 f0f2 	udiv	r0, r3, r2
 800e04a:	fb00 f202 	mul.w	r2, r0, r2
 800e04e:	1a9b      	subs	r3, r3, r2
 800e050:	440b      	add	r3, r1
 800e052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e054:	4619      	mov	r1, r3
 800e056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e058:	f7fd fb4a 	bl	800b6f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e060:	4413      	add	r3, r2
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	699a      	ldr	r2, [r3, #24]
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	441a      	add	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	619a      	str	r2, [r3, #24]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	441a      	add	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	601a      	str	r2, [r3, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f47f aec3 	bne.w	800de12 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2100      	movs	r1, #0
 800e090:	4618      	mov	r0, r3
 800e092:	f7fd fbc1 	bl	800b818 <unlock_fs>
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3738      	adds	r7, #56	; 0x38
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b08c      	sub	sp, #48	; 0x30
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f107 0210 	add.w	r2, r7, #16
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff fbcb 	bl	800d85c <validate>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d107      	bne.n	800e0e4 <f_write+0x44>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	7d5b      	ldrb	r3, [r3, #21]
 800e0d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <f_write+0x58>
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fd fb93 	bl	800b818 <unlock_fs>
 800e0f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0f6:	e192      	b.n	800e41e <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	f003 0302 	and.w	r3, r3, #2
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <f_write+0x72>
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2107      	movs	r1, #7
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fd fb85 	bl	800b818 <unlock_fs>
 800e10e:	2307      	movs	r3, #7
 800e110:	e185      	b.n	800e41e <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	699a      	ldr	r2, [r3, #24]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	441a      	add	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	429a      	cmp	r2, r3
 800e120:	f080 816a 	bcs.w	800e3f8 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	43db      	mvns	r3, r3
 800e12a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e12c:	e164      	b.n	800e3f8 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	8992      	ldrh	r2, [r2, #12]
 800e136:	fbb3 f1f2 	udiv	r1, r3, r2
 800e13a:	fb01 f202 	mul.w	r2, r1, r2
 800e13e:	1a9b      	subs	r3, r3, r2
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 810f 	bne.w	800e364 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	8992      	ldrh	r2, [r2, #12]
 800e14e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	8952      	ldrh	r2, [r2, #10]
 800e156:	3a01      	subs	r2, #1
 800e158:	4013      	ands	r3, r2
 800e15a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d14d      	bne.n	800e1fe <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	699b      	ldr	r3, [r3, #24]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10c      	bne.n	800e184 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	2b00      	cmp	r3, #0
 800e174:	d11a      	bne.n	800e1ac <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2100      	movs	r1, #0
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe f828 	bl	800c1d0 <create_chain>
 800e180:	62b8      	str	r0, [r7, #40]	; 0x28
 800e182:	e013      	b.n	800e1ac <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d007      	beq.n	800e19c <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	4619      	mov	r1, r3
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f7fe f8b4 	bl	800c300 <clmt_clust>
 800e198:	62b8      	str	r0, [r7, #40]	; 0x28
 800e19a:	e007      	b.n	800e1ac <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	69db      	ldr	r3, [r3, #28]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	f7fe f813 	bl	800c1d0 <create_chain>
 800e1aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 8127 	beq.w	800e402 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d109      	bne.n	800e1ce <f_write+0x12e>
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2202      	movs	r2, #2
 800e1be:	755a      	strb	r2, [r3, #21]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	2102      	movs	r1, #2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fd fb27 	bl	800b818 <unlock_fs>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e127      	b.n	800e41e <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d4:	d109      	bne.n	800e1ea <f_write+0x14a>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	755a      	strb	r2, [r3, #21]
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2101      	movs	r1, #1
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fd fb19 	bl	800b818 <unlock_fs>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e119      	b.n	800e41e <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <f_write+0x15e>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	7d1b      	ldrb	r3, [r3, #20]
 800e202:	b25b      	sxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	da1d      	bge.n	800e244 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	7858      	ldrb	r0, [r3, #1]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6a1a      	ldr	r2, [r3, #32]
 800e216:	2301      	movs	r3, #1
 800e218:	f7fd f9aa 	bl	800b570 <disk_write>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <f_write+0x196>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2201      	movs	r2, #1
 800e226:	755a      	strb	r2, [r3, #21]
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2101      	movs	r1, #1
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fd faf3 	bl	800b818 <unlock_fs>
 800e232:	2301      	movs	r3, #1
 800e234:	e0f3      	b.n	800e41e <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	7d1b      	ldrb	r3, [r3, #20]
 800e23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e244:	693a      	ldr	r2, [r7, #16]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	69db      	ldr	r3, [r3, #28]
 800e24a:	4619      	mov	r1, r3
 800e24c:	4610      	mov	r0, r2
 800e24e:	f7fd fd4d 	bl	800bcec <clust2sect>
 800e252:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d109      	bne.n	800e26e <f_write+0x1ce>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2202      	movs	r2, #2
 800e25e:	755a      	strb	r2, [r3, #21]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	2102      	movs	r1, #2
 800e264:	4618      	mov	r0, r3
 800e266:	f7fd fad7 	bl	800b818 <unlock_fs>
 800e26a:	2302      	movs	r3, #2
 800e26c:	e0d7      	b.n	800e41e <f_write+0x37e>
			sect += csect;
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	4413      	add	r3, r2
 800e274:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	461a      	mov	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e282:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d048      	beq.n	800e31c <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e28a:	69ba      	ldr	r2, [r7, #24]
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	4413      	add	r3, r2
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	8952      	ldrh	r2, [r2, #10]
 800e294:	4293      	cmp	r3, r2
 800e296:	d905      	bls.n	800e2a4 <f_write+0x204>
					cc = fs->csize - csect;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	895b      	ldrh	r3, [r3, #10]
 800e29c:	461a      	mov	r2, r3
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	7858      	ldrb	r0, [r3, #1]
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	69f9      	ldr	r1, [r7, #28]
 800e2ae:	f7fd f95f 	bl	800b570 <disk_write>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d009      	beq.n	800e2cc <f_write+0x22c>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	755a      	strb	r2, [r3, #21]
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fd faa8 	bl	800b818 <unlock_fs>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e0a8      	b.n	800e41e <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6a1a      	ldr	r2, [r3, #32]
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	6a3a      	ldr	r2, [r7, #32]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d918      	bls.n	800e30c <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6a1a      	ldr	r2, [r3, #32]
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	8992      	ldrh	r2, [r2, #12]
 800e2ec:	fb02 f303 	mul.w	r3, r2, r3
 800e2f0:	69fa      	ldr	r2, [r7, #28]
 800e2f2:	18d1      	adds	r1, r2, r3
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	899b      	ldrh	r3, [r3, #12]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	f7fd f9f9 	bl	800b6f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7d1b      	ldrb	r3, [r3, #20]
 800e302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e306:	b2da      	uxtb	r2, r3
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	899b      	ldrh	r3, [r3, #12]
 800e310:	461a      	mov	r2, r3
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	fb02 f303 	mul.w	r3, r2, r3
 800e318:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e31a:	e050      	b.n	800e3be <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6a1b      	ldr	r3, [r3, #32]
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	429a      	cmp	r2, r3
 800e324:	d01b      	beq.n	800e35e <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	699a      	ldr	r2, [r3, #24]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e32e:	429a      	cmp	r2, r3
 800e330:	d215      	bcs.n	800e35e <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	7858      	ldrb	r0, [r3, #1]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e33c:	2301      	movs	r3, #1
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	f7fd f8f6 	bl	800b530 <disk_read>
 800e344:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e346:	2b00      	cmp	r3, #0
 800e348:	d009      	beq.n	800e35e <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	755a      	strb	r2, [r3, #21]
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	2101      	movs	r1, #1
 800e354:	4618      	mov	r0, r3
 800e356:	f7fd fa5f 	bl	800b818 <unlock_fs>
 800e35a:	2301      	movs	r3, #1
 800e35c:	e05f      	b.n	800e41e <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	4618      	mov	r0, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	8992      	ldrh	r2, [r2, #12]
 800e372:	fbb3 f1f2 	udiv	r1, r3, r2
 800e376:	fb01 f202 	mul.w	r2, r1, r2
 800e37a:	1a9b      	subs	r3, r3, r2
 800e37c:	1ac3      	subs	r3, r0, r3
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	429a      	cmp	r2, r3
 800e386:	d901      	bls.n	800e38c <f_write+0x2ec>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	699b      	ldr	r3, [r3, #24]
 800e396:	693a      	ldr	r2, [r7, #16]
 800e398:	8992      	ldrh	r2, [r2, #12]
 800e39a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e39e:	fb00 f202 	mul.w	r2, r0, r2
 800e3a2:	1a9b      	subs	r3, r3, r2
 800e3a4:	440b      	add	r3, r1
 800e3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a8:	69f9      	ldr	r1, [r7, #28]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fd f9a0 	bl	800b6f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	7d1b      	ldrb	r3, [r3, #20]
 800e3b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	4413      	add	r3, r2
 800e3c4:	61fb      	str	r3, [r7, #28]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	699a      	ldr	r2, [r3, #24]
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	441a      	add	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	619a      	str	r2, [r3, #24]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68da      	ldr	r2, [r3, #12]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	bf38      	it	cc
 800e3de:	461a      	movcc	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	60da      	str	r2, [r3, #12]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	441a      	add	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	1ad3      	subs	r3, r2, r3
 800e3f6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f47f ae97 	bne.w	800e12e <f_write+0x8e>
 800e400:	e000      	b.n	800e404 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e402:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	7d1b      	ldrb	r3, [r3, #20]
 800e408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2100      	movs	r1, #0
 800e416:	4618      	mov	r0, r3
 800e418:	f7fd f9fe 	bl	800b818 <unlock_fs>
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3730      	adds	r7, #48	; 0x30
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b086      	sub	sp, #24
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f107 0208 	add.w	r2, r7, #8
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f7ff fa10 	bl	800d85c <validate>
 800e43c:	4603      	mov	r3, r0
 800e43e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d16d      	bne.n	800e522 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7d1b      	ldrb	r3, [r3, #20]
 800e44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d067      	beq.n	800e522 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7d1b      	ldrb	r3, [r3, #20]
 800e456:	b25b      	sxtb	r3, r3
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da1a      	bge.n	800e492 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	7858      	ldrb	r0, [r3, #1]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1a      	ldr	r2, [r3, #32]
 800e46a:	2301      	movs	r3, #1
 800e46c:	f7fd f880 	bl	800b570 <disk_write>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d006      	beq.n	800e484 <f_sync+0x5e>
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2101      	movs	r1, #1
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fd f9cc 	bl	800b818 <unlock_fs>
 800e480:	2301      	movs	r3, #1
 800e482:	e055      	b.n	800e530 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7d1b      	ldrb	r3, [r3, #20]
 800e488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e492:	f7fc ffaf 	bl	800b3f4 <get_fattime>
 800e496:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	f7fd fb85 	bl	800bbb0 <move_window>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d138      	bne.n	800e522 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	330b      	adds	r3, #11
 800e4ba:	781a      	ldrb	r2, [r3, #0]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	330b      	adds	r3, #11
 800e4c0:	f042 0220 	orr.w	r2, r2, #32
 800e4c4:	b2d2      	uxtb	r2, r2
 800e4c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	68f9      	ldr	r1, [r7, #12]
 800e4d4:	f7fe f911 	bl	800c6fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f103 021c 	add.w	r2, r3, #28
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	f7fd f8d7 	bl	800b698 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3316      	adds	r3, #22
 800e4ee:	6939      	ldr	r1, [r7, #16]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fd f8d1 	bl	800b698 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3312      	adds	r3, #18
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fd f8b0 	bl	800b662 <st_word>
					fs->wflag = 1;
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2201      	movs	r2, #1
 800e506:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd fb7e 	bl	800bc0c <sync_fs>
 800e510:	4603      	mov	r3, r0
 800e512:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	7dfa      	ldrb	r2, [r7, #23]
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd f975 	bl	800b818 <unlock_fs>
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3718      	adds	r7, #24
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff ff70 	bl	800e426 <f_sync>
 800e546:	4603      	mov	r3, r0
 800e548:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e54a:	7bfb      	ldrb	r3, [r7, #15]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d11d      	bne.n	800e58c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f107 0208 	add.w	r2, r7, #8
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f7ff f97f 	bl	800d85c <validate>
 800e55e:	4603      	mov	r3, r0
 800e560:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d111      	bne.n	800e58c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fd fa7b 	bl	800ba68 <dec_lock>
 800e572:	4603      	mov	r3, r0
 800e574:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e576:	7bfb      	ldrb	r3, [r7, #15]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	2100      	movs	r1, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f7fd f946 	bl	800b818 <unlock_fs>
#endif
		}
	}
	return res;
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b092      	sub	sp, #72	; 0x48
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	60f8      	str	r0, [r7, #12]
 800e59e:	60b9      	str	r1, [r7, #8]
 800e5a0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e5a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e5a6:	f107 030c 	add.w	r3, r7, #12
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fecd 	bl	800d34c <find_volume>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e5b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f040 8099 	bne.w	800e6f4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	69da      	ldr	r2, [r3, #28]
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	6a1b      	ldr	r3, [r3, #32]
 800e5d0:	3b02      	subs	r3, #2
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d804      	bhi.n	800e5e0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	69da      	ldr	r2, [r3, #28]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	e089      	b.n	800e6f4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d128      	bne.n	800e63e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e5f4:	f107 0314 	add.w	r3, r7, #20
 800e5f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fd fb95 	bl	800bd2a <get_fat>
 800e600:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e608:	d103      	bne.n	800e612 <f_getfree+0x7c>
 800e60a:	2301      	movs	r3, #1
 800e60c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e610:	e063      	b.n	800e6da <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	2b01      	cmp	r3, #1
 800e616:	d103      	bne.n	800e620 <f_getfree+0x8a>
 800e618:	2302      	movs	r3, #2
 800e61a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e61e:	e05c      	b.n	800e6da <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <f_getfree+0x96>
 800e626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e628:	3301      	adds	r3, #1
 800e62a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	3301      	adds	r3, #1
 800e630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e638:	429a      	cmp	r2, r3
 800e63a:	d3db      	bcc.n	800e5f4 <f_getfree+0x5e>
 800e63c:	e04d      	b.n	800e6da <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e648:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	637b      	str	r3, [r7, #52]	; 0x34
 800e64e:	2300      	movs	r3, #0
 800e650:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	2b00      	cmp	r3, #0
 800e656:	d113      	bne.n	800e680 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	1c5a      	adds	r2, r3, #1
 800e65e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e660:	4619      	mov	r1, r3
 800e662:	f7fd faa5 	bl	800bbb0 <move_window>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800e66c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e670:	2b00      	cmp	r3, #0
 800e672:	d131      	bne.n	800e6d8 <f_getfree+0x142>
							p = fs->win;
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	333c      	adds	r3, #60	; 0x3c
 800e678:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	899b      	ldrh	r3, [r3, #12]
 800e67e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b02      	cmp	r3, #2
 800e686:	d10f      	bne.n	800e6a8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e68a:	f7fc ffaf 	bl	800b5ec <ld_word>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <f_getfree+0x104>
 800e694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e696:	3301      	adds	r3, #1
 800e698:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	3302      	adds	r3, #2
 800e69e:	633b      	str	r3, [r7, #48]	; 0x30
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	3b02      	subs	r3, #2
 800e6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a6:	e010      	b.n	800e6ca <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6aa:	f7fc ffb7 	bl	800b61c <ld_dword>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <f_getfree+0x128>
 800e6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c6:	3b04      	subs	r3, #4
 800e6c8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800e6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1bd      	bne.n	800e652 <f_getfree+0xbc>
 800e6d6:	e000      	b.n	800e6da <f_getfree+0x144>
							if (res != FR_OK) break;
 800e6d8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6de:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6e4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	791a      	ldrb	r2, [r3, #4]
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	f042 0201 	orr.w	r2, r2, #1
 800e6f0:	b2d2      	uxtb	r2, r2
 800e6f2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fd f88b 	bl	800b818 <unlock_fs>
 800e702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e706:	4618      	mov	r0, r3
 800e708:	3748      	adds	r7, #72	; 0x48
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b088      	sub	sp, #32
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e722:	e01b      	b.n	800e75c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e724:	f107 0310 	add.w	r3, r7, #16
 800e728:	f107 0114 	add.w	r1, r7, #20
 800e72c:	2201      	movs	r2, #1
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff fb28 	bl	800dd84 <f_read>
		if (rc != 1) break;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d116      	bne.n	800e768 <f_gets+0x5a>
		c = s[0];
 800e73a:	7d3b      	ldrb	r3, [r7, #20]
 800e73c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b0d      	cmp	r3, #13
 800e742:	d100      	bne.n	800e746 <f_gets+0x38>
 800e744:	e00a      	b.n	800e75c <f_gets+0x4e>
		*p++ = c;
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	61ba      	str	r2, [r7, #24]
 800e74c:	7dfa      	ldrb	r2, [r7, #23]
 800e74e:	701a      	strb	r2, [r3, #0]
		n++;
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	3301      	adds	r3, #1
 800e754:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b0a      	cmp	r3, #10
 800e75a:	d007      	beq.n	800e76c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	3b01      	subs	r3, #1
 800e760:	69fa      	ldr	r2, [r7, #28]
 800e762:	429a      	cmp	r2, r3
 800e764:	dbde      	blt.n	800e724 <f_gets+0x16>
 800e766:	e002      	b.n	800e76e <f_gets+0x60>
		if (rc != 1) break;
 800e768:	bf00      	nop
 800e76a:	e000      	b.n	800e76e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e76c:	bf00      	nop
	}
	*p = 0;
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	2200      	movs	r2, #0
 800e772:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d001      	beq.n	800e77e <f_gets+0x70>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	e000      	b.n	800e780 <f_gets+0x72>
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3720      	adds	r7, #32
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	2b0a      	cmp	r3, #10
 800e798:	d103      	bne.n	800e7a2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e79a:	210d      	movs	r1, #13
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff fff3 	bl	800e788 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	db25      	blt.n	800e7fa <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	60fa      	str	r2, [r7, #12]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	78fa      	ldrb	r2, [r7, #3]
 800e7ba:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2b3c      	cmp	r3, #60	; 0x3c
 800e7c0:	dd12      	ble.n	800e7e8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6818      	ldr	r0, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f103 010c 	add.w	r1, r3, #12
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	f107 0308 	add.w	r3, r7, #8
 800e7d2:	f7ff fc65 	bl	800e0a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d101      	bne.n	800e7e2 <putc_bfd+0x5a>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	e001      	b.n	800e7e6 <putc_bfd+0x5e>
 800e7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	609a      	str	r2, [r3, #8]
 800e7f8:	e000      	b.n	800e7fc <putc_bfd+0x74>
	if (i < 0) return;
 800e7fa:	bf00      	nop
}
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b084      	sub	sp, #16
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	db16      	blt.n	800e840 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6818      	ldr	r0, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f103 010c 	add.w	r1, r3, #12
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	461a      	mov	r2, r3
 800e822:	f107 030c 	add.w	r3, r7, #12
 800e826:	f7ff fc3b 	bl	800e0a0 <f_write>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d107      	bne.n	800e840 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4293      	cmp	r3, r2
 800e838:	d102      	bne.n	800e840 <putc_flush+0x3e>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	e001      	b.n	800e844 <putc_flush+0x42>
	return EOF;
 800e840:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	605a      	str	r2, [r3, #4]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	609a      	str	r2, [r3, #8]
}
 800e86a:	bf00      	nop
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b096      	sub	sp, #88	; 0x58
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e880:	f107 030c 	add.w	r3, r7, #12
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	4618      	mov	r0, r3
 800e888:	f7ff ffe0 	bl	800e84c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e88c:	e009      	b.n	800e8a2 <f_puts+0x2c>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	1c5a      	adds	r2, r3, #1
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	781a      	ldrb	r2, [r3, #0]
 800e896:	f107 030c 	add.w	r3, r7, #12
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff ff73 	bl	800e788 <putc_bfd>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1f1      	bne.n	800e88e <f_puts+0x18>
	return putc_flush(&pb);
 800e8aa:	f107 030c 	add.w	r3, r7, #12
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff ffa7 	bl	800e802 <putc_flush>
 800e8b4:	4603      	mov	r3, r0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3758      	adds	r7, #88	; 0x58
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
	...

0800e8c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8d6:	4b1f      	ldr	r3, [pc, #124]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e8d8:	7a5b      	ldrb	r3, [r3, #9]
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d131      	bne.n	800e944 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8e0:	4b1c      	ldr	r3, [pc, #112]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e8e2:	7a5b      	ldrb	r3, [r3, #9]
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4b1a      	ldr	r3, [pc, #104]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8ee:	4b19      	ldr	r3, [pc, #100]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e8f0:	7a5b      	ldrb	r3, [r3, #9]
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	4a17      	ldr	r2, [pc, #92]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8fe:	4b15      	ldr	r3, [pc, #84]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e900:	7a5b      	ldrb	r3, [r3, #9]
 800e902:	b2db      	uxtb	r3, r3
 800e904:	461a      	mov	r2, r3
 800e906:	4b13      	ldr	r3, [pc, #76]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e908:	4413      	add	r3, r2
 800e90a:	79fa      	ldrb	r2, [r7, #7]
 800e90c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e90e:	4b11      	ldr	r3, [pc, #68]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e910:	7a5b      	ldrb	r3, [r3, #9]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	b2d1      	uxtb	r1, r2
 800e918:	4a0e      	ldr	r2, [pc, #56]	; (800e954 <FATFS_LinkDriverEx+0x94>)
 800e91a:	7251      	strb	r1, [r2, #9]
 800e91c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e91e:	7dbb      	ldrb	r3, [r7, #22]
 800e920:	3330      	adds	r3, #48	; 0x30
 800e922:	b2da      	uxtb	r2, r3
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	3301      	adds	r3, #1
 800e92c:	223a      	movs	r2, #58	; 0x3a
 800e92e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	3302      	adds	r3, #2
 800e934:	222f      	movs	r2, #47	; 0x2f
 800e936:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	3303      	adds	r3, #3
 800e93c:	2200      	movs	r2, #0
 800e93e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e940:	2300      	movs	r3, #0
 800e942:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e944:	7dfb      	ldrb	r3, [r7, #23]
}
 800e946:	4618      	mov	r0, r3
 800e948:	371c      	adds	r7, #28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	20002a18 	.word	0x20002a18

0800e958 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e962:	2200      	movs	r2, #0
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff ffaa 	bl	800e8c0 <FATFS_LinkDriverEx>
 800e96c:	4603      	mov	r3, r0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
	...

0800e978 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	4603      	mov	r3, r0
 800e980:	6039      	str	r1, [r7, #0]
 800e982:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	2b7f      	cmp	r3, #127	; 0x7f
 800e988:	d802      	bhi.n	800e990 <ff_convert+0x18>
		c = chr;
 800e98a:	88fb      	ldrh	r3, [r7, #6]
 800e98c:	81fb      	strh	r3, [r7, #14]
 800e98e:	e025      	b.n	800e9dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00b      	beq.n	800e9ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e996:	88fb      	ldrh	r3, [r7, #6]
 800e998:	2bff      	cmp	r3, #255	; 0xff
 800e99a:	d805      	bhi.n	800e9a8 <ff_convert+0x30>
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	3b80      	subs	r3, #128	; 0x80
 800e9a0:	4a12      	ldr	r2, [pc, #72]	; (800e9ec <ff_convert+0x74>)
 800e9a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9a6:	e000      	b.n	800e9aa <ff_convert+0x32>
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	81fb      	strh	r3, [r7, #14]
 800e9ac:	e016      	b.n	800e9dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	81fb      	strh	r3, [r7, #14]
 800e9b2:	e009      	b.n	800e9c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e9b4:	89fb      	ldrh	r3, [r7, #14]
 800e9b6:	4a0d      	ldr	r2, [pc, #52]	; (800e9ec <ff_convert+0x74>)
 800e9b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9bc:	88fa      	ldrh	r2, [r7, #6]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d006      	beq.n	800e9d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e9c2:	89fb      	ldrh	r3, [r7, #14]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	81fb      	strh	r3, [r7, #14]
 800e9c8:	89fb      	ldrh	r3, [r7, #14]
 800e9ca:	2b7f      	cmp	r3, #127	; 0x7f
 800e9cc:	d9f2      	bls.n	800e9b4 <ff_convert+0x3c>
 800e9ce:	e000      	b.n	800e9d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e9d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e9d2:	89fb      	ldrh	r3, [r7, #14]
 800e9d4:	3380      	adds	r3, #128	; 0x80
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	08014618 	.word	0x08014618

0800e9f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e9fa:	88fb      	ldrh	r3, [r7, #6]
 800e9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea00:	d201      	bcs.n	800ea06 <ff_wtoupper+0x16>
 800ea02:	4b3e      	ldr	r3, [pc, #248]	; (800eafc <ff_wtoupper+0x10c>)
 800ea04:	e000      	b.n	800ea08 <ff_wtoupper+0x18>
 800ea06:	4b3e      	ldr	r3, [pc, #248]	; (800eb00 <ff_wtoupper+0x110>)
 800ea08:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	1c9a      	adds	r2, r3, #2
 800ea0e:	617a      	str	r2, [r7, #20]
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ea14:	8a7b      	ldrh	r3, [r7, #18]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d068      	beq.n	800eaec <ff_wtoupper+0xfc>
 800ea1a:	88fa      	ldrh	r2, [r7, #6]
 800ea1c:	8a7b      	ldrh	r3, [r7, #18]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d364      	bcc.n	800eaec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	1c9a      	adds	r2, r3, #2
 800ea26:	617a      	str	r2, [r7, #20]
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	823b      	strh	r3, [r7, #16]
 800ea2c:	8a3b      	ldrh	r3, [r7, #16]
 800ea2e:	0a1b      	lsrs	r3, r3, #8
 800ea30:	81fb      	strh	r3, [r7, #14]
 800ea32:	8a3b      	ldrh	r3, [r7, #16]
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ea38:	88fa      	ldrh	r2, [r7, #6]
 800ea3a:	8a79      	ldrh	r1, [r7, #18]
 800ea3c:	8a3b      	ldrh	r3, [r7, #16]
 800ea3e:	440b      	add	r3, r1
 800ea40:	429a      	cmp	r2, r3
 800ea42:	da49      	bge.n	800ead8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ea44:	89fb      	ldrh	r3, [r7, #14]
 800ea46:	2b08      	cmp	r3, #8
 800ea48:	d84f      	bhi.n	800eaea <ff_wtoupper+0xfa>
 800ea4a:	a201      	add	r2, pc, #4	; (adr r2, 800ea50 <ff_wtoupper+0x60>)
 800ea4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea50:	0800ea75 	.word	0x0800ea75
 800ea54:	0800ea87 	.word	0x0800ea87
 800ea58:	0800ea9d 	.word	0x0800ea9d
 800ea5c:	0800eaa5 	.word	0x0800eaa5
 800ea60:	0800eaad 	.word	0x0800eaad
 800ea64:	0800eab5 	.word	0x0800eab5
 800ea68:	0800eabd 	.word	0x0800eabd
 800ea6c:	0800eac5 	.word	0x0800eac5
 800ea70:	0800eacd 	.word	0x0800eacd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ea74:	88fa      	ldrh	r2, [r7, #6]
 800ea76:	8a7b      	ldrh	r3, [r7, #18]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	4413      	add	r3, r2
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	80fb      	strh	r3, [r7, #6]
 800ea84:	e027      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ea86:	88fa      	ldrh	r2, [r7, #6]
 800ea88:	8a7b      	ldrh	r3, [r7, #18]
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	88fa      	ldrh	r2, [r7, #6]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	80fb      	strh	r3, [r7, #6]
 800ea9a:	e01c      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ea9c:	88fb      	ldrh	r3, [r7, #6]
 800ea9e:	3b10      	subs	r3, #16
 800eaa0:	80fb      	strh	r3, [r7, #6]
 800eaa2:	e018      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eaa4:	88fb      	ldrh	r3, [r7, #6]
 800eaa6:	3b20      	subs	r3, #32
 800eaa8:	80fb      	strh	r3, [r7, #6]
 800eaaa:	e014      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	3b30      	subs	r3, #48	; 0x30
 800eab0:	80fb      	strh	r3, [r7, #6]
 800eab2:	e010      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	3b1a      	subs	r3, #26
 800eab8:	80fb      	strh	r3, [r7, #6]
 800eaba:	e00c      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eabc:	88fb      	ldrh	r3, [r7, #6]
 800eabe:	3308      	adds	r3, #8
 800eac0:	80fb      	strh	r3, [r7, #6]
 800eac2:	e008      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	3b50      	subs	r3, #80	; 0x50
 800eac8:	80fb      	strh	r3, [r7, #6]
 800eaca:	e004      	b.n	800ead6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ead2:	80fb      	strh	r3, [r7, #6]
 800ead4:	bf00      	nop
			}
			break;
 800ead6:	e008      	b.n	800eaea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ead8:	89fb      	ldrh	r3, [r7, #14]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d195      	bne.n	800ea0a <ff_wtoupper+0x1a>
 800eade:	8a3b      	ldrh	r3, [r7, #16]
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	4413      	add	r3, r2
 800eae6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eae8:	e78f      	b.n	800ea0a <ff_wtoupper+0x1a>
			break;
 800eaea:	bf00      	nop
	}

	return chr;
 800eaec:	88fb      	ldrh	r3, [r7, #6]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	371c      	adds	r7, #28
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	08014718 	.word	0x08014718
 800eb00:	0801490c 	.word	0x0801490c

0800eb04 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	6039      	str	r1, [r7, #0]
 800eb0e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800eb10:	2300      	movs	r3, #0
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	2300      	movs	r3, #0
 800eb16:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800eb18:	f107 030c 	add.w	r3, r7, #12
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f000 f8e4 	bl	800ecec <osSemaphoreCreate>
 800eb24:	4602      	mov	r2, r0
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bf14      	ite	ne
 800eb32:	2301      	movne	r3, #1
 800eb34:	2300      	moveq	r3, #0
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	617b      	str	r3, [r7, #20]

    return ret;
 800eb3a:	697b      	ldr	r3, [r7, #20]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f983 	bl	800ee58 <osSemaphoreDelete>
#endif
    return 1;
 800eb52:	2301      	movs	r3, #1
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800eb68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 f8ef 	bl	800ed50 <osSemaphoreWait>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b082      	sub	sp, #8
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 f92c 	bl	800edec <osSemaphoreRelease>
#endif
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f002 fa47 	bl	8011038 <pvPortMalloc>
 800ebaa:	4603      	mov	r3, r0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f002 fb07 	bl	80111d0 <vPortFree>
}
 800ebc2:	bf00      	nop
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b085      	sub	sp, #20
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ebd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ebdc:	2b84      	cmp	r3, #132	; 0x84
 800ebde:	d005      	beq.n	800ebec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ebe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	3303      	adds	r3, #3
 800ebea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ebec:	68fb      	ldr	r3, [r7, #12]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec00:	f3ef 8305 	mrs	r3, IPSR
 800ec04:	607b      	str	r3, [r7, #4]
  return(result);
 800ec06:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	bf14      	ite	ne
 800ec0c:	2301      	movne	r3, #1
 800ec0e:	2300      	moveq	r3, #0
 800ec10:	b2db      	uxtb	r3, r3
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	370c      	adds	r7, #12
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr

0800ec1e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ec22:	f001 f987 	bl	800ff34 <vTaskStartScheduler>
  
  return osOK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec2e:	b089      	sub	sp, #36	; 0x24
 800ec30:	af04      	add	r7, sp, #16
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	695b      	ldr	r3, [r3, #20]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d020      	beq.n	800ec80 <osThreadCreate+0x54>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d01c      	beq.n	800ec80 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685c      	ldr	r4, [r3, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	691e      	ldr	r6, [r3, #16]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7ff ffb6 	bl	800ebca <makeFreeRtosPriority>
 800ec5e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec68:	9202      	str	r2, [sp, #8]
 800ec6a:	9301      	str	r3, [sp, #4]
 800ec6c:	9100      	str	r1, [sp, #0]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	4632      	mov	r2, r6
 800ec72:	4629      	mov	r1, r5
 800ec74:	4620      	mov	r0, r4
 800ec76:	f000 ff7f 	bl	800fb78 <xTaskCreateStatic>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	e01c      	b.n	800ecba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	685c      	ldr	r4, [r3, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec8c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff ff98 	bl	800ebca <makeFreeRtosPriority>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	f107 030c 	add.w	r3, r7, #12
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	9200      	str	r2, [sp, #0]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	4632      	mov	r2, r6
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f000 ffc1 	bl	800fc32 <xTaskCreate>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d001      	beq.n	800ecba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e000      	b.n	800ecbc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ecba:	68fb      	ldr	r3, [r7, #12]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecc4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <osDelay+0x16>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	e000      	b.n	800ecdc <osDelay+0x18>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f001 f8f5 	bl	800fecc <vTaskDelay>
  
  return osOK;
 800ece2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af02      	add	r7, sp, #8
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00f      	beq.n	800ed1e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d10a      	bne.n	800ed1a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	2203      	movs	r2, #3
 800ed0a:	9200      	str	r2, [sp, #0]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2100      	movs	r1, #0
 800ed10:	2001      	movs	r0, #1
 800ed12:	f000 f9d1 	bl	800f0b8 <xQueueGenericCreateStatic>
 800ed16:	4603      	mov	r3, r0
 800ed18:	e016      	b.n	800ed48 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e014      	b.n	800ed48 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d110      	bne.n	800ed46 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ed24:	2203      	movs	r2, #3
 800ed26:	2100      	movs	r1, #0
 800ed28:	2001      	movs	r0, #1
 800ed2a:	f000 fa3d 	bl	800f1a8 <xQueueGenericCreate>
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d005      	beq.n	800ed42 <osSemaphoreCreate+0x56>
 800ed36:	2300      	movs	r3, #0
 800ed38:	2200      	movs	r2, #0
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f000 fa8d 	bl	800f25c <xQueueGenericSend>
      return sema;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	e000      	b.n	800ed48 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ed46:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ed64:	2380      	movs	r3, #128	; 0x80
 800ed66:	e03a      	b.n	800edde <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed72:	d103      	bne.n	800ed7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ed74:	f04f 33ff 	mov.w	r3, #4294967295
 800ed78:	60fb      	str	r3, [r7, #12]
 800ed7a:	e009      	b.n	800ed90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d006      	beq.n	800ed90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d101      	bne.n	800ed90 <osSemaphoreWait+0x40>
      ticks = 1;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ed90:	f7ff ff33 	bl	800ebfa <inHandlerMode>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d017      	beq.n	800edca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ed9a:	f107 0308 	add.w	r3, r7, #8
 800ed9e:	461a      	mov	r2, r3
 800eda0:	2100      	movs	r1, #0
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fcf2 	bl	800f78c <xQueueReceiveFromISR>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d001      	beq.n	800edb2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800edae:	23ff      	movs	r3, #255	; 0xff
 800edb0:	e015      	b.n	800edde <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d011      	beq.n	800eddc <osSemaphoreWait+0x8c>
 800edb8:	4b0b      	ldr	r3, [pc, #44]	; (800ede8 <osSemaphoreWait+0x98>)
 800edba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	e008      	b.n	800eddc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800edca:	68f9      	ldr	r1, [r7, #12]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fbd1 	bl	800f574 <xQueueSemaphoreTake>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d001      	beq.n	800eddc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800edd8:	23ff      	movs	r3, #255	; 0xff
 800edda:	e000      	b.n	800edde <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800edf8:	2300      	movs	r3, #0
 800edfa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800edfc:	f7ff fefd 	bl	800ebfa <inHandlerMode>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d016      	beq.n	800ee34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ee06:	f107 0308 	add.w	r3, r7, #8
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 fb23 	bl	800f458 <xQueueGiveFromISR>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d001      	beq.n	800ee1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ee18:	23ff      	movs	r3, #255	; 0xff
 800ee1a:	e017      	b.n	800ee4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d013      	beq.n	800ee4a <osSemaphoreRelease+0x5e>
 800ee22:	4b0c      	ldr	r3, [pc, #48]	; (800ee54 <osSemaphoreRelease+0x68>)
 800ee24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	e00a      	b.n	800ee4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ee34:	2300      	movs	r3, #0
 800ee36:	2200      	movs	r2, #0
 800ee38:	2100      	movs	r1, #0
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fa0e 	bl	800f25c <xQueueGenericSend>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d001      	beq.n	800ee4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ee46:	23ff      	movs	r3, #255	; 0xff
 800ee48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	e000ed04 	.word	0xe000ed04

0800ee58 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ee60:	f7ff fecb 	bl	800ebfa <inHandlerMode>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ee6a:	2382      	movs	r3, #130	; 0x82
 800ee6c:	e003      	b.n	800ee76 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 fd0c 	bl	800f88c <vQueueDelete>

  return osOK; 
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b083      	sub	sp, #12
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f103 0208 	add.w	r2, r3, #8
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f04f 32ff 	mov.w	r2, #4294967295
 800ee96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f103 0208 	add.w	r2, r3, #8
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f103 0208 	add.w	r2, r3, #8
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eebe:	b480      	push	{r7}
 800eec0:	b083      	sub	sp, #12
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	689a      	ldr	r2, [r3, #8]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	683a      	ldr	r2, [r7, #0]
 800eefc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	601a      	str	r2, [r3, #0]
}
 800ef14:	bf00      	nop
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d103      	bne.n	800ef40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	691b      	ldr	r3, [r3, #16]
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e00c      	b.n	800ef5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3308      	adds	r3, #8
 800ef44:	60fb      	str	r3, [r7, #12]
 800ef46:	e002      	b.n	800ef4e <vListInsert+0x2e>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	60fb      	str	r3, [r7, #12]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d2f6      	bcs.n	800ef48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	685a      	ldr	r2, [r3, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	1c5a      	adds	r2, r3, #1
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	601a      	str	r2, [r3, #0]
}
 800ef86:	bf00      	nop
 800ef88:	3714      	adds	r7, #20
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr

0800ef92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef92:	b480      	push	{r7}
 800ef94:	b085      	sub	sp, #20
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	6892      	ldr	r2, [r2, #8]
 800efa8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	6852      	ldr	r2, [r2, #4]
 800efb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d103      	bne.n	800efc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	689a      	ldr	r2, [r3, #8]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	1e5a      	subs	r2, r3, #1
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3714      	adds	r7, #20
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr
	...

0800efe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10a      	bne.n	800f012 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f000:	f383 8811 	msr	BASEPRI, r3
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f00e:	bf00      	nop
 800f010:	e7fe      	b.n	800f010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f012:	f001 feef 	bl	8010df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f01e:	68f9      	ldr	r1, [r7, #12]
 800f020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f022:	fb01 f303 	mul.w	r3, r1, r3
 800f026:	441a      	add	r2, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f042:	3b01      	subs	r3, #1
 800f044:	68f9      	ldr	r1, [r7, #12]
 800f046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f048:	fb01 f303 	mul.w	r3, r1, r3
 800f04c:	441a      	add	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	22ff      	movs	r2, #255	; 0xff
 800f056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	22ff      	movs	r2, #255	; 0xff
 800f05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d114      	bne.n	800f092 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01a      	beq.n	800f0a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3310      	adds	r3, #16
 800f074:	4618      	mov	r0, r3
 800f076:	f001 f9af 	bl	80103d8 <xTaskRemoveFromEventList>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d012      	beq.n	800f0a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f080:	4b0c      	ldr	r3, [pc, #48]	; (800f0b4 <xQueueGenericReset+0xcc>)
 800f082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	e009      	b.n	800f0a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3310      	adds	r3, #16
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff fef1 	bl	800ee7e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	3324      	adds	r3, #36	; 0x24
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff feec 	bl	800ee7e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0a6:	f001 fed5 	bl	8010e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0aa:	2301      	movs	r3, #1
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	e000ed04 	.word	0xe000ed04

0800f0b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08e      	sub	sp, #56	; 0x38
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <xQueueGenericCreateStatic+0x52>
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <xQueueGenericCreateStatic+0x56>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <xQueueGenericCreateStatic+0x58>
 800f10e:	2300      	movs	r3, #0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10a      	bne.n	800f12a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f118:	f383 8811 	msr	BASEPRI, r3
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	623b      	str	r3, [r7, #32]
}
 800f126:	bf00      	nop
 800f128:	e7fe      	b.n	800f128 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d102      	bne.n	800f136 <xQueueGenericCreateStatic+0x7e>
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <xQueueGenericCreateStatic+0x82>
 800f136:	2301      	movs	r3, #1
 800f138:	e000      	b.n	800f13c <xQueueGenericCreateStatic+0x84>
 800f13a:	2300      	movs	r3, #0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d10a      	bne.n	800f156 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	61fb      	str	r3, [r7, #28]
}
 800f152:	bf00      	nop
 800f154:	e7fe      	b.n	800f154 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f156:	2348      	movs	r3, #72	; 0x48
 800f158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b48      	cmp	r3, #72	; 0x48
 800f15e:	d00a      	beq.n	800f176 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	61bb      	str	r3, [r7, #24]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f176:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00d      	beq.n	800f19e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	2201      	movs	r2, #1
 800f186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f18a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	4613      	mov	r3, r2
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	68b9      	ldr	r1, [r7, #8]
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f000 f83f 	bl	800f21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3730      	adds	r7, #48	; 0x30
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08a      	sub	sp, #40	; 0x28
 800f1ac:	af02      	add	r7, sp, #8
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10a      	bne.n	800f1d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	613b      	str	r3, [r7, #16]
}
 800f1ce:	bf00      	nop
 800f1d0:	e7fe      	b.n	800f1d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	fb02 f303 	mul.w	r3, r2, r3
 800f1da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	3348      	adds	r3, #72	; 0x48
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f001 ff29 	bl	8011038 <pvPortMalloc>
 800f1e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d011      	beq.n	800f212 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	3348      	adds	r3, #72	; 0x48
 800f1f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f200:	79fa      	ldrb	r2, [r7, #7]
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	4613      	mov	r3, r2
 800f208:	697a      	ldr	r2, [r7, #20]
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 f805 	bl	800f21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f212:	69bb      	ldr	r3, [r7, #24]
	}
 800f214:	4618      	mov	r0, r3
 800f216:	3720      	adds	r7, #32
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d103      	bne.n	800f238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	e002      	b.n	800f23e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f24a:	2101      	movs	r1, #1
 800f24c:	69b8      	ldr	r0, [r7, #24]
 800f24e:	f7ff fecb 	bl	800efe8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f252:	bf00      	nop
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
	...

0800f25c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08e      	sub	sp, #56	; 0x38
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f26a:	2300      	movs	r3, #0
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10a      	bne.n	800f28e <xQueueGenericSend+0x32>
	__asm volatile
 800f278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27c:	f383 8811 	msr	BASEPRI, r3
 800f280:	f3bf 8f6f 	isb	sy
 800f284:	f3bf 8f4f 	dsb	sy
 800f288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f28a:	bf00      	nop
 800f28c:	e7fe      	b.n	800f28c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d103      	bne.n	800f29c <xQueueGenericSend+0x40>
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d101      	bne.n	800f2a0 <xQueueGenericSend+0x44>
 800f29c:	2301      	movs	r3, #1
 800f29e:	e000      	b.n	800f2a2 <xQueueGenericSend+0x46>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10a      	bne.n	800f2bc <xQueueGenericSend+0x60>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2b8:	bf00      	nop
 800f2ba:	e7fe      	b.n	800f2ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d103      	bne.n	800f2ca <xQueueGenericSend+0x6e>
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d101      	bne.n	800f2ce <xQueueGenericSend+0x72>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e000      	b.n	800f2d0 <xQueueGenericSend+0x74>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10a      	bne.n	800f2ea <xQueueGenericSend+0x8e>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	623b      	str	r3, [r7, #32]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2ea:	f001 fa35 	bl	8010758 <xTaskGetSchedulerState>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d102      	bne.n	800f2fa <xQueueGenericSend+0x9e>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <xQueueGenericSend+0xa2>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e000      	b.n	800f300 <xQueueGenericSend+0xa4>
 800f2fe:	2300      	movs	r3, #0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <xQueueGenericSend+0xbe>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	61fb      	str	r3, [r7, #28]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f31a:	f001 fd6b 	bl	8010df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f326:	429a      	cmp	r2, r3
 800f328:	d302      	bcc.n	800f330 <xQueueGenericSend+0xd4>
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d129      	bne.n	800f384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f330:	683a      	ldr	r2, [r7, #0]
 800f332:	68b9      	ldr	r1, [r7, #8]
 800f334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f336:	f000 fae4 	bl	800f902 <prvCopyDataToQueue>
 800f33a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	2b00      	cmp	r3, #0
 800f342:	d010      	beq.n	800f366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f346:	3324      	adds	r3, #36	; 0x24
 800f348:	4618      	mov	r0, r3
 800f34a:	f001 f845 	bl	80103d8 <xTaskRemoveFromEventList>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d013      	beq.n	800f37c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f354:	4b3f      	ldr	r3, [pc, #252]	; (800f454 <xQueueGenericSend+0x1f8>)
 800f356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	e00a      	b.n	800f37c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d007      	beq.n	800f37c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f36c:	4b39      	ldr	r3, [pc, #228]	; (800f454 <xQueueGenericSend+0x1f8>)
 800f36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f372:	601a      	str	r2, [r3, #0]
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f37c:	f001 fd6a 	bl	8010e54 <vPortExitCritical>
				return pdPASS;
 800f380:	2301      	movs	r3, #1
 800f382:	e063      	b.n	800f44c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d103      	bne.n	800f392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f38a:	f001 fd63 	bl	8010e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	e05c      	b.n	800f44c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f394:	2b00      	cmp	r3, #0
 800f396:	d106      	bne.n	800f3a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f398:	f107 0314 	add.w	r3, r7, #20
 800f39c:	4618      	mov	r0, r3
 800f39e:	f001 f87d 	bl	801049c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3a6:	f001 fd55 	bl	8010e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3aa:	f000 fe2d 	bl	8010008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3ae:	f001 fd21 	bl	8010df4 <vPortEnterCritical>
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3b8:	b25b      	sxtb	r3, r3
 800f3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3be:	d103      	bne.n	800f3c8 <xQueueGenericSend+0x16c>
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3ce:	b25b      	sxtb	r3, r3
 800f3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d4:	d103      	bne.n	800f3de <xQueueGenericSend+0x182>
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3de:	f001 fd39 	bl	8010e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3e2:	1d3a      	adds	r2, r7, #4
 800f3e4:	f107 0314 	add.w	r3, r7, #20
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f001 f86c 	bl	80104c8 <xTaskCheckForTimeOut>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d124      	bne.n	800f440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3f8:	f000 fb7b 	bl	800faf2 <prvIsQueueFull>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d018      	beq.n	800f434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	3310      	adds	r3, #16
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	4611      	mov	r1, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 ffc0 	bl	8010390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f412:	f000 fb06 	bl	800fa22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f416:	f000 fe05 	bl	8010024 <xTaskResumeAll>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f47f af7c 	bne.w	800f31a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f422:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <xQueueGenericSend+0x1f8>)
 800f424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f428:	601a      	str	r2, [r3, #0]
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	e772      	b.n	800f31a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f436:	f000 faf4 	bl	800fa22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f43a:	f000 fdf3 	bl	8010024 <xTaskResumeAll>
 800f43e:	e76c      	b.n	800f31a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f442:	f000 faee 	bl	800fa22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f446:	f000 fded 	bl	8010024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f44a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3738      	adds	r7, #56	; 0x38
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	e000ed04 	.word	0xe000ed04

0800f458 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08e      	sub	sp, #56	; 0x38
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10a      	bne.n	800f482 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	623b      	str	r3, [r7, #32]
}
 800f47e:	bf00      	nop
 800f480:	e7fe      	b.n	800f480 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00a      	beq.n	800f4a0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48e:	f383 8811 	msr	BASEPRI, r3
 800f492:	f3bf 8f6f 	isb	sy
 800f496:	f3bf 8f4f 	dsb	sy
 800f49a:	61fb      	str	r3, [r7, #28]
}
 800f49c:	bf00      	nop
 800f49e:	e7fe      	b.n	800f49e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d103      	bne.n	800f4b0 <xQueueGiveFromISR+0x58>
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <xQueueGiveFromISR+0x5c>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e000      	b.n	800f4b6 <xQueueGiveFromISR+0x5e>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10a      	bne.n	800f4d0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	61bb      	str	r3, [r7, #24]
}
 800f4cc:	bf00      	nop
 800f4ce:	e7fe      	b.n	800f4ce <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4d0:	f001 fd72 	bl	8010fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4d4:	f3ef 8211 	mrs	r2, BASEPRI
 800f4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4dc:	f383 8811 	msr	BASEPRI, r3
 800f4e0:	f3bf 8f6f 	isb	sy
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	617a      	str	r2, [r7, #20]
 800f4ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d22b      	bcs.n	800f558 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51a:	d112      	bne.n	800f542 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f520:	2b00      	cmp	r3, #0
 800f522:	d016      	beq.n	800f552 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f526:	3324      	adds	r3, #36	; 0x24
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 ff55 	bl	80103d8 <xTaskRemoveFromEventList>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00e      	beq.n	800f552 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00b      	beq.n	800f552 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2201      	movs	r2, #1
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	e007      	b.n	800f552 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f546:	3301      	adds	r3, #1
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	b25a      	sxtb	r2, r3
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f552:	2301      	movs	r3, #1
 800f554:	637b      	str	r3, [r7, #52]	; 0x34
 800f556:	e001      	b.n	800f55c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f558:	2300      	movs	r3, #0
 800f55a:	637b      	str	r3, [r7, #52]	; 0x34
 800f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f566:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3738      	adds	r7, #56	; 0x38
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08e      	sub	sp, #56	; 0x38
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f57e:	2300      	movs	r3, #0
 800f580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f586:	2300      	movs	r3, #0
 800f588:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10a      	bne.n	800f5a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	623b      	str	r3, [r7, #32]
}
 800f5a2:	bf00      	nop
 800f5a4:	e7fe      	b.n	800f5a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00a      	beq.n	800f5c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	61fb      	str	r3, [r7, #28]
}
 800f5c0:	bf00      	nop
 800f5c2:	e7fe      	b.n	800f5c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5c4:	f001 f8c8 	bl	8010758 <xTaskGetSchedulerState>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d102      	bne.n	800f5d4 <xQueueSemaphoreTake+0x60>
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d101      	bne.n	800f5d8 <xQueueSemaphoreTake+0x64>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e000      	b.n	800f5da <xQueueSemaphoreTake+0x66>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10a      	bne.n	800f5f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	61bb      	str	r3, [r7, #24]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5f4:	f001 fbfe 	bl	8010df4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f600:	2b00      	cmp	r3, #0
 800f602:	d024      	beq.n	800f64e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	1e5a      	subs	r2, r3, #1
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f614:	f001 fa48 	bl	8010aa8 <pvTaskIncrementMutexHeldCount>
 800f618:	4602      	mov	r2, r0
 800f61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00f      	beq.n	800f646 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f628:	3310      	adds	r3, #16
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fed4 	bl	80103d8 <xTaskRemoveFromEventList>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d007      	beq.n	800f646 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f636:	4b54      	ldr	r3, [pc, #336]	; (800f788 <xQueueSemaphoreTake+0x214>)
 800f638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f646:	f001 fc05 	bl	8010e54 <vPortExitCritical>
				return pdPASS;
 800f64a:	2301      	movs	r3, #1
 800f64c:	e097      	b.n	800f77e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d111      	bne.n	800f678 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00a      	beq.n	800f670 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	617b      	str	r3, [r7, #20]
}
 800f66c:	bf00      	nop
 800f66e:	e7fe      	b.n	800f66e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f670:	f001 fbf0 	bl	8010e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f674:	2300      	movs	r3, #0
 800f676:	e082      	b.n	800f77e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d106      	bne.n	800f68c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f67e:	f107 030c 	add.w	r3, r7, #12
 800f682:	4618      	mov	r0, r3
 800f684:	f000 ff0a 	bl	801049c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f688:	2301      	movs	r3, #1
 800f68a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f68c:	f001 fbe2 	bl	8010e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f690:	f000 fcba 	bl	8010008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f694:	f001 fbae 	bl	8010df4 <vPortEnterCritical>
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f69e:	b25b      	sxtb	r3, r3
 800f6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a4:	d103      	bne.n	800f6ae <xQueueSemaphoreTake+0x13a>
 800f6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6b4:	b25b      	sxtb	r3, r3
 800f6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ba:	d103      	bne.n	800f6c4 <xQueueSemaphoreTake+0x150>
 800f6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6c4:	f001 fbc6 	bl	8010e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6c8:	463a      	mov	r2, r7
 800f6ca:	f107 030c 	add.w	r3, r7, #12
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fef9 	bl	80104c8 <xTaskCheckForTimeOut>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d132      	bne.n	800f742 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6de:	f000 f9f2 	bl	800fac6 <prvIsQueueEmpty>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d026      	beq.n	800f736 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d109      	bne.n	800f704 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f6f0:	f001 fb80 	bl	8010df4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f001 f84b 	bl	8010794 <xTaskPriorityInherit>
 800f6fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f700:	f001 fba8 	bl	8010e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f706:	3324      	adds	r3, #36	; 0x24
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	4611      	mov	r1, r2
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 fe3f 	bl	8010390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f714:	f000 f985 	bl	800fa22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f718:	f000 fc84 	bl	8010024 <xTaskResumeAll>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f47f af68 	bne.w	800f5f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f724:	4b18      	ldr	r3, [pc, #96]	; (800f788 <xQueueSemaphoreTake+0x214>)
 800f726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f72a:	601a      	str	r2, [r3, #0]
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	e75e      	b.n	800f5f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f738:	f000 f973 	bl	800fa22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f73c:	f000 fc72 	bl	8010024 <xTaskResumeAll>
 800f740:	e758      	b.n	800f5f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f744:	f000 f96d 	bl	800fa22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f748:	f000 fc6c 	bl	8010024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f74e:	f000 f9ba 	bl	800fac6 <prvIsQueueEmpty>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	f43f af4d 	beq.w	800f5f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00d      	beq.n	800f77c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f760:	f001 fb48 	bl	8010df4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f766:	f000 f8b4 	bl	800f8d2 <prvGetDisinheritPriorityAfterTimeout>
 800f76a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f772:	4618      	mov	r0, r3
 800f774:	f001 f90a 	bl	801098c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f778:	f001 fb6c 	bl	8010e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f77c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3738      	adds	r7, #56	; 0x38
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08e      	sub	sp, #56	; 0x38
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10a      	bne.n	800f7b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	623b      	str	r3, [r7, #32]
}
 800f7b4:	bf00      	nop
 800f7b6:	e7fe      	b.n	800f7b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d103      	bne.n	800f7c6 <xQueueReceiveFromISR+0x3a>
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d101      	bne.n	800f7ca <xQueueReceiveFromISR+0x3e>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e000      	b.n	800f7cc <xQueueReceiveFromISR+0x40>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10a      	bne.n	800f7e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	61fb      	str	r3, [r7, #28]
}
 800f7e2:	bf00      	nop
 800f7e4:	e7fe      	b.n	800f7e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7e6:	f001 fbe7 	bl	8010fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800f7ea:	f3ef 8211 	mrs	r2, BASEPRI
 800f7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	61ba      	str	r2, [r7, #24]
 800f800:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f802:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f80a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d02f      	beq.n	800f872 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f81c:	68b9      	ldr	r1, [r7, #8]
 800f81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f820:	f000 f8d9 	bl	800f9d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f826:	1e5a      	subs	r2, r3, #1
 800f828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f82c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f834:	d112      	bne.n	800f85c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f838:	691b      	ldr	r3, [r3, #16]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d016      	beq.n	800f86c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	3310      	adds	r3, #16
 800f842:	4618      	mov	r0, r3
 800f844:	f000 fdc8 	bl	80103d8 <xTaskRemoveFromEventList>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00e      	beq.n	800f86c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00b      	beq.n	800f86c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	601a      	str	r2, [r3, #0]
 800f85a:	e007      	b.n	800f86c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f860:	3301      	adds	r3, #1
 800f862:	b2db      	uxtb	r3, r3
 800f864:	b25a      	sxtb	r2, r3
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f86c:	2301      	movs	r3, #1
 800f86e:	637b      	str	r3, [r7, #52]	; 0x34
 800f870:	e001      	b.n	800f876 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f872:	2300      	movs	r3, #0
 800f874:	637b      	str	r3, [r7, #52]	; 0x34
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	f383 8811 	msr	BASEPRI, r3
}
 800f880:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f884:	4618      	mov	r0, r3
 800f886:	3738      	adds	r7, #56	; 0x38
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10a      	bne.n	800f8b4 <vQueueDelete+0x28>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	60bb      	str	r3, [r7, #8]
}
 800f8b0:	bf00      	nop
 800f8b2:	e7fe      	b.n	800f8b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f000 f935 	bl	800fb24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d102      	bne.n	800f8ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f001 fc83 	bl	80111d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b085      	sub	sp, #20
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f1c3 0307 	rsb	r3, r3, #7
 800f8ec:	60fb      	str	r3, [r7, #12]
 800f8ee:	e001      	b.n	800f8f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
	}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b086      	sub	sp, #24
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	60b9      	str	r1, [r7, #8]
 800f90c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f90e:	2300      	movs	r3, #0
 800f910:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f916:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d10d      	bne.n	800f93c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d14d      	bne.n	800f9c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 ffa7 	bl	8010880 <xTaskPriorityDisinherit>
 800f932:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	609a      	str	r2, [r3, #8]
 800f93a:	e043      	b.n	800f9c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d119      	bne.n	800f976 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6858      	ldr	r0, [r3, #4]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94a:	461a      	mov	r2, r3
 800f94c:	68b9      	ldr	r1, [r7, #8]
 800f94e:	f002 fbd0 	bl	80120f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95a:	441a      	add	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	685a      	ldr	r2, [r3, #4]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d32b      	bcc.n	800f9c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	605a      	str	r2, [r3, #4]
 800f974:	e026      	b.n	800f9c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	68d8      	ldr	r0, [r3, #12]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f97e:	461a      	mov	r2, r3
 800f980:	68b9      	ldr	r1, [r7, #8]
 800f982:	f002 fbb6 	bl	80120f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98e:	425b      	negs	r3, r3
 800f990:	441a      	add	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	68da      	ldr	r2, [r3, #12]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d207      	bcs.n	800f9b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	689a      	ldr	r2, [r3, #8]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9aa:	425b      	negs	r3, r3
 800f9ac:	441a      	add	r2, r3
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d105      	bne.n	800f9c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	1c5a      	adds	r2, r3, #1
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f9cc:	697b      	ldr	r3, [r7, #20]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d018      	beq.n	800fa1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	68da      	ldr	r2, [r3, #12]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f0:	441a      	add	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68da      	ldr	r2, [r3, #12]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d303      	bcc.n	800fa0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68d9      	ldr	r1, [r3, #12]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa12:	461a      	mov	r2, r3
 800fa14:	6838      	ldr	r0, [r7, #0]
 800fa16:	f002 fb6c 	bl	80120f2 <memcpy>
	}
}
 800fa1a:	bf00      	nop
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fa2a:	f001 f9e3 	bl	8010df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa36:	e011      	b.n	800fa5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d012      	beq.n	800fa66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	3324      	adds	r3, #36	; 0x24
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 fcc7 	bl	80103d8 <xTaskRemoveFromEventList>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fa50:	f000 fd9c 	bl	801058c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
 800fa56:	3b01      	subs	r3, #1
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	dce9      	bgt.n	800fa38 <prvUnlockQueue+0x16>
 800fa64:	e000      	b.n	800fa68 <prvUnlockQueue+0x46>
					break;
 800fa66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	22ff      	movs	r2, #255	; 0xff
 800fa6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fa70:	f001 f9f0 	bl	8010e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fa74:	f001 f9be 	bl	8010df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa80:	e011      	b.n	800faa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d012      	beq.n	800fab0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	3310      	adds	r3, #16
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 fca2 	bl	80103d8 <xTaskRemoveFromEventList>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fa9a:	f000 fd77 	bl	801058c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
 800faa0:	3b01      	subs	r3, #1
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800faa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dce9      	bgt.n	800fa82 <prvUnlockQueue+0x60>
 800faae:	e000      	b.n	800fab2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fab0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	22ff      	movs	r2, #255	; 0xff
 800fab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800faba:	f001 f9cb 	bl	8010e54 <vPortExitCritical>
}
 800fabe:	bf00      	nop
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b084      	sub	sp, #16
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800face:	f001 f991 	bl	8010df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fada:	2301      	movs	r3, #1
 800fadc:	60fb      	str	r3, [r7, #12]
 800fade:	e001      	b.n	800fae4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fae0:	2300      	movs	r3, #0
 800fae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fae4:	f001 f9b6 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 800fae8:	68fb      	ldr	r3, [r7, #12]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fafa:	f001 f97b 	bl	8010df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d102      	bne.n	800fb10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	60fb      	str	r3, [r7, #12]
 800fb0e:	e001      	b.n	800fb14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fb10:	2300      	movs	r3, #0
 800fb12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fb14:	f001 f99e 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 800fb18:	68fb      	ldr	r3, [r7, #12]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	60fb      	str	r3, [r7, #12]
 800fb30:	e016      	b.n	800fb60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fb32:	4a10      	ldr	r2, [pc, #64]	; (800fb74 <vQueueUnregisterQueue+0x50>)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	4413      	add	r3, r2
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d10b      	bne.n	800fb5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fb42:	4a0c      	ldr	r2, [pc, #48]	; (800fb74 <vQueueUnregisterQueue+0x50>)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2100      	movs	r1, #0
 800fb48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fb4c:	4a09      	ldr	r2, [pc, #36]	; (800fb74 <vQueueUnregisterQueue+0x50>)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	4413      	add	r3, r2
 800fb54:	2200      	movs	r2, #0
 800fb56:	605a      	str	r2, [r3, #4]
				break;
 800fb58:	e006      	b.n	800fb68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	60fb      	str	r3, [r7, #12]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b07      	cmp	r3, #7
 800fb64:	d9e5      	bls.n	800fb32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fb66:	bf00      	nop
 800fb68:	bf00      	nop
 800fb6a:	3714      	adds	r7, #20
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	20002a24 	.word	0x20002a24

0800fb78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b08e      	sub	sp, #56	; 0x38
 800fb7c:	af04      	add	r7, sp, #16
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
 800fb84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10a      	bne.n	800fba2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	623b      	str	r3, [r7, #32]
}
 800fb9e:	bf00      	nop
 800fba0:	e7fe      	b.n	800fba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <xTaskCreateStatic+0x46>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	61fb      	str	r3, [r7, #28]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fbbe:	23a0      	movs	r3, #160	; 0xa0
 800fbc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	2ba0      	cmp	r3, #160	; 0xa0
 800fbc6:	d00a      	beq.n	800fbde <xTaskCreateStatic+0x66>
	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbcc:	f383 8811 	msr	BASEPRI, r3
 800fbd0:	f3bf 8f6f 	isb	sy
 800fbd4:	f3bf 8f4f 	dsb	sy
 800fbd8:	61bb      	str	r3, [r7, #24]
}
 800fbda:	bf00      	nop
 800fbdc:	e7fe      	b.n	800fbdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fbde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d01e      	beq.n	800fc24 <xTaskCreateStatic+0xac>
 800fbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d01b      	beq.n	800fc24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbfe:	2300      	movs	r3, #0
 800fc00:	9303      	str	r3, [sp, #12]
 800fc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc04:	9302      	str	r3, [sp, #8]
 800fc06:	f107 0314 	add.w	r3, r7, #20
 800fc0a:	9301      	str	r3, [sp, #4]
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	68b9      	ldr	r1, [r7, #8]
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 f850 	bl	800fcbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc1e:	f000 f8eb 	bl	800fdf8 <prvAddNewTaskToReadyList>
 800fc22:	e001      	b.n	800fc28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fc24:	2300      	movs	r3, #0
 800fc26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fc28:	697b      	ldr	r3, [r7, #20]
	}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3728      	adds	r7, #40	; 0x28
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b08c      	sub	sp, #48	; 0x30
 800fc36:	af04      	add	r7, sp, #16
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	60b9      	str	r1, [r7, #8]
 800fc3c:	603b      	str	r3, [r7, #0]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc42:	88fb      	ldrh	r3, [r7, #6]
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f001 f9f6 	bl	8011038 <pvPortMalloc>
 800fc4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d00e      	beq.n	800fc72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc54:	20a0      	movs	r0, #160	; 0xa0
 800fc56:	f001 f9ef 	bl	8011038 <pvPortMalloc>
 800fc5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d003      	beq.n	800fc6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	697a      	ldr	r2, [r7, #20]
 800fc66:	631a      	str	r2, [r3, #48]	; 0x30
 800fc68:	e005      	b.n	800fc76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc6a:	6978      	ldr	r0, [r7, #20]
 800fc6c:	f001 fab0 	bl	80111d0 <vPortFree>
 800fc70:	e001      	b.n	800fc76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc72:	2300      	movs	r3, #0
 800fc74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d017      	beq.n	800fcac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc84:	88fa      	ldrh	r2, [r7, #6]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9303      	str	r3, [sp, #12]
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	9302      	str	r3, [sp, #8]
 800fc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	68b9      	ldr	r1, [r7, #8]
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f000 f80e 	bl	800fcbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fca0:	69f8      	ldr	r0, [r7, #28]
 800fca2:	f000 f8a9 	bl	800fdf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fca6:	2301      	movs	r3, #1
 800fca8:	61bb      	str	r3, [r7, #24]
 800fcaa:	e002      	b.n	800fcb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcac:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fcb2:	69bb      	ldr	r3, [r7, #24]
	}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3720      	adds	r7, #32
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b088      	sub	sp, #32
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	4413      	add	r3, r2
 800fcda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	f023 0307 	bic.w	r3, r3, #7
 800fce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	f003 0307 	and.w	r3, r3, #7
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00a      	beq.n	800fd04 <prvInitialiseNewTask+0x48>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	617b      	str	r3, [r7, #20]
}
 800fd00:	bf00      	nop
 800fd02:	e7fe      	b.n	800fd02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d01f      	beq.n	800fd4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	61fb      	str	r3, [r7, #28]
 800fd0e:	e012      	b.n	800fd36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd10:	68ba      	ldr	r2, [r7, #8]
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	4413      	add	r3, r2
 800fd16:	7819      	ldrb	r1, [r3, #0]
 800fd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	3334      	adds	r3, #52	; 0x34
 800fd20:	460a      	mov	r2, r1
 800fd22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	4413      	add	r3, r2
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d006      	beq.n	800fd3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	3301      	adds	r3, #1
 800fd34:	61fb      	str	r3, [r7, #28]
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	2b0f      	cmp	r3, #15
 800fd3a:	d9e9      	bls.n	800fd10 <prvInitialiseNewTask+0x54>
 800fd3c:	e000      	b.n	800fd40 <prvInitialiseNewTask+0x84>
			{
				break;
 800fd3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd48:	e003      	b.n	800fd52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	2b06      	cmp	r3, #6
 800fd56:	d901      	bls.n	800fd5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd58:	2306      	movs	r3, #6
 800fd5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd70:	3304      	adds	r3, #4
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff f8a3 	bl	800eebe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7a:	3318      	adds	r3, #24
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff f89e 	bl	800eebe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	f1c3 0207 	rsb	r2, r3, #7
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdaa:	334c      	adds	r3, #76	; 0x4c
 800fdac:	224c      	movs	r2, #76	; 0x4c
 800fdae:	2100      	movs	r1, #0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f002 f8c8 	bl	8011f46 <memset>
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	4a0c      	ldr	r2, [pc, #48]	; (800fdec <prvInitialiseNewTask+0x130>)
 800fdba:	651a      	str	r2, [r3, #80]	; 0x50
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	4a0c      	ldr	r2, [pc, #48]	; (800fdf0 <prvInitialiseNewTask+0x134>)
 800fdc0:	655a      	str	r2, [r3, #84]	; 0x54
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	4a0b      	ldr	r2, [pc, #44]	; (800fdf4 <prvInitialiseNewTask+0x138>)
 800fdc6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	69b8      	ldr	r0, [r7, #24]
 800fdce:	f000 fee5 	bl	8010b9c <pxPortInitialiseStack>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fde2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fde4:	bf00      	nop
 800fde6:	3720      	adds	r7, #32
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	200067b8 	.word	0x200067b8
 800fdf0:	20006820 	.word	0x20006820
 800fdf4:	20006888 	.word	0x20006888

0800fdf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe00:	f000 fff8 	bl	8010df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe04:	4b2a      	ldr	r3, [pc, #168]	; (800feb0 <prvAddNewTaskToReadyList+0xb8>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	4a29      	ldr	r2, [pc, #164]	; (800feb0 <prvAddNewTaskToReadyList+0xb8>)
 800fe0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe0e:	4b29      	ldr	r3, [pc, #164]	; (800feb4 <prvAddNewTaskToReadyList+0xbc>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d109      	bne.n	800fe2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe16:	4a27      	ldr	r2, [pc, #156]	; (800feb4 <prvAddNewTaskToReadyList+0xbc>)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe1c:	4b24      	ldr	r3, [pc, #144]	; (800feb0 <prvAddNewTaskToReadyList+0xb8>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d110      	bne.n	800fe46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe24:	f000 fbd6 	bl	80105d4 <prvInitialiseTaskLists>
 800fe28:	e00d      	b.n	800fe46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe2a:	4b23      	ldr	r3, [pc, #140]	; (800feb8 <prvAddNewTaskToReadyList+0xc0>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d109      	bne.n	800fe46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe32:	4b20      	ldr	r3, [pc, #128]	; (800feb4 <prvAddNewTaskToReadyList+0xbc>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d802      	bhi.n	800fe46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe40:	4a1c      	ldr	r2, [pc, #112]	; (800feb4 <prvAddNewTaskToReadyList+0xbc>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe46:	4b1d      	ldr	r3, [pc, #116]	; (800febc <prvAddNewTaskToReadyList+0xc4>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	4a1b      	ldr	r2, [pc, #108]	; (800febc <prvAddNewTaskToReadyList+0xc4>)
 800fe4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe54:	2201      	movs	r2, #1
 800fe56:	409a      	lsls	r2, r3
 800fe58:	4b19      	ldr	r3, [pc, #100]	; (800fec0 <prvAddNewTaskToReadyList+0xc8>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	4a18      	ldr	r2, [pc, #96]	; (800fec0 <prvAddNewTaskToReadyList+0xc8>)
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe66:	4613      	mov	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4a15      	ldr	r2, [pc, #84]	; (800fec4 <prvAddNewTaskToReadyList+0xcc>)
 800fe70:	441a      	add	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	3304      	adds	r3, #4
 800fe76:	4619      	mov	r1, r3
 800fe78:	4610      	mov	r0, r2
 800fe7a:	f7ff f82d 	bl	800eed8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe7e:	f000 ffe9 	bl	8010e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe82:	4b0d      	ldr	r3, [pc, #52]	; (800feb8 <prvAddNewTaskToReadyList+0xc0>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00e      	beq.n	800fea8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe8a:	4b0a      	ldr	r3, [pc, #40]	; (800feb4 <prvAddNewTaskToReadyList+0xbc>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d207      	bcs.n	800fea8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe98:	4b0b      	ldr	r3, [pc, #44]	; (800fec8 <prvAddNewTaskToReadyList+0xd0>)
 800fe9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe9e:	601a      	str	r2, [r3, #0]
 800fea0:	f3bf 8f4f 	dsb	sy
 800fea4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fea8:	bf00      	nop
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	20002b64 	.word	0x20002b64
 800feb4:	20002a64 	.word	0x20002a64
 800feb8:	20002b70 	.word	0x20002b70
 800febc:	20002b80 	.word	0x20002b80
 800fec0:	20002b6c 	.word	0x20002b6c
 800fec4:	20002a68 	.word	0x20002a68
 800fec8:	e000ed04 	.word	0xe000ed04

0800fecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fed4:	2300      	movs	r3, #0
 800fed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d017      	beq.n	800ff0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fede:	4b13      	ldr	r3, [pc, #76]	; (800ff2c <vTaskDelay+0x60>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <vTaskDelay+0x30>
	__asm volatile
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	f383 8811 	msr	BASEPRI, r3
 800feee:	f3bf 8f6f 	isb	sy
 800fef2:	f3bf 8f4f 	dsb	sy
 800fef6:	60bb      	str	r3, [r7, #8]
}
 800fef8:	bf00      	nop
 800fefa:	e7fe      	b.n	800fefa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fefc:	f000 f884 	bl	8010008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ff00:	2100      	movs	r1, #0
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fde4 	bl	8010ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ff08:	f000 f88c 	bl	8010024 <xTaskResumeAll>
 800ff0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d107      	bne.n	800ff24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ff14:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <vTaskDelay+0x64>)
 800ff16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff1a:	601a      	str	r2, [r3, #0]
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	20002b8c 	.word	0x20002b8c
 800ff30:	e000ed04 	.word	0xe000ed04

0800ff34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b08a      	sub	sp, #40	; 0x28
 800ff38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ff42:	463a      	mov	r2, r7
 800ff44:	1d39      	adds	r1, r7, #4
 800ff46:	f107 0308 	add.w	r3, r7, #8
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7f2 f912 	bl	8002174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	9202      	str	r2, [sp, #8]
 800ff58:	9301      	str	r3, [sp, #4]
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	9300      	str	r3, [sp, #0]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	460a      	mov	r2, r1
 800ff62:	4921      	ldr	r1, [pc, #132]	; (800ffe8 <vTaskStartScheduler+0xb4>)
 800ff64:	4821      	ldr	r0, [pc, #132]	; (800ffec <vTaskStartScheduler+0xb8>)
 800ff66:	f7ff fe07 	bl	800fb78 <xTaskCreateStatic>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	4a20      	ldr	r2, [pc, #128]	; (800fff0 <vTaskStartScheduler+0xbc>)
 800ff6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff70:	4b1f      	ldr	r3, [pc, #124]	; (800fff0 <vTaskStartScheduler+0xbc>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	617b      	str	r3, [r7, #20]
 800ff7c:	e001      	b.n	800ff82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d11b      	bne.n	800ffc0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	613b      	str	r3, [r7, #16]
}
 800ff9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff9c:	4b15      	ldr	r3, [pc, #84]	; (800fff4 <vTaskStartScheduler+0xc0>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	334c      	adds	r3, #76	; 0x4c
 800ffa2:	4a15      	ldr	r2, [pc, #84]	; (800fff8 <vTaskStartScheduler+0xc4>)
 800ffa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ffa6:	4b15      	ldr	r3, [pc, #84]	; (800fffc <vTaskStartScheduler+0xc8>)
 800ffa8:	f04f 32ff 	mov.w	r2, #4294967295
 800ffac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ffae:	4b14      	ldr	r3, [pc, #80]	; (8010000 <vTaskStartScheduler+0xcc>)
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ffb4:	4b13      	ldr	r3, [pc, #76]	; (8010004 <vTaskStartScheduler+0xd0>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ffba:	f000 fe79 	bl	8010cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ffbe:	e00e      	b.n	800ffde <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc6:	d10a      	bne.n	800ffde <vTaskStartScheduler+0xaa>
	__asm volatile
 800ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffcc:	f383 8811 	msr	BASEPRI, r3
 800ffd0:	f3bf 8f6f 	isb	sy
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	60fb      	str	r3, [r7, #12]
}
 800ffda:	bf00      	nop
 800ffdc:	e7fe      	b.n	800ffdc <vTaskStartScheduler+0xa8>
}
 800ffde:	bf00      	nop
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	08014560 	.word	0x08014560
 800ffec:	080105a5 	.word	0x080105a5
 800fff0:	20002b88 	.word	0x20002b88
 800fff4:	20002a64 	.word	0x20002a64
 800fff8:	20000080 	.word	0x20000080
 800fffc:	20002b84 	.word	0x20002b84
 8010000:	20002b70 	.word	0x20002b70
 8010004:	20002b68 	.word	0x20002b68

08010008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801000c:	4b04      	ldr	r3, [pc, #16]	; (8010020 <vTaskSuspendAll+0x18>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	3301      	adds	r3, #1
 8010012:	4a03      	ldr	r2, [pc, #12]	; (8010020 <vTaskSuspendAll+0x18>)
 8010014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010016:	bf00      	nop
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	20002b8c 	.word	0x20002b8c

08010024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801002a:	2300      	movs	r3, #0
 801002c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801002e:	2300      	movs	r3, #0
 8010030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010032:	4b41      	ldr	r3, [pc, #260]	; (8010138 <xTaskResumeAll+0x114>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10a      	bne.n	8010050 <xTaskResumeAll+0x2c>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	603b      	str	r3, [r7, #0]
}
 801004c:	bf00      	nop
 801004e:	e7fe      	b.n	801004e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010050:	f000 fed0 	bl	8010df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010054:	4b38      	ldr	r3, [pc, #224]	; (8010138 <xTaskResumeAll+0x114>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3b01      	subs	r3, #1
 801005a:	4a37      	ldr	r2, [pc, #220]	; (8010138 <xTaskResumeAll+0x114>)
 801005c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801005e:	4b36      	ldr	r3, [pc, #216]	; (8010138 <xTaskResumeAll+0x114>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d161      	bne.n	801012a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010066:	4b35      	ldr	r3, [pc, #212]	; (801013c <xTaskResumeAll+0x118>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d05d      	beq.n	801012a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801006e:	e02e      	b.n	80100ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010070:	4b33      	ldr	r3, [pc, #204]	; (8010140 <xTaskResumeAll+0x11c>)
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3318      	adds	r3, #24
 801007c:	4618      	mov	r0, r3
 801007e:	f7fe ff88 	bl	800ef92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3304      	adds	r3, #4
 8010086:	4618      	mov	r0, r3
 8010088:	f7fe ff83 	bl	800ef92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010090:	2201      	movs	r2, #1
 8010092:	409a      	lsls	r2, r3
 8010094:	4b2b      	ldr	r3, [pc, #172]	; (8010144 <xTaskResumeAll+0x120>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4313      	orrs	r3, r2
 801009a:	4a2a      	ldr	r2, [pc, #168]	; (8010144 <xTaskResumeAll+0x120>)
 801009c:	6013      	str	r3, [r2, #0]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a2:	4613      	mov	r3, r2
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4413      	add	r3, r2
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	4a27      	ldr	r2, [pc, #156]	; (8010148 <xTaskResumeAll+0x124>)
 80100ac:	441a      	add	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	3304      	adds	r3, #4
 80100b2:	4619      	mov	r1, r3
 80100b4:	4610      	mov	r0, r2
 80100b6:	f7fe ff0f 	bl	800eed8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100be:	4b23      	ldr	r3, [pc, #140]	; (801014c <xTaskResumeAll+0x128>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d302      	bcc.n	80100ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80100c8:	4b21      	ldr	r3, [pc, #132]	; (8010150 <xTaskResumeAll+0x12c>)
 80100ca:	2201      	movs	r2, #1
 80100cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100ce:	4b1c      	ldr	r3, [pc, #112]	; (8010140 <xTaskResumeAll+0x11c>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1cc      	bne.n	8010070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80100dc:	f000 fb1c 	bl	8010718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80100e0:	4b1c      	ldr	r3, [pc, #112]	; (8010154 <xTaskResumeAll+0x130>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d010      	beq.n	801010e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80100ec:	f000 f836 	bl	801015c <xTaskIncrementTick>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80100f6:	4b16      	ldr	r3, [pc, #88]	; (8010150 <xTaskResumeAll+0x12c>)
 80100f8:	2201      	movs	r2, #1
 80100fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	3b01      	subs	r3, #1
 8010100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1f1      	bne.n	80100ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010108:	4b12      	ldr	r3, [pc, #72]	; (8010154 <xTaskResumeAll+0x130>)
 801010a:	2200      	movs	r2, #0
 801010c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801010e:	4b10      	ldr	r3, [pc, #64]	; (8010150 <xTaskResumeAll+0x12c>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d009      	beq.n	801012a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010116:	2301      	movs	r3, #1
 8010118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801011a:	4b0f      	ldr	r3, [pc, #60]	; (8010158 <xTaskResumeAll+0x134>)
 801011c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010120:	601a      	str	r2, [r3, #0]
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801012a:	f000 fe93 	bl	8010e54 <vPortExitCritical>

	return xAlreadyYielded;
 801012e:	68bb      	ldr	r3, [r7, #8]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	20002b8c 	.word	0x20002b8c
 801013c:	20002b64 	.word	0x20002b64
 8010140:	20002b24 	.word	0x20002b24
 8010144:	20002b6c 	.word	0x20002b6c
 8010148:	20002a68 	.word	0x20002a68
 801014c:	20002a64 	.word	0x20002a64
 8010150:	20002b78 	.word	0x20002b78
 8010154:	20002b74 	.word	0x20002b74
 8010158:	e000ed04 	.word	0xe000ed04

0801015c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010166:	4b4e      	ldr	r3, [pc, #312]	; (80102a0 <xTaskIncrementTick+0x144>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	f040 808e 	bne.w	801028c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010170:	4b4c      	ldr	r3, [pc, #304]	; (80102a4 <xTaskIncrementTick+0x148>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3301      	adds	r3, #1
 8010176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010178:	4a4a      	ldr	r2, [pc, #296]	; (80102a4 <xTaskIncrementTick+0x148>)
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d120      	bne.n	80101c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010184:	4b48      	ldr	r3, [pc, #288]	; (80102a8 <xTaskIncrementTick+0x14c>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	603b      	str	r3, [r7, #0]
}
 80101a0:	bf00      	nop
 80101a2:	e7fe      	b.n	80101a2 <xTaskIncrementTick+0x46>
 80101a4:	4b40      	ldr	r3, [pc, #256]	; (80102a8 <xTaskIncrementTick+0x14c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	4b40      	ldr	r3, [pc, #256]	; (80102ac <xTaskIncrementTick+0x150>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a3e      	ldr	r2, [pc, #248]	; (80102a8 <xTaskIncrementTick+0x14c>)
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	4a3e      	ldr	r2, [pc, #248]	; (80102ac <xTaskIncrementTick+0x150>)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6013      	str	r3, [r2, #0]
 80101b8:	4b3d      	ldr	r3, [pc, #244]	; (80102b0 <xTaskIncrementTick+0x154>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3301      	adds	r3, #1
 80101be:	4a3c      	ldr	r2, [pc, #240]	; (80102b0 <xTaskIncrementTick+0x154>)
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	f000 faa9 	bl	8010718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101c6:	4b3b      	ldr	r3, [pc, #236]	; (80102b4 <xTaskIncrementTick+0x158>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d348      	bcc.n	8010262 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101d0:	4b35      	ldr	r3, [pc, #212]	; (80102a8 <xTaskIncrementTick+0x14c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d104      	bne.n	80101e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101da:	4b36      	ldr	r3, [pc, #216]	; (80102b4 <xTaskIncrementTick+0x158>)
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295
 80101e0:	601a      	str	r2, [r3, #0]
					break;
 80101e2:	e03e      	b.n	8010262 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e4:	4b30      	ldr	r3, [pc, #192]	; (80102a8 <xTaskIncrementTick+0x14c>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d203      	bcs.n	8010204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101fc:	4a2d      	ldr	r2, [pc, #180]	; (80102b4 <xTaskIncrementTick+0x158>)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010202:	e02e      	b.n	8010262 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	3304      	adds	r3, #4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fe fec2 	bl	800ef92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010212:	2b00      	cmp	r3, #0
 8010214:	d004      	beq.n	8010220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	3318      	adds	r3, #24
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe feb9 	bl	800ef92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010224:	2201      	movs	r2, #1
 8010226:	409a      	lsls	r2, r3
 8010228:	4b23      	ldr	r3, [pc, #140]	; (80102b8 <xTaskIncrementTick+0x15c>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4313      	orrs	r3, r2
 801022e:	4a22      	ldr	r2, [pc, #136]	; (80102b8 <xTaskIncrementTick+0x15c>)
 8010230:	6013      	str	r3, [r2, #0]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010236:	4613      	mov	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4413      	add	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4a1f      	ldr	r2, [pc, #124]	; (80102bc <xTaskIncrementTick+0x160>)
 8010240:	441a      	add	r2, r3
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	3304      	adds	r3, #4
 8010246:	4619      	mov	r1, r3
 8010248:	4610      	mov	r0, r2
 801024a:	f7fe fe45 	bl	800eed8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010252:	4b1b      	ldr	r3, [pc, #108]	; (80102c0 <xTaskIncrementTick+0x164>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010258:	429a      	cmp	r2, r3
 801025a:	d3b9      	bcc.n	80101d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801025c:	2301      	movs	r3, #1
 801025e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010260:	e7b6      	b.n	80101d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010262:	4b17      	ldr	r3, [pc, #92]	; (80102c0 <xTaskIncrementTick+0x164>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010268:	4914      	ldr	r1, [pc, #80]	; (80102bc <xTaskIncrementTick+0x160>)
 801026a:	4613      	mov	r3, r2
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	4413      	add	r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	440b      	add	r3, r1
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d901      	bls.n	801027e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801027a:	2301      	movs	r3, #1
 801027c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801027e:	4b11      	ldr	r3, [pc, #68]	; (80102c4 <xTaskIncrementTick+0x168>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d007      	beq.n	8010296 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010286:	2301      	movs	r3, #1
 8010288:	617b      	str	r3, [r7, #20]
 801028a:	e004      	b.n	8010296 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801028c:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <xTaskIncrementTick+0x16c>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3301      	adds	r3, #1
 8010292:	4a0d      	ldr	r2, [pc, #52]	; (80102c8 <xTaskIncrementTick+0x16c>)
 8010294:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010296:	697b      	ldr	r3, [r7, #20]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3718      	adds	r7, #24
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20002b8c 	.word	0x20002b8c
 80102a4:	20002b68 	.word	0x20002b68
 80102a8:	20002b1c 	.word	0x20002b1c
 80102ac:	20002b20 	.word	0x20002b20
 80102b0:	20002b7c 	.word	0x20002b7c
 80102b4:	20002b84 	.word	0x20002b84
 80102b8:	20002b6c 	.word	0x20002b6c
 80102bc:	20002a68 	.word	0x20002a68
 80102c0:	20002a64 	.word	0x20002a64
 80102c4:	20002b78 	.word	0x20002b78
 80102c8:	20002b74 	.word	0x20002b74

080102cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102d2:	4b29      	ldr	r3, [pc, #164]	; (8010378 <vTaskSwitchContext+0xac>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d003      	beq.n	80102e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102da:	4b28      	ldr	r3, [pc, #160]	; (801037c <vTaskSwitchContext+0xb0>)
 80102dc:	2201      	movs	r2, #1
 80102de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102e0:	e044      	b.n	801036c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80102e2:	4b26      	ldr	r3, [pc, #152]	; (801037c <vTaskSwitchContext+0xb0>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102e8:	4b25      	ldr	r3, [pc, #148]	; (8010380 <vTaskSwitchContext+0xb4>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	fab3 f383 	clz	r3, r3
 80102f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80102f6:	7afb      	ldrb	r3, [r7, #11]
 80102f8:	f1c3 031f 	rsb	r3, r3, #31
 80102fc:	617b      	str	r3, [r7, #20]
 80102fe:	4921      	ldr	r1, [pc, #132]	; (8010384 <vTaskSwitchContext+0xb8>)
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	4613      	mov	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	440b      	add	r3, r1
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10a      	bne.n	8010328 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	607b      	str	r3, [r7, #4]
}
 8010324:	bf00      	nop
 8010326:	e7fe      	b.n	8010326 <vTaskSwitchContext+0x5a>
 8010328:	697a      	ldr	r2, [r7, #20]
 801032a:	4613      	mov	r3, r2
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	4413      	add	r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4a14      	ldr	r2, [pc, #80]	; (8010384 <vTaskSwitchContext+0xb8>)
 8010334:	4413      	add	r3, r2
 8010336:	613b      	str	r3, [r7, #16]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	685a      	ldr	r2, [r3, #4]
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	605a      	str	r2, [r3, #4]
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	685a      	ldr	r2, [r3, #4]
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	3308      	adds	r3, #8
 801034a:	429a      	cmp	r2, r3
 801034c:	d104      	bne.n	8010358 <vTaskSwitchContext+0x8c>
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	685a      	ldr	r2, [r3, #4]
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	605a      	str	r2, [r3, #4]
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	4a0a      	ldr	r2, [pc, #40]	; (8010388 <vTaskSwitchContext+0xbc>)
 8010360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010362:	4b09      	ldr	r3, [pc, #36]	; (8010388 <vTaskSwitchContext+0xbc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	334c      	adds	r3, #76	; 0x4c
 8010368:	4a08      	ldr	r2, [pc, #32]	; (801038c <vTaskSwitchContext+0xc0>)
 801036a:	6013      	str	r3, [r2, #0]
}
 801036c:	bf00      	nop
 801036e:	371c      	adds	r7, #28
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	20002b8c 	.word	0x20002b8c
 801037c:	20002b78 	.word	0x20002b78
 8010380:	20002b6c 	.word	0x20002b6c
 8010384:	20002a68 	.word	0x20002a68
 8010388:	20002a64 	.word	0x20002a64
 801038c:	20000080 	.word	0x20000080

08010390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10a      	bne.n	80103b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80103a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a4:	f383 8811 	msr	BASEPRI, r3
 80103a8:	f3bf 8f6f 	isb	sy
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	60fb      	str	r3, [r7, #12]
}
 80103b2:	bf00      	nop
 80103b4:	e7fe      	b.n	80103b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103b6:	4b07      	ldr	r3, [pc, #28]	; (80103d4 <vTaskPlaceOnEventList+0x44>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	3318      	adds	r3, #24
 80103bc:	4619      	mov	r1, r3
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7fe fdae 	bl	800ef20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103c4:	2101      	movs	r1, #1
 80103c6:	6838      	ldr	r0, [r7, #0]
 80103c8:	f000 fb82 	bl	8010ad0 <prvAddCurrentTaskToDelayedList>
}
 80103cc:	bf00      	nop
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	20002a64 	.word	0x20002a64

080103d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d10a      	bne.n	8010404 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	60fb      	str	r3, [r7, #12]
}
 8010400:	bf00      	nop
 8010402:	e7fe      	b.n	8010402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	3318      	adds	r3, #24
 8010408:	4618      	mov	r0, r3
 801040a:	f7fe fdc2 	bl	800ef92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801040e:	4b1d      	ldr	r3, [pc, #116]	; (8010484 <xTaskRemoveFromEventList+0xac>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d11c      	bne.n	8010450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	3304      	adds	r3, #4
 801041a:	4618      	mov	r0, r3
 801041c:	f7fe fdb9 	bl	800ef92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010424:	2201      	movs	r2, #1
 8010426:	409a      	lsls	r2, r3
 8010428:	4b17      	ldr	r3, [pc, #92]	; (8010488 <xTaskRemoveFromEventList+0xb0>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4313      	orrs	r3, r2
 801042e:	4a16      	ldr	r2, [pc, #88]	; (8010488 <xTaskRemoveFromEventList+0xb0>)
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010436:	4613      	mov	r3, r2
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4413      	add	r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4a13      	ldr	r2, [pc, #76]	; (801048c <xTaskRemoveFromEventList+0xb4>)
 8010440:	441a      	add	r2, r3
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	3304      	adds	r3, #4
 8010446:	4619      	mov	r1, r3
 8010448:	4610      	mov	r0, r2
 801044a:	f7fe fd45 	bl	800eed8 <vListInsertEnd>
 801044e:	e005      	b.n	801045c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	3318      	adds	r3, #24
 8010454:	4619      	mov	r1, r3
 8010456:	480e      	ldr	r0, [pc, #56]	; (8010490 <xTaskRemoveFromEventList+0xb8>)
 8010458:	f7fe fd3e 	bl	800eed8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010460:	4b0c      	ldr	r3, [pc, #48]	; (8010494 <xTaskRemoveFromEventList+0xbc>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010466:	429a      	cmp	r2, r3
 8010468:	d905      	bls.n	8010476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801046a:	2301      	movs	r3, #1
 801046c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801046e:	4b0a      	ldr	r3, [pc, #40]	; (8010498 <xTaskRemoveFromEventList+0xc0>)
 8010470:	2201      	movs	r2, #1
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	e001      	b.n	801047a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010476:	2300      	movs	r3, #0
 8010478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801047a:	697b      	ldr	r3, [r7, #20]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	20002b8c 	.word	0x20002b8c
 8010488:	20002b6c 	.word	0x20002b6c
 801048c:	20002a68 	.word	0x20002a68
 8010490:	20002b24 	.word	0x20002b24
 8010494:	20002a64 	.word	0x20002a64
 8010498:	20002b78 	.word	0x20002b78

0801049c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104a4:	4b06      	ldr	r3, [pc, #24]	; (80104c0 <vTaskInternalSetTimeOutState+0x24>)
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104ac:	4b05      	ldr	r3, [pc, #20]	; (80104c4 <vTaskInternalSetTimeOutState+0x28>)
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	605a      	str	r2, [r3, #4]
}
 80104b4:	bf00      	nop
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	20002b7c 	.word	0x20002b7c
 80104c4:	20002b68 	.word	0x20002b68

080104c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b088      	sub	sp, #32
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10a      	bne.n	80104ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	613b      	str	r3, [r7, #16]
}
 80104ea:	bf00      	nop
 80104ec:	e7fe      	b.n	80104ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10a      	bne.n	801050a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f8:	f383 8811 	msr	BASEPRI, r3
 80104fc:	f3bf 8f6f 	isb	sy
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	60fb      	str	r3, [r7, #12]
}
 8010506:	bf00      	nop
 8010508:	e7fe      	b.n	8010508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801050a:	f000 fc73 	bl	8010df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801050e:	4b1d      	ldr	r3, [pc, #116]	; (8010584 <xTaskCheckForTimeOut+0xbc>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	69ba      	ldr	r2, [r7, #24]
 801051a:	1ad3      	subs	r3, r2, r3
 801051c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010526:	d102      	bne.n	801052e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010528:	2300      	movs	r3, #0
 801052a:	61fb      	str	r3, [r7, #28]
 801052c:	e023      	b.n	8010576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	4b15      	ldr	r3, [pc, #84]	; (8010588 <xTaskCheckForTimeOut+0xc0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	429a      	cmp	r2, r3
 8010538:	d007      	beq.n	801054a <xTaskCheckForTimeOut+0x82>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	69ba      	ldr	r2, [r7, #24]
 8010540:	429a      	cmp	r2, r3
 8010542:	d302      	bcc.n	801054a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010544:	2301      	movs	r3, #1
 8010546:	61fb      	str	r3, [r7, #28]
 8010548:	e015      	b.n	8010576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	429a      	cmp	r2, r3
 8010552:	d20b      	bcs.n	801056c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	1ad2      	subs	r2, r2, r3
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7ff ff9b 	bl	801049c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010566:	2300      	movs	r3, #0
 8010568:	61fb      	str	r3, [r7, #28]
 801056a:	e004      	b.n	8010576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	2200      	movs	r2, #0
 8010570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010572:	2301      	movs	r3, #1
 8010574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010576:	f000 fc6d 	bl	8010e54 <vPortExitCritical>

	return xReturn;
 801057a:	69fb      	ldr	r3, [r7, #28]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3720      	adds	r7, #32
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	20002b68 	.word	0x20002b68
 8010588:	20002b7c 	.word	0x20002b7c

0801058c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801058c:	b480      	push	{r7}
 801058e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010590:	4b03      	ldr	r3, [pc, #12]	; (80105a0 <vTaskMissedYield+0x14>)
 8010592:	2201      	movs	r2, #1
 8010594:	601a      	str	r2, [r3, #0]
}
 8010596:	bf00      	nop
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr
 80105a0:	20002b78 	.word	0x20002b78

080105a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105ac:	f000 f852 	bl	8010654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105b0:	4b06      	ldr	r3, [pc, #24]	; (80105cc <prvIdleTask+0x28>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d9f9      	bls.n	80105ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80105b8:	4b05      	ldr	r3, [pc, #20]	; (80105d0 <prvIdleTask+0x2c>)
 80105ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105be:	601a      	str	r2, [r3, #0]
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105c8:	e7f0      	b.n	80105ac <prvIdleTask+0x8>
 80105ca:	bf00      	nop
 80105cc:	20002a68 	.word	0x20002a68
 80105d0:	e000ed04 	.word	0xe000ed04

080105d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105da:	2300      	movs	r3, #0
 80105dc:	607b      	str	r3, [r7, #4]
 80105de:	e00c      	b.n	80105fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	4613      	mov	r3, r2
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	009b      	lsls	r3, r3, #2
 80105ea:	4a12      	ldr	r2, [pc, #72]	; (8010634 <prvInitialiseTaskLists+0x60>)
 80105ec:	4413      	add	r3, r2
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fe fc45 	bl	800ee7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3301      	adds	r3, #1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b06      	cmp	r3, #6
 80105fe:	d9ef      	bls.n	80105e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010600:	480d      	ldr	r0, [pc, #52]	; (8010638 <prvInitialiseTaskLists+0x64>)
 8010602:	f7fe fc3c 	bl	800ee7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010606:	480d      	ldr	r0, [pc, #52]	; (801063c <prvInitialiseTaskLists+0x68>)
 8010608:	f7fe fc39 	bl	800ee7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801060c:	480c      	ldr	r0, [pc, #48]	; (8010640 <prvInitialiseTaskLists+0x6c>)
 801060e:	f7fe fc36 	bl	800ee7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010612:	480c      	ldr	r0, [pc, #48]	; (8010644 <prvInitialiseTaskLists+0x70>)
 8010614:	f7fe fc33 	bl	800ee7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010618:	480b      	ldr	r0, [pc, #44]	; (8010648 <prvInitialiseTaskLists+0x74>)
 801061a:	f7fe fc30 	bl	800ee7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801061e:	4b0b      	ldr	r3, [pc, #44]	; (801064c <prvInitialiseTaskLists+0x78>)
 8010620:	4a05      	ldr	r2, [pc, #20]	; (8010638 <prvInitialiseTaskLists+0x64>)
 8010622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010624:	4b0a      	ldr	r3, [pc, #40]	; (8010650 <prvInitialiseTaskLists+0x7c>)
 8010626:	4a05      	ldr	r2, [pc, #20]	; (801063c <prvInitialiseTaskLists+0x68>)
 8010628:	601a      	str	r2, [r3, #0]
}
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	20002a68 	.word	0x20002a68
 8010638:	20002af4 	.word	0x20002af4
 801063c:	20002b08 	.word	0x20002b08
 8010640:	20002b24 	.word	0x20002b24
 8010644:	20002b38 	.word	0x20002b38
 8010648:	20002b50 	.word	0x20002b50
 801064c:	20002b1c 	.word	0x20002b1c
 8010650:	20002b20 	.word	0x20002b20

08010654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801065a:	e019      	b.n	8010690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801065c:	f000 fbca 	bl	8010df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010660:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <prvCheckTasksWaitingTermination+0x50>)
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	3304      	adds	r3, #4
 801066c:	4618      	mov	r0, r3
 801066e:	f7fe fc90 	bl	800ef92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010672:	4b0d      	ldr	r3, [pc, #52]	; (80106a8 <prvCheckTasksWaitingTermination+0x54>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	3b01      	subs	r3, #1
 8010678:	4a0b      	ldr	r2, [pc, #44]	; (80106a8 <prvCheckTasksWaitingTermination+0x54>)
 801067a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801067c:	4b0b      	ldr	r3, [pc, #44]	; (80106ac <prvCheckTasksWaitingTermination+0x58>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3b01      	subs	r3, #1
 8010682:	4a0a      	ldr	r2, [pc, #40]	; (80106ac <prvCheckTasksWaitingTermination+0x58>)
 8010684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010686:	f000 fbe5 	bl	8010e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 f810 	bl	80106b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010690:	4b06      	ldr	r3, [pc, #24]	; (80106ac <prvCheckTasksWaitingTermination+0x58>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d1e1      	bne.n	801065c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010698:	bf00      	nop
 801069a:	bf00      	nop
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	20002b38 	.word	0x20002b38
 80106a8:	20002b64 	.word	0x20002b64
 80106ac:	20002b4c 	.word	0x20002b4c

080106b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	334c      	adds	r3, #76	; 0x4c
 80106bc:	4618      	mov	r0, r3
 80106be:	f001 fc5f 	bl	8011f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d108      	bne.n	80106de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d0:	4618      	mov	r0, r3
 80106d2:	f000 fd7d 	bl	80111d0 <vPortFree>
				vPortFree( pxTCB );
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 fd7a 	bl	80111d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106dc:	e018      	b.n	8010710 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d103      	bne.n	80106f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 fd71 	bl	80111d0 <vPortFree>
	}
 80106ee:	e00f      	b.n	8010710 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	d00a      	beq.n	8010710 <prvDeleteTCB+0x60>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	60fb      	str	r3, [r7, #12]
}
 801070c:	bf00      	nop
 801070e:	e7fe      	b.n	801070e <prvDeleteTCB+0x5e>
	}
 8010710:	bf00      	nop
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801071e:	4b0c      	ldr	r3, [pc, #48]	; (8010750 <prvResetNextTaskUnblockTime+0x38>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d104      	bne.n	8010732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010728:	4b0a      	ldr	r3, [pc, #40]	; (8010754 <prvResetNextTaskUnblockTime+0x3c>)
 801072a:	f04f 32ff 	mov.w	r2, #4294967295
 801072e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010730:	e008      	b.n	8010744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010732:	4b07      	ldr	r3, [pc, #28]	; (8010750 <prvResetNextTaskUnblockTime+0x38>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	4a04      	ldr	r2, [pc, #16]	; (8010754 <prvResetNextTaskUnblockTime+0x3c>)
 8010742:	6013      	str	r3, [r2, #0]
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	20002b1c 	.word	0x20002b1c
 8010754:	20002b84 	.word	0x20002b84

08010758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801075e:	4b0b      	ldr	r3, [pc, #44]	; (801078c <xTaskGetSchedulerState+0x34>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d102      	bne.n	801076c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010766:	2301      	movs	r3, #1
 8010768:	607b      	str	r3, [r7, #4]
 801076a:	e008      	b.n	801077e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801076c:	4b08      	ldr	r3, [pc, #32]	; (8010790 <xTaskGetSchedulerState+0x38>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010774:	2302      	movs	r3, #2
 8010776:	607b      	str	r3, [r7, #4]
 8010778:	e001      	b.n	801077e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801077a:	2300      	movs	r3, #0
 801077c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801077e:	687b      	ldr	r3, [r7, #4]
	}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	20002b70 	.word	0x20002b70
 8010790:	20002b8c 	.word	0x20002b8c

08010794 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80107a0:	2300      	movs	r3, #0
 80107a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d05e      	beq.n	8010868 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ae:	4b31      	ldr	r3, [pc, #196]	; (8010874 <xTaskPriorityInherit+0xe0>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d24e      	bcs.n	8010856 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	699b      	ldr	r3, [r3, #24]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	db06      	blt.n	80107ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107c0:	4b2c      	ldr	r3, [pc, #176]	; (8010874 <xTaskPriorityInherit+0xe0>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c6:	f1c3 0207 	rsb	r2, r3, #7
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6959      	ldr	r1, [r3, #20]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d6:	4613      	mov	r3, r2
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	4a26      	ldr	r2, [pc, #152]	; (8010878 <xTaskPriorityInherit+0xe4>)
 80107e0:	4413      	add	r3, r2
 80107e2:	4299      	cmp	r1, r3
 80107e4:	d12f      	bne.n	8010846 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	3304      	adds	r3, #4
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe fbd1 	bl	800ef92 <uxListRemove>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10a      	bne.n	801080c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fa:	2201      	movs	r2, #1
 80107fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010800:	43da      	mvns	r2, r3
 8010802:	4b1e      	ldr	r3, [pc, #120]	; (801087c <xTaskPriorityInherit+0xe8>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4013      	ands	r3, r2
 8010808:	4a1c      	ldr	r2, [pc, #112]	; (801087c <xTaskPriorityInherit+0xe8>)
 801080a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801080c:	4b19      	ldr	r3, [pc, #100]	; (8010874 <xTaskPriorityInherit+0xe0>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081a:	2201      	movs	r2, #1
 801081c:	409a      	lsls	r2, r3
 801081e:	4b17      	ldr	r3, [pc, #92]	; (801087c <xTaskPriorityInherit+0xe8>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4313      	orrs	r3, r2
 8010824:	4a15      	ldr	r2, [pc, #84]	; (801087c <xTaskPriorityInherit+0xe8>)
 8010826:	6013      	str	r3, [r2, #0]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801082c:	4613      	mov	r3, r2
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	4413      	add	r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	4a10      	ldr	r2, [pc, #64]	; (8010878 <xTaskPriorityInherit+0xe4>)
 8010836:	441a      	add	r2, r3
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	3304      	adds	r3, #4
 801083c:	4619      	mov	r1, r3
 801083e:	4610      	mov	r0, r2
 8010840:	f7fe fb4a 	bl	800eed8 <vListInsertEnd>
 8010844:	e004      	b.n	8010850 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010846:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <xTaskPriorityInherit+0xe0>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010850:	2301      	movs	r3, #1
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e008      	b.n	8010868 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801085a:	4b06      	ldr	r3, [pc, #24]	; (8010874 <xTaskPriorityInherit+0xe0>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010860:	429a      	cmp	r2, r3
 8010862:	d201      	bcs.n	8010868 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010864:	2301      	movs	r3, #1
 8010866:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010868:	68fb      	ldr	r3, [r7, #12]
	}
 801086a:	4618      	mov	r0, r3
 801086c:	3710      	adds	r7, #16
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	20002a64 	.word	0x20002a64
 8010878:	20002a68 	.word	0x20002a68
 801087c:	20002b6c 	.word	0x20002b6c

08010880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801088c:	2300      	movs	r3, #0
 801088e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d06e      	beq.n	8010974 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010896:	4b3a      	ldr	r3, [pc, #232]	; (8010980 <xTaskPriorityDisinherit+0x100>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	429a      	cmp	r2, r3
 801089e:	d00a      	beq.n	80108b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80108a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	60fb      	str	r3, [r7, #12]
}
 80108b2:	bf00      	nop
 80108b4:	e7fe      	b.n	80108b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10a      	bne.n	80108d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	60bb      	str	r3, [r7, #8]
}
 80108d0:	bf00      	nop
 80108d2:	e7fe      	b.n	80108d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108d8:	1e5a      	subs	r2, r3, #1
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d044      	beq.n	8010974 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d140      	bne.n	8010974 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	3304      	adds	r3, #4
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe fb4b 	bl	800ef92 <uxListRemove>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d115      	bne.n	801092e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010906:	491f      	ldr	r1, [pc, #124]	; (8010984 <xTaskPriorityDisinherit+0x104>)
 8010908:	4613      	mov	r3, r2
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	4413      	add	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	440b      	add	r3, r1
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d10a      	bne.n	801092e <xTaskPriorityDisinherit+0xae>
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091c:	2201      	movs	r2, #1
 801091e:	fa02 f303 	lsl.w	r3, r2, r3
 8010922:	43da      	mvns	r2, r3
 8010924:	4b18      	ldr	r3, [pc, #96]	; (8010988 <xTaskPriorityDisinherit+0x108>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4013      	ands	r3, r2
 801092a:	4a17      	ldr	r2, [pc, #92]	; (8010988 <xTaskPriorityDisinherit+0x108>)
 801092c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093a:	f1c3 0207 	rsb	r2, r3, #7
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010946:	2201      	movs	r2, #1
 8010948:	409a      	lsls	r2, r3
 801094a:	4b0f      	ldr	r3, [pc, #60]	; (8010988 <xTaskPriorityDisinherit+0x108>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4313      	orrs	r3, r2
 8010950:	4a0d      	ldr	r2, [pc, #52]	; (8010988 <xTaskPriorityDisinherit+0x108>)
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010958:	4613      	mov	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4413      	add	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4a08      	ldr	r2, [pc, #32]	; (8010984 <xTaskPriorityDisinherit+0x104>)
 8010962:	441a      	add	r2, r3
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	3304      	adds	r3, #4
 8010968:	4619      	mov	r1, r3
 801096a:	4610      	mov	r0, r2
 801096c:	f7fe fab4 	bl	800eed8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010970:	2301      	movs	r3, #1
 8010972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010974:	697b      	ldr	r3, [r7, #20]
	}
 8010976:	4618      	mov	r0, r3
 8010978:	3718      	adds	r7, #24
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	20002a64 	.word	0x20002a64
 8010984:	20002a68 	.word	0x20002a68
 8010988:	20002b6c 	.word	0x20002b6c

0801098c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801099a:	2301      	movs	r3, #1
 801099c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d077      	beq.n	8010a94 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10a      	bne.n	80109c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	60fb      	str	r3, [r7, #12]
}
 80109be:	bf00      	nop
 80109c0:	e7fe      	b.n	80109c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109c2:	69bb      	ldr	r3, [r7, #24]
 80109c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c6:	683a      	ldr	r2, [r7, #0]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d902      	bls.n	80109d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	61fb      	str	r3, [r7, #28]
 80109d0:	e002      	b.n	80109d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109dc:	69fa      	ldr	r2, [r7, #28]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d058      	beq.n	8010a94 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d153      	bne.n	8010a94 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80109ec:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	69ba      	ldr	r2, [r7, #24]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d10a      	bne.n	8010a0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80109f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fa:	f383 8811 	msr	BASEPRI, r3
 80109fe:	f3bf 8f6f 	isb	sy
 8010a02:	f3bf 8f4f 	dsb	sy
 8010a06:	60bb      	str	r3, [r7, #8]
}
 8010a08:	bf00      	nop
 8010a0a:	e7fe      	b.n	8010a0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	69fa      	ldr	r2, [r7, #28]
 8010a16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	db04      	blt.n	8010a2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	f1c3 0207 	rsb	r2, r3, #7
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a2a:	69bb      	ldr	r3, [r7, #24]
 8010a2c:	6959      	ldr	r1, [r3, #20]
 8010a2e:	693a      	ldr	r2, [r7, #16]
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4a19      	ldr	r2, [pc, #100]	; (8010aa0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010a3a:	4413      	add	r3, r2
 8010a3c:	4299      	cmp	r1, r3
 8010a3e:	d129      	bne.n	8010a94 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	3304      	adds	r3, #4
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fe faa4 	bl	800ef92 <uxListRemove>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10a      	bne.n	8010a66 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a54:	2201      	movs	r2, #1
 8010a56:	fa02 f303 	lsl.w	r3, r2, r3
 8010a5a:	43da      	mvns	r2, r3
 8010a5c:	4b11      	ldr	r3, [pc, #68]	; (8010aa4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4013      	ands	r3, r2
 8010a62:	4a10      	ldr	r2, [pc, #64]	; (8010aa4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	409a      	lsls	r2, r3
 8010a6e:	4b0d      	ldr	r3, [pc, #52]	; (8010aa4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	4a0b      	ldr	r2, [pc, #44]	; (8010aa4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a76:	6013      	str	r3, [r2, #0]
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4a06      	ldr	r2, [pc, #24]	; (8010aa0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010a86:	441a      	add	r2, r3
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	3304      	adds	r3, #4
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	4610      	mov	r0, r2
 8010a90:	f7fe fa22 	bl	800eed8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a94:	bf00      	nop
 8010a96:	3720      	adds	r7, #32
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20002a64 	.word	0x20002a64
 8010aa0:	20002a68 	.word	0x20002a68
 8010aa4:	20002b6c 	.word	0x20002b6c

08010aa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010aa8:	b480      	push	{r7}
 8010aaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010aac:	4b07      	ldr	r3, [pc, #28]	; (8010acc <pvTaskIncrementMutexHeldCount+0x24>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010ab4:	4b05      	ldr	r3, [pc, #20]	; (8010acc <pvTaskIncrementMutexHeldCount+0x24>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010aba:	3201      	adds	r2, #1
 8010abc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010abe:	4b03      	ldr	r3, [pc, #12]	; (8010acc <pvTaskIncrementMutexHeldCount+0x24>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
	}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	20002a64 	.word	0x20002a64

08010ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010ada:	4b29      	ldr	r3, [pc, #164]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ae0:	4b28      	ldr	r3, [pc, #160]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fa53 	bl	800ef92 <uxListRemove>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10b      	bne.n	8010b0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010af2:	4b24      	ldr	r3, [pc, #144]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af8:	2201      	movs	r2, #1
 8010afa:	fa02 f303 	lsl.w	r3, r2, r3
 8010afe:	43da      	mvns	r2, r3
 8010b00:	4b21      	ldr	r3, [pc, #132]	; (8010b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4013      	ands	r3, r2
 8010b06:	4a20      	ldr	r2, [pc, #128]	; (8010b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010b08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b10:	d10a      	bne.n	8010b28 <prvAddCurrentTaskToDelayedList+0x58>
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d007      	beq.n	8010b28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b18:	4b1a      	ldr	r3, [pc, #104]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	4619      	mov	r1, r3
 8010b20:	481a      	ldr	r0, [pc, #104]	; (8010b8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010b22:	f7fe f9d9 	bl	800eed8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b26:	e026      	b.n	8010b76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b30:	4b14      	ldr	r3, [pc, #80]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b38:	68ba      	ldr	r2, [r7, #8]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d209      	bcs.n	8010b54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b40:	4b13      	ldr	r3, [pc, #76]	; (8010b90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	4b0f      	ldr	r3, [pc, #60]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3304      	adds	r3, #4
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	f7fe f9e7 	bl	800ef20 <vListInsert>
}
 8010b52:	e010      	b.n	8010b76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b54:	4b0f      	ldr	r3, [pc, #60]	; (8010b94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	4b0a      	ldr	r3, [pc, #40]	; (8010b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	3304      	adds	r3, #4
 8010b5e:	4619      	mov	r1, r3
 8010b60:	4610      	mov	r0, r2
 8010b62:	f7fe f9dd 	bl	800ef20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b66:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d202      	bcs.n	8010b76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010b70:	4a09      	ldr	r2, [pc, #36]	; (8010b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	6013      	str	r3, [r2, #0]
}
 8010b76:	bf00      	nop
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20002b68 	.word	0x20002b68
 8010b84:	20002a64 	.word	0x20002a64
 8010b88:	20002b6c 	.word	0x20002b6c
 8010b8c:	20002b50 	.word	0x20002b50
 8010b90:	20002b20 	.word	0x20002b20
 8010b94:	20002b1c 	.word	0x20002b1c
 8010b98:	20002b84 	.word	0x20002b84

08010b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	3b04      	subs	r3, #4
 8010bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3b04      	subs	r3, #4
 8010bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	f023 0201 	bic.w	r2, r3, #1
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	3b04      	subs	r3, #4
 8010bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bcc:	4a0c      	ldr	r2, [pc, #48]	; (8010c00 <pxPortInitialiseStack+0x64>)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	3b14      	subs	r3, #20
 8010bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	3b04      	subs	r3, #4
 8010be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f06f 0202 	mvn.w	r2, #2
 8010bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3b20      	subs	r3, #32
 8010bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3714      	adds	r7, #20
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr
 8010c00:	08010c05 	.word	0x08010c05

08010c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c0e:	4b12      	ldr	r3, [pc, #72]	; (8010c58 <prvTaskExitError+0x54>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c16:	d00a      	beq.n	8010c2e <prvTaskExitError+0x2a>
	__asm volatile
 8010c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c1c:	f383 8811 	msr	BASEPRI, r3
 8010c20:	f3bf 8f6f 	isb	sy
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	60fb      	str	r3, [r7, #12]
}
 8010c2a:	bf00      	nop
 8010c2c:	e7fe      	b.n	8010c2c <prvTaskExitError+0x28>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	60bb      	str	r3, [r7, #8]
}
 8010c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c42:	bf00      	nop
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0fc      	beq.n	8010c44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c4a:	bf00      	nop
 8010c4c:	bf00      	nop
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	20000024 	.word	0x20000024
 8010c5c:	00000000 	.word	0x00000000

08010c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c60:	4b07      	ldr	r3, [pc, #28]	; (8010c80 <pxCurrentTCBConst2>)
 8010c62:	6819      	ldr	r1, [r3, #0]
 8010c64:	6808      	ldr	r0, [r1, #0]
 8010c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6a:	f380 8809 	msr	PSP, r0
 8010c6e:	f3bf 8f6f 	isb	sy
 8010c72:	f04f 0000 	mov.w	r0, #0
 8010c76:	f380 8811 	msr	BASEPRI, r0
 8010c7a:	4770      	bx	lr
 8010c7c:	f3af 8000 	nop.w

08010c80 <pxCurrentTCBConst2>:
 8010c80:	20002a64 	.word	0x20002a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c84:	bf00      	nop
 8010c86:	bf00      	nop

08010c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c88:	4808      	ldr	r0, [pc, #32]	; (8010cac <prvPortStartFirstTask+0x24>)
 8010c8a:	6800      	ldr	r0, [r0, #0]
 8010c8c:	6800      	ldr	r0, [r0, #0]
 8010c8e:	f380 8808 	msr	MSP, r0
 8010c92:	f04f 0000 	mov.w	r0, #0
 8010c96:	f380 8814 	msr	CONTROL, r0
 8010c9a:	b662      	cpsie	i
 8010c9c:	b661      	cpsie	f
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	df00      	svc	0
 8010ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010caa:	bf00      	nop
 8010cac:	e000ed08 	.word	0xe000ed08

08010cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010cb6:	4b46      	ldr	r3, [pc, #280]	; (8010dd0 <xPortStartScheduler+0x120>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a46      	ldr	r2, [pc, #280]	; (8010dd4 <xPortStartScheduler+0x124>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d10a      	bne.n	8010cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	613b      	str	r3, [r7, #16]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cd6:	4b3e      	ldr	r3, [pc, #248]	; (8010dd0 <xPortStartScheduler+0x120>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a3f      	ldr	r2, [pc, #252]	; (8010dd8 <xPortStartScheduler+0x128>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d10a      	bne.n	8010cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	60fb      	str	r3, [r7, #12]
}
 8010cf2:	bf00      	nop
 8010cf4:	e7fe      	b.n	8010cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cf6:	4b39      	ldr	r3, [pc, #228]	; (8010ddc <xPortStartScheduler+0x12c>)
 8010cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	22ff      	movs	r2, #255	; 0xff
 8010d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	4b31      	ldr	r3, [pc, #196]	; (8010de0 <xPortStartScheduler+0x130>)
 8010d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010d1e:	4b31      	ldr	r3, [pc, #196]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d20:	2207      	movs	r2, #7
 8010d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d24:	e009      	b.n	8010d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010d26:	4b2f      	ldr	r3, [pc, #188]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	4a2d      	ldr	r2, [pc, #180]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d30:	78fb      	ldrb	r3, [r7, #3]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d3a:	78fb      	ldrb	r3, [r7, #3]
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d42:	2b80      	cmp	r3, #128	; 0x80
 8010d44:	d0ef      	beq.n	8010d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d46:	4b27      	ldr	r3, [pc, #156]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f1c3 0307 	rsb	r3, r3, #7
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	d00a      	beq.n	8010d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	60bb      	str	r3, [r7, #8]
}
 8010d64:	bf00      	nop
 8010d66:	e7fe      	b.n	8010d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	021b      	lsls	r3, r3, #8
 8010d6e:	4a1d      	ldr	r2, [pc, #116]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d72:	4b1c      	ldr	r3, [pc, #112]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d7a:	4a1a      	ldr	r2, [pc, #104]	; (8010de4 <xPortStartScheduler+0x134>)
 8010d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d86:	4b18      	ldr	r3, [pc, #96]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a17      	ldr	r2, [pc, #92]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d92:	4b15      	ldr	r3, [pc, #84]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a14      	ldr	r2, [pc, #80]	; (8010de8 <xPortStartScheduler+0x138>)
 8010d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d9e:	f000 f8dd 	bl	8010f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010da2:	4b12      	ldr	r3, [pc, #72]	; (8010dec <xPortStartScheduler+0x13c>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010da8:	f000 f8fc 	bl	8010fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <xPortStartScheduler+0x140>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a0f      	ldr	r2, [pc, #60]	; (8010df0 <xPortStartScheduler+0x140>)
 8010db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010db8:	f7ff ff66 	bl	8010c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010dbc:	f7ff fa86 	bl	80102cc <vTaskSwitchContext>
	prvTaskExitError();
 8010dc0:	f7ff ff20 	bl	8010c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3718      	adds	r7, #24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	e000ed00 	.word	0xe000ed00
 8010dd4:	410fc271 	.word	0x410fc271
 8010dd8:	410fc270 	.word	0x410fc270
 8010ddc:	e000e400 	.word	0xe000e400
 8010de0:	20002b90 	.word	0x20002b90
 8010de4:	20002b94 	.word	0x20002b94
 8010de8:	e000ed20 	.word	0xe000ed20
 8010dec:	20000024 	.word	0x20000024
 8010df0:	e000ef34 	.word	0xe000ef34

08010df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	607b      	str	r3, [r7, #4]
}
 8010e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	3301      	adds	r3, #1
 8010e14:	4a0d      	ldr	r2, [pc, #52]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010e18:	4b0c      	ldr	r3, [pc, #48]	; (8010e4c <vPortEnterCritical+0x58>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d10f      	bne.n	8010e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e20:	4b0b      	ldr	r3, [pc, #44]	; (8010e50 <vPortEnterCritical+0x5c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00a      	beq.n	8010e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	603b      	str	r3, [r7, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	e7fe      	b.n	8010e3e <vPortEnterCritical+0x4a>
	}
}
 8010e40:	bf00      	nop
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	20000024 	.word	0x20000024
 8010e50:	e000ed04 	.word	0xe000ed04

08010e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e5a:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10a      	bne.n	8010e78 <vPortExitCritical+0x24>
	__asm volatile
 8010e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	607b      	str	r3, [r7, #4]
}
 8010e74:	bf00      	nop
 8010e76:	e7fe      	b.n	8010e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e78:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	4a09      	ldr	r2, [pc, #36]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e82:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <vPortExitCritical+0x50>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d105      	bne.n	8010e96 <vPortExitCritical+0x42>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	f383 8811 	msr	BASEPRI, r3
}
 8010e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e96:	bf00      	nop
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	20000024 	.word	0x20000024
	...

08010eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010eb0:	f3ef 8009 	mrs	r0, PSP
 8010eb4:	f3bf 8f6f 	isb	sy
 8010eb8:	4b15      	ldr	r3, [pc, #84]	; (8010f10 <pxCurrentTCBConst>)
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	f01e 0f10 	tst.w	lr, #16
 8010ec0:	bf08      	it	eq
 8010ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eca:	6010      	str	r0, [r2, #0]
 8010ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ed4:	f380 8811 	msr	BASEPRI, r0
 8010ed8:	f3bf 8f4f 	dsb	sy
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f7ff f9f4 	bl	80102cc <vTaskSwitchContext>
 8010ee4:	f04f 0000 	mov.w	r0, #0
 8010ee8:	f380 8811 	msr	BASEPRI, r0
 8010eec:	bc09      	pop	{r0, r3}
 8010eee:	6819      	ldr	r1, [r3, #0]
 8010ef0:	6808      	ldr	r0, [r1, #0]
 8010ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef6:	f01e 0f10 	tst.w	lr, #16
 8010efa:	bf08      	it	eq
 8010efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010f00:	f380 8809 	msr	PSP, r0
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	4770      	bx	lr
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w

08010f10 <pxCurrentTCBConst>:
 8010f10:	20002a64 	.word	0x20002a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010f14:	bf00      	nop
 8010f16:	bf00      	nop

08010f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f22:	f383 8811 	msr	BASEPRI, r3
 8010f26:	f3bf 8f6f 	isb	sy
 8010f2a:	f3bf 8f4f 	dsb	sy
 8010f2e:	607b      	str	r3, [r7, #4]
}
 8010f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f32:	f7ff f913 	bl	801015c <xTaskIncrementTick>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d003      	beq.n	8010f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f3c:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <SysTick_Handler+0x40>)
 8010f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	2300      	movs	r3, #0
 8010f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	f383 8811 	msr	BASEPRI, r3
}
 8010f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	e000ed04 	.word	0xe000ed04

08010f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f60:	4b0b      	ldr	r3, [pc, #44]	; (8010f90 <vPortSetupTimerInterrupt+0x34>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f66:	4b0b      	ldr	r3, [pc, #44]	; (8010f94 <vPortSetupTimerInterrupt+0x38>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <vPortSetupTimerInterrupt+0x3c>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4a0a      	ldr	r2, [pc, #40]	; (8010f9c <vPortSetupTimerInterrupt+0x40>)
 8010f72:	fba2 2303 	umull	r2, r3, r2, r3
 8010f76:	099b      	lsrs	r3, r3, #6
 8010f78:	4a09      	ldr	r2, [pc, #36]	; (8010fa0 <vPortSetupTimerInterrupt+0x44>)
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f7e:	4b04      	ldr	r3, [pc, #16]	; (8010f90 <vPortSetupTimerInterrupt+0x34>)
 8010f80:	2207      	movs	r2, #7
 8010f82:	601a      	str	r2, [r3, #0]
}
 8010f84:	bf00      	nop
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	e000e010 	.word	0xe000e010
 8010f94:	e000e018 	.word	0xe000e018
 8010f98:	20000004 	.word	0x20000004
 8010f9c:	10624dd3 	.word	0x10624dd3
 8010fa0:	e000e014 	.word	0xe000e014

08010fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010fb4 <vPortEnableVFP+0x10>
 8010fa8:	6801      	ldr	r1, [r0, #0]
 8010faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010fae:	6001      	str	r1, [r0, #0]
 8010fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010fb2:	bf00      	nop
 8010fb4:	e000ed88 	.word	0xe000ed88

08010fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010fbe:	f3ef 8305 	mrs	r3, IPSR
 8010fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2b0f      	cmp	r3, #15
 8010fc8:	d914      	bls.n	8010ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010fca:	4a17      	ldr	r2, [pc, #92]	; (8011028 <vPortValidateInterruptPriority+0x70>)
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4413      	add	r3, r2
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fd4:	4b15      	ldr	r3, [pc, #84]	; (801102c <vPortValidateInterruptPriority+0x74>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	7afa      	ldrb	r2, [r7, #11]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d20a      	bcs.n	8010ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	607b      	str	r3, [r7, #4]
}
 8010ff0:	bf00      	nop
 8010ff2:	e7fe      	b.n	8010ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ff4:	4b0e      	ldr	r3, [pc, #56]	; (8011030 <vPortValidateInterruptPriority+0x78>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ffc:	4b0d      	ldr	r3, [pc, #52]	; (8011034 <vPortValidateInterruptPriority+0x7c>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	d90a      	bls.n	801101a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	603b      	str	r3, [r7, #0]
}
 8011016:	bf00      	nop
 8011018:	e7fe      	b.n	8011018 <vPortValidateInterruptPriority+0x60>
	}
 801101a:	bf00      	nop
 801101c:	3714      	adds	r7, #20
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	e000e3f0 	.word	0xe000e3f0
 801102c:	20002b90 	.word	0x20002b90
 8011030:	e000ed0c 	.word	0xe000ed0c
 8011034:	20002b94 	.word	0x20002b94

08011038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08a      	sub	sp, #40	; 0x28
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011040:	2300      	movs	r3, #0
 8011042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011044:	f7fe ffe0 	bl	8010008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011048:	4b5b      	ldr	r3, [pc, #364]	; (80111b8 <pvPortMalloc+0x180>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d101      	bne.n	8011054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011050:	f000 f920 	bl	8011294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011054:	4b59      	ldr	r3, [pc, #356]	; (80111bc <pvPortMalloc+0x184>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4013      	ands	r3, r2
 801105c:	2b00      	cmp	r3, #0
 801105e:	f040 8093 	bne.w	8011188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01d      	beq.n	80110a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011068:	2208      	movs	r2, #8
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4413      	add	r3, r2
 801106e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f003 0307 	and.w	r3, r3, #7
 8011076:	2b00      	cmp	r3, #0
 8011078:	d014      	beq.n	80110a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f023 0307 	bic.w	r3, r3, #7
 8011080:	3308      	adds	r3, #8
 8011082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f003 0307 	and.w	r3, r3, #7
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00a      	beq.n	80110a4 <pvPortMalloc+0x6c>
	__asm volatile
 801108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	617b      	str	r3, [r7, #20]
}
 80110a0:	bf00      	nop
 80110a2:	e7fe      	b.n	80110a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d06e      	beq.n	8011188 <pvPortMalloc+0x150>
 80110aa:	4b45      	ldr	r3, [pc, #276]	; (80111c0 <pvPortMalloc+0x188>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d869      	bhi.n	8011188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80110b4:	4b43      	ldr	r3, [pc, #268]	; (80111c4 <pvPortMalloc+0x18c>)
 80110b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80110b8:	4b42      	ldr	r3, [pc, #264]	; (80111c4 <pvPortMalloc+0x18c>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110be:	e004      	b.n	80110ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d903      	bls.n	80110dc <pvPortMalloc+0xa4>
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1f1      	bne.n	80110c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110dc:	4b36      	ldr	r3, [pc, #216]	; (80111b8 <pvPortMalloc+0x180>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d050      	beq.n	8011188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2208      	movs	r2, #8
 80110ec:	4413      	add	r3, r2
 80110ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	6a3b      	ldr	r3, [r7, #32]
 80110f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	685a      	ldr	r2, [r3, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	2308      	movs	r3, #8
 8011102:	005b      	lsls	r3, r3, #1
 8011104:	429a      	cmp	r2, r3
 8011106:	d91f      	bls.n	8011148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4413      	add	r3, r2
 801110e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	f003 0307 	and.w	r3, r3, #7
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00a      	beq.n	8011130 <pvPortMalloc+0xf8>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111e:	f383 8811 	msr	BASEPRI, r3
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	613b      	str	r3, [r7, #16]
}
 801112c:	bf00      	nop
 801112e:	e7fe      	b.n	801112e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	685a      	ldr	r2, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011142:	69b8      	ldr	r0, [r7, #24]
 8011144:	f000 f908 	bl	8011358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011148:	4b1d      	ldr	r3, [pc, #116]	; (80111c0 <pvPortMalloc+0x188>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	4a1b      	ldr	r2, [pc, #108]	; (80111c0 <pvPortMalloc+0x188>)
 8011154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011156:	4b1a      	ldr	r3, [pc, #104]	; (80111c0 <pvPortMalloc+0x188>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	4b1b      	ldr	r3, [pc, #108]	; (80111c8 <pvPortMalloc+0x190>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d203      	bcs.n	801116a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011162:	4b17      	ldr	r3, [pc, #92]	; (80111c0 <pvPortMalloc+0x188>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a18      	ldr	r2, [pc, #96]	; (80111c8 <pvPortMalloc+0x190>)
 8011168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	685a      	ldr	r2, [r3, #4]
 801116e:	4b13      	ldr	r3, [pc, #76]	; (80111bc <pvPortMalloc+0x184>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	431a      	orrs	r2, r3
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801117e:	4b13      	ldr	r3, [pc, #76]	; (80111cc <pvPortMalloc+0x194>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3301      	adds	r3, #1
 8011184:	4a11      	ldr	r2, [pc, #68]	; (80111cc <pvPortMalloc+0x194>)
 8011186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011188:	f7fe ff4c 	bl	8010024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	f003 0307 	and.w	r3, r3, #7
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00a      	beq.n	80111ac <pvPortMalloc+0x174>
	__asm volatile
 8011196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119a:	f383 8811 	msr	BASEPRI, r3
 801119e:	f3bf 8f6f 	isb	sy
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	60fb      	str	r3, [r7, #12]
}
 80111a8:	bf00      	nop
 80111aa:	e7fe      	b.n	80111aa <pvPortMalloc+0x172>
	return pvReturn;
 80111ac:	69fb      	ldr	r3, [r7, #28]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3728      	adds	r7, #40	; 0x28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	200067a0 	.word	0x200067a0
 80111bc:	200067b4 	.word	0x200067b4
 80111c0:	200067a4 	.word	0x200067a4
 80111c4:	20006798 	.word	0x20006798
 80111c8:	200067a8 	.word	0x200067a8
 80111cc:	200067ac 	.word	0x200067ac

080111d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d04d      	beq.n	801127e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111e2:	2308      	movs	r3, #8
 80111e4:	425b      	negs	r3, r3
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	4413      	add	r3, r2
 80111ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	4b24      	ldr	r3, [pc, #144]	; (8011288 <vPortFree+0xb8>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4013      	ands	r3, r2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d10a      	bne.n	8011214 <vPortFree+0x44>
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	60fb      	str	r3, [r7, #12]
}
 8011210:	bf00      	nop
 8011212:	e7fe      	b.n	8011212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00a      	beq.n	8011232 <vPortFree+0x62>
	__asm volatile
 801121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011220:	f383 8811 	msr	BASEPRI, r3
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	60bb      	str	r3, [r7, #8]
}
 801122e:	bf00      	nop
 8011230:	e7fe      	b.n	8011230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	4b14      	ldr	r3, [pc, #80]	; (8011288 <vPortFree+0xb8>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4013      	ands	r3, r2
 801123c:	2b00      	cmp	r3, #0
 801123e:	d01e      	beq.n	801127e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d11a      	bne.n	801127e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	4b0e      	ldr	r3, [pc, #56]	; (8011288 <vPortFree+0xb8>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	43db      	mvns	r3, r3
 8011252:	401a      	ands	r2, r3
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011258:	f7fe fed6 	bl	8010008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	685a      	ldr	r2, [r3, #4]
 8011260:	4b0a      	ldr	r3, [pc, #40]	; (801128c <vPortFree+0xbc>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4413      	add	r3, r2
 8011266:	4a09      	ldr	r2, [pc, #36]	; (801128c <vPortFree+0xbc>)
 8011268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801126a:	6938      	ldr	r0, [r7, #16]
 801126c:	f000 f874 	bl	8011358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011270:	4b07      	ldr	r3, [pc, #28]	; (8011290 <vPortFree+0xc0>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	4a06      	ldr	r2, [pc, #24]	; (8011290 <vPortFree+0xc0>)
 8011278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801127a:	f7fe fed3 	bl	8010024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801127e:	bf00      	nop
 8011280:	3718      	adds	r7, #24
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	200067b4 	.word	0x200067b4
 801128c:	200067a4 	.word	0x200067a4
 8011290:	200067b0 	.word	0x200067b0

08011294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801129a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801129e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80112a0:	4b27      	ldr	r3, [pc, #156]	; (8011340 <prvHeapInit+0xac>)
 80112a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f003 0307 	and.w	r3, r3, #7
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00c      	beq.n	80112c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	3307      	adds	r3, #7
 80112b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f023 0307 	bic.w	r3, r3, #7
 80112ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	4a1f      	ldr	r2, [pc, #124]	; (8011340 <prvHeapInit+0xac>)
 80112c4:	4413      	add	r3, r2
 80112c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112cc:	4a1d      	ldr	r2, [pc, #116]	; (8011344 <prvHeapInit+0xb0>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112d2:	4b1c      	ldr	r3, [pc, #112]	; (8011344 <prvHeapInit+0xb0>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	68ba      	ldr	r2, [r7, #8]
 80112dc:	4413      	add	r3, r2
 80112de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80112e0:	2208      	movs	r2, #8
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	1a9b      	subs	r3, r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f023 0307 	bic.w	r3, r3, #7
 80112ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4a15      	ldr	r2, [pc, #84]	; (8011348 <prvHeapInit+0xb4>)
 80112f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <prvHeapInit+0xb4>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2200      	movs	r2, #0
 80112fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112fe:	4b12      	ldr	r3, [pc, #72]	; (8011348 <prvHeapInit+0xb4>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	1ad2      	subs	r2, r2, r3
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011314:	4b0c      	ldr	r3, [pc, #48]	; (8011348 <prvHeapInit+0xb4>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	4a0a      	ldr	r2, [pc, #40]	; (801134c <prvHeapInit+0xb8>)
 8011322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4a09      	ldr	r2, [pc, #36]	; (8011350 <prvHeapInit+0xbc>)
 801132a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801132c:	4b09      	ldr	r3, [pc, #36]	; (8011354 <prvHeapInit+0xc0>)
 801132e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011332:	601a      	str	r2, [r3, #0]
}
 8011334:	bf00      	nop
 8011336:	3714      	adds	r7, #20
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	20002b98 	.word	0x20002b98
 8011344:	20006798 	.word	0x20006798
 8011348:	200067a0 	.word	0x200067a0
 801134c:	200067a8 	.word	0x200067a8
 8011350:	200067a4 	.word	0x200067a4
 8011354:	200067b4 	.word	0x200067b4

08011358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011358:	b480      	push	{r7}
 801135a:	b085      	sub	sp, #20
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011360:	4b28      	ldr	r3, [pc, #160]	; (8011404 <prvInsertBlockIntoFreeList+0xac>)
 8011362:	60fb      	str	r3, [r7, #12]
 8011364:	e002      	b.n	801136c <prvInsertBlockIntoFreeList+0x14>
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	429a      	cmp	r2, r3
 8011374:	d8f7      	bhi.n	8011366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	4413      	add	r3, r2
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	429a      	cmp	r2, r3
 8011386:	d108      	bne.n	801139a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	441a      	add	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	441a      	add	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d118      	bne.n	80113e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	4b15      	ldr	r3, [pc, #84]	; (8011408 <prvInsertBlockIntoFreeList+0xb0>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d00d      	beq.n	80113d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685a      	ldr	r2, [r3, #4]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	441a      	add	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	e008      	b.n	80113e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113d6:	4b0c      	ldr	r3, [pc, #48]	; (8011408 <prvInsertBlockIntoFreeList+0xb0>)
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	e003      	b.n	80113e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d002      	beq.n	80113f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113f6:	bf00      	nop
 80113f8:	3714      	adds	r7, #20
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	20006798 	.word	0x20006798
 8011408:	200067a0 	.word	0x200067a0

0801140c <__cvt>:
 801140c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011410:	ec55 4b10 	vmov	r4, r5, d0
 8011414:	2d00      	cmp	r5, #0
 8011416:	460e      	mov	r6, r1
 8011418:	4619      	mov	r1, r3
 801141a:	462b      	mov	r3, r5
 801141c:	bfbb      	ittet	lt
 801141e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011422:	461d      	movlt	r5, r3
 8011424:	2300      	movge	r3, #0
 8011426:	232d      	movlt	r3, #45	; 0x2d
 8011428:	700b      	strb	r3, [r1, #0]
 801142a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801142c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011430:	4691      	mov	r9, r2
 8011432:	f023 0820 	bic.w	r8, r3, #32
 8011436:	bfbc      	itt	lt
 8011438:	4622      	movlt	r2, r4
 801143a:	4614      	movlt	r4, r2
 801143c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011440:	d005      	beq.n	801144e <__cvt+0x42>
 8011442:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011446:	d100      	bne.n	801144a <__cvt+0x3e>
 8011448:	3601      	adds	r6, #1
 801144a:	2102      	movs	r1, #2
 801144c:	e000      	b.n	8011450 <__cvt+0x44>
 801144e:	2103      	movs	r1, #3
 8011450:	ab03      	add	r3, sp, #12
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	ab02      	add	r3, sp, #8
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	ec45 4b10 	vmov	d0, r4, r5
 801145c:	4653      	mov	r3, sl
 801145e:	4632      	mov	r2, r6
 8011460:	f000 fede 	bl	8012220 <_dtoa_r>
 8011464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011468:	4607      	mov	r7, r0
 801146a:	d102      	bne.n	8011472 <__cvt+0x66>
 801146c:	f019 0f01 	tst.w	r9, #1
 8011470:	d022      	beq.n	80114b8 <__cvt+0xac>
 8011472:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011476:	eb07 0906 	add.w	r9, r7, r6
 801147a:	d110      	bne.n	801149e <__cvt+0x92>
 801147c:	783b      	ldrb	r3, [r7, #0]
 801147e:	2b30      	cmp	r3, #48	; 0x30
 8011480:	d10a      	bne.n	8011498 <__cvt+0x8c>
 8011482:	2200      	movs	r2, #0
 8011484:	2300      	movs	r3, #0
 8011486:	4620      	mov	r0, r4
 8011488:	4629      	mov	r1, r5
 801148a:	f7ef fb3d 	bl	8000b08 <__aeabi_dcmpeq>
 801148e:	b918      	cbnz	r0, 8011498 <__cvt+0x8c>
 8011490:	f1c6 0601 	rsb	r6, r6, #1
 8011494:	f8ca 6000 	str.w	r6, [sl]
 8011498:	f8da 3000 	ldr.w	r3, [sl]
 801149c:	4499      	add	r9, r3
 801149e:	2200      	movs	r2, #0
 80114a0:	2300      	movs	r3, #0
 80114a2:	4620      	mov	r0, r4
 80114a4:	4629      	mov	r1, r5
 80114a6:	f7ef fb2f 	bl	8000b08 <__aeabi_dcmpeq>
 80114aa:	b108      	cbz	r0, 80114b0 <__cvt+0xa4>
 80114ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80114b0:	2230      	movs	r2, #48	; 0x30
 80114b2:	9b03      	ldr	r3, [sp, #12]
 80114b4:	454b      	cmp	r3, r9
 80114b6:	d307      	bcc.n	80114c8 <__cvt+0xbc>
 80114b8:	9b03      	ldr	r3, [sp, #12]
 80114ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114bc:	1bdb      	subs	r3, r3, r7
 80114be:	4638      	mov	r0, r7
 80114c0:	6013      	str	r3, [r2, #0]
 80114c2:	b004      	add	sp, #16
 80114c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c8:	1c59      	adds	r1, r3, #1
 80114ca:	9103      	str	r1, [sp, #12]
 80114cc:	701a      	strb	r2, [r3, #0]
 80114ce:	e7f0      	b.n	80114b2 <__cvt+0xa6>

080114d0 <__exponent>:
 80114d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114d2:	4603      	mov	r3, r0
 80114d4:	2900      	cmp	r1, #0
 80114d6:	bfb8      	it	lt
 80114d8:	4249      	neglt	r1, r1
 80114da:	f803 2b02 	strb.w	r2, [r3], #2
 80114de:	bfb4      	ite	lt
 80114e0:	222d      	movlt	r2, #45	; 0x2d
 80114e2:	222b      	movge	r2, #43	; 0x2b
 80114e4:	2909      	cmp	r1, #9
 80114e6:	7042      	strb	r2, [r0, #1]
 80114e8:	dd2a      	ble.n	8011540 <__exponent+0x70>
 80114ea:	f10d 0207 	add.w	r2, sp, #7
 80114ee:	4617      	mov	r7, r2
 80114f0:	260a      	movs	r6, #10
 80114f2:	4694      	mov	ip, r2
 80114f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80114f8:	fb06 1415 	mls	r4, r6, r5, r1
 80114fc:	3430      	adds	r4, #48	; 0x30
 80114fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011502:	460c      	mov	r4, r1
 8011504:	2c63      	cmp	r4, #99	; 0x63
 8011506:	f102 32ff 	add.w	r2, r2, #4294967295
 801150a:	4629      	mov	r1, r5
 801150c:	dcf1      	bgt.n	80114f2 <__exponent+0x22>
 801150e:	3130      	adds	r1, #48	; 0x30
 8011510:	f1ac 0402 	sub.w	r4, ip, #2
 8011514:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011518:	1c41      	adds	r1, r0, #1
 801151a:	4622      	mov	r2, r4
 801151c:	42ba      	cmp	r2, r7
 801151e:	d30a      	bcc.n	8011536 <__exponent+0x66>
 8011520:	f10d 0209 	add.w	r2, sp, #9
 8011524:	eba2 020c 	sub.w	r2, r2, ip
 8011528:	42bc      	cmp	r4, r7
 801152a:	bf88      	it	hi
 801152c:	2200      	movhi	r2, #0
 801152e:	4413      	add	r3, r2
 8011530:	1a18      	subs	r0, r3, r0
 8011532:	b003      	add	sp, #12
 8011534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011536:	f812 5b01 	ldrb.w	r5, [r2], #1
 801153a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801153e:	e7ed      	b.n	801151c <__exponent+0x4c>
 8011540:	2330      	movs	r3, #48	; 0x30
 8011542:	3130      	adds	r1, #48	; 0x30
 8011544:	7083      	strb	r3, [r0, #2]
 8011546:	70c1      	strb	r1, [r0, #3]
 8011548:	1d03      	adds	r3, r0, #4
 801154a:	e7f1      	b.n	8011530 <__exponent+0x60>

0801154c <_printf_float>:
 801154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011550:	ed2d 8b02 	vpush	{d8}
 8011554:	b08d      	sub	sp, #52	; 0x34
 8011556:	460c      	mov	r4, r1
 8011558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801155c:	4616      	mov	r6, r2
 801155e:	461f      	mov	r7, r3
 8011560:	4605      	mov	r5, r0
 8011562:	f000 fcf9 	bl	8011f58 <_localeconv_r>
 8011566:	f8d0 a000 	ldr.w	sl, [r0]
 801156a:	4650      	mov	r0, sl
 801156c:	f7ee fea0 	bl	80002b0 <strlen>
 8011570:	2300      	movs	r3, #0
 8011572:	930a      	str	r3, [sp, #40]	; 0x28
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	9305      	str	r3, [sp, #20]
 8011578:	f8d8 3000 	ldr.w	r3, [r8]
 801157c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011580:	3307      	adds	r3, #7
 8011582:	f023 0307 	bic.w	r3, r3, #7
 8011586:	f103 0208 	add.w	r2, r3, #8
 801158a:	f8c8 2000 	str.w	r2, [r8]
 801158e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011596:	9307      	str	r3, [sp, #28]
 8011598:	f8cd 8018 	str.w	r8, [sp, #24]
 801159c:	ee08 0a10 	vmov	s16, r0
 80115a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80115a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115a8:	4b9e      	ldr	r3, [pc, #632]	; (8011824 <_printf_float+0x2d8>)
 80115aa:	f04f 32ff 	mov.w	r2, #4294967295
 80115ae:	f7ef fadd 	bl	8000b6c <__aeabi_dcmpun>
 80115b2:	bb88      	cbnz	r0, 8011618 <_printf_float+0xcc>
 80115b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115b8:	4b9a      	ldr	r3, [pc, #616]	; (8011824 <_printf_float+0x2d8>)
 80115ba:	f04f 32ff 	mov.w	r2, #4294967295
 80115be:	f7ef fab7 	bl	8000b30 <__aeabi_dcmple>
 80115c2:	bb48      	cbnz	r0, 8011618 <_printf_float+0xcc>
 80115c4:	2200      	movs	r2, #0
 80115c6:	2300      	movs	r3, #0
 80115c8:	4640      	mov	r0, r8
 80115ca:	4649      	mov	r1, r9
 80115cc:	f7ef faa6 	bl	8000b1c <__aeabi_dcmplt>
 80115d0:	b110      	cbz	r0, 80115d8 <_printf_float+0x8c>
 80115d2:	232d      	movs	r3, #45	; 0x2d
 80115d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115d8:	4a93      	ldr	r2, [pc, #588]	; (8011828 <_printf_float+0x2dc>)
 80115da:	4b94      	ldr	r3, [pc, #592]	; (801182c <_printf_float+0x2e0>)
 80115dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80115e0:	bf94      	ite	ls
 80115e2:	4690      	movls	r8, r2
 80115e4:	4698      	movhi	r8, r3
 80115e6:	2303      	movs	r3, #3
 80115e8:	6123      	str	r3, [r4, #16]
 80115ea:	9b05      	ldr	r3, [sp, #20]
 80115ec:	f023 0304 	bic.w	r3, r3, #4
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	f04f 0900 	mov.w	r9, #0
 80115f6:	9700      	str	r7, [sp, #0]
 80115f8:	4633      	mov	r3, r6
 80115fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80115fc:	4621      	mov	r1, r4
 80115fe:	4628      	mov	r0, r5
 8011600:	f000 f9da 	bl	80119b8 <_printf_common>
 8011604:	3001      	adds	r0, #1
 8011606:	f040 8090 	bne.w	801172a <_printf_float+0x1de>
 801160a:	f04f 30ff 	mov.w	r0, #4294967295
 801160e:	b00d      	add	sp, #52	; 0x34
 8011610:	ecbd 8b02 	vpop	{d8}
 8011614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011618:	4642      	mov	r2, r8
 801161a:	464b      	mov	r3, r9
 801161c:	4640      	mov	r0, r8
 801161e:	4649      	mov	r1, r9
 8011620:	f7ef faa4 	bl	8000b6c <__aeabi_dcmpun>
 8011624:	b140      	cbz	r0, 8011638 <_printf_float+0xec>
 8011626:	464b      	mov	r3, r9
 8011628:	2b00      	cmp	r3, #0
 801162a:	bfbc      	itt	lt
 801162c:	232d      	movlt	r3, #45	; 0x2d
 801162e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011632:	4a7f      	ldr	r2, [pc, #508]	; (8011830 <_printf_float+0x2e4>)
 8011634:	4b7f      	ldr	r3, [pc, #508]	; (8011834 <_printf_float+0x2e8>)
 8011636:	e7d1      	b.n	80115dc <_printf_float+0x90>
 8011638:	6863      	ldr	r3, [r4, #4]
 801163a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801163e:	9206      	str	r2, [sp, #24]
 8011640:	1c5a      	adds	r2, r3, #1
 8011642:	d13f      	bne.n	80116c4 <_printf_float+0x178>
 8011644:	2306      	movs	r3, #6
 8011646:	6063      	str	r3, [r4, #4]
 8011648:	9b05      	ldr	r3, [sp, #20]
 801164a:	6861      	ldr	r1, [r4, #4]
 801164c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011650:	2300      	movs	r3, #0
 8011652:	9303      	str	r3, [sp, #12]
 8011654:	ab0a      	add	r3, sp, #40	; 0x28
 8011656:	e9cd b301 	strd	fp, r3, [sp, #4]
 801165a:	ab09      	add	r3, sp, #36	; 0x24
 801165c:	ec49 8b10 	vmov	d0, r8, r9
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	6022      	str	r2, [r4, #0]
 8011664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011668:	4628      	mov	r0, r5
 801166a:	f7ff fecf 	bl	801140c <__cvt>
 801166e:	9b06      	ldr	r3, [sp, #24]
 8011670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011672:	2b47      	cmp	r3, #71	; 0x47
 8011674:	4680      	mov	r8, r0
 8011676:	d108      	bne.n	801168a <_printf_float+0x13e>
 8011678:	1cc8      	adds	r0, r1, #3
 801167a:	db02      	blt.n	8011682 <_printf_float+0x136>
 801167c:	6863      	ldr	r3, [r4, #4]
 801167e:	4299      	cmp	r1, r3
 8011680:	dd41      	ble.n	8011706 <_printf_float+0x1ba>
 8011682:	f1ab 0302 	sub.w	r3, fp, #2
 8011686:	fa5f fb83 	uxtb.w	fp, r3
 801168a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801168e:	d820      	bhi.n	80116d2 <_printf_float+0x186>
 8011690:	3901      	subs	r1, #1
 8011692:	465a      	mov	r2, fp
 8011694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011698:	9109      	str	r1, [sp, #36]	; 0x24
 801169a:	f7ff ff19 	bl	80114d0 <__exponent>
 801169e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116a0:	1813      	adds	r3, r2, r0
 80116a2:	2a01      	cmp	r2, #1
 80116a4:	4681      	mov	r9, r0
 80116a6:	6123      	str	r3, [r4, #16]
 80116a8:	dc02      	bgt.n	80116b0 <_printf_float+0x164>
 80116aa:	6822      	ldr	r2, [r4, #0]
 80116ac:	07d2      	lsls	r2, r2, #31
 80116ae:	d501      	bpl.n	80116b4 <_printf_float+0x168>
 80116b0:	3301      	adds	r3, #1
 80116b2:	6123      	str	r3, [r4, #16]
 80116b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d09c      	beq.n	80115f6 <_printf_float+0xaa>
 80116bc:	232d      	movs	r3, #45	; 0x2d
 80116be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116c2:	e798      	b.n	80115f6 <_printf_float+0xaa>
 80116c4:	9a06      	ldr	r2, [sp, #24]
 80116c6:	2a47      	cmp	r2, #71	; 0x47
 80116c8:	d1be      	bne.n	8011648 <_printf_float+0xfc>
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d1bc      	bne.n	8011648 <_printf_float+0xfc>
 80116ce:	2301      	movs	r3, #1
 80116d0:	e7b9      	b.n	8011646 <_printf_float+0xfa>
 80116d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80116d6:	d118      	bne.n	801170a <_printf_float+0x1be>
 80116d8:	2900      	cmp	r1, #0
 80116da:	6863      	ldr	r3, [r4, #4]
 80116dc:	dd0b      	ble.n	80116f6 <_printf_float+0x1aa>
 80116de:	6121      	str	r1, [r4, #16]
 80116e0:	b913      	cbnz	r3, 80116e8 <_printf_float+0x19c>
 80116e2:	6822      	ldr	r2, [r4, #0]
 80116e4:	07d0      	lsls	r0, r2, #31
 80116e6:	d502      	bpl.n	80116ee <_printf_float+0x1a2>
 80116e8:	3301      	adds	r3, #1
 80116ea:	440b      	add	r3, r1
 80116ec:	6123      	str	r3, [r4, #16]
 80116ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80116f0:	f04f 0900 	mov.w	r9, #0
 80116f4:	e7de      	b.n	80116b4 <_printf_float+0x168>
 80116f6:	b913      	cbnz	r3, 80116fe <_printf_float+0x1b2>
 80116f8:	6822      	ldr	r2, [r4, #0]
 80116fa:	07d2      	lsls	r2, r2, #31
 80116fc:	d501      	bpl.n	8011702 <_printf_float+0x1b6>
 80116fe:	3302      	adds	r3, #2
 8011700:	e7f4      	b.n	80116ec <_printf_float+0x1a0>
 8011702:	2301      	movs	r3, #1
 8011704:	e7f2      	b.n	80116ec <_printf_float+0x1a0>
 8011706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801170a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801170c:	4299      	cmp	r1, r3
 801170e:	db05      	blt.n	801171c <_printf_float+0x1d0>
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	6121      	str	r1, [r4, #16]
 8011714:	07d8      	lsls	r0, r3, #31
 8011716:	d5ea      	bpl.n	80116ee <_printf_float+0x1a2>
 8011718:	1c4b      	adds	r3, r1, #1
 801171a:	e7e7      	b.n	80116ec <_printf_float+0x1a0>
 801171c:	2900      	cmp	r1, #0
 801171e:	bfd4      	ite	le
 8011720:	f1c1 0202 	rsble	r2, r1, #2
 8011724:	2201      	movgt	r2, #1
 8011726:	4413      	add	r3, r2
 8011728:	e7e0      	b.n	80116ec <_printf_float+0x1a0>
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	055a      	lsls	r2, r3, #21
 801172e:	d407      	bmi.n	8011740 <_printf_float+0x1f4>
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	4642      	mov	r2, r8
 8011734:	4631      	mov	r1, r6
 8011736:	4628      	mov	r0, r5
 8011738:	47b8      	blx	r7
 801173a:	3001      	adds	r0, #1
 801173c:	d12c      	bne.n	8011798 <_printf_float+0x24c>
 801173e:	e764      	b.n	801160a <_printf_float+0xbe>
 8011740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011744:	f240 80e0 	bls.w	8011908 <_printf_float+0x3bc>
 8011748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801174c:	2200      	movs	r2, #0
 801174e:	2300      	movs	r3, #0
 8011750:	f7ef f9da 	bl	8000b08 <__aeabi_dcmpeq>
 8011754:	2800      	cmp	r0, #0
 8011756:	d034      	beq.n	80117c2 <_printf_float+0x276>
 8011758:	4a37      	ldr	r2, [pc, #220]	; (8011838 <_printf_float+0x2ec>)
 801175a:	2301      	movs	r3, #1
 801175c:	4631      	mov	r1, r6
 801175e:	4628      	mov	r0, r5
 8011760:	47b8      	blx	r7
 8011762:	3001      	adds	r0, #1
 8011764:	f43f af51 	beq.w	801160a <_printf_float+0xbe>
 8011768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801176c:	429a      	cmp	r2, r3
 801176e:	db02      	blt.n	8011776 <_printf_float+0x22a>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	07d8      	lsls	r0, r3, #31
 8011774:	d510      	bpl.n	8011798 <_printf_float+0x24c>
 8011776:	ee18 3a10 	vmov	r3, s16
 801177a:	4652      	mov	r2, sl
 801177c:	4631      	mov	r1, r6
 801177e:	4628      	mov	r0, r5
 8011780:	47b8      	blx	r7
 8011782:	3001      	adds	r0, #1
 8011784:	f43f af41 	beq.w	801160a <_printf_float+0xbe>
 8011788:	f04f 0800 	mov.w	r8, #0
 801178c:	f104 091a 	add.w	r9, r4, #26
 8011790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011792:	3b01      	subs	r3, #1
 8011794:	4543      	cmp	r3, r8
 8011796:	dc09      	bgt.n	80117ac <_printf_float+0x260>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	079b      	lsls	r3, r3, #30
 801179c:	f100 8107 	bmi.w	80119ae <_printf_float+0x462>
 80117a0:	68e0      	ldr	r0, [r4, #12]
 80117a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a4:	4298      	cmp	r0, r3
 80117a6:	bfb8      	it	lt
 80117a8:	4618      	movlt	r0, r3
 80117aa:	e730      	b.n	801160e <_printf_float+0xc2>
 80117ac:	2301      	movs	r3, #1
 80117ae:	464a      	mov	r2, r9
 80117b0:	4631      	mov	r1, r6
 80117b2:	4628      	mov	r0, r5
 80117b4:	47b8      	blx	r7
 80117b6:	3001      	adds	r0, #1
 80117b8:	f43f af27 	beq.w	801160a <_printf_float+0xbe>
 80117bc:	f108 0801 	add.w	r8, r8, #1
 80117c0:	e7e6      	b.n	8011790 <_printf_float+0x244>
 80117c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	dc39      	bgt.n	801183c <_printf_float+0x2f0>
 80117c8:	4a1b      	ldr	r2, [pc, #108]	; (8011838 <_printf_float+0x2ec>)
 80117ca:	2301      	movs	r3, #1
 80117cc:	4631      	mov	r1, r6
 80117ce:	4628      	mov	r0, r5
 80117d0:	47b8      	blx	r7
 80117d2:	3001      	adds	r0, #1
 80117d4:	f43f af19 	beq.w	801160a <_printf_float+0xbe>
 80117d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80117dc:	4313      	orrs	r3, r2
 80117de:	d102      	bne.n	80117e6 <_printf_float+0x29a>
 80117e0:	6823      	ldr	r3, [r4, #0]
 80117e2:	07d9      	lsls	r1, r3, #31
 80117e4:	d5d8      	bpl.n	8011798 <_printf_float+0x24c>
 80117e6:	ee18 3a10 	vmov	r3, s16
 80117ea:	4652      	mov	r2, sl
 80117ec:	4631      	mov	r1, r6
 80117ee:	4628      	mov	r0, r5
 80117f0:	47b8      	blx	r7
 80117f2:	3001      	adds	r0, #1
 80117f4:	f43f af09 	beq.w	801160a <_printf_float+0xbe>
 80117f8:	f04f 0900 	mov.w	r9, #0
 80117fc:	f104 0a1a 	add.w	sl, r4, #26
 8011800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011802:	425b      	negs	r3, r3
 8011804:	454b      	cmp	r3, r9
 8011806:	dc01      	bgt.n	801180c <_printf_float+0x2c0>
 8011808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801180a:	e792      	b.n	8011732 <_printf_float+0x1e6>
 801180c:	2301      	movs	r3, #1
 801180e:	4652      	mov	r2, sl
 8011810:	4631      	mov	r1, r6
 8011812:	4628      	mov	r0, r5
 8011814:	47b8      	blx	r7
 8011816:	3001      	adds	r0, #1
 8011818:	f43f aef7 	beq.w	801160a <_printf_float+0xbe>
 801181c:	f109 0901 	add.w	r9, r9, #1
 8011820:	e7ee      	b.n	8011800 <_printf_float+0x2b4>
 8011822:	bf00      	nop
 8011824:	7fefffff 	.word	0x7fefffff
 8011828:	080149c8 	.word	0x080149c8
 801182c:	080149cc 	.word	0x080149cc
 8011830:	080149d0 	.word	0x080149d0
 8011834:	080149d4 	.word	0x080149d4
 8011838:	080149d8 	.word	0x080149d8
 801183c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801183e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011840:	429a      	cmp	r2, r3
 8011842:	bfa8      	it	ge
 8011844:	461a      	movge	r2, r3
 8011846:	2a00      	cmp	r2, #0
 8011848:	4691      	mov	r9, r2
 801184a:	dc37      	bgt.n	80118bc <_printf_float+0x370>
 801184c:	f04f 0b00 	mov.w	fp, #0
 8011850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011854:	f104 021a 	add.w	r2, r4, #26
 8011858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801185a:	9305      	str	r3, [sp, #20]
 801185c:	eba3 0309 	sub.w	r3, r3, r9
 8011860:	455b      	cmp	r3, fp
 8011862:	dc33      	bgt.n	80118cc <_printf_float+0x380>
 8011864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011868:	429a      	cmp	r2, r3
 801186a:	db3b      	blt.n	80118e4 <_printf_float+0x398>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	07da      	lsls	r2, r3, #31
 8011870:	d438      	bmi.n	80118e4 <_printf_float+0x398>
 8011872:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011876:	eba2 0903 	sub.w	r9, r2, r3
 801187a:	9b05      	ldr	r3, [sp, #20]
 801187c:	1ad2      	subs	r2, r2, r3
 801187e:	4591      	cmp	r9, r2
 8011880:	bfa8      	it	ge
 8011882:	4691      	movge	r9, r2
 8011884:	f1b9 0f00 	cmp.w	r9, #0
 8011888:	dc35      	bgt.n	80118f6 <_printf_float+0x3aa>
 801188a:	f04f 0800 	mov.w	r8, #0
 801188e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011892:	f104 0a1a 	add.w	sl, r4, #26
 8011896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801189a:	1a9b      	subs	r3, r3, r2
 801189c:	eba3 0309 	sub.w	r3, r3, r9
 80118a0:	4543      	cmp	r3, r8
 80118a2:	f77f af79 	ble.w	8011798 <_printf_float+0x24c>
 80118a6:	2301      	movs	r3, #1
 80118a8:	4652      	mov	r2, sl
 80118aa:	4631      	mov	r1, r6
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b8      	blx	r7
 80118b0:	3001      	adds	r0, #1
 80118b2:	f43f aeaa 	beq.w	801160a <_printf_float+0xbe>
 80118b6:	f108 0801 	add.w	r8, r8, #1
 80118ba:	e7ec      	b.n	8011896 <_printf_float+0x34a>
 80118bc:	4613      	mov	r3, r2
 80118be:	4631      	mov	r1, r6
 80118c0:	4642      	mov	r2, r8
 80118c2:	4628      	mov	r0, r5
 80118c4:	47b8      	blx	r7
 80118c6:	3001      	adds	r0, #1
 80118c8:	d1c0      	bne.n	801184c <_printf_float+0x300>
 80118ca:	e69e      	b.n	801160a <_printf_float+0xbe>
 80118cc:	2301      	movs	r3, #1
 80118ce:	4631      	mov	r1, r6
 80118d0:	4628      	mov	r0, r5
 80118d2:	9205      	str	r2, [sp, #20]
 80118d4:	47b8      	blx	r7
 80118d6:	3001      	adds	r0, #1
 80118d8:	f43f ae97 	beq.w	801160a <_printf_float+0xbe>
 80118dc:	9a05      	ldr	r2, [sp, #20]
 80118de:	f10b 0b01 	add.w	fp, fp, #1
 80118e2:	e7b9      	b.n	8011858 <_printf_float+0x30c>
 80118e4:	ee18 3a10 	vmov	r3, s16
 80118e8:	4652      	mov	r2, sl
 80118ea:	4631      	mov	r1, r6
 80118ec:	4628      	mov	r0, r5
 80118ee:	47b8      	blx	r7
 80118f0:	3001      	adds	r0, #1
 80118f2:	d1be      	bne.n	8011872 <_printf_float+0x326>
 80118f4:	e689      	b.n	801160a <_printf_float+0xbe>
 80118f6:	9a05      	ldr	r2, [sp, #20]
 80118f8:	464b      	mov	r3, r9
 80118fa:	4442      	add	r2, r8
 80118fc:	4631      	mov	r1, r6
 80118fe:	4628      	mov	r0, r5
 8011900:	47b8      	blx	r7
 8011902:	3001      	adds	r0, #1
 8011904:	d1c1      	bne.n	801188a <_printf_float+0x33e>
 8011906:	e680      	b.n	801160a <_printf_float+0xbe>
 8011908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801190a:	2a01      	cmp	r2, #1
 801190c:	dc01      	bgt.n	8011912 <_printf_float+0x3c6>
 801190e:	07db      	lsls	r3, r3, #31
 8011910:	d53a      	bpl.n	8011988 <_printf_float+0x43c>
 8011912:	2301      	movs	r3, #1
 8011914:	4642      	mov	r2, r8
 8011916:	4631      	mov	r1, r6
 8011918:	4628      	mov	r0, r5
 801191a:	47b8      	blx	r7
 801191c:	3001      	adds	r0, #1
 801191e:	f43f ae74 	beq.w	801160a <_printf_float+0xbe>
 8011922:	ee18 3a10 	vmov	r3, s16
 8011926:	4652      	mov	r2, sl
 8011928:	4631      	mov	r1, r6
 801192a:	4628      	mov	r0, r5
 801192c:	47b8      	blx	r7
 801192e:	3001      	adds	r0, #1
 8011930:	f43f ae6b 	beq.w	801160a <_printf_float+0xbe>
 8011934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011938:	2200      	movs	r2, #0
 801193a:	2300      	movs	r3, #0
 801193c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011940:	f7ef f8e2 	bl	8000b08 <__aeabi_dcmpeq>
 8011944:	b9d8      	cbnz	r0, 801197e <_printf_float+0x432>
 8011946:	f10a 33ff 	add.w	r3, sl, #4294967295
 801194a:	f108 0201 	add.w	r2, r8, #1
 801194e:	4631      	mov	r1, r6
 8011950:	4628      	mov	r0, r5
 8011952:	47b8      	blx	r7
 8011954:	3001      	adds	r0, #1
 8011956:	d10e      	bne.n	8011976 <_printf_float+0x42a>
 8011958:	e657      	b.n	801160a <_printf_float+0xbe>
 801195a:	2301      	movs	r3, #1
 801195c:	4652      	mov	r2, sl
 801195e:	4631      	mov	r1, r6
 8011960:	4628      	mov	r0, r5
 8011962:	47b8      	blx	r7
 8011964:	3001      	adds	r0, #1
 8011966:	f43f ae50 	beq.w	801160a <_printf_float+0xbe>
 801196a:	f108 0801 	add.w	r8, r8, #1
 801196e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011970:	3b01      	subs	r3, #1
 8011972:	4543      	cmp	r3, r8
 8011974:	dcf1      	bgt.n	801195a <_printf_float+0x40e>
 8011976:	464b      	mov	r3, r9
 8011978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801197c:	e6da      	b.n	8011734 <_printf_float+0x1e8>
 801197e:	f04f 0800 	mov.w	r8, #0
 8011982:	f104 0a1a 	add.w	sl, r4, #26
 8011986:	e7f2      	b.n	801196e <_printf_float+0x422>
 8011988:	2301      	movs	r3, #1
 801198a:	4642      	mov	r2, r8
 801198c:	e7df      	b.n	801194e <_printf_float+0x402>
 801198e:	2301      	movs	r3, #1
 8011990:	464a      	mov	r2, r9
 8011992:	4631      	mov	r1, r6
 8011994:	4628      	mov	r0, r5
 8011996:	47b8      	blx	r7
 8011998:	3001      	adds	r0, #1
 801199a:	f43f ae36 	beq.w	801160a <_printf_float+0xbe>
 801199e:	f108 0801 	add.w	r8, r8, #1
 80119a2:	68e3      	ldr	r3, [r4, #12]
 80119a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119a6:	1a5b      	subs	r3, r3, r1
 80119a8:	4543      	cmp	r3, r8
 80119aa:	dcf0      	bgt.n	801198e <_printf_float+0x442>
 80119ac:	e6f8      	b.n	80117a0 <_printf_float+0x254>
 80119ae:	f04f 0800 	mov.w	r8, #0
 80119b2:	f104 0919 	add.w	r9, r4, #25
 80119b6:	e7f4      	b.n	80119a2 <_printf_float+0x456>

080119b8 <_printf_common>:
 80119b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119bc:	4616      	mov	r6, r2
 80119be:	4699      	mov	r9, r3
 80119c0:	688a      	ldr	r2, [r1, #8]
 80119c2:	690b      	ldr	r3, [r1, #16]
 80119c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119c8:	4293      	cmp	r3, r2
 80119ca:	bfb8      	it	lt
 80119cc:	4613      	movlt	r3, r2
 80119ce:	6033      	str	r3, [r6, #0]
 80119d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119d4:	4607      	mov	r7, r0
 80119d6:	460c      	mov	r4, r1
 80119d8:	b10a      	cbz	r2, 80119de <_printf_common+0x26>
 80119da:	3301      	adds	r3, #1
 80119dc:	6033      	str	r3, [r6, #0]
 80119de:	6823      	ldr	r3, [r4, #0]
 80119e0:	0699      	lsls	r1, r3, #26
 80119e2:	bf42      	ittt	mi
 80119e4:	6833      	ldrmi	r3, [r6, #0]
 80119e6:	3302      	addmi	r3, #2
 80119e8:	6033      	strmi	r3, [r6, #0]
 80119ea:	6825      	ldr	r5, [r4, #0]
 80119ec:	f015 0506 	ands.w	r5, r5, #6
 80119f0:	d106      	bne.n	8011a00 <_printf_common+0x48>
 80119f2:	f104 0a19 	add.w	sl, r4, #25
 80119f6:	68e3      	ldr	r3, [r4, #12]
 80119f8:	6832      	ldr	r2, [r6, #0]
 80119fa:	1a9b      	subs	r3, r3, r2
 80119fc:	42ab      	cmp	r3, r5
 80119fe:	dc26      	bgt.n	8011a4e <_printf_common+0x96>
 8011a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a04:	1e13      	subs	r3, r2, #0
 8011a06:	6822      	ldr	r2, [r4, #0]
 8011a08:	bf18      	it	ne
 8011a0a:	2301      	movne	r3, #1
 8011a0c:	0692      	lsls	r2, r2, #26
 8011a0e:	d42b      	bmi.n	8011a68 <_printf_common+0xb0>
 8011a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a14:	4649      	mov	r1, r9
 8011a16:	4638      	mov	r0, r7
 8011a18:	47c0      	blx	r8
 8011a1a:	3001      	adds	r0, #1
 8011a1c:	d01e      	beq.n	8011a5c <_printf_common+0xa4>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	6922      	ldr	r2, [r4, #16]
 8011a22:	f003 0306 	and.w	r3, r3, #6
 8011a26:	2b04      	cmp	r3, #4
 8011a28:	bf02      	ittt	eq
 8011a2a:	68e5      	ldreq	r5, [r4, #12]
 8011a2c:	6833      	ldreq	r3, [r6, #0]
 8011a2e:	1aed      	subeq	r5, r5, r3
 8011a30:	68a3      	ldr	r3, [r4, #8]
 8011a32:	bf0c      	ite	eq
 8011a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a38:	2500      	movne	r5, #0
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	bfc4      	itt	gt
 8011a3e:	1a9b      	subgt	r3, r3, r2
 8011a40:	18ed      	addgt	r5, r5, r3
 8011a42:	2600      	movs	r6, #0
 8011a44:	341a      	adds	r4, #26
 8011a46:	42b5      	cmp	r5, r6
 8011a48:	d11a      	bne.n	8011a80 <_printf_common+0xc8>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	e008      	b.n	8011a60 <_printf_common+0xa8>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	4652      	mov	r2, sl
 8011a52:	4649      	mov	r1, r9
 8011a54:	4638      	mov	r0, r7
 8011a56:	47c0      	blx	r8
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d103      	bne.n	8011a64 <_printf_common+0xac>
 8011a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a64:	3501      	adds	r5, #1
 8011a66:	e7c6      	b.n	80119f6 <_printf_common+0x3e>
 8011a68:	18e1      	adds	r1, r4, r3
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	2030      	movs	r0, #48	; 0x30
 8011a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a72:	4422      	add	r2, r4
 8011a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a7c:	3302      	adds	r3, #2
 8011a7e:	e7c7      	b.n	8011a10 <_printf_common+0x58>
 8011a80:	2301      	movs	r3, #1
 8011a82:	4622      	mov	r2, r4
 8011a84:	4649      	mov	r1, r9
 8011a86:	4638      	mov	r0, r7
 8011a88:	47c0      	blx	r8
 8011a8a:	3001      	adds	r0, #1
 8011a8c:	d0e6      	beq.n	8011a5c <_printf_common+0xa4>
 8011a8e:	3601      	adds	r6, #1
 8011a90:	e7d9      	b.n	8011a46 <_printf_common+0x8e>
	...

08011a94 <_printf_i>:
 8011a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a98:	7e0f      	ldrb	r7, [r1, #24]
 8011a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a9c:	2f78      	cmp	r7, #120	; 0x78
 8011a9e:	4691      	mov	r9, r2
 8011aa0:	4680      	mov	r8, r0
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	469a      	mov	sl, r3
 8011aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011aaa:	d807      	bhi.n	8011abc <_printf_i+0x28>
 8011aac:	2f62      	cmp	r7, #98	; 0x62
 8011aae:	d80a      	bhi.n	8011ac6 <_printf_i+0x32>
 8011ab0:	2f00      	cmp	r7, #0
 8011ab2:	f000 80d4 	beq.w	8011c5e <_printf_i+0x1ca>
 8011ab6:	2f58      	cmp	r7, #88	; 0x58
 8011ab8:	f000 80c0 	beq.w	8011c3c <_printf_i+0x1a8>
 8011abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ac4:	e03a      	b.n	8011b3c <_printf_i+0xa8>
 8011ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011aca:	2b15      	cmp	r3, #21
 8011acc:	d8f6      	bhi.n	8011abc <_printf_i+0x28>
 8011ace:	a101      	add	r1, pc, #4	; (adr r1, 8011ad4 <_printf_i+0x40>)
 8011ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ad4:	08011b2d 	.word	0x08011b2d
 8011ad8:	08011b41 	.word	0x08011b41
 8011adc:	08011abd 	.word	0x08011abd
 8011ae0:	08011abd 	.word	0x08011abd
 8011ae4:	08011abd 	.word	0x08011abd
 8011ae8:	08011abd 	.word	0x08011abd
 8011aec:	08011b41 	.word	0x08011b41
 8011af0:	08011abd 	.word	0x08011abd
 8011af4:	08011abd 	.word	0x08011abd
 8011af8:	08011abd 	.word	0x08011abd
 8011afc:	08011abd 	.word	0x08011abd
 8011b00:	08011c45 	.word	0x08011c45
 8011b04:	08011b6d 	.word	0x08011b6d
 8011b08:	08011bff 	.word	0x08011bff
 8011b0c:	08011abd 	.word	0x08011abd
 8011b10:	08011abd 	.word	0x08011abd
 8011b14:	08011c67 	.word	0x08011c67
 8011b18:	08011abd 	.word	0x08011abd
 8011b1c:	08011b6d 	.word	0x08011b6d
 8011b20:	08011abd 	.word	0x08011abd
 8011b24:	08011abd 	.word	0x08011abd
 8011b28:	08011c07 	.word	0x08011c07
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	1d1a      	adds	r2, r3, #4
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	602a      	str	r2, [r5, #0]
 8011b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e09f      	b.n	8011c80 <_printf_i+0x1ec>
 8011b40:	6820      	ldr	r0, [r4, #0]
 8011b42:	682b      	ldr	r3, [r5, #0]
 8011b44:	0607      	lsls	r7, r0, #24
 8011b46:	f103 0104 	add.w	r1, r3, #4
 8011b4a:	6029      	str	r1, [r5, #0]
 8011b4c:	d501      	bpl.n	8011b52 <_printf_i+0xbe>
 8011b4e:	681e      	ldr	r6, [r3, #0]
 8011b50:	e003      	b.n	8011b5a <_printf_i+0xc6>
 8011b52:	0646      	lsls	r6, r0, #25
 8011b54:	d5fb      	bpl.n	8011b4e <_printf_i+0xba>
 8011b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	da03      	bge.n	8011b66 <_printf_i+0xd2>
 8011b5e:	232d      	movs	r3, #45	; 0x2d
 8011b60:	4276      	negs	r6, r6
 8011b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b66:	485a      	ldr	r0, [pc, #360]	; (8011cd0 <_printf_i+0x23c>)
 8011b68:	230a      	movs	r3, #10
 8011b6a:	e012      	b.n	8011b92 <_printf_i+0xfe>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	6820      	ldr	r0, [r4, #0]
 8011b70:	1d19      	adds	r1, r3, #4
 8011b72:	6029      	str	r1, [r5, #0]
 8011b74:	0605      	lsls	r5, r0, #24
 8011b76:	d501      	bpl.n	8011b7c <_printf_i+0xe8>
 8011b78:	681e      	ldr	r6, [r3, #0]
 8011b7a:	e002      	b.n	8011b82 <_printf_i+0xee>
 8011b7c:	0641      	lsls	r1, r0, #25
 8011b7e:	d5fb      	bpl.n	8011b78 <_printf_i+0xe4>
 8011b80:	881e      	ldrh	r6, [r3, #0]
 8011b82:	4853      	ldr	r0, [pc, #332]	; (8011cd0 <_printf_i+0x23c>)
 8011b84:	2f6f      	cmp	r7, #111	; 0x6f
 8011b86:	bf0c      	ite	eq
 8011b88:	2308      	moveq	r3, #8
 8011b8a:	230a      	movne	r3, #10
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b92:	6865      	ldr	r5, [r4, #4]
 8011b94:	60a5      	str	r5, [r4, #8]
 8011b96:	2d00      	cmp	r5, #0
 8011b98:	bfa2      	ittt	ge
 8011b9a:	6821      	ldrge	r1, [r4, #0]
 8011b9c:	f021 0104 	bicge.w	r1, r1, #4
 8011ba0:	6021      	strge	r1, [r4, #0]
 8011ba2:	b90e      	cbnz	r6, 8011ba8 <_printf_i+0x114>
 8011ba4:	2d00      	cmp	r5, #0
 8011ba6:	d04b      	beq.n	8011c40 <_printf_i+0x1ac>
 8011ba8:	4615      	mov	r5, r2
 8011baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8011bae:	fb03 6711 	mls	r7, r3, r1, r6
 8011bb2:	5dc7      	ldrb	r7, [r0, r7]
 8011bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011bb8:	4637      	mov	r7, r6
 8011bba:	42bb      	cmp	r3, r7
 8011bbc:	460e      	mov	r6, r1
 8011bbe:	d9f4      	bls.n	8011baa <_printf_i+0x116>
 8011bc0:	2b08      	cmp	r3, #8
 8011bc2:	d10b      	bne.n	8011bdc <_printf_i+0x148>
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	07de      	lsls	r6, r3, #31
 8011bc8:	d508      	bpl.n	8011bdc <_printf_i+0x148>
 8011bca:	6923      	ldr	r3, [r4, #16]
 8011bcc:	6861      	ldr	r1, [r4, #4]
 8011bce:	4299      	cmp	r1, r3
 8011bd0:	bfde      	ittt	le
 8011bd2:	2330      	movle	r3, #48	; 0x30
 8011bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011bdc:	1b52      	subs	r2, r2, r5
 8011bde:	6122      	str	r2, [r4, #16]
 8011be0:	f8cd a000 	str.w	sl, [sp]
 8011be4:	464b      	mov	r3, r9
 8011be6:	aa03      	add	r2, sp, #12
 8011be8:	4621      	mov	r1, r4
 8011bea:	4640      	mov	r0, r8
 8011bec:	f7ff fee4 	bl	80119b8 <_printf_common>
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	d14a      	bne.n	8011c8a <_printf_i+0x1f6>
 8011bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf8:	b004      	add	sp, #16
 8011bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfe:	6823      	ldr	r3, [r4, #0]
 8011c00:	f043 0320 	orr.w	r3, r3, #32
 8011c04:	6023      	str	r3, [r4, #0]
 8011c06:	4833      	ldr	r0, [pc, #204]	; (8011cd4 <_printf_i+0x240>)
 8011c08:	2778      	movs	r7, #120	; 0x78
 8011c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	6829      	ldr	r1, [r5, #0]
 8011c12:	061f      	lsls	r7, r3, #24
 8011c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8011c18:	d402      	bmi.n	8011c20 <_printf_i+0x18c>
 8011c1a:	065f      	lsls	r7, r3, #25
 8011c1c:	bf48      	it	mi
 8011c1e:	b2b6      	uxthmi	r6, r6
 8011c20:	07df      	lsls	r7, r3, #31
 8011c22:	bf48      	it	mi
 8011c24:	f043 0320 	orrmi.w	r3, r3, #32
 8011c28:	6029      	str	r1, [r5, #0]
 8011c2a:	bf48      	it	mi
 8011c2c:	6023      	strmi	r3, [r4, #0]
 8011c2e:	b91e      	cbnz	r6, 8011c38 <_printf_i+0x1a4>
 8011c30:	6823      	ldr	r3, [r4, #0]
 8011c32:	f023 0320 	bic.w	r3, r3, #32
 8011c36:	6023      	str	r3, [r4, #0]
 8011c38:	2310      	movs	r3, #16
 8011c3a:	e7a7      	b.n	8011b8c <_printf_i+0xf8>
 8011c3c:	4824      	ldr	r0, [pc, #144]	; (8011cd0 <_printf_i+0x23c>)
 8011c3e:	e7e4      	b.n	8011c0a <_printf_i+0x176>
 8011c40:	4615      	mov	r5, r2
 8011c42:	e7bd      	b.n	8011bc0 <_printf_i+0x12c>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	6826      	ldr	r6, [r4, #0]
 8011c48:	6961      	ldr	r1, [r4, #20]
 8011c4a:	1d18      	adds	r0, r3, #4
 8011c4c:	6028      	str	r0, [r5, #0]
 8011c4e:	0635      	lsls	r5, r6, #24
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	d501      	bpl.n	8011c58 <_printf_i+0x1c4>
 8011c54:	6019      	str	r1, [r3, #0]
 8011c56:	e002      	b.n	8011c5e <_printf_i+0x1ca>
 8011c58:	0670      	lsls	r0, r6, #25
 8011c5a:	d5fb      	bpl.n	8011c54 <_printf_i+0x1c0>
 8011c5c:	8019      	strh	r1, [r3, #0]
 8011c5e:	2300      	movs	r3, #0
 8011c60:	6123      	str	r3, [r4, #16]
 8011c62:	4615      	mov	r5, r2
 8011c64:	e7bc      	b.n	8011be0 <_printf_i+0x14c>
 8011c66:	682b      	ldr	r3, [r5, #0]
 8011c68:	1d1a      	adds	r2, r3, #4
 8011c6a:	602a      	str	r2, [r5, #0]
 8011c6c:	681d      	ldr	r5, [r3, #0]
 8011c6e:	6862      	ldr	r2, [r4, #4]
 8011c70:	2100      	movs	r1, #0
 8011c72:	4628      	mov	r0, r5
 8011c74:	f7ee facc 	bl	8000210 <memchr>
 8011c78:	b108      	cbz	r0, 8011c7e <_printf_i+0x1ea>
 8011c7a:	1b40      	subs	r0, r0, r5
 8011c7c:	6060      	str	r0, [r4, #4]
 8011c7e:	6863      	ldr	r3, [r4, #4]
 8011c80:	6123      	str	r3, [r4, #16]
 8011c82:	2300      	movs	r3, #0
 8011c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c88:	e7aa      	b.n	8011be0 <_printf_i+0x14c>
 8011c8a:	6923      	ldr	r3, [r4, #16]
 8011c8c:	462a      	mov	r2, r5
 8011c8e:	4649      	mov	r1, r9
 8011c90:	4640      	mov	r0, r8
 8011c92:	47d0      	blx	sl
 8011c94:	3001      	adds	r0, #1
 8011c96:	d0ad      	beq.n	8011bf4 <_printf_i+0x160>
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	079b      	lsls	r3, r3, #30
 8011c9c:	d413      	bmi.n	8011cc6 <_printf_i+0x232>
 8011c9e:	68e0      	ldr	r0, [r4, #12]
 8011ca0:	9b03      	ldr	r3, [sp, #12]
 8011ca2:	4298      	cmp	r0, r3
 8011ca4:	bfb8      	it	lt
 8011ca6:	4618      	movlt	r0, r3
 8011ca8:	e7a6      	b.n	8011bf8 <_printf_i+0x164>
 8011caa:	2301      	movs	r3, #1
 8011cac:	4632      	mov	r2, r6
 8011cae:	4649      	mov	r1, r9
 8011cb0:	4640      	mov	r0, r8
 8011cb2:	47d0      	blx	sl
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	d09d      	beq.n	8011bf4 <_printf_i+0x160>
 8011cb8:	3501      	adds	r5, #1
 8011cba:	68e3      	ldr	r3, [r4, #12]
 8011cbc:	9903      	ldr	r1, [sp, #12]
 8011cbe:	1a5b      	subs	r3, r3, r1
 8011cc0:	42ab      	cmp	r3, r5
 8011cc2:	dcf2      	bgt.n	8011caa <_printf_i+0x216>
 8011cc4:	e7eb      	b.n	8011c9e <_printf_i+0x20a>
 8011cc6:	2500      	movs	r5, #0
 8011cc8:	f104 0619 	add.w	r6, r4, #25
 8011ccc:	e7f5      	b.n	8011cba <_printf_i+0x226>
 8011cce:	bf00      	nop
 8011cd0:	080149da 	.word	0x080149da
 8011cd4:	080149eb 	.word	0x080149eb

08011cd8 <std>:
 8011cd8:	2300      	movs	r3, #0
 8011cda:	b510      	push	{r4, lr}
 8011cdc:	4604      	mov	r4, r0
 8011cde:	e9c0 3300 	strd	r3, r3, [r0]
 8011ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ce6:	6083      	str	r3, [r0, #8]
 8011ce8:	8181      	strh	r1, [r0, #12]
 8011cea:	6643      	str	r3, [r0, #100]	; 0x64
 8011cec:	81c2      	strh	r2, [r0, #14]
 8011cee:	6183      	str	r3, [r0, #24]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	2208      	movs	r2, #8
 8011cf4:	305c      	adds	r0, #92	; 0x5c
 8011cf6:	f000 f926 	bl	8011f46 <memset>
 8011cfa:	4b0d      	ldr	r3, [pc, #52]	; (8011d30 <std+0x58>)
 8011cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8011cfe:	4b0d      	ldr	r3, [pc, #52]	; (8011d34 <std+0x5c>)
 8011d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d02:	4b0d      	ldr	r3, [pc, #52]	; (8011d38 <std+0x60>)
 8011d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d06:	4b0d      	ldr	r3, [pc, #52]	; (8011d3c <std+0x64>)
 8011d08:	6323      	str	r3, [r4, #48]	; 0x30
 8011d0a:	4b0d      	ldr	r3, [pc, #52]	; (8011d40 <std+0x68>)
 8011d0c:	6224      	str	r4, [r4, #32]
 8011d0e:	429c      	cmp	r4, r3
 8011d10:	d006      	beq.n	8011d20 <std+0x48>
 8011d12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011d16:	4294      	cmp	r4, r2
 8011d18:	d002      	beq.n	8011d20 <std+0x48>
 8011d1a:	33d0      	adds	r3, #208	; 0xd0
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	d105      	bne.n	8011d2c <std+0x54>
 8011d20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f000 b9e0 	b.w	80120ec <__retarget_lock_init_recursive>
 8011d2c:	bd10      	pop	{r4, pc}
 8011d2e:	bf00      	nop
 8011d30:	08011ec1 	.word	0x08011ec1
 8011d34:	08011ee3 	.word	0x08011ee3
 8011d38:	08011f1b 	.word	0x08011f1b
 8011d3c:	08011f3f 	.word	0x08011f3f
 8011d40:	200067b8 	.word	0x200067b8

08011d44 <stdio_exit_handler>:
 8011d44:	4a02      	ldr	r2, [pc, #8]	; (8011d50 <stdio_exit_handler+0xc>)
 8011d46:	4903      	ldr	r1, [pc, #12]	; (8011d54 <stdio_exit_handler+0x10>)
 8011d48:	4803      	ldr	r0, [pc, #12]	; (8011d58 <stdio_exit_handler+0x14>)
 8011d4a:	f000 b869 	b.w	8011e20 <_fwalk_sglue>
 8011d4e:	bf00      	nop
 8011d50:	20000028 	.word	0x20000028
 8011d54:	08013d41 	.word	0x08013d41
 8011d58:	20000034 	.word	0x20000034

08011d5c <cleanup_stdio>:
 8011d5c:	6841      	ldr	r1, [r0, #4]
 8011d5e:	4b0c      	ldr	r3, [pc, #48]	; (8011d90 <cleanup_stdio+0x34>)
 8011d60:	4299      	cmp	r1, r3
 8011d62:	b510      	push	{r4, lr}
 8011d64:	4604      	mov	r4, r0
 8011d66:	d001      	beq.n	8011d6c <cleanup_stdio+0x10>
 8011d68:	f001 ffea 	bl	8013d40 <_fflush_r>
 8011d6c:	68a1      	ldr	r1, [r4, #8]
 8011d6e:	4b09      	ldr	r3, [pc, #36]	; (8011d94 <cleanup_stdio+0x38>)
 8011d70:	4299      	cmp	r1, r3
 8011d72:	d002      	beq.n	8011d7a <cleanup_stdio+0x1e>
 8011d74:	4620      	mov	r0, r4
 8011d76:	f001 ffe3 	bl	8013d40 <_fflush_r>
 8011d7a:	68e1      	ldr	r1, [r4, #12]
 8011d7c:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <cleanup_stdio+0x3c>)
 8011d7e:	4299      	cmp	r1, r3
 8011d80:	d004      	beq.n	8011d8c <cleanup_stdio+0x30>
 8011d82:	4620      	mov	r0, r4
 8011d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d88:	f001 bfda 	b.w	8013d40 <_fflush_r>
 8011d8c:	bd10      	pop	{r4, pc}
 8011d8e:	bf00      	nop
 8011d90:	200067b8 	.word	0x200067b8
 8011d94:	20006820 	.word	0x20006820
 8011d98:	20006888 	.word	0x20006888

08011d9c <global_stdio_init.part.0>:
 8011d9c:	b510      	push	{r4, lr}
 8011d9e:	4b0b      	ldr	r3, [pc, #44]	; (8011dcc <global_stdio_init.part.0+0x30>)
 8011da0:	4c0b      	ldr	r4, [pc, #44]	; (8011dd0 <global_stdio_init.part.0+0x34>)
 8011da2:	4a0c      	ldr	r2, [pc, #48]	; (8011dd4 <global_stdio_init.part.0+0x38>)
 8011da4:	601a      	str	r2, [r3, #0]
 8011da6:	4620      	mov	r0, r4
 8011da8:	2200      	movs	r2, #0
 8011daa:	2104      	movs	r1, #4
 8011dac:	f7ff ff94 	bl	8011cd8 <std>
 8011db0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011db4:	2201      	movs	r2, #1
 8011db6:	2109      	movs	r1, #9
 8011db8:	f7ff ff8e 	bl	8011cd8 <std>
 8011dbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011dc0:	2202      	movs	r2, #2
 8011dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc6:	2112      	movs	r1, #18
 8011dc8:	f7ff bf86 	b.w	8011cd8 <std>
 8011dcc:	200068f0 	.word	0x200068f0
 8011dd0:	200067b8 	.word	0x200067b8
 8011dd4:	08011d45 	.word	0x08011d45

08011dd8 <__sfp_lock_acquire>:
 8011dd8:	4801      	ldr	r0, [pc, #4]	; (8011de0 <__sfp_lock_acquire+0x8>)
 8011dda:	f000 b988 	b.w	80120ee <__retarget_lock_acquire_recursive>
 8011dde:	bf00      	nop
 8011de0:	200068f9 	.word	0x200068f9

08011de4 <__sfp_lock_release>:
 8011de4:	4801      	ldr	r0, [pc, #4]	; (8011dec <__sfp_lock_release+0x8>)
 8011de6:	f000 b983 	b.w	80120f0 <__retarget_lock_release_recursive>
 8011dea:	bf00      	nop
 8011dec:	200068f9 	.word	0x200068f9

08011df0 <__sinit>:
 8011df0:	b510      	push	{r4, lr}
 8011df2:	4604      	mov	r4, r0
 8011df4:	f7ff fff0 	bl	8011dd8 <__sfp_lock_acquire>
 8011df8:	6a23      	ldr	r3, [r4, #32]
 8011dfa:	b11b      	cbz	r3, 8011e04 <__sinit+0x14>
 8011dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e00:	f7ff bff0 	b.w	8011de4 <__sfp_lock_release>
 8011e04:	4b04      	ldr	r3, [pc, #16]	; (8011e18 <__sinit+0x28>)
 8011e06:	6223      	str	r3, [r4, #32]
 8011e08:	4b04      	ldr	r3, [pc, #16]	; (8011e1c <__sinit+0x2c>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1f5      	bne.n	8011dfc <__sinit+0xc>
 8011e10:	f7ff ffc4 	bl	8011d9c <global_stdio_init.part.0>
 8011e14:	e7f2      	b.n	8011dfc <__sinit+0xc>
 8011e16:	bf00      	nop
 8011e18:	08011d5d 	.word	0x08011d5d
 8011e1c:	200068f0 	.word	0x200068f0

08011e20 <_fwalk_sglue>:
 8011e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e24:	4607      	mov	r7, r0
 8011e26:	4688      	mov	r8, r1
 8011e28:	4614      	mov	r4, r2
 8011e2a:	2600      	movs	r6, #0
 8011e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e30:	f1b9 0901 	subs.w	r9, r9, #1
 8011e34:	d505      	bpl.n	8011e42 <_fwalk_sglue+0x22>
 8011e36:	6824      	ldr	r4, [r4, #0]
 8011e38:	2c00      	cmp	r4, #0
 8011e3a:	d1f7      	bne.n	8011e2c <_fwalk_sglue+0xc>
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e42:	89ab      	ldrh	r3, [r5, #12]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d907      	bls.n	8011e58 <_fwalk_sglue+0x38>
 8011e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	d003      	beq.n	8011e58 <_fwalk_sglue+0x38>
 8011e50:	4629      	mov	r1, r5
 8011e52:	4638      	mov	r0, r7
 8011e54:	47c0      	blx	r8
 8011e56:	4306      	orrs	r6, r0
 8011e58:	3568      	adds	r5, #104	; 0x68
 8011e5a:	e7e9      	b.n	8011e30 <_fwalk_sglue+0x10>

08011e5c <iprintf>:
 8011e5c:	b40f      	push	{r0, r1, r2, r3}
 8011e5e:	b507      	push	{r0, r1, r2, lr}
 8011e60:	4906      	ldr	r1, [pc, #24]	; (8011e7c <iprintf+0x20>)
 8011e62:	ab04      	add	r3, sp, #16
 8011e64:	6808      	ldr	r0, [r1, #0]
 8011e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e6a:	6881      	ldr	r1, [r0, #8]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	f001 fdc7 	bl	8013a00 <_vfiprintf_r>
 8011e72:	b003      	add	sp, #12
 8011e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e78:	b004      	add	sp, #16
 8011e7a:	4770      	bx	lr
 8011e7c:	20000080 	.word	0x20000080

08011e80 <siprintf>:
 8011e80:	b40e      	push	{r1, r2, r3}
 8011e82:	b500      	push	{lr}
 8011e84:	b09c      	sub	sp, #112	; 0x70
 8011e86:	ab1d      	add	r3, sp, #116	; 0x74
 8011e88:	9002      	str	r0, [sp, #8]
 8011e8a:	9006      	str	r0, [sp, #24]
 8011e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e90:	4809      	ldr	r0, [pc, #36]	; (8011eb8 <siprintf+0x38>)
 8011e92:	9107      	str	r1, [sp, #28]
 8011e94:	9104      	str	r1, [sp, #16]
 8011e96:	4909      	ldr	r1, [pc, #36]	; (8011ebc <siprintf+0x3c>)
 8011e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e9c:	9105      	str	r1, [sp, #20]
 8011e9e:	6800      	ldr	r0, [r0, #0]
 8011ea0:	9301      	str	r3, [sp, #4]
 8011ea2:	a902      	add	r1, sp, #8
 8011ea4:	f001 fc84 	bl	80137b0 <_svfiprintf_r>
 8011ea8:	9b02      	ldr	r3, [sp, #8]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	701a      	strb	r2, [r3, #0]
 8011eae:	b01c      	add	sp, #112	; 0x70
 8011eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eb4:	b003      	add	sp, #12
 8011eb6:	4770      	bx	lr
 8011eb8:	20000080 	.word	0x20000080
 8011ebc:	ffff0208 	.word	0xffff0208

08011ec0 <__sread>:
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ec8:	f000 f8c2 	bl	8012050 <_read_r>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	bfab      	itete	ge
 8011ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ed4:	181b      	addge	r3, r3, r0
 8011ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011eda:	bfac      	ite	ge
 8011edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ede:	81a3      	strhlt	r3, [r4, #12]
 8011ee0:	bd10      	pop	{r4, pc}

08011ee2 <__swrite>:
 8011ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee6:	461f      	mov	r7, r3
 8011ee8:	898b      	ldrh	r3, [r1, #12]
 8011eea:	05db      	lsls	r3, r3, #23
 8011eec:	4605      	mov	r5, r0
 8011eee:	460c      	mov	r4, r1
 8011ef0:	4616      	mov	r6, r2
 8011ef2:	d505      	bpl.n	8011f00 <__swrite+0x1e>
 8011ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ef8:	2302      	movs	r3, #2
 8011efa:	2200      	movs	r2, #0
 8011efc:	f000 f896 	bl	801202c <_lseek_r>
 8011f00:	89a3      	ldrh	r3, [r4, #12]
 8011f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f0a:	81a3      	strh	r3, [r4, #12]
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	463b      	mov	r3, r7
 8011f10:	4628      	mov	r0, r5
 8011f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f16:	f000 b8ad 	b.w	8012074 <_write_r>

08011f1a <__sseek>:
 8011f1a:	b510      	push	{r4, lr}
 8011f1c:	460c      	mov	r4, r1
 8011f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f22:	f000 f883 	bl	801202c <_lseek_r>
 8011f26:	1c43      	adds	r3, r0, #1
 8011f28:	89a3      	ldrh	r3, [r4, #12]
 8011f2a:	bf15      	itete	ne
 8011f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f36:	81a3      	strheq	r3, [r4, #12]
 8011f38:	bf18      	it	ne
 8011f3a:	81a3      	strhne	r3, [r4, #12]
 8011f3c:	bd10      	pop	{r4, pc}

08011f3e <__sclose>:
 8011f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f42:	f000 b80d 	b.w	8011f60 <_close_r>

08011f46 <memset>:
 8011f46:	4402      	add	r2, r0
 8011f48:	4603      	mov	r3, r0
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d100      	bne.n	8011f50 <memset+0xa>
 8011f4e:	4770      	bx	lr
 8011f50:	f803 1b01 	strb.w	r1, [r3], #1
 8011f54:	e7f9      	b.n	8011f4a <memset+0x4>
	...

08011f58 <_localeconv_r>:
 8011f58:	4800      	ldr	r0, [pc, #0]	; (8011f5c <_localeconv_r+0x4>)
 8011f5a:	4770      	bx	lr
 8011f5c:	20000174 	.word	0x20000174

08011f60 <_close_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	4d06      	ldr	r5, [pc, #24]	; (8011f7c <_close_r+0x1c>)
 8011f64:	2300      	movs	r3, #0
 8011f66:	4604      	mov	r4, r0
 8011f68:	4608      	mov	r0, r1
 8011f6a:	602b      	str	r3, [r5, #0]
 8011f6c:	f7f1 fc37 	bl	80037de <_close>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_close_r+0x1a>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_close_r+0x1a>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	200068f4 	.word	0x200068f4

08011f80 <_reclaim_reent>:
 8011f80:	4b29      	ldr	r3, [pc, #164]	; (8012028 <_reclaim_reent+0xa8>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4283      	cmp	r3, r0
 8011f86:	b570      	push	{r4, r5, r6, lr}
 8011f88:	4604      	mov	r4, r0
 8011f8a:	d04b      	beq.n	8012024 <_reclaim_reent+0xa4>
 8011f8c:	69c3      	ldr	r3, [r0, #28]
 8011f8e:	b143      	cbz	r3, 8011fa2 <_reclaim_reent+0x22>
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d144      	bne.n	8012020 <_reclaim_reent+0xa0>
 8011f96:	69e3      	ldr	r3, [r4, #28]
 8011f98:	6819      	ldr	r1, [r3, #0]
 8011f9a:	b111      	cbz	r1, 8011fa2 <_reclaim_reent+0x22>
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f000 ff31 	bl	8012e04 <_free_r>
 8011fa2:	6961      	ldr	r1, [r4, #20]
 8011fa4:	b111      	cbz	r1, 8011fac <_reclaim_reent+0x2c>
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 ff2c 	bl	8012e04 <_free_r>
 8011fac:	69e1      	ldr	r1, [r4, #28]
 8011fae:	b111      	cbz	r1, 8011fb6 <_reclaim_reent+0x36>
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f000 ff27 	bl	8012e04 <_free_r>
 8011fb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011fb8:	b111      	cbz	r1, 8011fc0 <_reclaim_reent+0x40>
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f000 ff22 	bl	8012e04 <_free_r>
 8011fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fc2:	b111      	cbz	r1, 8011fca <_reclaim_reent+0x4a>
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f000 ff1d 	bl	8012e04 <_free_r>
 8011fca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011fcc:	b111      	cbz	r1, 8011fd4 <_reclaim_reent+0x54>
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 ff18 	bl	8012e04 <_free_r>
 8011fd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011fd6:	b111      	cbz	r1, 8011fde <_reclaim_reent+0x5e>
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 ff13 	bl	8012e04 <_free_r>
 8011fde:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011fe0:	b111      	cbz	r1, 8011fe8 <_reclaim_reent+0x68>
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f000 ff0e 	bl	8012e04 <_free_r>
 8011fe8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011fea:	b111      	cbz	r1, 8011ff2 <_reclaim_reent+0x72>
 8011fec:	4620      	mov	r0, r4
 8011fee:	f000 ff09 	bl	8012e04 <_free_r>
 8011ff2:	6a23      	ldr	r3, [r4, #32]
 8011ff4:	b1b3      	cbz	r3, 8012024 <_reclaim_reent+0xa4>
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ffc:	4718      	bx	r3
 8011ffe:	5949      	ldr	r1, [r1, r5]
 8012000:	b941      	cbnz	r1, 8012014 <_reclaim_reent+0x94>
 8012002:	3504      	adds	r5, #4
 8012004:	69e3      	ldr	r3, [r4, #28]
 8012006:	2d80      	cmp	r5, #128	; 0x80
 8012008:	68d9      	ldr	r1, [r3, #12]
 801200a:	d1f8      	bne.n	8011ffe <_reclaim_reent+0x7e>
 801200c:	4620      	mov	r0, r4
 801200e:	f000 fef9 	bl	8012e04 <_free_r>
 8012012:	e7c0      	b.n	8011f96 <_reclaim_reent+0x16>
 8012014:	680e      	ldr	r6, [r1, #0]
 8012016:	4620      	mov	r0, r4
 8012018:	f000 fef4 	bl	8012e04 <_free_r>
 801201c:	4631      	mov	r1, r6
 801201e:	e7ef      	b.n	8012000 <_reclaim_reent+0x80>
 8012020:	2500      	movs	r5, #0
 8012022:	e7ef      	b.n	8012004 <_reclaim_reent+0x84>
 8012024:	bd70      	pop	{r4, r5, r6, pc}
 8012026:	bf00      	nop
 8012028:	20000080 	.word	0x20000080

0801202c <_lseek_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4d07      	ldr	r5, [pc, #28]	; (801204c <_lseek_r+0x20>)
 8012030:	4604      	mov	r4, r0
 8012032:	4608      	mov	r0, r1
 8012034:	4611      	mov	r1, r2
 8012036:	2200      	movs	r2, #0
 8012038:	602a      	str	r2, [r5, #0]
 801203a:	461a      	mov	r2, r3
 801203c:	f7f1 fbf6 	bl	800382c <_lseek>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_lseek_r+0x1e>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_lseek_r+0x1e>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	200068f4 	.word	0x200068f4

08012050 <_read_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d07      	ldr	r5, [pc, #28]	; (8012070 <_read_r+0x20>)
 8012054:	4604      	mov	r4, r0
 8012056:	4608      	mov	r0, r1
 8012058:	4611      	mov	r1, r2
 801205a:	2200      	movs	r2, #0
 801205c:	602a      	str	r2, [r5, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	f7f1 fb84 	bl	800376c <_read>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_read_r+0x1e>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_read_r+0x1e>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	200068f4 	.word	0x200068f4

08012074 <_write_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d07      	ldr	r5, [pc, #28]	; (8012094 <_write_r+0x20>)
 8012078:	4604      	mov	r4, r0
 801207a:	4608      	mov	r0, r1
 801207c:	4611      	mov	r1, r2
 801207e:	2200      	movs	r2, #0
 8012080:	602a      	str	r2, [r5, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	f7f1 fb8f 	bl	80037a6 <_write>
 8012088:	1c43      	adds	r3, r0, #1
 801208a:	d102      	bne.n	8012092 <_write_r+0x1e>
 801208c:	682b      	ldr	r3, [r5, #0]
 801208e:	b103      	cbz	r3, 8012092 <_write_r+0x1e>
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	bd38      	pop	{r3, r4, r5, pc}
 8012094:	200068f4 	.word	0x200068f4

08012098 <__errno>:
 8012098:	4b01      	ldr	r3, [pc, #4]	; (80120a0 <__errno+0x8>)
 801209a:	6818      	ldr	r0, [r3, #0]
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20000080 	.word	0x20000080

080120a4 <__libc_init_array>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	4d0d      	ldr	r5, [pc, #52]	; (80120dc <__libc_init_array+0x38>)
 80120a8:	4c0d      	ldr	r4, [pc, #52]	; (80120e0 <__libc_init_array+0x3c>)
 80120aa:	1b64      	subs	r4, r4, r5
 80120ac:	10a4      	asrs	r4, r4, #2
 80120ae:	2600      	movs	r6, #0
 80120b0:	42a6      	cmp	r6, r4
 80120b2:	d109      	bne.n	80120c8 <__libc_init_array+0x24>
 80120b4:	4d0b      	ldr	r5, [pc, #44]	; (80120e4 <__libc_init_array+0x40>)
 80120b6:	4c0c      	ldr	r4, [pc, #48]	; (80120e8 <__libc_init_array+0x44>)
 80120b8:	f002 f896 	bl	80141e8 <_init>
 80120bc:	1b64      	subs	r4, r4, r5
 80120be:	10a4      	asrs	r4, r4, #2
 80120c0:	2600      	movs	r6, #0
 80120c2:	42a6      	cmp	r6, r4
 80120c4:	d105      	bne.n	80120d2 <__libc_init_array+0x2e>
 80120c6:	bd70      	pop	{r4, r5, r6, pc}
 80120c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80120cc:	4798      	blx	r3
 80120ce:	3601      	adds	r6, #1
 80120d0:	e7ee      	b.n	80120b0 <__libc_init_array+0xc>
 80120d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80120d6:	4798      	blx	r3
 80120d8:	3601      	adds	r6, #1
 80120da:	e7f2      	b.n	80120c2 <__libc_init_array+0x1e>
 80120dc:	08014d44 	.word	0x08014d44
 80120e0:	08014d44 	.word	0x08014d44
 80120e4:	08014d44 	.word	0x08014d44
 80120e8:	08014d48 	.word	0x08014d48

080120ec <__retarget_lock_init_recursive>:
 80120ec:	4770      	bx	lr

080120ee <__retarget_lock_acquire_recursive>:
 80120ee:	4770      	bx	lr

080120f0 <__retarget_lock_release_recursive>:
 80120f0:	4770      	bx	lr

080120f2 <memcpy>:
 80120f2:	440a      	add	r2, r1
 80120f4:	4291      	cmp	r1, r2
 80120f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80120fa:	d100      	bne.n	80120fe <memcpy+0xc>
 80120fc:	4770      	bx	lr
 80120fe:	b510      	push	{r4, lr}
 8012100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012108:	4291      	cmp	r1, r2
 801210a:	d1f9      	bne.n	8012100 <memcpy+0xe>
 801210c:	bd10      	pop	{r4, pc}

0801210e <quorem>:
 801210e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012112:	6903      	ldr	r3, [r0, #16]
 8012114:	690c      	ldr	r4, [r1, #16]
 8012116:	42a3      	cmp	r3, r4
 8012118:	4607      	mov	r7, r0
 801211a:	db7e      	blt.n	801221a <quorem+0x10c>
 801211c:	3c01      	subs	r4, #1
 801211e:	f101 0814 	add.w	r8, r1, #20
 8012122:	f100 0514 	add.w	r5, r0, #20
 8012126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801212a:	9301      	str	r3, [sp, #4]
 801212c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012134:	3301      	adds	r3, #1
 8012136:	429a      	cmp	r2, r3
 8012138:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801213c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012140:	fbb2 f6f3 	udiv	r6, r2, r3
 8012144:	d331      	bcc.n	80121aa <quorem+0x9c>
 8012146:	f04f 0e00 	mov.w	lr, #0
 801214a:	4640      	mov	r0, r8
 801214c:	46ac      	mov	ip, r5
 801214e:	46f2      	mov	sl, lr
 8012150:	f850 2b04 	ldr.w	r2, [r0], #4
 8012154:	b293      	uxth	r3, r2
 8012156:	fb06 e303 	mla	r3, r6, r3, lr
 801215a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801215e:	0c1a      	lsrs	r2, r3, #16
 8012160:	b29b      	uxth	r3, r3
 8012162:	ebaa 0303 	sub.w	r3, sl, r3
 8012166:	f8dc a000 	ldr.w	sl, [ip]
 801216a:	fa13 f38a 	uxtah	r3, r3, sl
 801216e:	fb06 220e 	mla	r2, r6, lr, r2
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	9b00      	ldr	r3, [sp, #0]
 8012176:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801217a:	b292      	uxth	r2, r2
 801217c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012184:	f8bd 3000 	ldrh.w	r3, [sp]
 8012188:	4581      	cmp	r9, r0
 801218a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801218e:	f84c 3b04 	str.w	r3, [ip], #4
 8012192:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012196:	d2db      	bcs.n	8012150 <quorem+0x42>
 8012198:	f855 300b 	ldr.w	r3, [r5, fp]
 801219c:	b92b      	cbnz	r3, 80121aa <quorem+0x9c>
 801219e:	9b01      	ldr	r3, [sp, #4]
 80121a0:	3b04      	subs	r3, #4
 80121a2:	429d      	cmp	r5, r3
 80121a4:	461a      	mov	r2, r3
 80121a6:	d32c      	bcc.n	8012202 <quorem+0xf4>
 80121a8:	613c      	str	r4, [r7, #16]
 80121aa:	4638      	mov	r0, r7
 80121ac:	f001 f9a6 	bl	80134fc <__mcmp>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	db22      	blt.n	80121fa <quorem+0xec>
 80121b4:	3601      	adds	r6, #1
 80121b6:	4629      	mov	r1, r5
 80121b8:	2000      	movs	r0, #0
 80121ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80121be:	f8d1 c000 	ldr.w	ip, [r1]
 80121c2:	b293      	uxth	r3, r2
 80121c4:	1ac3      	subs	r3, r0, r3
 80121c6:	0c12      	lsrs	r2, r2, #16
 80121c8:	fa13 f38c 	uxtah	r3, r3, ip
 80121cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80121d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121da:	45c1      	cmp	r9, r8
 80121dc:	f841 3b04 	str.w	r3, [r1], #4
 80121e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80121e4:	d2e9      	bcs.n	80121ba <quorem+0xac>
 80121e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121ee:	b922      	cbnz	r2, 80121fa <quorem+0xec>
 80121f0:	3b04      	subs	r3, #4
 80121f2:	429d      	cmp	r5, r3
 80121f4:	461a      	mov	r2, r3
 80121f6:	d30a      	bcc.n	801220e <quorem+0x100>
 80121f8:	613c      	str	r4, [r7, #16]
 80121fa:	4630      	mov	r0, r6
 80121fc:	b003      	add	sp, #12
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012202:	6812      	ldr	r2, [r2, #0]
 8012204:	3b04      	subs	r3, #4
 8012206:	2a00      	cmp	r2, #0
 8012208:	d1ce      	bne.n	80121a8 <quorem+0x9a>
 801220a:	3c01      	subs	r4, #1
 801220c:	e7c9      	b.n	80121a2 <quorem+0x94>
 801220e:	6812      	ldr	r2, [r2, #0]
 8012210:	3b04      	subs	r3, #4
 8012212:	2a00      	cmp	r2, #0
 8012214:	d1f0      	bne.n	80121f8 <quorem+0xea>
 8012216:	3c01      	subs	r4, #1
 8012218:	e7eb      	b.n	80121f2 <quorem+0xe4>
 801221a:	2000      	movs	r0, #0
 801221c:	e7ee      	b.n	80121fc <quorem+0xee>
	...

08012220 <_dtoa_r>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	ed2d 8b04 	vpush	{d8-d9}
 8012228:	69c5      	ldr	r5, [r0, #28]
 801222a:	b093      	sub	sp, #76	; 0x4c
 801222c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012230:	ec57 6b10 	vmov	r6, r7, d0
 8012234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012238:	9107      	str	r1, [sp, #28]
 801223a:	4604      	mov	r4, r0
 801223c:	920a      	str	r2, [sp, #40]	; 0x28
 801223e:	930d      	str	r3, [sp, #52]	; 0x34
 8012240:	b975      	cbnz	r5, 8012260 <_dtoa_r+0x40>
 8012242:	2010      	movs	r0, #16
 8012244:	f000 fe2a 	bl	8012e9c <malloc>
 8012248:	4602      	mov	r2, r0
 801224a:	61e0      	str	r0, [r4, #28]
 801224c:	b920      	cbnz	r0, 8012258 <_dtoa_r+0x38>
 801224e:	4bae      	ldr	r3, [pc, #696]	; (8012508 <_dtoa_r+0x2e8>)
 8012250:	21ef      	movs	r1, #239	; 0xef
 8012252:	48ae      	ldr	r0, [pc, #696]	; (801250c <_dtoa_r+0x2ec>)
 8012254:	f001 fe5c 	bl	8013f10 <__assert_func>
 8012258:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801225c:	6005      	str	r5, [r0, #0]
 801225e:	60c5      	str	r5, [r0, #12]
 8012260:	69e3      	ldr	r3, [r4, #28]
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	b151      	cbz	r1, 801227c <_dtoa_r+0x5c>
 8012266:	685a      	ldr	r2, [r3, #4]
 8012268:	604a      	str	r2, [r1, #4]
 801226a:	2301      	movs	r3, #1
 801226c:	4093      	lsls	r3, r2
 801226e:	608b      	str	r3, [r1, #8]
 8012270:	4620      	mov	r0, r4
 8012272:	f000 ff07 	bl	8013084 <_Bfree>
 8012276:	69e3      	ldr	r3, [r4, #28]
 8012278:	2200      	movs	r2, #0
 801227a:	601a      	str	r2, [r3, #0]
 801227c:	1e3b      	subs	r3, r7, #0
 801227e:	bfbb      	ittet	lt
 8012280:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012284:	9303      	strlt	r3, [sp, #12]
 8012286:	2300      	movge	r3, #0
 8012288:	2201      	movlt	r2, #1
 801228a:	bfac      	ite	ge
 801228c:	f8c8 3000 	strge.w	r3, [r8]
 8012290:	f8c8 2000 	strlt.w	r2, [r8]
 8012294:	4b9e      	ldr	r3, [pc, #632]	; (8012510 <_dtoa_r+0x2f0>)
 8012296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801229a:	ea33 0308 	bics.w	r3, r3, r8
 801229e:	d11b      	bne.n	80122d8 <_dtoa_r+0xb8>
 80122a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80122a6:	6013      	str	r3, [r2, #0]
 80122a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80122ac:	4333      	orrs	r3, r6
 80122ae:	f000 8593 	beq.w	8012dd8 <_dtoa_r+0xbb8>
 80122b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122b4:	b963      	cbnz	r3, 80122d0 <_dtoa_r+0xb0>
 80122b6:	4b97      	ldr	r3, [pc, #604]	; (8012514 <_dtoa_r+0x2f4>)
 80122b8:	e027      	b.n	801230a <_dtoa_r+0xea>
 80122ba:	4b97      	ldr	r3, [pc, #604]	; (8012518 <_dtoa_r+0x2f8>)
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	3308      	adds	r3, #8
 80122c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122c2:	6013      	str	r3, [r2, #0]
 80122c4:	9800      	ldr	r0, [sp, #0]
 80122c6:	b013      	add	sp, #76	; 0x4c
 80122c8:	ecbd 8b04 	vpop	{d8-d9}
 80122cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d0:	4b90      	ldr	r3, [pc, #576]	; (8012514 <_dtoa_r+0x2f4>)
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	3303      	adds	r3, #3
 80122d6:	e7f3      	b.n	80122c0 <_dtoa_r+0xa0>
 80122d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122dc:	2200      	movs	r2, #0
 80122de:	ec51 0b17 	vmov	r0, r1, d7
 80122e2:	eeb0 8a47 	vmov.f32	s16, s14
 80122e6:	eef0 8a67 	vmov.f32	s17, s15
 80122ea:	2300      	movs	r3, #0
 80122ec:	f7ee fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80122f0:	4681      	mov	r9, r0
 80122f2:	b160      	cbz	r0, 801230e <_dtoa_r+0xee>
 80122f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122f6:	2301      	movs	r3, #1
 80122f8:	6013      	str	r3, [r2, #0]
 80122fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 8568 	beq.w	8012dd2 <_dtoa_r+0xbb2>
 8012302:	4b86      	ldr	r3, [pc, #536]	; (801251c <_dtoa_r+0x2fc>)
 8012304:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012306:	6013      	str	r3, [r2, #0]
 8012308:	3b01      	subs	r3, #1
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	e7da      	b.n	80122c4 <_dtoa_r+0xa4>
 801230e:	aa10      	add	r2, sp, #64	; 0x40
 8012310:	a911      	add	r1, sp, #68	; 0x44
 8012312:	4620      	mov	r0, r4
 8012314:	eeb0 0a48 	vmov.f32	s0, s16
 8012318:	eef0 0a68 	vmov.f32	s1, s17
 801231c:	f001 f994 	bl	8013648 <__d2b>
 8012320:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012324:	4682      	mov	sl, r0
 8012326:	2d00      	cmp	r5, #0
 8012328:	d07f      	beq.n	801242a <_dtoa_r+0x20a>
 801232a:	ee18 3a90 	vmov	r3, s17
 801232e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012332:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012336:	ec51 0b18 	vmov	r0, r1, d8
 801233a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801233e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012342:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012346:	4619      	mov	r1, r3
 8012348:	2200      	movs	r2, #0
 801234a:	4b75      	ldr	r3, [pc, #468]	; (8012520 <_dtoa_r+0x300>)
 801234c:	f7ed ffbc 	bl	80002c8 <__aeabi_dsub>
 8012350:	a367      	add	r3, pc, #412	; (adr r3, 80124f0 <_dtoa_r+0x2d0>)
 8012352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012356:	f7ee f96f 	bl	8000638 <__aeabi_dmul>
 801235a:	a367      	add	r3, pc, #412	; (adr r3, 80124f8 <_dtoa_r+0x2d8>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ed ffb4 	bl	80002cc <__adddf3>
 8012364:	4606      	mov	r6, r0
 8012366:	4628      	mov	r0, r5
 8012368:	460f      	mov	r7, r1
 801236a:	f7ee f8fb 	bl	8000564 <__aeabi_i2d>
 801236e:	a364      	add	r3, pc, #400	; (adr r3, 8012500 <_dtoa_r+0x2e0>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f7ee f960 	bl	8000638 <__aeabi_dmul>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	4630      	mov	r0, r6
 801237e:	4639      	mov	r1, r7
 8012380:	f7ed ffa4 	bl	80002cc <__adddf3>
 8012384:	4606      	mov	r6, r0
 8012386:	460f      	mov	r7, r1
 8012388:	f7ee fc06 	bl	8000b98 <__aeabi_d2iz>
 801238c:	2200      	movs	r2, #0
 801238e:	4683      	mov	fp, r0
 8012390:	2300      	movs	r3, #0
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ee fbc1 	bl	8000b1c <__aeabi_dcmplt>
 801239a:	b148      	cbz	r0, 80123b0 <_dtoa_r+0x190>
 801239c:	4658      	mov	r0, fp
 801239e:	f7ee f8e1 	bl	8000564 <__aeabi_i2d>
 80123a2:	4632      	mov	r2, r6
 80123a4:	463b      	mov	r3, r7
 80123a6:	f7ee fbaf 	bl	8000b08 <__aeabi_dcmpeq>
 80123aa:	b908      	cbnz	r0, 80123b0 <_dtoa_r+0x190>
 80123ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123b0:	f1bb 0f16 	cmp.w	fp, #22
 80123b4:	d857      	bhi.n	8012466 <_dtoa_r+0x246>
 80123b6:	4b5b      	ldr	r3, [pc, #364]	; (8012524 <_dtoa_r+0x304>)
 80123b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	ec51 0b18 	vmov	r0, r1, d8
 80123c4:	f7ee fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d04e      	beq.n	801246a <_dtoa_r+0x24a>
 80123cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123d0:	2300      	movs	r3, #0
 80123d2:	930c      	str	r3, [sp, #48]	; 0x30
 80123d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123d6:	1b5b      	subs	r3, r3, r5
 80123d8:	1e5a      	subs	r2, r3, #1
 80123da:	bf45      	ittet	mi
 80123dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80123e0:	9305      	strmi	r3, [sp, #20]
 80123e2:	2300      	movpl	r3, #0
 80123e4:	2300      	movmi	r3, #0
 80123e6:	9206      	str	r2, [sp, #24]
 80123e8:	bf54      	ite	pl
 80123ea:	9305      	strpl	r3, [sp, #20]
 80123ec:	9306      	strmi	r3, [sp, #24]
 80123ee:	f1bb 0f00 	cmp.w	fp, #0
 80123f2:	db3c      	blt.n	801246e <_dtoa_r+0x24e>
 80123f4:	9b06      	ldr	r3, [sp, #24]
 80123f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80123fa:	445b      	add	r3, fp
 80123fc:	9306      	str	r3, [sp, #24]
 80123fe:	2300      	movs	r3, #0
 8012400:	9308      	str	r3, [sp, #32]
 8012402:	9b07      	ldr	r3, [sp, #28]
 8012404:	2b09      	cmp	r3, #9
 8012406:	d868      	bhi.n	80124da <_dtoa_r+0x2ba>
 8012408:	2b05      	cmp	r3, #5
 801240a:	bfc4      	itt	gt
 801240c:	3b04      	subgt	r3, #4
 801240e:	9307      	strgt	r3, [sp, #28]
 8012410:	9b07      	ldr	r3, [sp, #28]
 8012412:	f1a3 0302 	sub.w	r3, r3, #2
 8012416:	bfcc      	ite	gt
 8012418:	2500      	movgt	r5, #0
 801241a:	2501      	movle	r5, #1
 801241c:	2b03      	cmp	r3, #3
 801241e:	f200 8085 	bhi.w	801252c <_dtoa_r+0x30c>
 8012422:	e8df f003 	tbb	[pc, r3]
 8012426:	3b2e      	.short	0x3b2e
 8012428:	5839      	.short	0x5839
 801242a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801242e:	441d      	add	r5, r3
 8012430:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012434:	2b20      	cmp	r3, #32
 8012436:	bfc1      	itttt	gt
 8012438:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801243c:	fa08 f803 	lslgt.w	r8, r8, r3
 8012440:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012444:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012448:	bfd6      	itet	le
 801244a:	f1c3 0320 	rsble	r3, r3, #32
 801244e:	ea48 0003 	orrgt.w	r0, r8, r3
 8012452:	fa06 f003 	lslle.w	r0, r6, r3
 8012456:	f7ee f875 	bl	8000544 <__aeabi_ui2d>
 801245a:	2201      	movs	r2, #1
 801245c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012460:	3d01      	subs	r5, #1
 8012462:	920e      	str	r2, [sp, #56]	; 0x38
 8012464:	e76f      	b.n	8012346 <_dtoa_r+0x126>
 8012466:	2301      	movs	r3, #1
 8012468:	e7b3      	b.n	80123d2 <_dtoa_r+0x1b2>
 801246a:	900c      	str	r0, [sp, #48]	; 0x30
 801246c:	e7b2      	b.n	80123d4 <_dtoa_r+0x1b4>
 801246e:	9b05      	ldr	r3, [sp, #20]
 8012470:	eba3 030b 	sub.w	r3, r3, fp
 8012474:	9305      	str	r3, [sp, #20]
 8012476:	f1cb 0300 	rsb	r3, fp, #0
 801247a:	9308      	str	r3, [sp, #32]
 801247c:	2300      	movs	r3, #0
 801247e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012480:	e7bf      	b.n	8012402 <_dtoa_r+0x1e2>
 8012482:	2300      	movs	r3, #0
 8012484:	9309      	str	r3, [sp, #36]	; 0x24
 8012486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012488:	2b00      	cmp	r3, #0
 801248a:	dc52      	bgt.n	8012532 <_dtoa_r+0x312>
 801248c:	2301      	movs	r3, #1
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	9304      	str	r3, [sp, #16]
 8012492:	461a      	mov	r2, r3
 8012494:	920a      	str	r2, [sp, #40]	; 0x28
 8012496:	e00b      	b.n	80124b0 <_dtoa_r+0x290>
 8012498:	2301      	movs	r3, #1
 801249a:	e7f3      	b.n	8012484 <_dtoa_r+0x264>
 801249c:	2300      	movs	r3, #0
 801249e:	9309      	str	r3, [sp, #36]	; 0x24
 80124a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124a2:	445b      	add	r3, fp
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	3301      	adds	r3, #1
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	9304      	str	r3, [sp, #16]
 80124ac:	bfb8      	it	lt
 80124ae:	2301      	movlt	r3, #1
 80124b0:	69e0      	ldr	r0, [r4, #28]
 80124b2:	2100      	movs	r1, #0
 80124b4:	2204      	movs	r2, #4
 80124b6:	f102 0614 	add.w	r6, r2, #20
 80124ba:	429e      	cmp	r6, r3
 80124bc:	d93d      	bls.n	801253a <_dtoa_r+0x31a>
 80124be:	6041      	str	r1, [r0, #4]
 80124c0:	4620      	mov	r0, r4
 80124c2:	f000 fd9f 	bl	8013004 <_Balloc>
 80124c6:	9000      	str	r0, [sp, #0]
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d139      	bne.n	8012540 <_dtoa_r+0x320>
 80124cc:	4b16      	ldr	r3, [pc, #88]	; (8012528 <_dtoa_r+0x308>)
 80124ce:	4602      	mov	r2, r0
 80124d0:	f240 11af 	movw	r1, #431	; 0x1af
 80124d4:	e6bd      	b.n	8012252 <_dtoa_r+0x32>
 80124d6:	2301      	movs	r3, #1
 80124d8:	e7e1      	b.n	801249e <_dtoa_r+0x27e>
 80124da:	2501      	movs	r5, #1
 80124dc:	2300      	movs	r3, #0
 80124de:	9307      	str	r3, [sp, #28]
 80124e0:	9509      	str	r5, [sp, #36]	; 0x24
 80124e2:	f04f 33ff 	mov.w	r3, #4294967295
 80124e6:	9301      	str	r3, [sp, #4]
 80124e8:	9304      	str	r3, [sp, #16]
 80124ea:	2200      	movs	r2, #0
 80124ec:	2312      	movs	r3, #18
 80124ee:	e7d1      	b.n	8012494 <_dtoa_r+0x274>
 80124f0:	636f4361 	.word	0x636f4361
 80124f4:	3fd287a7 	.word	0x3fd287a7
 80124f8:	8b60c8b3 	.word	0x8b60c8b3
 80124fc:	3fc68a28 	.word	0x3fc68a28
 8012500:	509f79fb 	.word	0x509f79fb
 8012504:	3fd34413 	.word	0x3fd34413
 8012508:	08014a09 	.word	0x08014a09
 801250c:	08014a20 	.word	0x08014a20
 8012510:	7ff00000 	.word	0x7ff00000
 8012514:	08014a05 	.word	0x08014a05
 8012518:	080149fc 	.word	0x080149fc
 801251c:	080149d9 	.word	0x080149d9
 8012520:	3ff80000 	.word	0x3ff80000
 8012524:	08014b10 	.word	0x08014b10
 8012528:	08014a78 	.word	0x08014a78
 801252c:	2301      	movs	r3, #1
 801252e:	9309      	str	r3, [sp, #36]	; 0x24
 8012530:	e7d7      	b.n	80124e2 <_dtoa_r+0x2c2>
 8012532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012534:	9301      	str	r3, [sp, #4]
 8012536:	9304      	str	r3, [sp, #16]
 8012538:	e7ba      	b.n	80124b0 <_dtoa_r+0x290>
 801253a:	3101      	adds	r1, #1
 801253c:	0052      	lsls	r2, r2, #1
 801253e:	e7ba      	b.n	80124b6 <_dtoa_r+0x296>
 8012540:	69e3      	ldr	r3, [r4, #28]
 8012542:	9a00      	ldr	r2, [sp, #0]
 8012544:	601a      	str	r2, [r3, #0]
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	2b0e      	cmp	r3, #14
 801254a:	f200 80a8 	bhi.w	801269e <_dtoa_r+0x47e>
 801254e:	2d00      	cmp	r5, #0
 8012550:	f000 80a5 	beq.w	801269e <_dtoa_r+0x47e>
 8012554:	f1bb 0f00 	cmp.w	fp, #0
 8012558:	dd38      	ble.n	80125cc <_dtoa_r+0x3ac>
 801255a:	4bc0      	ldr	r3, [pc, #768]	; (801285c <_dtoa_r+0x63c>)
 801255c:	f00b 020f 	and.w	r2, fp, #15
 8012560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012564:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012568:	e9d3 6700 	ldrd	r6, r7, [r3]
 801256c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012570:	d019      	beq.n	80125a6 <_dtoa_r+0x386>
 8012572:	4bbb      	ldr	r3, [pc, #748]	; (8012860 <_dtoa_r+0x640>)
 8012574:	ec51 0b18 	vmov	r0, r1, d8
 8012578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801257c:	f7ee f986 	bl	800088c <__aeabi_ddiv>
 8012580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012584:	f008 080f 	and.w	r8, r8, #15
 8012588:	2503      	movs	r5, #3
 801258a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012860 <_dtoa_r+0x640>
 801258e:	f1b8 0f00 	cmp.w	r8, #0
 8012592:	d10a      	bne.n	80125aa <_dtoa_r+0x38a>
 8012594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012598:	4632      	mov	r2, r6
 801259a:	463b      	mov	r3, r7
 801259c:	f7ee f976 	bl	800088c <__aeabi_ddiv>
 80125a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125a4:	e02b      	b.n	80125fe <_dtoa_r+0x3de>
 80125a6:	2502      	movs	r5, #2
 80125a8:	e7ef      	b.n	801258a <_dtoa_r+0x36a>
 80125aa:	f018 0f01 	tst.w	r8, #1
 80125ae:	d008      	beq.n	80125c2 <_dtoa_r+0x3a2>
 80125b0:	4630      	mov	r0, r6
 80125b2:	4639      	mov	r1, r7
 80125b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80125b8:	f7ee f83e 	bl	8000638 <__aeabi_dmul>
 80125bc:	3501      	adds	r5, #1
 80125be:	4606      	mov	r6, r0
 80125c0:	460f      	mov	r7, r1
 80125c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80125c6:	f109 0908 	add.w	r9, r9, #8
 80125ca:	e7e0      	b.n	801258e <_dtoa_r+0x36e>
 80125cc:	f000 809f 	beq.w	801270e <_dtoa_r+0x4ee>
 80125d0:	f1cb 0600 	rsb	r6, fp, #0
 80125d4:	4ba1      	ldr	r3, [pc, #644]	; (801285c <_dtoa_r+0x63c>)
 80125d6:	4fa2      	ldr	r7, [pc, #648]	; (8012860 <_dtoa_r+0x640>)
 80125d8:	f006 020f 	and.w	r2, r6, #15
 80125dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e4:	ec51 0b18 	vmov	r0, r1, d8
 80125e8:	f7ee f826 	bl	8000638 <__aeabi_dmul>
 80125ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125f0:	1136      	asrs	r6, r6, #4
 80125f2:	2300      	movs	r3, #0
 80125f4:	2502      	movs	r5, #2
 80125f6:	2e00      	cmp	r6, #0
 80125f8:	d17e      	bne.n	80126f8 <_dtoa_r+0x4d8>
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d1d0      	bne.n	80125a0 <_dtoa_r+0x380>
 80125fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012600:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 8084 	beq.w	8012712 <_dtoa_r+0x4f2>
 801260a:	4b96      	ldr	r3, [pc, #600]	; (8012864 <_dtoa_r+0x644>)
 801260c:	2200      	movs	r2, #0
 801260e:	4640      	mov	r0, r8
 8012610:	4649      	mov	r1, r9
 8012612:	f7ee fa83 	bl	8000b1c <__aeabi_dcmplt>
 8012616:	2800      	cmp	r0, #0
 8012618:	d07b      	beq.n	8012712 <_dtoa_r+0x4f2>
 801261a:	9b04      	ldr	r3, [sp, #16]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d078      	beq.n	8012712 <_dtoa_r+0x4f2>
 8012620:	9b01      	ldr	r3, [sp, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	dd39      	ble.n	801269a <_dtoa_r+0x47a>
 8012626:	4b90      	ldr	r3, [pc, #576]	; (8012868 <_dtoa_r+0x648>)
 8012628:	2200      	movs	r2, #0
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ee f803 	bl	8000638 <__aeabi_dmul>
 8012632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012636:	9e01      	ldr	r6, [sp, #4]
 8012638:	f10b 37ff 	add.w	r7, fp, #4294967295
 801263c:	3501      	adds	r5, #1
 801263e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012642:	4628      	mov	r0, r5
 8012644:	f7ed ff8e 	bl	8000564 <__aeabi_i2d>
 8012648:	4642      	mov	r2, r8
 801264a:	464b      	mov	r3, r9
 801264c:	f7ed fff4 	bl	8000638 <__aeabi_dmul>
 8012650:	4b86      	ldr	r3, [pc, #536]	; (801286c <_dtoa_r+0x64c>)
 8012652:	2200      	movs	r2, #0
 8012654:	f7ed fe3a 	bl	80002cc <__adddf3>
 8012658:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801265c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012660:	9303      	str	r3, [sp, #12]
 8012662:	2e00      	cmp	r6, #0
 8012664:	d158      	bne.n	8012718 <_dtoa_r+0x4f8>
 8012666:	4b82      	ldr	r3, [pc, #520]	; (8012870 <_dtoa_r+0x650>)
 8012668:	2200      	movs	r2, #0
 801266a:	4640      	mov	r0, r8
 801266c:	4649      	mov	r1, r9
 801266e:	f7ed fe2b 	bl	80002c8 <__aeabi_dsub>
 8012672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012676:	4680      	mov	r8, r0
 8012678:	4689      	mov	r9, r1
 801267a:	f7ee fa6d 	bl	8000b58 <__aeabi_dcmpgt>
 801267e:	2800      	cmp	r0, #0
 8012680:	f040 8296 	bne.w	8012bb0 <_dtoa_r+0x990>
 8012684:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012688:	4640      	mov	r0, r8
 801268a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801268e:	4649      	mov	r1, r9
 8012690:	f7ee fa44 	bl	8000b1c <__aeabi_dcmplt>
 8012694:	2800      	cmp	r0, #0
 8012696:	f040 8289 	bne.w	8012bac <_dtoa_r+0x98c>
 801269a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801269e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f2c0 814e 	blt.w	8012942 <_dtoa_r+0x722>
 80126a6:	f1bb 0f0e 	cmp.w	fp, #14
 80126aa:	f300 814a 	bgt.w	8012942 <_dtoa_r+0x722>
 80126ae:	4b6b      	ldr	r3, [pc, #428]	; (801285c <_dtoa_r+0x63c>)
 80126b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80126b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f280 80dc 	bge.w	8012878 <_dtoa_r+0x658>
 80126c0:	9b04      	ldr	r3, [sp, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f300 80d8 	bgt.w	8012878 <_dtoa_r+0x658>
 80126c8:	f040 826f 	bne.w	8012baa <_dtoa_r+0x98a>
 80126cc:	4b68      	ldr	r3, [pc, #416]	; (8012870 <_dtoa_r+0x650>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	4640      	mov	r0, r8
 80126d2:	4649      	mov	r1, r9
 80126d4:	f7ed ffb0 	bl	8000638 <__aeabi_dmul>
 80126d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126dc:	f7ee fa32 	bl	8000b44 <__aeabi_dcmpge>
 80126e0:	9e04      	ldr	r6, [sp, #16]
 80126e2:	4637      	mov	r7, r6
 80126e4:	2800      	cmp	r0, #0
 80126e6:	f040 8245 	bne.w	8012b74 <_dtoa_r+0x954>
 80126ea:	9d00      	ldr	r5, [sp, #0]
 80126ec:	2331      	movs	r3, #49	; 0x31
 80126ee:	f805 3b01 	strb.w	r3, [r5], #1
 80126f2:	f10b 0b01 	add.w	fp, fp, #1
 80126f6:	e241      	b.n	8012b7c <_dtoa_r+0x95c>
 80126f8:	07f2      	lsls	r2, r6, #31
 80126fa:	d505      	bpl.n	8012708 <_dtoa_r+0x4e8>
 80126fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012700:	f7ed ff9a 	bl	8000638 <__aeabi_dmul>
 8012704:	3501      	adds	r5, #1
 8012706:	2301      	movs	r3, #1
 8012708:	1076      	asrs	r6, r6, #1
 801270a:	3708      	adds	r7, #8
 801270c:	e773      	b.n	80125f6 <_dtoa_r+0x3d6>
 801270e:	2502      	movs	r5, #2
 8012710:	e775      	b.n	80125fe <_dtoa_r+0x3de>
 8012712:	9e04      	ldr	r6, [sp, #16]
 8012714:	465f      	mov	r7, fp
 8012716:	e792      	b.n	801263e <_dtoa_r+0x41e>
 8012718:	9900      	ldr	r1, [sp, #0]
 801271a:	4b50      	ldr	r3, [pc, #320]	; (801285c <_dtoa_r+0x63c>)
 801271c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012720:	4431      	add	r1, r6
 8012722:	9102      	str	r1, [sp, #8]
 8012724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012726:	eeb0 9a47 	vmov.f32	s18, s14
 801272a:	eef0 9a67 	vmov.f32	s19, s15
 801272e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012736:	2900      	cmp	r1, #0
 8012738:	d044      	beq.n	80127c4 <_dtoa_r+0x5a4>
 801273a:	494e      	ldr	r1, [pc, #312]	; (8012874 <_dtoa_r+0x654>)
 801273c:	2000      	movs	r0, #0
 801273e:	f7ee f8a5 	bl	800088c <__aeabi_ddiv>
 8012742:	ec53 2b19 	vmov	r2, r3, d9
 8012746:	f7ed fdbf 	bl	80002c8 <__aeabi_dsub>
 801274a:	9d00      	ldr	r5, [sp, #0]
 801274c:	ec41 0b19 	vmov	d9, r0, r1
 8012750:	4649      	mov	r1, r9
 8012752:	4640      	mov	r0, r8
 8012754:	f7ee fa20 	bl	8000b98 <__aeabi_d2iz>
 8012758:	4606      	mov	r6, r0
 801275a:	f7ed ff03 	bl	8000564 <__aeabi_i2d>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	4640      	mov	r0, r8
 8012764:	4649      	mov	r1, r9
 8012766:	f7ed fdaf 	bl	80002c8 <__aeabi_dsub>
 801276a:	3630      	adds	r6, #48	; 0x30
 801276c:	f805 6b01 	strb.w	r6, [r5], #1
 8012770:	ec53 2b19 	vmov	r2, r3, d9
 8012774:	4680      	mov	r8, r0
 8012776:	4689      	mov	r9, r1
 8012778:	f7ee f9d0 	bl	8000b1c <__aeabi_dcmplt>
 801277c:	2800      	cmp	r0, #0
 801277e:	d164      	bne.n	801284a <_dtoa_r+0x62a>
 8012780:	4642      	mov	r2, r8
 8012782:	464b      	mov	r3, r9
 8012784:	4937      	ldr	r1, [pc, #220]	; (8012864 <_dtoa_r+0x644>)
 8012786:	2000      	movs	r0, #0
 8012788:	f7ed fd9e 	bl	80002c8 <__aeabi_dsub>
 801278c:	ec53 2b19 	vmov	r2, r3, d9
 8012790:	f7ee f9c4 	bl	8000b1c <__aeabi_dcmplt>
 8012794:	2800      	cmp	r0, #0
 8012796:	f040 80b6 	bne.w	8012906 <_dtoa_r+0x6e6>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	429d      	cmp	r5, r3
 801279e:	f43f af7c 	beq.w	801269a <_dtoa_r+0x47a>
 80127a2:	4b31      	ldr	r3, [pc, #196]	; (8012868 <_dtoa_r+0x648>)
 80127a4:	ec51 0b19 	vmov	r0, r1, d9
 80127a8:	2200      	movs	r2, #0
 80127aa:	f7ed ff45 	bl	8000638 <__aeabi_dmul>
 80127ae:	4b2e      	ldr	r3, [pc, #184]	; (8012868 <_dtoa_r+0x648>)
 80127b0:	ec41 0b19 	vmov	d9, r0, r1
 80127b4:	2200      	movs	r2, #0
 80127b6:	4640      	mov	r0, r8
 80127b8:	4649      	mov	r1, r9
 80127ba:	f7ed ff3d 	bl	8000638 <__aeabi_dmul>
 80127be:	4680      	mov	r8, r0
 80127c0:	4689      	mov	r9, r1
 80127c2:	e7c5      	b.n	8012750 <_dtoa_r+0x530>
 80127c4:	ec51 0b17 	vmov	r0, r1, d7
 80127c8:	f7ed ff36 	bl	8000638 <__aeabi_dmul>
 80127cc:	9b02      	ldr	r3, [sp, #8]
 80127ce:	9d00      	ldr	r5, [sp, #0]
 80127d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80127d2:	ec41 0b19 	vmov	d9, r0, r1
 80127d6:	4649      	mov	r1, r9
 80127d8:	4640      	mov	r0, r8
 80127da:	f7ee f9dd 	bl	8000b98 <__aeabi_d2iz>
 80127de:	4606      	mov	r6, r0
 80127e0:	f7ed fec0 	bl	8000564 <__aeabi_i2d>
 80127e4:	3630      	adds	r6, #48	; 0x30
 80127e6:	4602      	mov	r2, r0
 80127e8:	460b      	mov	r3, r1
 80127ea:	4640      	mov	r0, r8
 80127ec:	4649      	mov	r1, r9
 80127ee:	f7ed fd6b 	bl	80002c8 <__aeabi_dsub>
 80127f2:	f805 6b01 	strb.w	r6, [r5], #1
 80127f6:	9b02      	ldr	r3, [sp, #8]
 80127f8:	429d      	cmp	r5, r3
 80127fa:	4680      	mov	r8, r0
 80127fc:	4689      	mov	r9, r1
 80127fe:	f04f 0200 	mov.w	r2, #0
 8012802:	d124      	bne.n	801284e <_dtoa_r+0x62e>
 8012804:	4b1b      	ldr	r3, [pc, #108]	; (8012874 <_dtoa_r+0x654>)
 8012806:	ec51 0b19 	vmov	r0, r1, d9
 801280a:	f7ed fd5f 	bl	80002cc <__adddf3>
 801280e:	4602      	mov	r2, r0
 8012810:	460b      	mov	r3, r1
 8012812:	4640      	mov	r0, r8
 8012814:	4649      	mov	r1, r9
 8012816:	f7ee f99f 	bl	8000b58 <__aeabi_dcmpgt>
 801281a:	2800      	cmp	r0, #0
 801281c:	d173      	bne.n	8012906 <_dtoa_r+0x6e6>
 801281e:	ec53 2b19 	vmov	r2, r3, d9
 8012822:	4914      	ldr	r1, [pc, #80]	; (8012874 <_dtoa_r+0x654>)
 8012824:	2000      	movs	r0, #0
 8012826:	f7ed fd4f 	bl	80002c8 <__aeabi_dsub>
 801282a:	4602      	mov	r2, r0
 801282c:	460b      	mov	r3, r1
 801282e:	4640      	mov	r0, r8
 8012830:	4649      	mov	r1, r9
 8012832:	f7ee f973 	bl	8000b1c <__aeabi_dcmplt>
 8012836:	2800      	cmp	r0, #0
 8012838:	f43f af2f 	beq.w	801269a <_dtoa_r+0x47a>
 801283c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801283e:	1e6b      	subs	r3, r5, #1
 8012840:	930f      	str	r3, [sp, #60]	; 0x3c
 8012842:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012846:	2b30      	cmp	r3, #48	; 0x30
 8012848:	d0f8      	beq.n	801283c <_dtoa_r+0x61c>
 801284a:	46bb      	mov	fp, r7
 801284c:	e04a      	b.n	80128e4 <_dtoa_r+0x6c4>
 801284e:	4b06      	ldr	r3, [pc, #24]	; (8012868 <_dtoa_r+0x648>)
 8012850:	f7ed fef2 	bl	8000638 <__aeabi_dmul>
 8012854:	4680      	mov	r8, r0
 8012856:	4689      	mov	r9, r1
 8012858:	e7bd      	b.n	80127d6 <_dtoa_r+0x5b6>
 801285a:	bf00      	nop
 801285c:	08014b10 	.word	0x08014b10
 8012860:	08014ae8 	.word	0x08014ae8
 8012864:	3ff00000 	.word	0x3ff00000
 8012868:	40240000 	.word	0x40240000
 801286c:	401c0000 	.word	0x401c0000
 8012870:	40140000 	.word	0x40140000
 8012874:	3fe00000 	.word	0x3fe00000
 8012878:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801287c:	9d00      	ldr	r5, [sp, #0]
 801287e:	4642      	mov	r2, r8
 8012880:	464b      	mov	r3, r9
 8012882:	4630      	mov	r0, r6
 8012884:	4639      	mov	r1, r7
 8012886:	f7ee f801 	bl	800088c <__aeabi_ddiv>
 801288a:	f7ee f985 	bl	8000b98 <__aeabi_d2iz>
 801288e:	9001      	str	r0, [sp, #4]
 8012890:	f7ed fe68 	bl	8000564 <__aeabi_i2d>
 8012894:	4642      	mov	r2, r8
 8012896:	464b      	mov	r3, r9
 8012898:	f7ed fece 	bl	8000638 <__aeabi_dmul>
 801289c:	4602      	mov	r2, r0
 801289e:	460b      	mov	r3, r1
 80128a0:	4630      	mov	r0, r6
 80128a2:	4639      	mov	r1, r7
 80128a4:	f7ed fd10 	bl	80002c8 <__aeabi_dsub>
 80128a8:	9e01      	ldr	r6, [sp, #4]
 80128aa:	9f04      	ldr	r7, [sp, #16]
 80128ac:	3630      	adds	r6, #48	; 0x30
 80128ae:	f805 6b01 	strb.w	r6, [r5], #1
 80128b2:	9e00      	ldr	r6, [sp, #0]
 80128b4:	1bae      	subs	r6, r5, r6
 80128b6:	42b7      	cmp	r7, r6
 80128b8:	4602      	mov	r2, r0
 80128ba:	460b      	mov	r3, r1
 80128bc:	d134      	bne.n	8012928 <_dtoa_r+0x708>
 80128be:	f7ed fd05 	bl	80002cc <__adddf3>
 80128c2:	4642      	mov	r2, r8
 80128c4:	464b      	mov	r3, r9
 80128c6:	4606      	mov	r6, r0
 80128c8:	460f      	mov	r7, r1
 80128ca:	f7ee f945 	bl	8000b58 <__aeabi_dcmpgt>
 80128ce:	b9c8      	cbnz	r0, 8012904 <_dtoa_r+0x6e4>
 80128d0:	4642      	mov	r2, r8
 80128d2:	464b      	mov	r3, r9
 80128d4:	4630      	mov	r0, r6
 80128d6:	4639      	mov	r1, r7
 80128d8:	f7ee f916 	bl	8000b08 <__aeabi_dcmpeq>
 80128dc:	b110      	cbz	r0, 80128e4 <_dtoa_r+0x6c4>
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	07db      	lsls	r3, r3, #31
 80128e2:	d40f      	bmi.n	8012904 <_dtoa_r+0x6e4>
 80128e4:	4651      	mov	r1, sl
 80128e6:	4620      	mov	r0, r4
 80128e8:	f000 fbcc 	bl	8013084 <_Bfree>
 80128ec:	2300      	movs	r3, #0
 80128ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128f0:	702b      	strb	r3, [r5, #0]
 80128f2:	f10b 0301 	add.w	r3, fp, #1
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f43f ace2 	beq.w	80122c4 <_dtoa_r+0xa4>
 8012900:	601d      	str	r5, [r3, #0]
 8012902:	e4df      	b.n	80122c4 <_dtoa_r+0xa4>
 8012904:	465f      	mov	r7, fp
 8012906:	462b      	mov	r3, r5
 8012908:	461d      	mov	r5, r3
 801290a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801290e:	2a39      	cmp	r2, #57	; 0x39
 8012910:	d106      	bne.n	8012920 <_dtoa_r+0x700>
 8012912:	9a00      	ldr	r2, [sp, #0]
 8012914:	429a      	cmp	r2, r3
 8012916:	d1f7      	bne.n	8012908 <_dtoa_r+0x6e8>
 8012918:	9900      	ldr	r1, [sp, #0]
 801291a:	2230      	movs	r2, #48	; 0x30
 801291c:	3701      	adds	r7, #1
 801291e:	700a      	strb	r2, [r1, #0]
 8012920:	781a      	ldrb	r2, [r3, #0]
 8012922:	3201      	adds	r2, #1
 8012924:	701a      	strb	r2, [r3, #0]
 8012926:	e790      	b.n	801284a <_dtoa_r+0x62a>
 8012928:	4ba3      	ldr	r3, [pc, #652]	; (8012bb8 <_dtoa_r+0x998>)
 801292a:	2200      	movs	r2, #0
 801292c:	f7ed fe84 	bl	8000638 <__aeabi_dmul>
 8012930:	2200      	movs	r2, #0
 8012932:	2300      	movs	r3, #0
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	f7ee f8e6 	bl	8000b08 <__aeabi_dcmpeq>
 801293c:	2800      	cmp	r0, #0
 801293e:	d09e      	beq.n	801287e <_dtoa_r+0x65e>
 8012940:	e7d0      	b.n	80128e4 <_dtoa_r+0x6c4>
 8012942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012944:	2a00      	cmp	r2, #0
 8012946:	f000 80ca 	beq.w	8012ade <_dtoa_r+0x8be>
 801294a:	9a07      	ldr	r2, [sp, #28]
 801294c:	2a01      	cmp	r2, #1
 801294e:	f300 80ad 	bgt.w	8012aac <_dtoa_r+0x88c>
 8012952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012954:	2a00      	cmp	r2, #0
 8012956:	f000 80a5 	beq.w	8012aa4 <_dtoa_r+0x884>
 801295a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801295e:	9e08      	ldr	r6, [sp, #32]
 8012960:	9d05      	ldr	r5, [sp, #20]
 8012962:	9a05      	ldr	r2, [sp, #20]
 8012964:	441a      	add	r2, r3
 8012966:	9205      	str	r2, [sp, #20]
 8012968:	9a06      	ldr	r2, [sp, #24]
 801296a:	2101      	movs	r1, #1
 801296c:	441a      	add	r2, r3
 801296e:	4620      	mov	r0, r4
 8012970:	9206      	str	r2, [sp, #24]
 8012972:	f000 fc3d 	bl	80131f0 <__i2b>
 8012976:	4607      	mov	r7, r0
 8012978:	b165      	cbz	r5, 8012994 <_dtoa_r+0x774>
 801297a:	9b06      	ldr	r3, [sp, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	dd09      	ble.n	8012994 <_dtoa_r+0x774>
 8012980:	42ab      	cmp	r3, r5
 8012982:	9a05      	ldr	r2, [sp, #20]
 8012984:	bfa8      	it	ge
 8012986:	462b      	movge	r3, r5
 8012988:	1ad2      	subs	r2, r2, r3
 801298a:	9205      	str	r2, [sp, #20]
 801298c:	9a06      	ldr	r2, [sp, #24]
 801298e:	1aed      	subs	r5, r5, r3
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	9306      	str	r3, [sp, #24]
 8012994:	9b08      	ldr	r3, [sp, #32]
 8012996:	b1f3      	cbz	r3, 80129d6 <_dtoa_r+0x7b6>
 8012998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801299a:	2b00      	cmp	r3, #0
 801299c:	f000 80a3 	beq.w	8012ae6 <_dtoa_r+0x8c6>
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	dd10      	ble.n	80129c6 <_dtoa_r+0x7a6>
 80129a4:	4639      	mov	r1, r7
 80129a6:	4632      	mov	r2, r6
 80129a8:	4620      	mov	r0, r4
 80129aa:	f000 fce1 	bl	8013370 <__pow5mult>
 80129ae:	4652      	mov	r2, sl
 80129b0:	4601      	mov	r1, r0
 80129b2:	4607      	mov	r7, r0
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 fc31 	bl	801321c <__multiply>
 80129ba:	4651      	mov	r1, sl
 80129bc:	4680      	mov	r8, r0
 80129be:	4620      	mov	r0, r4
 80129c0:	f000 fb60 	bl	8013084 <_Bfree>
 80129c4:	46c2      	mov	sl, r8
 80129c6:	9b08      	ldr	r3, [sp, #32]
 80129c8:	1b9a      	subs	r2, r3, r6
 80129ca:	d004      	beq.n	80129d6 <_dtoa_r+0x7b6>
 80129cc:	4651      	mov	r1, sl
 80129ce:	4620      	mov	r0, r4
 80129d0:	f000 fcce 	bl	8013370 <__pow5mult>
 80129d4:	4682      	mov	sl, r0
 80129d6:	2101      	movs	r1, #1
 80129d8:	4620      	mov	r0, r4
 80129da:	f000 fc09 	bl	80131f0 <__i2b>
 80129de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	4606      	mov	r6, r0
 80129e4:	f340 8081 	ble.w	8012aea <_dtoa_r+0x8ca>
 80129e8:	461a      	mov	r2, r3
 80129ea:	4601      	mov	r1, r0
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 fcbf 	bl	8013370 <__pow5mult>
 80129f2:	9b07      	ldr	r3, [sp, #28]
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	4606      	mov	r6, r0
 80129f8:	dd7a      	ble.n	8012af0 <_dtoa_r+0x8d0>
 80129fa:	f04f 0800 	mov.w	r8, #0
 80129fe:	6933      	ldr	r3, [r6, #16]
 8012a00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a04:	6918      	ldr	r0, [r3, #16]
 8012a06:	f000 fba5 	bl	8013154 <__hi0bits>
 8012a0a:	f1c0 0020 	rsb	r0, r0, #32
 8012a0e:	9b06      	ldr	r3, [sp, #24]
 8012a10:	4418      	add	r0, r3
 8012a12:	f010 001f 	ands.w	r0, r0, #31
 8012a16:	f000 8094 	beq.w	8012b42 <_dtoa_r+0x922>
 8012a1a:	f1c0 0320 	rsb	r3, r0, #32
 8012a1e:	2b04      	cmp	r3, #4
 8012a20:	f340 8085 	ble.w	8012b2e <_dtoa_r+0x90e>
 8012a24:	9b05      	ldr	r3, [sp, #20]
 8012a26:	f1c0 001c 	rsb	r0, r0, #28
 8012a2a:	4403      	add	r3, r0
 8012a2c:	9305      	str	r3, [sp, #20]
 8012a2e:	9b06      	ldr	r3, [sp, #24]
 8012a30:	4403      	add	r3, r0
 8012a32:	4405      	add	r5, r0
 8012a34:	9306      	str	r3, [sp, #24]
 8012a36:	9b05      	ldr	r3, [sp, #20]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	dd05      	ble.n	8012a48 <_dtoa_r+0x828>
 8012a3c:	4651      	mov	r1, sl
 8012a3e:	461a      	mov	r2, r3
 8012a40:	4620      	mov	r0, r4
 8012a42:	f000 fcef 	bl	8013424 <__lshift>
 8012a46:	4682      	mov	sl, r0
 8012a48:	9b06      	ldr	r3, [sp, #24]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	dd05      	ble.n	8012a5a <_dtoa_r+0x83a>
 8012a4e:	4631      	mov	r1, r6
 8012a50:	461a      	mov	r2, r3
 8012a52:	4620      	mov	r0, r4
 8012a54:	f000 fce6 	bl	8013424 <__lshift>
 8012a58:	4606      	mov	r6, r0
 8012a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d072      	beq.n	8012b46 <_dtoa_r+0x926>
 8012a60:	4631      	mov	r1, r6
 8012a62:	4650      	mov	r0, sl
 8012a64:	f000 fd4a 	bl	80134fc <__mcmp>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	da6c      	bge.n	8012b46 <_dtoa_r+0x926>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4651      	mov	r1, sl
 8012a70:	220a      	movs	r2, #10
 8012a72:	4620      	mov	r0, r4
 8012a74:	f000 fb28 	bl	80130c8 <__multadd>
 8012a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012a7e:	4682      	mov	sl, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 81b0 	beq.w	8012de6 <_dtoa_r+0xbc6>
 8012a86:	2300      	movs	r3, #0
 8012a88:	4639      	mov	r1, r7
 8012a8a:	220a      	movs	r2, #10
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f000 fb1b 	bl	80130c8 <__multadd>
 8012a92:	9b01      	ldr	r3, [sp, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	4607      	mov	r7, r0
 8012a98:	f300 8096 	bgt.w	8012bc8 <_dtoa_r+0x9a8>
 8012a9c:	9b07      	ldr	r3, [sp, #28]
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	dc59      	bgt.n	8012b56 <_dtoa_r+0x936>
 8012aa2:	e091      	b.n	8012bc8 <_dtoa_r+0x9a8>
 8012aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012aaa:	e758      	b.n	801295e <_dtoa_r+0x73e>
 8012aac:	9b04      	ldr	r3, [sp, #16]
 8012aae:	1e5e      	subs	r6, r3, #1
 8012ab0:	9b08      	ldr	r3, [sp, #32]
 8012ab2:	42b3      	cmp	r3, r6
 8012ab4:	bfbf      	itttt	lt
 8012ab6:	9b08      	ldrlt	r3, [sp, #32]
 8012ab8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012aba:	9608      	strlt	r6, [sp, #32]
 8012abc:	1af3      	sublt	r3, r6, r3
 8012abe:	bfb4      	ite	lt
 8012ac0:	18d2      	addlt	r2, r2, r3
 8012ac2:	1b9e      	subge	r6, r3, r6
 8012ac4:	9b04      	ldr	r3, [sp, #16]
 8012ac6:	bfbc      	itt	lt
 8012ac8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012aca:	2600      	movlt	r6, #0
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	bfb7      	itett	lt
 8012ad0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012ad4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012ad8:	1a9d      	sublt	r5, r3, r2
 8012ada:	2300      	movlt	r3, #0
 8012adc:	e741      	b.n	8012962 <_dtoa_r+0x742>
 8012ade:	9e08      	ldr	r6, [sp, #32]
 8012ae0:	9d05      	ldr	r5, [sp, #20]
 8012ae2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ae4:	e748      	b.n	8012978 <_dtoa_r+0x758>
 8012ae6:	9a08      	ldr	r2, [sp, #32]
 8012ae8:	e770      	b.n	80129cc <_dtoa_r+0x7ac>
 8012aea:	9b07      	ldr	r3, [sp, #28]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	dc19      	bgt.n	8012b24 <_dtoa_r+0x904>
 8012af0:	9b02      	ldr	r3, [sp, #8]
 8012af2:	b9bb      	cbnz	r3, 8012b24 <_dtoa_r+0x904>
 8012af4:	9b03      	ldr	r3, [sp, #12]
 8012af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012afa:	b99b      	cbnz	r3, 8012b24 <_dtoa_r+0x904>
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b02:	0d1b      	lsrs	r3, r3, #20
 8012b04:	051b      	lsls	r3, r3, #20
 8012b06:	b183      	cbz	r3, 8012b2a <_dtoa_r+0x90a>
 8012b08:	9b05      	ldr	r3, [sp, #20]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	9305      	str	r3, [sp, #20]
 8012b0e:	9b06      	ldr	r3, [sp, #24]
 8012b10:	3301      	adds	r3, #1
 8012b12:	9306      	str	r3, [sp, #24]
 8012b14:	f04f 0801 	mov.w	r8, #1
 8012b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f47f af6f 	bne.w	80129fe <_dtoa_r+0x7de>
 8012b20:	2001      	movs	r0, #1
 8012b22:	e774      	b.n	8012a0e <_dtoa_r+0x7ee>
 8012b24:	f04f 0800 	mov.w	r8, #0
 8012b28:	e7f6      	b.n	8012b18 <_dtoa_r+0x8f8>
 8012b2a:	4698      	mov	r8, r3
 8012b2c:	e7f4      	b.n	8012b18 <_dtoa_r+0x8f8>
 8012b2e:	d082      	beq.n	8012a36 <_dtoa_r+0x816>
 8012b30:	9a05      	ldr	r2, [sp, #20]
 8012b32:	331c      	adds	r3, #28
 8012b34:	441a      	add	r2, r3
 8012b36:	9205      	str	r2, [sp, #20]
 8012b38:	9a06      	ldr	r2, [sp, #24]
 8012b3a:	441a      	add	r2, r3
 8012b3c:	441d      	add	r5, r3
 8012b3e:	9206      	str	r2, [sp, #24]
 8012b40:	e779      	b.n	8012a36 <_dtoa_r+0x816>
 8012b42:	4603      	mov	r3, r0
 8012b44:	e7f4      	b.n	8012b30 <_dtoa_r+0x910>
 8012b46:	9b04      	ldr	r3, [sp, #16]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	dc37      	bgt.n	8012bbc <_dtoa_r+0x99c>
 8012b4c:	9b07      	ldr	r3, [sp, #28]
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	dd34      	ble.n	8012bbc <_dtoa_r+0x99c>
 8012b52:	9b04      	ldr	r3, [sp, #16]
 8012b54:	9301      	str	r3, [sp, #4]
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	b963      	cbnz	r3, 8012b74 <_dtoa_r+0x954>
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	2205      	movs	r2, #5
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f000 fab2 	bl	80130c8 <__multadd>
 8012b64:	4601      	mov	r1, r0
 8012b66:	4606      	mov	r6, r0
 8012b68:	4650      	mov	r0, sl
 8012b6a:	f000 fcc7 	bl	80134fc <__mcmp>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	f73f adbb 	bgt.w	80126ea <_dtoa_r+0x4ca>
 8012b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b76:	9d00      	ldr	r5, [sp, #0]
 8012b78:	ea6f 0b03 	mvn.w	fp, r3
 8012b7c:	f04f 0800 	mov.w	r8, #0
 8012b80:	4631      	mov	r1, r6
 8012b82:	4620      	mov	r0, r4
 8012b84:	f000 fa7e 	bl	8013084 <_Bfree>
 8012b88:	2f00      	cmp	r7, #0
 8012b8a:	f43f aeab 	beq.w	80128e4 <_dtoa_r+0x6c4>
 8012b8e:	f1b8 0f00 	cmp.w	r8, #0
 8012b92:	d005      	beq.n	8012ba0 <_dtoa_r+0x980>
 8012b94:	45b8      	cmp	r8, r7
 8012b96:	d003      	beq.n	8012ba0 <_dtoa_r+0x980>
 8012b98:	4641      	mov	r1, r8
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f000 fa72 	bl	8013084 <_Bfree>
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f000 fa6e 	bl	8013084 <_Bfree>
 8012ba8:	e69c      	b.n	80128e4 <_dtoa_r+0x6c4>
 8012baa:	2600      	movs	r6, #0
 8012bac:	4637      	mov	r7, r6
 8012bae:	e7e1      	b.n	8012b74 <_dtoa_r+0x954>
 8012bb0:	46bb      	mov	fp, r7
 8012bb2:	4637      	mov	r7, r6
 8012bb4:	e599      	b.n	80126ea <_dtoa_r+0x4ca>
 8012bb6:	bf00      	nop
 8012bb8:	40240000 	.word	0x40240000
 8012bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 80c8 	beq.w	8012d54 <_dtoa_r+0xb34>
 8012bc4:	9b04      	ldr	r3, [sp, #16]
 8012bc6:	9301      	str	r3, [sp, #4]
 8012bc8:	2d00      	cmp	r5, #0
 8012bca:	dd05      	ble.n	8012bd8 <_dtoa_r+0x9b8>
 8012bcc:	4639      	mov	r1, r7
 8012bce:	462a      	mov	r2, r5
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f000 fc27 	bl	8013424 <__lshift>
 8012bd6:	4607      	mov	r7, r0
 8012bd8:	f1b8 0f00 	cmp.w	r8, #0
 8012bdc:	d05b      	beq.n	8012c96 <_dtoa_r+0xa76>
 8012bde:	6879      	ldr	r1, [r7, #4]
 8012be0:	4620      	mov	r0, r4
 8012be2:	f000 fa0f 	bl	8013004 <_Balloc>
 8012be6:	4605      	mov	r5, r0
 8012be8:	b928      	cbnz	r0, 8012bf6 <_dtoa_r+0x9d6>
 8012bea:	4b83      	ldr	r3, [pc, #524]	; (8012df8 <_dtoa_r+0xbd8>)
 8012bec:	4602      	mov	r2, r0
 8012bee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012bf2:	f7ff bb2e 	b.w	8012252 <_dtoa_r+0x32>
 8012bf6:	693a      	ldr	r2, [r7, #16]
 8012bf8:	3202      	adds	r2, #2
 8012bfa:	0092      	lsls	r2, r2, #2
 8012bfc:	f107 010c 	add.w	r1, r7, #12
 8012c00:	300c      	adds	r0, #12
 8012c02:	f7ff fa76 	bl	80120f2 <memcpy>
 8012c06:	2201      	movs	r2, #1
 8012c08:	4629      	mov	r1, r5
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 fc0a 	bl	8013424 <__lshift>
 8012c10:	9b00      	ldr	r3, [sp, #0]
 8012c12:	3301      	adds	r3, #1
 8012c14:	9304      	str	r3, [sp, #16]
 8012c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	9308      	str	r3, [sp, #32]
 8012c1e:	9b02      	ldr	r3, [sp, #8]
 8012c20:	f003 0301 	and.w	r3, r3, #1
 8012c24:	46b8      	mov	r8, r7
 8012c26:	9306      	str	r3, [sp, #24]
 8012c28:	4607      	mov	r7, r0
 8012c2a:	9b04      	ldr	r3, [sp, #16]
 8012c2c:	4631      	mov	r1, r6
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	4650      	mov	r0, sl
 8012c32:	9301      	str	r3, [sp, #4]
 8012c34:	f7ff fa6b 	bl	801210e <quorem>
 8012c38:	4641      	mov	r1, r8
 8012c3a:	9002      	str	r0, [sp, #8]
 8012c3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012c40:	4650      	mov	r0, sl
 8012c42:	f000 fc5b 	bl	80134fc <__mcmp>
 8012c46:	463a      	mov	r2, r7
 8012c48:	9005      	str	r0, [sp, #20]
 8012c4a:	4631      	mov	r1, r6
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f000 fc71 	bl	8013534 <__mdiff>
 8012c52:	68c2      	ldr	r2, [r0, #12]
 8012c54:	4605      	mov	r5, r0
 8012c56:	bb02      	cbnz	r2, 8012c9a <_dtoa_r+0xa7a>
 8012c58:	4601      	mov	r1, r0
 8012c5a:	4650      	mov	r0, sl
 8012c5c:	f000 fc4e 	bl	80134fc <__mcmp>
 8012c60:	4602      	mov	r2, r0
 8012c62:	4629      	mov	r1, r5
 8012c64:	4620      	mov	r0, r4
 8012c66:	9209      	str	r2, [sp, #36]	; 0x24
 8012c68:	f000 fa0c 	bl	8013084 <_Bfree>
 8012c6c:	9b07      	ldr	r3, [sp, #28]
 8012c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c70:	9d04      	ldr	r5, [sp, #16]
 8012c72:	ea43 0102 	orr.w	r1, r3, r2
 8012c76:	9b06      	ldr	r3, [sp, #24]
 8012c78:	4319      	orrs	r1, r3
 8012c7a:	d110      	bne.n	8012c9e <_dtoa_r+0xa7e>
 8012c7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c80:	d029      	beq.n	8012cd6 <_dtoa_r+0xab6>
 8012c82:	9b05      	ldr	r3, [sp, #20]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	dd02      	ble.n	8012c8e <_dtoa_r+0xa6e>
 8012c88:	9b02      	ldr	r3, [sp, #8]
 8012c8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012c8e:	9b01      	ldr	r3, [sp, #4]
 8012c90:	f883 9000 	strb.w	r9, [r3]
 8012c94:	e774      	b.n	8012b80 <_dtoa_r+0x960>
 8012c96:	4638      	mov	r0, r7
 8012c98:	e7ba      	b.n	8012c10 <_dtoa_r+0x9f0>
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	e7e1      	b.n	8012c62 <_dtoa_r+0xa42>
 8012c9e:	9b05      	ldr	r3, [sp, #20]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	db04      	blt.n	8012cae <_dtoa_r+0xa8e>
 8012ca4:	9907      	ldr	r1, [sp, #28]
 8012ca6:	430b      	orrs	r3, r1
 8012ca8:	9906      	ldr	r1, [sp, #24]
 8012caa:	430b      	orrs	r3, r1
 8012cac:	d120      	bne.n	8012cf0 <_dtoa_r+0xad0>
 8012cae:	2a00      	cmp	r2, #0
 8012cb0:	dded      	ble.n	8012c8e <_dtoa_r+0xa6e>
 8012cb2:	4651      	mov	r1, sl
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f000 fbb4 	bl	8013424 <__lshift>
 8012cbc:	4631      	mov	r1, r6
 8012cbe:	4682      	mov	sl, r0
 8012cc0:	f000 fc1c 	bl	80134fc <__mcmp>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	dc03      	bgt.n	8012cd0 <_dtoa_r+0xab0>
 8012cc8:	d1e1      	bne.n	8012c8e <_dtoa_r+0xa6e>
 8012cca:	f019 0f01 	tst.w	r9, #1
 8012cce:	d0de      	beq.n	8012c8e <_dtoa_r+0xa6e>
 8012cd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012cd4:	d1d8      	bne.n	8012c88 <_dtoa_r+0xa68>
 8012cd6:	9a01      	ldr	r2, [sp, #4]
 8012cd8:	2339      	movs	r3, #57	; 0x39
 8012cda:	7013      	strb	r3, [r2, #0]
 8012cdc:	462b      	mov	r3, r5
 8012cde:	461d      	mov	r5, r3
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ce6:	2a39      	cmp	r2, #57	; 0x39
 8012ce8:	d06c      	beq.n	8012dc4 <_dtoa_r+0xba4>
 8012cea:	3201      	adds	r2, #1
 8012cec:	701a      	strb	r2, [r3, #0]
 8012cee:	e747      	b.n	8012b80 <_dtoa_r+0x960>
 8012cf0:	2a00      	cmp	r2, #0
 8012cf2:	dd07      	ble.n	8012d04 <_dtoa_r+0xae4>
 8012cf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012cf8:	d0ed      	beq.n	8012cd6 <_dtoa_r+0xab6>
 8012cfa:	9a01      	ldr	r2, [sp, #4]
 8012cfc:	f109 0301 	add.w	r3, r9, #1
 8012d00:	7013      	strb	r3, [r2, #0]
 8012d02:	e73d      	b.n	8012b80 <_dtoa_r+0x960>
 8012d04:	9b04      	ldr	r3, [sp, #16]
 8012d06:	9a08      	ldr	r2, [sp, #32]
 8012d08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d043      	beq.n	8012d98 <_dtoa_r+0xb78>
 8012d10:	4651      	mov	r1, sl
 8012d12:	2300      	movs	r3, #0
 8012d14:	220a      	movs	r2, #10
 8012d16:	4620      	mov	r0, r4
 8012d18:	f000 f9d6 	bl	80130c8 <__multadd>
 8012d1c:	45b8      	cmp	r8, r7
 8012d1e:	4682      	mov	sl, r0
 8012d20:	f04f 0300 	mov.w	r3, #0
 8012d24:	f04f 020a 	mov.w	r2, #10
 8012d28:	4641      	mov	r1, r8
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	d107      	bne.n	8012d3e <_dtoa_r+0xb1e>
 8012d2e:	f000 f9cb 	bl	80130c8 <__multadd>
 8012d32:	4680      	mov	r8, r0
 8012d34:	4607      	mov	r7, r0
 8012d36:	9b04      	ldr	r3, [sp, #16]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	9304      	str	r3, [sp, #16]
 8012d3c:	e775      	b.n	8012c2a <_dtoa_r+0xa0a>
 8012d3e:	f000 f9c3 	bl	80130c8 <__multadd>
 8012d42:	4639      	mov	r1, r7
 8012d44:	4680      	mov	r8, r0
 8012d46:	2300      	movs	r3, #0
 8012d48:	220a      	movs	r2, #10
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f000 f9bc 	bl	80130c8 <__multadd>
 8012d50:	4607      	mov	r7, r0
 8012d52:	e7f0      	b.n	8012d36 <_dtoa_r+0xb16>
 8012d54:	9b04      	ldr	r3, [sp, #16]
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	9d00      	ldr	r5, [sp, #0]
 8012d5a:	4631      	mov	r1, r6
 8012d5c:	4650      	mov	r0, sl
 8012d5e:	f7ff f9d6 	bl	801210e <quorem>
 8012d62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012d66:	9b00      	ldr	r3, [sp, #0]
 8012d68:	f805 9b01 	strb.w	r9, [r5], #1
 8012d6c:	1aea      	subs	r2, r5, r3
 8012d6e:	9b01      	ldr	r3, [sp, #4]
 8012d70:	4293      	cmp	r3, r2
 8012d72:	dd07      	ble.n	8012d84 <_dtoa_r+0xb64>
 8012d74:	4651      	mov	r1, sl
 8012d76:	2300      	movs	r3, #0
 8012d78:	220a      	movs	r2, #10
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 f9a4 	bl	80130c8 <__multadd>
 8012d80:	4682      	mov	sl, r0
 8012d82:	e7ea      	b.n	8012d5a <_dtoa_r+0xb3a>
 8012d84:	9b01      	ldr	r3, [sp, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	bfc8      	it	gt
 8012d8a:	461d      	movgt	r5, r3
 8012d8c:	9b00      	ldr	r3, [sp, #0]
 8012d8e:	bfd8      	it	le
 8012d90:	2501      	movle	r5, #1
 8012d92:	441d      	add	r5, r3
 8012d94:	f04f 0800 	mov.w	r8, #0
 8012d98:	4651      	mov	r1, sl
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fb41 	bl	8013424 <__lshift>
 8012da2:	4631      	mov	r1, r6
 8012da4:	4682      	mov	sl, r0
 8012da6:	f000 fba9 	bl	80134fc <__mcmp>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	dc96      	bgt.n	8012cdc <_dtoa_r+0xabc>
 8012dae:	d102      	bne.n	8012db6 <_dtoa_r+0xb96>
 8012db0:	f019 0f01 	tst.w	r9, #1
 8012db4:	d192      	bne.n	8012cdc <_dtoa_r+0xabc>
 8012db6:	462b      	mov	r3, r5
 8012db8:	461d      	mov	r5, r3
 8012dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012dbe:	2a30      	cmp	r2, #48	; 0x30
 8012dc0:	d0fa      	beq.n	8012db8 <_dtoa_r+0xb98>
 8012dc2:	e6dd      	b.n	8012b80 <_dtoa_r+0x960>
 8012dc4:	9a00      	ldr	r2, [sp, #0]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d189      	bne.n	8012cde <_dtoa_r+0xabe>
 8012dca:	f10b 0b01 	add.w	fp, fp, #1
 8012dce:	2331      	movs	r3, #49	; 0x31
 8012dd0:	e796      	b.n	8012d00 <_dtoa_r+0xae0>
 8012dd2:	4b0a      	ldr	r3, [pc, #40]	; (8012dfc <_dtoa_r+0xbdc>)
 8012dd4:	f7ff ba99 	b.w	801230a <_dtoa_r+0xea>
 8012dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f47f aa6d 	bne.w	80122ba <_dtoa_r+0x9a>
 8012de0:	4b07      	ldr	r3, [pc, #28]	; (8012e00 <_dtoa_r+0xbe0>)
 8012de2:	f7ff ba92 	b.w	801230a <_dtoa_r+0xea>
 8012de6:	9b01      	ldr	r3, [sp, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	dcb5      	bgt.n	8012d58 <_dtoa_r+0xb38>
 8012dec:	9b07      	ldr	r3, [sp, #28]
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	f73f aeb1 	bgt.w	8012b56 <_dtoa_r+0x936>
 8012df4:	e7b0      	b.n	8012d58 <_dtoa_r+0xb38>
 8012df6:	bf00      	nop
 8012df8:	08014a78 	.word	0x08014a78
 8012dfc:	080149d8 	.word	0x080149d8
 8012e00:	080149fc 	.word	0x080149fc

08012e04 <_free_r>:
 8012e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e06:	2900      	cmp	r1, #0
 8012e08:	d044      	beq.n	8012e94 <_free_r+0x90>
 8012e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e0e:	9001      	str	r0, [sp, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f1a1 0404 	sub.w	r4, r1, #4
 8012e16:	bfb8      	it	lt
 8012e18:	18e4      	addlt	r4, r4, r3
 8012e1a:	f000 f8e7 	bl	8012fec <__malloc_lock>
 8012e1e:	4a1e      	ldr	r2, [pc, #120]	; (8012e98 <_free_r+0x94>)
 8012e20:	9801      	ldr	r0, [sp, #4]
 8012e22:	6813      	ldr	r3, [r2, #0]
 8012e24:	b933      	cbnz	r3, 8012e34 <_free_r+0x30>
 8012e26:	6063      	str	r3, [r4, #4]
 8012e28:	6014      	str	r4, [r2, #0]
 8012e2a:	b003      	add	sp, #12
 8012e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e30:	f000 b8e2 	b.w	8012ff8 <__malloc_unlock>
 8012e34:	42a3      	cmp	r3, r4
 8012e36:	d908      	bls.n	8012e4a <_free_r+0x46>
 8012e38:	6825      	ldr	r5, [r4, #0]
 8012e3a:	1961      	adds	r1, r4, r5
 8012e3c:	428b      	cmp	r3, r1
 8012e3e:	bf01      	itttt	eq
 8012e40:	6819      	ldreq	r1, [r3, #0]
 8012e42:	685b      	ldreq	r3, [r3, #4]
 8012e44:	1949      	addeq	r1, r1, r5
 8012e46:	6021      	streq	r1, [r4, #0]
 8012e48:	e7ed      	b.n	8012e26 <_free_r+0x22>
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	b10b      	cbz	r3, 8012e54 <_free_r+0x50>
 8012e50:	42a3      	cmp	r3, r4
 8012e52:	d9fa      	bls.n	8012e4a <_free_r+0x46>
 8012e54:	6811      	ldr	r1, [r2, #0]
 8012e56:	1855      	adds	r5, r2, r1
 8012e58:	42a5      	cmp	r5, r4
 8012e5a:	d10b      	bne.n	8012e74 <_free_r+0x70>
 8012e5c:	6824      	ldr	r4, [r4, #0]
 8012e5e:	4421      	add	r1, r4
 8012e60:	1854      	adds	r4, r2, r1
 8012e62:	42a3      	cmp	r3, r4
 8012e64:	6011      	str	r1, [r2, #0]
 8012e66:	d1e0      	bne.n	8012e2a <_free_r+0x26>
 8012e68:	681c      	ldr	r4, [r3, #0]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	6053      	str	r3, [r2, #4]
 8012e6e:	440c      	add	r4, r1
 8012e70:	6014      	str	r4, [r2, #0]
 8012e72:	e7da      	b.n	8012e2a <_free_r+0x26>
 8012e74:	d902      	bls.n	8012e7c <_free_r+0x78>
 8012e76:	230c      	movs	r3, #12
 8012e78:	6003      	str	r3, [r0, #0]
 8012e7a:	e7d6      	b.n	8012e2a <_free_r+0x26>
 8012e7c:	6825      	ldr	r5, [r4, #0]
 8012e7e:	1961      	adds	r1, r4, r5
 8012e80:	428b      	cmp	r3, r1
 8012e82:	bf04      	itt	eq
 8012e84:	6819      	ldreq	r1, [r3, #0]
 8012e86:	685b      	ldreq	r3, [r3, #4]
 8012e88:	6063      	str	r3, [r4, #4]
 8012e8a:	bf04      	itt	eq
 8012e8c:	1949      	addeq	r1, r1, r5
 8012e8e:	6021      	streq	r1, [r4, #0]
 8012e90:	6054      	str	r4, [r2, #4]
 8012e92:	e7ca      	b.n	8012e2a <_free_r+0x26>
 8012e94:	b003      	add	sp, #12
 8012e96:	bd30      	pop	{r4, r5, pc}
 8012e98:	200068fc 	.word	0x200068fc

08012e9c <malloc>:
 8012e9c:	4b02      	ldr	r3, [pc, #8]	; (8012ea8 <malloc+0xc>)
 8012e9e:	4601      	mov	r1, r0
 8012ea0:	6818      	ldr	r0, [r3, #0]
 8012ea2:	f000 b823 	b.w	8012eec <_malloc_r>
 8012ea6:	bf00      	nop
 8012ea8:	20000080 	.word	0x20000080

08012eac <sbrk_aligned>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4e0e      	ldr	r6, [pc, #56]	; (8012ee8 <sbrk_aligned+0x3c>)
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	6831      	ldr	r1, [r6, #0]
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	b911      	cbnz	r1, 8012ebe <sbrk_aligned+0x12>
 8012eb8:	f001 f81a 	bl	8013ef0 <_sbrk_r>
 8012ebc:	6030      	str	r0, [r6, #0]
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f001 f815 	bl	8013ef0 <_sbrk_r>
 8012ec6:	1c43      	adds	r3, r0, #1
 8012ec8:	d00a      	beq.n	8012ee0 <sbrk_aligned+0x34>
 8012eca:	1cc4      	adds	r4, r0, #3
 8012ecc:	f024 0403 	bic.w	r4, r4, #3
 8012ed0:	42a0      	cmp	r0, r4
 8012ed2:	d007      	beq.n	8012ee4 <sbrk_aligned+0x38>
 8012ed4:	1a21      	subs	r1, r4, r0
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f001 f80a 	bl	8013ef0 <_sbrk_r>
 8012edc:	3001      	adds	r0, #1
 8012ede:	d101      	bne.n	8012ee4 <sbrk_aligned+0x38>
 8012ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	20006900 	.word	0x20006900

08012eec <_malloc_r>:
 8012eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ef0:	1ccd      	adds	r5, r1, #3
 8012ef2:	f025 0503 	bic.w	r5, r5, #3
 8012ef6:	3508      	adds	r5, #8
 8012ef8:	2d0c      	cmp	r5, #12
 8012efa:	bf38      	it	cc
 8012efc:	250c      	movcc	r5, #12
 8012efe:	2d00      	cmp	r5, #0
 8012f00:	4607      	mov	r7, r0
 8012f02:	db01      	blt.n	8012f08 <_malloc_r+0x1c>
 8012f04:	42a9      	cmp	r1, r5
 8012f06:	d905      	bls.n	8012f14 <_malloc_r+0x28>
 8012f08:	230c      	movs	r3, #12
 8012f0a:	603b      	str	r3, [r7, #0]
 8012f0c:	2600      	movs	r6, #0
 8012f0e:	4630      	mov	r0, r6
 8012f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012fe8 <_malloc_r+0xfc>
 8012f18:	f000 f868 	bl	8012fec <__malloc_lock>
 8012f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f20:	461c      	mov	r4, r3
 8012f22:	bb5c      	cbnz	r4, 8012f7c <_malloc_r+0x90>
 8012f24:	4629      	mov	r1, r5
 8012f26:	4638      	mov	r0, r7
 8012f28:	f7ff ffc0 	bl	8012eac <sbrk_aligned>
 8012f2c:	1c43      	adds	r3, r0, #1
 8012f2e:	4604      	mov	r4, r0
 8012f30:	d155      	bne.n	8012fde <_malloc_r+0xf2>
 8012f32:	f8d8 4000 	ldr.w	r4, [r8]
 8012f36:	4626      	mov	r6, r4
 8012f38:	2e00      	cmp	r6, #0
 8012f3a:	d145      	bne.n	8012fc8 <_malloc_r+0xdc>
 8012f3c:	2c00      	cmp	r4, #0
 8012f3e:	d048      	beq.n	8012fd2 <_malloc_r+0xe6>
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	4631      	mov	r1, r6
 8012f44:	4638      	mov	r0, r7
 8012f46:	eb04 0903 	add.w	r9, r4, r3
 8012f4a:	f000 ffd1 	bl	8013ef0 <_sbrk_r>
 8012f4e:	4581      	cmp	r9, r0
 8012f50:	d13f      	bne.n	8012fd2 <_malloc_r+0xe6>
 8012f52:	6821      	ldr	r1, [r4, #0]
 8012f54:	1a6d      	subs	r5, r5, r1
 8012f56:	4629      	mov	r1, r5
 8012f58:	4638      	mov	r0, r7
 8012f5a:	f7ff ffa7 	bl	8012eac <sbrk_aligned>
 8012f5e:	3001      	adds	r0, #1
 8012f60:	d037      	beq.n	8012fd2 <_malloc_r+0xe6>
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	442b      	add	r3, r5
 8012f66:	6023      	str	r3, [r4, #0]
 8012f68:	f8d8 3000 	ldr.w	r3, [r8]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d038      	beq.n	8012fe2 <_malloc_r+0xf6>
 8012f70:	685a      	ldr	r2, [r3, #4]
 8012f72:	42a2      	cmp	r2, r4
 8012f74:	d12b      	bne.n	8012fce <_malloc_r+0xe2>
 8012f76:	2200      	movs	r2, #0
 8012f78:	605a      	str	r2, [r3, #4]
 8012f7a:	e00f      	b.n	8012f9c <_malloc_r+0xb0>
 8012f7c:	6822      	ldr	r2, [r4, #0]
 8012f7e:	1b52      	subs	r2, r2, r5
 8012f80:	d41f      	bmi.n	8012fc2 <_malloc_r+0xd6>
 8012f82:	2a0b      	cmp	r2, #11
 8012f84:	d917      	bls.n	8012fb6 <_malloc_r+0xca>
 8012f86:	1961      	adds	r1, r4, r5
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	6025      	str	r5, [r4, #0]
 8012f8c:	bf18      	it	ne
 8012f8e:	6059      	strne	r1, [r3, #4]
 8012f90:	6863      	ldr	r3, [r4, #4]
 8012f92:	bf08      	it	eq
 8012f94:	f8c8 1000 	streq.w	r1, [r8]
 8012f98:	5162      	str	r2, [r4, r5]
 8012f9a:	604b      	str	r3, [r1, #4]
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f104 060b 	add.w	r6, r4, #11
 8012fa2:	f000 f829 	bl	8012ff8 <__malloc_unlock>
 8012fa6:	f026 0607 	bic.w	r6, r6, #7
 8012faa:	1d23      	adds	r3, r4, #4
 8012fac:	1af2      	subs	r2, r6, r3
 8012fae:	d0ae      	beq.n	8012f0e <_malloc_r+0x22>
 8012fb0:	1b9b      	subs	r3, r3, r6
 8012fb2:	50a3      	str	r3, [r4, r2]
 8012fb4:	e7ab      	b.n	8012f0e <_malloc_r+0x22>
 8012fb6:	42a3      	cmp	r3, r4
 8012fb8:	6862      	ldr	r2, [r4, #4]
 8012fba:	d1dd      	bne.n	8012f78 <_malloc_r+0x8c>
 8012fbc:	f8c8 2000 	str.w	r2, [r8]
 8012fc0:	e7ec      	b.n	8012f9c <_malloc_r+0xb0>
 8012fc2:	4623      	mov	r3, r4
 8012fc4:	6864      	ldr	r4, [r4, #4]
 8012fc6:	e7ac      	b.n	8012f22 <_malloc_r+0x36>
 8012fc8:	4634      	mov	r4, r6
 8012fca:	6876      	ldr	r6, [r6, #4]
 8012fcc:	e7b4      	b.n	8012f38 <_malloc_r+0x4c>
 8012fce:	4613      	mov	r3, r2
 8012fd0:	e7cc      	b.n	8012f6c <_malloc_r+0x80>
 8012fd2:	230c      	movs	r3, #12
 8012fd4:	603b      	str	r3, [r7, #0]
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	f000 f80e 	bl	8012ff8 <__malloc_unlock>
 8012fdc:	e797      	b.n	8012f0e <_malloc_r+0x22>
 8012fde:	6025      	str	r5, [r4, #0]
 8012fe0:	e7dc      	b.n	8012f9c <_malloc_r+0xb0>
 8012fe2:	605b      	str	r3, [r3, #4]
 8012fe4:	deff      	udf	#255	; 0xff
 8012fe6:	bf00      	nop
 8012fe8:	200068fc 	.word	0x200068fc

08012fec <__malloc_lock>:
 8012fec:	4801      	ldr	r0, [pc, #4]	; (8012ff4 <__malloc_lock+0x8>)
 8012fee:	f7ff b87e 	b.w	80120ee <__retarget_lock_acquire_recursive>
 8012ff2:	bf00      	nop
 8012ff4:	200068f8 	.word	0x200068f8

08012ff8 <__malloc_unlock>:
 8012ff8:	4801      	ldr	r0, [pc, #4]	; (8013000 <__malloc_unlock+0x8>)
 8012ffa:	f7ff b879 	b.w	80120f0 <__retarget_lock_release_recursive>
 8012ffe:	bf00      	nop
 8013000:	200068f8 	.word	0x200068f8

08013004 <_Balloc>:
 8013004:	b570      	push	{r4, r5, r6, lr}
 8013006:	69c6      	ldr	r6, [r0, #28]
 8013008:	4604      	mov	r4, r0
 801300a:	460d      	mov	r5, r1
 801300c:	b976      	cbnz	r6, 801302c <_Balloc+0x28>
 801300e:	2010      	movs	r0, #16
 8013010:	f7ff ff44 	bl	8012e9c <malloc>
 8013014:	4602      	mov	r2, r0
 8013016:	61e0      	str	r0, [r4, #28]
 8013018:	b920      	cbnz	r0, 8013024 <_Balloc+0x20>
 801301a:	4b18      	ldr	r3, [pc, #96]	; (801307c <_Balloc+0x78>)
 801301c:	4818      	ldr	r0, [pc, #96]	; (8013080 <_Balloc+0x7c>)
 801301e:	216b      	movs	r1, #107	; 0x6b
 8013020:	f000 ff76 	bl	8013f10 <__assert_func>
 8013024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013028:	6006      	str	r6, [r0, #0]
 801302a:	60c6      	str	r6, [r0, #12]
 801302c:	69e6      	ldr	r6, [r4, #28]
 801302e:	68f3      	ldr	r3, [r6, #12]
 8013030:	b183      	cbz	r3, 8013054 <_Balloc+0x50>
 8013032:	69e3      	ldr	r3, [r4, #28]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801303a:	b9b8      	cbnz	r0, 801306c <_Balloc+0x68>
 801303c:	2101      	movs	r1, #1
 801303e:	fa01 f605 	lsl.w	r6, r1, r5
 8013042:	1d72      	adds	r2, r6, #5
 8013044:	0092      	lsls	r2, r2, #2
 8013046:	4620      	mov	r0, r4
 8013048:	f000 ff80 	bl	8013f4c <_calloc_r>
 801304c:	b160      	cbz	r0, 8013068 <_Balloc+0x64>
 801304e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013052:	e00e      	b.n	8013072 <_Balloc+0x6e>
 8013054:	2221      	movs	r2, #33	; 0x21
 8013056:	2104      	movs	r1, #4
 8013058:	4620      	mov	r0, r4
 801305a:	f000 ff77 	bl	8013f4c <_calloc_r>
 801305e:	69e3      	ldr	r3, [r4, #28]
 8013060:	60f0      	str	r0, [r6, #12]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d1e4      	bne.n	8013032 <_Balloc+0x2e>
 8013068:	2000      	movs	r0, #0
 801306a:	bd70      	pop	{r4, r5, r6, pc}
 801306c:	6802      	ldr	r2, [r0, #0]
 801306e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013072:	2300      	movs	r3, #0
 8013074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013078:	e7f7      	b.n	801306a <_Balloc+0x66>
 801307a:	bf00      	nop
 801307c:	08014a09 	.word	0x08014a09
 8013080:	08014a89 	.word	0x08014a89

08013084 <_Bfree>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	69c6      	ldr	r6, [r0, #28]
 8013088:	4605      	mov	r5, r0
 801308a:	460c      	mov	r4, r1
 801308c:	b976      	cbnz	r6, 80130ac <_Bfree+0x28>
 801308e:	2010      	movs	r0, #16
 8013090:	f7ff ff04 	bl	8012e9c <malloc>
 8013094:	4602      	mov	r2, r0
 8013096:	61e8      	str	r0, [r5, #28]
 8013098:	b920      	cbnz	r0, 80130a4 <_Bfree+0x20>
 801309a:	4b09      	ldr	r3, [pc, #36]	; (80130c0 <_Bfree+0x3c>)
 801309c:	4809      	ldr	r0, [pc, #36]	; (80130c4 <_Bfree+0x40>)
 801309e:	218f      	movs	r1, #143	; 0x8f
 80130a0:	f000 ff36 	bl	8013f10 <__assert_func>
 80130a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130a8:	6006      	str	r6, [r0, #0]
 80130aa:	60c6      	str	r6, [r0, #12]
 80130ac:	b13c      	cbz	r4, 80130be <_Bfree+0x3a>
 80130ae:	69eb      	ldr	r3, [r5, #28]
 80130b0:	6862      	ldr	r2, [r4, #4]
 80130b2:	68db      	ldr	r3, [r3, #12]
 80130b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80130b8:	6021      	str	r1, [r4, #0]
 80130ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80130be:	bd70      	pop	{r4, r5, r6, pc}
 80130c0:	08014a09 	.word	0x08014a09
 80130c4:	08014a89 	.word	0x08014a89

080130c8 <__multadd>:
 80130c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130cc:	690d      	ldr	r5, [r1, #16]
 80130ce:	4607      	mov	r7, r0
 80130d0:	460c      	mov	r4, r1
 80130d2:	461e      	mov	r6, r3
 80130d4:	f101 0c14 	add.w	ip, r1, #20
 80130d8:	2000      	movs	r0, #0
 80130da:	f8dc 3000 	ldr.w	r3, [ip]
 80130de:	b299      	uxth	r1, r3
 80130e0:	fb02 6101 	mla	r1, r2, r1, r6
 80130e4:	0c1e      	lsrs	r6, r3, #16
 80130e6:	0c0b      	lsrs	r3, r1, #16
 80130e8:	fb02 3306 	mla	r3, r2, r6, r3
 80130ec:	b289      	uxth	r1, r1
 80130ee:	3001      	adds	r0, #1
 80130f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80130f4:	4285      	cmp	r5, r0
 80130f6:	f84c 1b04 	str.w	r1, [ip], #4
 80130fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80130fe:	dcec      	bgt.n	80130da <__multadd+0x12>
 8013100:	b30e      	cbz	r6, 8013146 <__multadd+0x7e>
 8013102:	68a3      	ldr	r3, [r4, #8]
 8013104:	42ab      	cmp	r3, r5
 8013106:	dc19      	bgt.n	801313c <__multadd+0x74>
 8013108:	6861      	ldr	r1, [r4, #4]
 801310a:	4638      	mov	r0, r7
 801310c:	3101      	adds	r1, #1
 801310e:	f7ff ff79 	bl	8013004 <_Balloc>
 8013112:	4680      	mov	r8, r0
 8013114:	b928      	cbnz	r0, 8013122 <__multadd+0x5a>
 8013116:	4602      	mov	r2, r0
 8013118:	4b0c      	ldr	r3, [pc, #48]	; (801314c <__multadd+0x84>)
 801311a:	480d      	ldr	r0, [pc, #52]	; (8013150 <__multadd+0x88>)
 801311c:	21ba      	movs	r1, #186	; 0xba
 801311e:	f000 fef7 	bl	8013f10 <__assert_func>
 8013122:	6922      	ldr	r2, [r4, #16]
 8013124:	3202      	adds	r2, #2
 8013126:	f104 010c 	add.w	r1, r4, #12
 801312a:	0092      	lsls	r2, r2, #2
 801312c:	300c      	adds	r0, #12
 801312e:	f7fe ffe0 	bl	80120f2 <memcpy>
 8013132:	4621      	mov	r1, r4
 8013134:	4638      	mov	r0, r7
 8013136:	f7ff ffa5 	bl	8013084 <_Bfree>
 801313a:	4644      	mov	r4, r8
 801313c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013140:	3501      	adds	r5, #1
 8013142:	615e      	str	r6, [r3, #20]
 8013144:	6125      	str	r5, [r4, #16]
 8013146:	4620      	mov	r0, r4
 8013148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801314c:	08014a78 	.word	0x08014a78
 8013150:	08014a89 	.word	0x08014a89

08013154 <__hi0bits>:
 8013154:	0c03      	lsrs	r3, r0, #16
 8013156:	041b      	lsls	r3, r3, #16
 8013158:	b9d3      	cbnz	r3, 8013190 <__hi0bits+0x3c>
 801315a:	0400      	lsls	r0, r0, #16
 801315c:	2310      	movs	r3, #16
 801315e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013162:	bf04      	itt	eq
 8013164:	0200      	lsleq	r0, r0, #8
 8013166:	3308      	addeq	r3, #8
 8013168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801316c:	bf04      	itt	eq
 801316e:	0100      	lsleq	r0, r0, #4
 8013170:	3304      	addeq	r3, #4
 8013172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013176:	bf04      	itt	eq
 8013178:	0080      	lsleq	r0, r0, #2
 801317a:	3302      	addeq	r3, #2
 801317c:	2800      	cmp	r0, #0
 801317e:	db05      	blt.n	801318c <__hi0bits+0x38>
 8013180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013184:	f103 0301 	add.w	r3, r3, #1
 8013188:	bf08      	it	eq
 801318a:	2320      	moveq	r3, #32
 801318c:	4618      	mov	r0, r3
 801318e:	4770      	bx	lr
 8013190:	2300      	movs	r3, #0
 8013192:	e7e4      	b.n	801315e <__hi0bits+0xa>

08013194 <__lo0bits>:
 8013194:	6803      	ldr	r3, [r0, #0]
 8013196:	f013 0207 	ands.w	r2, r3, #7
 801319a:	d00c      	beq.n	80131b6 <__lo0bits+0x22>
 801319c:	07d9      	lsls	r1, r3, #31
 801319e:	d422      	bmi.n	80131e6 <__lo0bits+0x52>
 80131a0:	079a      	lsls	r2, r3, #30
 80131a2:	bf49      	itett	mi
 80131a4:	085b      	lsrmi	r3, r3, #1
 80131a6:	089b      	lsrpl	r3, r3, #2
 80131a8:	6003      	strmi	r3, [r0, #0]
 80131aa:	2201      	movmi	r2, #1
 80131ac:	bf5c      	itt	pl
 80131ae:	6003      	strpl	r3, [r0, #0]
 80131b0:	2202      	movpl	r2, #2
 80131b2:	4610      	mov	r0, r2
 80131b4:	4770      	bx	lr
 80131b6:	b299      	uxth	r1, r3
 80131b8:	b909      	cbnz	r1, 80131be <__lo0bits+0x2a>
 80131ba:	0c1b      	lsrs	r3, r3, #16
 80131bc:	2210      	movs	r2, #16
 80131be:	b2d9      	uxtb	r1, r3
 80131c0:	b909      	cbnz	r1, 80131c6 <__lo0bits+0x32>
 80131c2:	3208      	adds	r2, #8
 80131c4:	0a1b      	lsrs	r3, r3, #8
 80131c6:	0719      	lsls	r1, r3, #28
 80131c8:	bf04      	itt	eq
 80131ca:	091b      	lsreq	r3, r3, #4
 80131cc:	3204      	addeq	r2, #4
 80131ce:	0799      	lsls	r1, r3, #30
 80131d0:	bf04      	itt	eq
 80131d2:	089b      	lsreq	r3, r3, #2
 80131d4:	3202      	addeq	r2, #2
 80131d6:	07d9      	lsls	r1, r3, #31
 80131d8:	d403      	bmi.n	80131e2 <__lo0bits+0x4e>
 80131da:	085b      	lsrs	r3, r3, #1
 80131dc:	f102 0201 	add.w	r2, r2, #1
 80131e0:	d003      	beq.n	80131ea <__lo0bits+0x56>
 80131e2:	6003      	str	r3, [r0, #0]
 80131e4:	e7e5      	b.n	80131b2 <__lo0bits+0x1e>
 80131e6:	2200      	movs	r2, #0
 80131e8:	e7e3      	b.n	80131b2 <__lo0bits+0x1e>
 80131ea:	2220      	movs	r2, #32
 80131ec:	e7e1      	b.n	80131b2 <__lo0bits+0x1e>
	...

080131f0 <__i2b>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	460c      	mov	r4, r1
 80131f4:	2101      	movs	r1, #1
 80131f6:	f7ff ff05 	bl	8013004 <_Balloc>
 80131fa:	4602      	mov	r2, r0
 80131fc:	b928      	cbnz	r0, 801320a <__i2b+0x1a>
 80131fe:	4b05      	ldr	r3, [pc, #20]	; (8013214 <__i2b+0x24>)
 8013200:	4805      	ldr	r0, [pc, #20]	; (8013218 <__i2b+0x28>)
 8013202:	f240 1145 	movw	r1, #325	; 0x145
 8013206:	f000 fe83 	bl	8013f10 <__assert_func>
 801320a:	2301      	movs	r3, #1
 801320c:	6144      	str	r4, [r0, #20]
 801320e:	6103      	str	r3, [r0, #16]
 8013210:	bd10      	pop	{r4, pc}
 8013212:	bf00      	nop
 8013214:	08014a78 	.word	0x08014a78
 8013218:	08014a89 	.word	0x08014a89

0801321c <__multiply>:
 801321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013220:	4691      	mov	r9, r2
 8013222:	690a      	ldr	r2, [r1, #16]
 8013224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013228:	429a      	cmp	r2, r3
 801322a:	bfb8      	it	lt
 801322c:	460b      	movlt	r3, r1
 801322e:	460c      	mov	r4, r1
 8013230:	bfbc      	itt	lt
 8013232:	464c      	movlt	r4, r9
 8013234:	4699      	movlt	r9, r3
 8013236:	6927      	ldr	r7, [r4, #16]
 8013238:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801323c:	68a3      	ldr	r3, [r4, #8]
 801323e:	6861      	ldr	r1, [r4, #4]
 8013240:	eb07 060a 	add.w	r6, r7, sl
 8013244:	42b3      	cmp	r3, r6
 8013246:	b085      	sub	sp, #20
 8013248:	bfb8      	it	lt
 801324a:	3101      	addlt	r1, #1
 801324c:	f7ff feda 	bl	8013004 <_Balloc>
 8013250:	b930      	cbnz	r0, 8013260 <__multiply+0x44>
 8013252:	4602      	mov	r2, r0
 8013254:	4b44      	ldr	r3, [pc, #272]	; (8013368 <__multiply+0x14c>)
 8013256:	4845      	ldr	r0, [pc, #276]	; (801336c <__multiply+0x150>)
 8013258:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801325c:	f000 fe58 	bl	8013f10 <__assert_func>
 8013260:	f100 0514 	add.w	r5, r0, #20
 8013264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013268:	462b      	mov	r3, r5
 801326a:	2200      	movs	r2, #0
 801326c:	4543      	cmp	r3, r8
 801326e:	d321      	bcc.n	80132b4 <__multiply+0x98>
 8013270:	f104 0314 	add.w	r3, r4, #20
 8013274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013278:	f109 0314 	add.w	r3, r9, #20
 801327c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013280:	9202      	str	r2, [sp, #8]
 8013282:	1b3a      	subs	r2, r7, r4
 8013284:	3a15      	subs	r2, #21
 8013286:	f022 0203 	bic.w	r2, r2, #3
 801328a:	3204      	adds	r2, #4
 801328c:	f104 0115 	add.w	r1, r4, #21
 8013290:	428f      	cmp	r7, r1
 8013292:	bf38      	it	cc
 8013294:	2204      	movcc	r2, #4
 8013296:	9201      	str	r2, [sp, #4]
 8013298:	9a02      	ldr	r2, [sp, #8]
 801329a:	9303      	str	r3, [sp, #12]
 801329c:	429a      	cmp	r2, r3
 801329e:	d80c      	bhi.n	80132ba <__multiply+0x9e>
 80132a0:	2e00      	cmp	r6, #0
 80132a2:	dd03      	ble.n	80132ac <__multiply+0x90>
 80132a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d05b      	beq.n	8013364 <__multiply+0x148>
 80132ac:	6106      	str	r6, [r0, #16]
 80132ae:	b005      	add	sp, #20
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	f843 2b04 	str.w	r2, [r3], #4
 80132b8:	e7d8      	b.n	801326c <__multiply+0x50>
 80132ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80132be:	f1ba 0f00 	cmp.w	sl, #0
 80132c2:	d024      	beq.n	801330e <__multiply+0xf2>
 80132c4:	f104 0e14 	add.w	lr, r4, #20
 80132c8:	46a9      	mov	r9, r5
 80132ca:	f04f 0c00 	mov.w	ip, #0
 80132ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80132d2:	f8d9 1000 	ldr.w	r1, [r9]
 80132d6:	fa1f fb82 	uxth.w	fp, r2
 80132da:	b289      	uxth	r1, r1
 80132dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80132e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80132e4:	f8d9 2000 	ldr.w	r2, [r9]
 80132e8:	4461      	add	r1, ip
 80132ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80132ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80132f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80132f6:	b289      	uxth	r1, r1
 80132f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80132fc:	4577      	cmp	r7, lr
 80132fe:	f849 1b04 	str.w	r1, [r9], #4
 8013302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013306:	d8e2      	bhi.n	80132ce <__multiply+0xb2>
 8013308:	9a01      	ldr	r2, [sp, #4]
 801330a:	f845 c002 	str.w	ip, [r5, r2]
 801330e:	9a03      	ldr	r2, [sp, #12]
 8013310:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013314:	3304      	adds	r3, #4
 8013316:	f1b9 0f00 	cmp.w	r9, #0
 801331a:	d021      	beq.n	8013360 <__multiply+0x144>
 801331c:	6829      	ldr	r1, [r5, #0]
 801331e:	f104 0c14 	add.w	ip, r4, #20
 8013322:	46ae      	mov	lr, r5
 8013324:	f04f 0a00 	mov.w	sl, #0
 8013328:	f8bc b000 	ldrh.w	fp, [ip]
 801332c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013330:	fb09 220b 	mla	r2, r9, fp, r2
 8013334:	4452      	add	r2, sl
 8013336:	b289      	uxth	r1, r1
 8013338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801333c:	f84e 1b04 	str.w	r1, [lr], #4
 8013340:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013344:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013348:	f8be 1000 	ldrh.w	r1, [lr]
 801334c:	fb09 110a 	mla	r1, r9, sl, r1
 8013350:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013354:	4567      	cmp	r7, ip
 8013356:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801335a:	d8e5      	bhi.n	8013328 <__multiply+0x10c>
 801335c:	9a01      	ldr	r2, [sp, #4]
 801335e:	50a9      	str	r1, [r5, r2]
 8013360:	3504      	adds	r5, #4
 8013362:	e799      	b.n	8013298 <__multiply+0x7c>
 8013364:	3e01      	subs	r6, #1
 8013366:	e79b      	b.n	80132a0 <__multiply+0x84>
 8013368:	08014a78 	.word	0x08014a78
 801336c:	08014a89 	.word	0x08014a89

08013370 <__pow5mult>:
 8013370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013374:	4615      	mov	r5, r2
 8013376:	f012 0203 	ands.w	r2, r2, #3
 801337a:	4606      	mov	r6, r0
 801337c:	460f      	mov	r7, r1
 801337e:	d007      	beq.n	8013390 <__pow5mult+0x20>
 8013380:	4c25      	ldr	r4, [pc, #148]	; (8013418 <__pow5mult+0xa8>)
 8013382:	3a01      	subs	r2, #1
 8013384:	2300      	movs	r3, #0
 8013386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801338a:	f7ff fe9d 	bl	80130c8 <__multadd>
 801338e:	4607      	mov	r7, r0
 8013390:	10ad      	asrs	r5, r5, #2
 8013392:	d03d      	beq.n	8013410 <__pow5mult+0xa0>
 8013394:	69f4      	ldr	r4, [r6, #28]
 8013396:	b97c      	cbnz	r4, 80133b8 <__pow5mult+0x48>
 8013398:	2010      	movs	r0, #16
 801339a:	f7ff fd7f 	bl	8012e9c <malloc>
 801339e:	4602      	mov	r2, r0
 80133a0:	61f0      	str	r0, [r6, #28]
 80133a2:	b928      	cbnz	r0, 80133b0 <__pow5mult+0x40>
 80133a4:	4b1d      	ldr	r3, [pc, #116]	; (801341c <__pow5mult+0xac>)
 80133a6:	481e      	ldr	r0, [pc, #120]	; (8013420 <__pow5mult+0xb0>)
 80133a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80133ac:	f000 fdb0 	bl	8013f10 <__assert_func>
 80133b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133b4:	6004      	str	r4, [r0, #0]
 80133b6:	60c4      	str	r4, [r0, #12]
 80133b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80133bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80133c0:	b94c      	cbnz	r4, 80133d6 <__pow5mult+0x66>
 80133c2:	f240 2171 	movw	r1, #625	; 0x271
 80133c6:	4630      	mov	r0, r6
 80133c8:	f7ff ff12 	bl	80131f0 <__i2b>
 80133cc:	2300      	movs	r3, #0
 80133ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80133d2:	4604      	mov	r4, r0
 80133d4:	6003      	str	r3, [r0, #0]
 80133d6:	f04f 0900 	mov.w	r9, #0
 80133da:	07eb      	lsls	r3, r5, #31
 80133dc:	d50a      	bpl.n	80133f4 <__pow5mult+0x84>
 80133de:	4639      	mov	r1, r7
 80133e0:	4622      	mov	r2, r4
 80133e2:	4630      	mov	r0, r6
 80133e4:	f7ff ff1a 	bl	801321c <__multiply>
 80133e8:	4639      	mov	r1, r7
 80133ea:	4680      	mov	r8, r0
 80133ec:	4630      	mov	r0, r6
 80133ee:	f7ff fe49 	bl	8013084 <_Bfree>
 80133f2:	4647      	mov	r7, r8
 80133f4:	106d      	asrs	r5, r5, #1
 80133f6:	d00b      	beq.n	8013410 <__pow5mult+0xa0>
 80133f8:	6820      	ldr	r0, [r4, #0]
 80133fa:	b938      	cbnz	r0, 801340c <__pow5mult+0x9c>
 80133fc:	4622      	mov	r2, r4
 80133fe:	4621      	mov	r1, r4
 8013400:	4630      	mov	r0, r6
 8013402:	f7ff ff0b 	bl	801321c <__multiply>
 8013406:	6020      	str	r0, [r4, #0]
 8013408:	f8c0 9000 	str.w	r9, [r0]
 801340c:	4604      	mov	r4, r0
 801340e:	e7e4      	b.n	80133da <__pow5mult+0x6a>
 8013410:	4638      	mov	r0, r7
 8013412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013416:	bf00      	nop
 8013418:	08014bd8 	.word	0x08014bd8
 801341c:	08014a09 	.word	0x08014a09
 8013420:	08014a89 	.word	0x08014a89

08013424 <__lshift>:
 8013424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013428:	460c      	mov	r4, r1
 801342a:	6849      	ldr	r1, [r1, #4]
 801342c:	6923      	ldr	r3, [r4, #16]
 801342e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013432:	68a3      	ldr	r3, [r4, #8]
 8013434:	4607      	mov	r7, r0
 8013436:	4691      	mov	r9, r2
 8013438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801343c:	f108 0601 	add.w	r6, r8, #1
 8013440:	42b3      	cmp	r3, r6
 8013442:	db0b      	blt.n	801345c <__lshift+0x38>
 8013444:	4638      	mov	r0, r7
 8013446:	f7ff fddd 	bl	8013004 <_Balloc>
 801344a:	4605      	mov	r5, r0
 801344c:	b948      	cbnz	r0, 8013462 <__lshift+0x3e>
 801344e:	4602      	mov	r2, r0
 8013450:	4b28      	ldr	r3, [pc, #160]	; (80134f4 <__lshift+0xd0>)
 8013452:	4829      	ldr	r0, [pc, #164]	; (80134f8 <__lshift+0xd4>)
 8013454:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013458:	f000 fd5a 	bl	8013f10 <__assert_func>
 801345c:	3101      	adds	r1, #1
 801345e:	005b      	lsls	r3, r3, #1
 8013460:	e7ee      	b.n	8013440 <__lshift+0x1c>
 8013462:	2300      	movs	r3, #0
 8013464:	f100 0114 	add.w	r1, r0, #20
 8013468:	f100 0210 	add.w	r2, r0, #16
 801346c:	4618      	mov	r0, r3
 801346e:	4553      	cmp	r3, sl
 8013470:	db33      	blt.n	80134da <__lshift+0xb6>
 8013472:	6920      	ldr	r0, [r4, #16]
 8013474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013478:	f104 0314 	add.w	r3, r4, #20
 801347c:	f019 091f 	ands.w	r9, r9, #31
 8013480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013488:	d02b      	beq.n	80134e2 <__lshift+0xbe>
 801348a:	f1c9 0e20 	rsb	lr, r9, #32
 801348e:	468a      	mov	sl, r1
 8013490:	2200      	movs	r2, #0
 8013492:	6818      	ldr	r0, [r3, #0]
 8013494:	fa00 f009 	lsl.w	r0, r0, r9
 8013498:	4310      	orrs	r0, r2
 801349a:	f84a 0b04 	str.w	r0, [sl], #4
 801349e:	f853 2b04 	ldr.w	r2, [r3], #4
 80134a2:	459c      	cmp	ip, r3
 80134a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80134a8:	d8f3      	bhi.n	8013492 <__lshift+0x6e>
 80134aa:	ebac 0304 	sub.w	r3, ip, r4
 80134ae:	3b15      	subs	r3, #21
 80134b0:	f023 0303 	bic.w	r3, r3, #3
 80134b4:	3304      	adds	r3, #4
 80134b6:	f104 0015 	add.w	r0, r4, #21
 80134ba:	4584      	cmp	ip, r0
 80134bc:	bf38      	it	cc
 80134be:	2304      	movcc	r3, #4
 80134c0:	50ca      	str	r2, [r1, r3]
 80134c2:	b10a      	cbz	r2, 80134c8 <__lshift+0xa4>
 80134c4:	f108 0602 	add.w	r6, r8, #2
 80134c8:	3e01      	subs	r6, #1
 80134ca:	4638      	mov	r0, r7
 80134cc:	612e      	str	r6, [r5, #16]
 80134ce:	4621      	mov	r1, r4
 80134d0:	f7ff fdd8 	bl	8013084 <_Bfree>
 80134d4:	4628      	mov	r0, r5
 80134d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134da:	f842 0f04 	str.w	r0, [r2, #4]!
 80134de:	3301      	adds	r3, #1
 80134e0:	e7c5      	b.n	801346e <__lshift+0x4a>
 80134e2:	3904      	subs	r1, #4
 80134e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80134e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80134ec:	459c      	cmp	ip, r3
 80134ee:	d8f9      	bhi.n	80134e4 <__lshift+0xc0>
 80134f0:	e7ea      	b.n	80134c8 <__lshift+0xa4>
 80134f2:	bf00      	nop
 80134f4:	08014a78 	.word	0x08014a78
 80134f8:	08014a89 	.word	0x08014a89

080134fc <__mcmp>:
 80134fc:	b530      	push	{r4, r5, lr}
 80134fe:	6902      	ldr	r2, [r0, #16]
 8013500:	690c      	ldr	r4, [r1, #16]
 8013502:	1b12      	subs	r2, r2, r4
 8013504:	d10e      	bne.n	8013524 <__mcmp+0x28>
 8013506:	f100 0314 	add.w	r3, r0, #20
 801350a:	3114      	adds	r1, #20
 801350c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013510:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013514:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013518:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801351c:	42a5      	cmp	r5, r4
 801351e:	d003      	beq.n	8013528 <__mcmp+0x2c>
 8013520:	d305      	bcc.n	801352e <__mcmp+0x32>
 8013522:	2201      	movs	r2, #1
 8013524:	4610      	mov	r0, r2
 8013526:	bd30      	pop	{r4, r5, pc}
 8013528:	4283      	cmp	r3, r0
 801352a:	d3f3      	bcc.n	8013514 <__mcmp+0x18>
 801352c:	e7fa      	b.n	8013524 <__mcmp+0x28>
 801352e:	f04f 32ff 	mov.w	r2, #4294967295
 8013532:	e7f7      	b.n	8013524 <__mcmp+0x28>

08013534 <__mdiff>:
 8013534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	460c      	mov	r4, r1
 801353a:	4606      	mov	r6, r0
 801353c:	4611      	mov	r1, r2
 801353e:	4620      	mov	r0, r4
 8013540:	4690      	mov	r8, r2
 8013542:	f7ff ffdb 	bl	80134fc <__mcmp>
 8013546:	1e05      	subs	r5, r0, #0
 8013548:	d110      	bne.n	801356c <__mdiff+0x38>
 801354a:	4629      	mov	r1, r5
 801354c:	4630      	mov	r0, r6
 801354e:	f7ff fd59 	bl	8013004 <_Balloc>
 8013552:	b930      	cbnz	r0, 8013562 <__mdiff+0x2e>
 8013554:	4b3a      	ldr	r3, [pc, #232]	; (8013640 <__mdiff+0x10c>)
 8013556:	4602      	mov	r2, r0
 8013558:	f240 2137 	movw	r1, #567	; 0x237
 801355c:	4839      	ldr	r0, [pc, #228]	; (8013644 <__mdiff+0x110>)
 801355e:	f000 fcd7 	bl	8013f10 <__assert_func>
 8013562:	2301      	movs	r3, #1
 8013564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356c:	bfa4      	itt	ge
 801356e:	4643      	movge	r3, r8
 8013570:	46a0      	movge	r8, r4
 8013572:	4630      	mov	r0, r6
 8013574:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013578:	bfa6      	itte	ge
 801357a:	461c      	movge	r4, r3
 801357c:	2500      	movge	r5, #0
 801357e:	2501      	movlt	r5, #1
 8013580:	f7ff fd40 	bl	8013004 <_Balloc>
 8013584:	b920      	cbnz	r0, 8013590 <__mdiff+0x5c>
 8013586:	4b2e      	ldr	r3, [pc, #184]	; (8013640 <__mdiff+0x10c>)
 8013588:	4602      	mov	r2, r0
 801358a:	f240 2145 	movw	r1, #581	; 0x245
 801358e:	e7e5      	b.n	801355c <__mdiff+0x28>
 8013590:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013594:	6926      	ldr	r6, [r4, #16]
 8013596:	60c5      	str	r5, [r0, #12]
 8013598:	f104 0914 	add.w	r9, r4, #20
 801359c:	f108 0514 	add.w	r5, r8, #20
 80135a0:	f100 0e14 	add.w	lr, r0, #20
 80135a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80135a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80135ac:	f108 0210 	add.w	r2, r8, #16
 80135b0:	46f2      	mov	sl, lr
 80135b2:	2100      	movs	r1, #0
 80135b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80135b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80135bc:	fa11 f88b 	uxtah	r8, r1, fp
 80135c0:	b299      	uxth	r1, r3
 80135c2:	0c1b      	lsrs	r3, r3, #16
 80135c4:	eba8 0801 	sub.w	r8, r8, r1
 80135c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80135cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80135d0:	fa1f f888 	uxth.w	r8, r8
 80135d4:	1419      	asrs	r1, r3, #16
 80135d6:	454e      	cmp	r6, r9
 80135d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80135dc:	f84a 3b04 	str.w	r3, [sl], #4
 80135e0:	d8e8      	bhi.n	80135b4 <__mdiff+0x80>
 80135e2:	1b33      	subs	r3, r6, r4
 80135e4:	3b15      	subs	r3, #21
 80135e6:	f023 0303 	bic.w	r3, r3, #3
 80135ea:	3304      	adds	r3, #4
 80135ec:	3415      	adds	r4, #21
 80135ee:	42a6      	cmp	r6, r4
 80135f0:	bf38      	it	cc
 80135f2:	2304      	movcc	r3, #4
 80135f4:	441d      	add	r5, r3
 80135f6:	4473      	add	r3, lr
 80135f8:	469e      	mov	lr, r3
 80135fa:	462e      	mov	r6, r5
 80135fc:	4566      	cmp	r6, ip
 80135fe:	d30e      	bcc.n	801361e <__mdiff+0xea>
 8013600:	f10c 0203 	add.w	r2, ip, #3
 8013604:	1b52      	subs	r2, r2, r5
 8013606:	f022 0203 	bic.w	r2, r2, #3
 801360a:	3d03      	subs	r5, #3
 801360c:	45ac      	cmp	ip, r5
 801360e:	bf38      	it	cc
 8013610:	2200      	movcc	r2, #0
 8013612:	4413      	add	r3, r2
 8013614:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013618:	b17a      	cbz	r2, 801363a <__mdiff+0x106>
 801361a:	6107      	str	r7, [r0, #16]
 801361c:	e7a4      	b.n	8013568 <__mdiff+0x34>
 801361e:	f856 8b04 	ldr.w	r8, [r6], #4
 8013622:	fa11 f288 	uxtah	r2, r1, r8
 8013626:	1414      	asrs	r4, r2, #16
 8013628:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801362c:	b292      	uxth	r2, r2
 801362e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013632:	f84e 2b04 	str.w	r2, [lr], #4
 8013636:	1421      	asrs	r1, r4, #16
 8013638:	e7e0      	b.n	80135fc <__mdiff+0xc8>
 801363a:	3f01      	subs	r7, #1
 801363c:	e7ea      	b.n	8013614 <__mdiff+0xe0>
 801363e:	bf00      	nop
 8013640:	08014a78 	.word	0x08014a78
 8013644:	08014a89 	.word	0x08014a89

08013648 <__d2b>:
 8013648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801364c:	460f      	mov	r7, r1
 801364e:	2101      	movs	r1, #1
 8013650:	ec59 8b10 	vmov	r8, r9, d0
 8013654:	4616      	mov	r6, r2
 8013656:	f7ff fcd5 	bl	8013004 <_Balloc>
 801365a:	4604      	mov	r4, r0
 801365c:	b930      	cbnz	r0, 801366c <__d2b+0x24>
 801365e:	4602      	mov	r2, r0
 8013660:	4b24      	ldr	r3, [pc, #144]	; (80136f4 <__d2b+0xac>)
 8013662:	4825      	ldr	r0, [pc, #148]	; (80136f8 <__d2b+0xb0>)
 8013664:	f240 310f 	movw	r1, #783	; 0x30f
 8013668:	f000 fc52 	bl	8013f10 <__assert_func>
 801366c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013674:	bb2d      	cbnz	r5, 80136c2 <__d2b+0x7a>
 8013676:	9301      	str	r3, [sp, #4]
 8013678:	f1b8 0300 	subs.w	r3, r8, #0
 801367c:	d026      	beq.n	80136cc <__d2b+0x84>
 801367e:	4668      	mov	r0, sp
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	f7ff fd87 	bl	8013194 <__lo0bits>
 8013686:	e9dd 1200 	ldrd	r1, r2, [sp]
 801368a:	b1e8      	cbz	r0, 80136c8 <__d2b+0x80>
 801368c:	f1c0 0320 	rsb	r3, r0, #32
 8013690:	fa02 f303 	lsl.w	r3, r2, r3
 8013694:	430b      	orrs	r3, r1
 8013696:	40c2      	lsrs	r2, r0
 8013698:	6163      	str	r3, [r4, #20]
 801369a:	9201      	str	r2, [sp, #4]
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	61a3      	str	r3, [r4, #24]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	bf14      	ite	ne
 80136a4:	2202      	movne	r2, #2
 80136a6:	2201      	moveq	r2, #1
 80136a8:	6122      	str	r2, [r4, #16]
 80136aa:	b1bd      	cbz	r5, 80136dc <__d2b+0x94>
 80136ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80136b0:	4405      	add	r5, r0
 80136b2:	603d      	str	r5, [r7, #0]
 80136b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136b8:	6030      	str	r0, [r6, #0]
 80136ba:	4620      	mov	r0, r4
 80136bc:	b003      	add	sp, #12
 80136be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136c6:	e7d6      	b.n	8013676 <__d2b+0x2e>
 80136c8:	6161      	str	r1, [r4, #20]
 80136ca:	e7e7      	b.n	801369c <__d2b+0x54>
 80136cc:	a801      	add	r0, sp, #4
 80136ce:	f7ff fd61 	bl	8013194 <__lo0bits>
 80136d2:	9b01      	ldr	r3, [sp, #4]
 80136d4:	6163      	str	r3, [r4, #20]
 80136d6:	3020      	adds	r0, #32
 80136d8:	2201      	movs	r2, #1
 80136da:	e7e5      	b.n	80136a8 <__d2b+0x60>
 80136dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136e4:	6038      	str	r0, [r7, #0]
 80136e6:	6918      	ldr	r0, [r3, #16]
 80136e8:	f7ff fd34 	bl	8013154 <__hi0bits>
 80136ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136f0:	e7e2      	b.n	80136b8 <__d2b+0x70>
 80136f2:	bf00      	nop
 80136f4:	08014a78 	.word	0x08014a78
 80136f8:	08014a89 	.word	0x08014a89

080136fc <__ssputs_r>:
 80136fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013700:	688e      	ldr	r6, [r1, #8]
 8013702:	461f      	mov	r7, r3
 8013704:	42be      	cmp	r6, r7
 8013706:	680b      	ldr	r3, [r1, #0]
 8013708:	4682      	mov	sl, r0
 801370a:	460c      	mov	r4, r1
 801370c:	4690      	mov	r8, r2
 801370e:	d82c      	bhi.n	801376a <__ssputs_r+0x6e>
 8013710:	898a      	ldrh	r2, [r1, #12]
 8013712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013716:	d026      	beq.n	8013766 <__ssputs_r+0x6a>
 8013718:	6965      	ldr	r5, [r4, #20]
 801371a:	6909      	ldr	r1, [r1, #16]
 801371c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013720:	eba3 0901 	sub.w	r9, r3, r1
 8013724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013728:	1c7b      	adds	r3, r7, #1
 801372a:	444b      	add	r3, r9
 801372c:	106d      	asrs	r5, r5, #1
 801372e:	429d      	cmp	r5, r3
 8013730:	bf38      	it	cc
 8013732:	461d      	movcc	r5, r3
 8013734:	0553      	lsls	r3, r2, #21
 8013736:	d527      	bpl.n	8013788 <__ssputs_r+0x8c>
 8013738:	4629      	mov	r1, r5
 801373a:	f7ff fbd7 	bl	8012eec <_malloc_r>
 801373e:	4606      	mov	r6, r0
 8013740:	b360      	cbz	r0, 801379c <__ssputs_r+0xa0>
 8013742:	6921      	ldr	r1, [r4, #16]
 8013744:	464a      	mov	r2, r9
 8013746:	f7fe fcd4 	bl	80120f2 <memcpy>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013754:	81a3      	strh	r3, [r4, #12]
 8013756:	6126      	str	r6, [r4, #16]
 8013758:	6165      	str	r5, [r4, #20]
 801375a:	444e      	add	r6, r9
 801375c:	eba5 0509 	sub.w	r5, r5, r9
 8013760:	6026      	str	r6, [r4, #0]
 8013762:	60a5      	str	r5, [r4, #8]
 8013764:	463e      	mov	r6, r7
 8013766:	42be      	cmp	r6, r7
 8013768:	d900      	bls.n	801376c <__ssputs_r+0x70>
 801376a:	463e      	mov	r6, r7
 801376c:	6820      	ldr	r0, [r4, #0]
 801376e:	4632      	mov	r2, r6
 8013770:	4641      	mov	r1, r8
 8013772:	f000 fba3 	bl	8013ebc <memmove>
 8013776:	68a3      	ldr	r3, [r4, #8]
 8013778:	1b9b      	subs	r3, r3, r6
 801377a:	60a3      	str	r3, [r4, #8]
 801377c:	6823      	ldr	r3, [r4, #0]
 801377e:	4433      	add	r3, r6
 8013780:	6023      	str	r3, [r4, #0]
 8013782:	2000      	movs	r0, #0
 8013784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013788:	462a      	mov	r2, r5
 801378a:	f000 fc07 	bl	8013f9c <_realloc_r>
 801378e:	4606      	mov	r6, r0
 8013790:	2800      	cmp	r0, #0
 8013792:	d1e0      	bne.n	8013756 <__ssputs_r+0x5a>
 8013794:	6921      	ldr	r1, [r4, #16]
 8013796:	4650      	mov	r0, sl
 8013798:	f7ff fb34 	bl	8012e04 <_free_r>
 801379c:	230c      	movs	r3, #12
 801379e:	f8ca 3000 	str.w	r3, [sl]
 80137a2:	89a3      	ldrh	r3, [r4, #12]
 80137a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137a8:	81a3      	strh	r3, [r4, #12]
 80137aa:	f04f 30ff 	mov.w	r0, #4294967295
 80137ae:	e7e9      	b.n	8013784 <__ssputs_r+0x88>

080137b0 <_svfiprintf_r>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	4698      	mov	r8, r3
 80137b6:	898b      	ldrh	r3, [r1, #12]
 80137b8:	061b      	lsls	r3, r3, #24
 80137ba:	b09d      	sub	sp, #116	; 0x74
 80137bc:	4607      	mov	r7, r0
 80137be:	460d      	mov	r5, r1
 80137c0:	4614      	mov	r4, r2
 80137c2:	d50e      	bpl.n	80137e2 <_svfiprintf_r+0x32>
 80137c4:	690b      	ldr	r3, [r1, #16]
 80137c6:	b963      	cbnz	r3, 80137e2 <_svfiprintf_r+0x32>
 80137c8:	2140      	movs	r1, #64	; 0x40
 80137ca:	f7ff fb8f 	bl	8012eec <_malloc_r>
 80137ce:	6028      	str	r0, [r5, #0]
 80137d0:	6128      	str	r0, [r5, #16]
 80137d2:	b920      	cbnz	r0, 80137de <_svfiprintf_r+0x2e>
 80137d4:	230c      	movs	r3, #12
 80137d6:	603b      	str	r3, [r7, #0]
 80137d8:	f04f 30ff 	mov.w	r0, #4294967295
 80137dc:	e0d0      	b.n	8013980 <_svfiprintf_r+0x1d0>
 80137de:	2340      	movs	r3, #64	; 0x40
 80137e0:	616b      	str	r3, [r5, #20]
 80137e2:	2300      	movs	r3, #0
 80137e4:	9309      	str	r3, [sp, #36]	; 0x24
 80137e6:	2320      	movs	r3, #32
 80137e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80137f0:	2330      	movs	r3, #48	; 0x30
 80137f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013998 <_svfiprintf_r+0x1e8>
 80137f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137fa:	f04f 0901 	mov.w	r9, #1
 80137fe:	4623      	mov	r3, r4
 8013800:	469a      	mov	sl, r3
 8013802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013806:	b10a      	cbz	r2, 801380c <_svfiprintf_r+0x5c>
 8013808:	2a25      	cmp	r2, #37	; 0x25
 801380a:	d1f9      	bne.n	8013800 <_svfiprintf_r+0x50>
 801380c:	ebba 0b04 	subs.w	fp, sl, r4
 8013810:	d00b      	beq.n	801382a <_svfiprintf_r+0x7a>
 8013812:	465b      	mov	r3, fp
 8013814:	4622      	mov	r2, r4
 8013816:	4629      	mov	r1, r5
 8013818:	4638      	mov	r0, r7
 801381a:	f7ff ff6f 	bl	80136fc <__ssputs_r>
 801381e:	3001      	adds	r0, #1
 8013820:	f000 80a9 	beq.w	8013976 <_svfiprintf_r+0x1c6>
 8013824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013826:	445a      	add	r2, fp
 8013828:	9209      	str	r2, [sp, #36]	; 0x24
 801382a:	f89a 3000 	ldrb.w	r3, [sl]
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 80a1 	beq.w	8013976 <_svfiprintf_r+0x1c6>
 8013834:	2300      	movs	r3, #0
 8013836:	f04f 32ff 	mov.w	r2, #4294967295
 801383a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801383e:	f10a 0a01 	add.w	sl, sl, #1
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	9307      	str	r3, [sp, #28]
 8013846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801384a:	931a      	str	r3, [sp, #104]	; 0x68
 801384c:	4654      	mov	r4, sl
 801384e:	2205      	movs	r2, #5
 8013850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013854:	4850      	ldr	r0, [pc, #320]	; (8013998 <_svfiprintf_r+0x1e8>)
 8013856:	f7ec fcdb 	bl	8000210 <memchr>
 801385a:	9a04      	ldr	r2, [sp, #16]
 801385c:	b9d8      	cbnz	r0, 8013896 <_svfiprintf_r+0xe6>
 801385e:	06d0      	lsls	r0, r2, #27
 8013860:	bf44      	itt	mi
 8013862:	2320      	movmi	r3, #32
 8013864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013868:	0711      	lsls	r1, r2, #28
 801386a:	bf44      	itt	mi
 801386c:	232b      	movmi	r3, #43	; 0x2b
 801386e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013872:	f89a 3000 	ldrb.w	r3, [sl]
 8013876:	2b2a      	cmp	r3, #42	; 0x2a
 8013878:	d015      	beq.n	80138a6 <_svfiprintf_r+0xf6>
 801387a:	9a07      	ldr	r2, [sp, #28]
 801387c:	4654      	mov	r4, sl
 801387e:	2000      	movs	r0, #0
 8013880:	f04f 0c0a 	mov.w	ip, #10
 8013884:	4621      	mov	r1, r4
 8013886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801388a:	3b30      	subs	r3, #48	; 0x30
 801388c:	2b09      	cmp	r3, #9
 801388e:	d94d      	bls.n	801392c <_svfiprintf_r+0x17c>
 8013890:	b1b0      	cbz	r0, 80138c0 <_svfiprintf_r+0x110>
 8013892:	9207      	str	r2, [sp, #28]
 8013894:	e014      	b.n	80138c0 <_svfiprintf_r+0x110>
 8013896:	eba0 0308 	sub.w	r3, r0, r8
 801389a:	fa09 f303 	lsl.w	r3, r9, r3
 801389e:	4313      	orrs	r3, r2
 80138a0:	9304      	str	r3, [sp, #16]
 80138a2:	46a2      	mov	sl, r4
 80138a4:	e7d2      	b.n	801384c <_svfiprintf_r+0x9c>
 80138a6:	9b03      	ldr	r3, [sp, #12]
 80138a8:	1d19      	adds	r1, r3, #4
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	9103      	str	r1, [sp, #12]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	bfbb      	ittet	lt
 80138b2:	425b      	neglt	r3, r3
 80138b4:	f042 0202 	orrlt.w	r2, r2, #2
 80138b8:	9307      	strge	r3, [sp, #28]
 80138ba:	9307      	strlt	r3, [sp, #28]
 80138bc:	bfb8      	it	lt
 80138be:	9204      	strlt	r2, [sp, #16]
 80138c0:	7823      	ldrb	r3, [r4, #0]
 80138c2:	2b2e      	cmp	r3, #46	; 0x2e
 80138c4:	d10c      	bne.n	80138e0 <_svfiprintf_r+0x130>
 80138c6:	7863      	ldrb	r3, [r4, #1]
 80138c8:	2b2a      	cmp	r3, #42	; 0x2a
 80138ca:	d134      	bne.n	8013936 <_svfiprintf_r+0x186>
 80138cc:	9b03      	ldr	r3, [sp, #12]
 80138ce:	1d1a      	adds	r2, r3, #4
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	9203      	str	r2, [sp, #12]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	bfb8      	it	lt
 80138d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80138dc:	3402      	adds	r4, #2
 80138de:	9305      	str	r3, [sp, #20]
 80138e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80139a8 <_svfiprintf_r+0x1f8>
 80138e4:	7821      	ldrb	r1, [r4, #0]
 80138e6:	2203      	movs	r2, #3
 80138e8:	4650      	mov	r0, sl
 80138ea:	f7ec fc91 	bl	8000210 <memchr>
 80138ee:	b138      	cbz	r0, 8013900 <_svfiprintf_r+0x150>
 80138f0:	9b04      	ldr	r3, [sp, #16]
 80138f2:	eba0 000a 	sub.w	r0, r0, sl
 80138f6:	2240      	movs	r2, #64	; 0x40
 80138f8:	4082      	lsls	r2, r0
 80138fa:	4313      	orrs	r3, r2
 80138fc:	3401      	adds	r4, #1
 80138fe:	9304      	str	r3, [sp, #16]
 8013900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013904:	4825      	ldr	r0, [pc, #148]	; (801399c <_svfiprintf_r+0x1ec>)
 8013906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801390a:	2206      	movs	r2, #6
 801390c:	f7ec fc80 	bl	8000210 <memchr>
 8013910:	2800      	cmp	r0, #0
 8013912:	d038      	beq.n	8013986 <_svfiprintf_r+0x1d6>
 8013914:	4b22      	ldr	r3, [pc, #136]	; (80139a0 <_svfiprintf_r+0x1f0>)
 8013916:	bb1b      	cbnz	r3, 8013960 <_svfiprintf_r+0x1b0>
 8013918:	9b03      	ldr	r3, [sp, #12]
 801391a:	3307      	adds	r3, #7
 801391c:	f023 0307 	bic.w	r3, r3, #7
 8013920:	3308      	adds	r3, #8
 8013922:	9303      	str	r3, [sp, #12]
 8013924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013926:	4433      	add	r3, r6
 8013928:	9309      	str	r3, [sp, #36]	; 0x24
 801392a:	e768      	b.n	80137fe <_svfiprintf_r+0x4e>
 801392c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013930:	460c      	mov	r4, r1
 8013932:	2001      	movs	r0, #1
 8013934:	e7a6      	b.n	8013884 <_svfiprintf_r+0xd4>
 8013936:	2300      	movs	r3, #0
 8013938:	3401      	adds	r4, #1
 801393a:	9305      	str	r3, [sp, #20]
 801393c:	4619      	mov	r1, r3
 801393e:	f04f 0c0a 	mov.w	ip, #10
 8013942:	4620      	mov	r0, r4
 8013944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013948:	3a30      	subs	r2, #48	; 0x30
 801394a:	2a09      	cmp	r2, #9
 801394c:	d903      	bls.n	8013956 <_svfiprintf_r+0x1a6>
 801394e:	2b00      	cmp	r3, #0
 8013950:	d0c6      	beq.n	80138e0 <_svfiprintf_r+0x130>
 8013952:	9105      	str	r1, [sp, #20]
 8013954:	e7c4      	b.n	80138e0 <_svfiprintf_r+0x130>
 8013956:	fb0c 2101 	mla	r1, ip, r1, r2
 801395a:	4604      	mov	r4, r0
 801395c:	2301      	movs	r3, #1
 801395e:	e7f0      	b.n	8013942 <_svfiprintf_r+0x192>
 8013960:	ab03      	add	r3, sp, #12
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	462a      	mov	r2, r5
 8013966:	4b0f      	ldr	r3, [pc, #60]	; (80139a4 <_svfiprintf_r+0x1f4>)
 8013968:	a904      	add	r1, sp, #16
 801396a:	4638      	mov	r0, r7
 801396c:	f7fd fdee 	bl	801154c <_printf_float>
 8013970:	1c42      	adds	r2, r0, #1
 8013972:	4606      	mov	r6, r0
 8013974:	d1d6      	bne.n	8013924 <_svfiprintf_r+0x174>
 8013976:	89ab      	ldrh	r3, [r5, #12]
 8013978:	065b      	lsls	r3, r3, #25
 801397a:	f53f af2d 	bmi.w	80137d8 <_svfiprintf_r+0x28>
 801397e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013980:	b01d      	add	sp, #116	; 0x74
 8013982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013986:	ab03      	add	r3, sp, #12
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	462a      	mov	r2, r5
 801398c:	4b05      	ldr	r3, [pc, #20]	; (80139a4 <_svfiprintf_r+0x1f4>)
 801398e:	a904      	add	r1, sp, #16
 8013990:	4638      	mov	r0, r7
 8013992:	f7fe f87f 	bl	8011a94 <_printf_i>
 8013996:	e7eb      	b.n	8013970 <_svfiprintf_r+0x1c0>
 8013998:	08014be4 	.word	0x08014be4
 801399c:	08014bee 	.word	0x08014bee
 80139a0:	0801154d 	.word	0x0801154d
 80139a4:	080136fd 	.word	0x080136fd
 80139a8:	08014bea 	.word	0x08014bea

080139ac <__sfputc_r>:
 80139ac:	6893      	ldr	r3, [r2, #8]
 80139ae:	3b01      	subs	r3, #1
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	b410      	push	{r4}
 80139b4:	6093      	str	r3, [r2, #8]
 80139b6:	da08      	bge.n	80139ca <__sfputc_r+0x1e>
 80139b8:	6994      	ldr	r4, [r2, #24]
 80139ba:	42a3      	cmp	r3, r4
 80139bc:	db01      	blt.n	80139c2 <__sfputc_r+0x16>
 80139be:	290a      	cmp	r1, #10
 80139c0:	d103      	bne.n	80139ca <__sfputc_r+0x1e>
 80139c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139c6:	f000 b9e3 	b.w	8013d90 <__swbuf_r>
 80139ca:	6813      	ldr	r3, [r2, #0]
 80139cc:	1c58      	adds	r0, r3, #1
 80139ce:	6010      	str	r0, [r2, #0]
 80139d0:	7019      	strb	r1, [r3, #0]
 80139d2:	4608      	mov	r0, r1
 80139d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139d8:	4770      	bx	lr

080139da <__sfputs_r>:
 80139da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139dc:	4606      	mov	r6, r0
 80139de:	460f      	mov	r7, r1
 80139e0:	4614      	mov	r4, r2
 80139e2:	18d5      	adds	r5, r2, r3
 80139e4:	42ac      	cmp	r4, r5
 80139e6:	d101      	bne.n	80139ec <__sfputs_r+0x12>
 80139e8:	2000      	movs	r0, #0
 80139ea:	e007      	b.n	80139fc <__sfputs_r+0x22>
 80139ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f0:	463a      	mov	r2, r7
 80139f2:	4630      	mov	r0, r6
 80139f4:	f7ff ffda 	bl	80139ac <__sfputc_r>
 80139f8:	1c43      	adds	r3, r0, #1
 80139fa:	d1f3      	bne.n	80139e4 <__sfputs_r+0xa>
 80139fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a00 <_vfiprintf_r>:
 8013a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a04:	460d      	mov	r5, r1
 8013a06:	b09d      	sub	sp, #116	; 0x74
 8013a08:	4614      	mov	r4, r2
 8013a0a:	4698      	mov	r8, r3
 8013a0c:	4606      	mov	r6, r0
 8013a0e:	b118      	cbz	r0, 8013a18 <_vfiprintf_r+0x18>
 8013a10:	6a03      	ldr	r3, [r0, #32]
 8013a12:	b90b      	cbnz	r3, 8013a18 <_vfiprintf_r+0x18>
 8013a14:	f7fe f9ec 	bl	8011df0 <__sinit>
 8013a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a1a:	07d9      	lsls	r1, r3, #31
 8013a1c:	d405      	bmi.n	8013a2a <_vfiprintf_r+0x2a>
 8013a1e:	89ab      	ldrh	r3, [r5, #12]
 8013a20:	059a      	lsls	r2, r3, #22
 8013a22:	d402      	bmi.n	8013a2a <_vfiprintf_r+0x2a>
 8013a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a26:	f7fe fb62 	bl	80120ee <__retarget_lock_acquire_recursive>
 8013a2a:	89ab      	ldrh	r3, [r5, #12]
 8013a2c:	071b      	lsls	r3, r3, #28
 8013a2e:	d501      	bpl.n	8013a34 <_vfiprintf_r+0x34>
 8013a30:	692b      	ldr	r3, [r5, #16]
 8013a32:	b99b      	cbnz	r3, 8013a5c <_vfiprintf_r+0x5c>
 8013a34:	4629      	mov	r1, r5
 8013a36:	4630      	mov	r0, r6
 8013a38:	f000 f9e8 	bl	8013e0c <__swsetup_r>
 8013a3c:	b170      	cbz	r0, 8013a5c <_vfiprintf_r+0x5c>
 8013a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a40:	07dc      	lsls	r4, r3, #31
 8013a42:	d504      	bpl.n	8013a4e <_vfiprintf_r+0x4e>
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295
 8013a48:	b01d      	add	sp, #116	; 0x74
 8013a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4e:	89ab      	ldrh	r3, [r5, #12]
 8013a50:	0598      	lsls	r0, r3, #22
 8013a52:	d4f7      	bmi.n	8013a44 <_vfiprintf_r+0x44>
 8013a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a56:	f7fe fb4b 	bl	80120f0 <__retarget_lock_release_recursive>
 8013a5a:	e7f3      	b.n	8013a44 <_vfiprintf_r+0x44>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a60:	2320      	movs	r3, #32
 8013a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a6a:	2330      	movs	r3, #48	; 0x30
 8013a6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013c20 <_vfiprintf_r+0x220>
 8013a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a74:	f04f 0901 	mov.w	r9, #1
 8013a78:	4623      	mov	r3, r4
 8013a7a:	469a      	mov	sl, r3
 8013a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a80:	b10a      	cbz	r2, 8013a86 <_vfiprintf_r+0x86>
 8013a82:	2a25      	cmp	r2, #37	; 0x25
 8013a84:	d1f9      	bne.n	8013a7a <_vfiprintf_r+0x7a>
 8013a86:	ebba 0b04 	subs.w	fp, sl, r4
 8013a8a:	d00b      	beq.n	8013aa4 <_vfiprintf_r+0xa4>
 8013a8c:	465b      	mov	r3, fp
 8013a8e:	4622      	mov	r2, r4
 8013a90:	4629      	mov	r1, r5
 8013a92:	4630      	mov	r0, r6
 8013a94:	f7ff ffa1 	bl	80139da <__sfputs_r>
 8013a98:	3001      	adds	r0, #1
 8013a9a:	f000 80a9 	beq.w	8013bf0 <_vfiprintf_r+0x1f0>
 8013a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aa0:	445a      	add	r2, fp
 8013aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8013aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f000 80a1 	beq.w	8013bf0 <_vfiprintf_r+0x1f0>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ab8:	f10a 0a01 	add.w	sl, sl, #1
 8013abc:	9304      	str	r3, [sp, #16]
 8013abe:	9307      	str	r3, [sp, #28]
 8013ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ac4:	931a      	str	r3, [sp, #104]	; 0x68
 8013ac6:	4654      	mov	r4, sl
 8013ac8:	2205      	movs	r2, #5
 8013aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ace:	4854      	ldr	r0, [pc, #336]	; (8013c20 <_vfiprintf_r+0x220>)
 8013ad0:	f7ec fb9e 	bl	8000210 <memchr>
 8013ad4:	9a04      	ldr	r2, [sp, #16]
 8013ad6:	b9d8      	cbnz	r0, 8013b10 <_vfiprintf_r+0x110>
 8013ad8:	06d1      	lsls	r1, r2, #27
 8013ada:	bf44      	itt	mi
 8013adc:	2320      	movmi	r3, #32
 8013ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ae2:	0713      	lsls	r3, r2, #28
 8013ae4:	bf44      	itt	mi
 8013ae6:	232b      	movmi	r3, #43	; 0x2b
 8013ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aec:	f89a 3000 	ldrb.w	r3, [sl]
 8013af0:	2b2a      	cmp	r3, #42	; 0x2a
 8013af2:	d015      	beq.n	8013b20 <_vfiprintf_r+0x120>
 8013af4:	9a07      	ldr	r2, [sp, #28]
 8013af6:	4654      	mov	r4, sl
 8013af8:	2000      	movs	r0, #0
 8013afa:	f04f 0c0a 	mov.w	ip, #10
 8013afe:	4621      	mov	r1, r4
 8013b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b04:	3b30      	subs	r3, #48	; 0x30
 8013b06:	2b09      	cmp	r3, #9
 8013b08:	d94d      	bls.n	8013ba6 <_vfiprintf_r+0x1a6>
 8013b0a:	b1b0      	cbz	r0, 8013b3a <_vfiprintf_r+0x13a>
 8013b0c:	9207      	str	r2, [sp, #28]
 8013b0e:	e014      	b.n	8013b3a <_vfiprintf_r+0x13a>
 8013b10:	eba0 0308 	sub.w	r3, r0, r8
 8013b14:	fa09 f303 	lsl.w	r3, r9, r3
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	9304      	str	r3, [sp, #16]
 8013b1c:	46a2      	mov	sl, r4
 8013b1e:	e7d2      	b.n	8013ac6 <_vfiprintf_r+0xc6>
 8013b20:	9b03      	ldr	r3, [sp, #12]
 8013b22:	1d19      	adds	r1, r3, #4
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	9103      	str	r1, [sp, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	bfbb      	ittet	lt
 8013b2c:	425b      	neglt	r3, r3
 8013b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013b32:	9307      	strge	r3, [sp, #28]
 8013b34:	9307      	strlt	r3, [sp, #28]
 8013b36:	bfb8      	it	lt
 8013b38:	9204      	strlt	r2, [sp, #16]
 8013b3a:	7823      	ldrb	r3, [r4, #0]
 8013b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013b3e:	d10c      	bne.n	8013b5a <_vfiprintf_r+0x15a>
 8013b40:	7863      	ldrb	r3, [r4, #1]
 8013b42:	2b2a      	cmp	r3, #42	; 0x2a
 8013b44:	d134      	bne.n	8013bb0 <_vfiprintf_r+0x1b0>
 8013b46:	9b03      	ldr	r3, [sp, #12]
 8013b48:	1d1a      	adds	r2, r3, #4
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	9203      	str	r2, [sp, #12]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	bfb8      	it	lt
 8013b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b56:	3402      	adds	r4, #2
 8013b58:	9305      	str	r3, [sp, #20]
 8013b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013c30 <_vfiprintf_r+0x230>
 8013b5e:	7821      	ldrb	r1, [r4, #0]
 8013b60:	2203      	movs	r2, #3
 8013b62:	4650      	mov	r0, sl
 8013b64:	f7ec fb54 	bl	8000210 <memchr>
 8013b68:	b138      	cbz	r0, 8013b7a <_vfiprintf_r+0x17a>
 8013b6a:	9b04      	ldr	r3, [sp, #16]
 8013b6c:	eba0 000a 	sub.w	r0, r0, sl
 8013b70:	2240      	movs	r2, #64	; 0x40
 8013b72:	4082      	lsls	r2, r0
 8013b74:	4313      	orrs	r3, r2
 8013b76:	3401      	adds	r4, #1
 8013b78:	9304      	str	r3, [sp, #16]
 8013b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b7e:	4829      	ldr	r0, [pc, #164]	; (8013c24 <_vfiprintf_r+0x224>)
 8013b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b84:	2206      	movs	r2, #6
 8013b86:	f7ec fb43 	bl	8000210 <memchr>
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d03f      	beq.n	8013c0e <_vfiprintf_r+0x20e>
 8013b8e:	4b26      	ldr	r3, [pc, #152]	; (8013c28 <_vfiprintf_r+0x228>)
 8013b90:	bb1b      	cbnz	r3, 8013bda <_vfiprintf_r+0x1da>
 8013b92:	9b03      	ldr	r3, [sp, #12]
 8013b94:	3307      	adds	r3, #7
 8013b96:	f023 0307 	bic.w	r3, r3, #7
 8013b9a:	3308      	adds	r3, #8
 8013b9c:	9303      	str	r3, [sp, #12]
 8013b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ba0:	443b      	add	r3, r7
 8013ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ba4:	e768      	b.n	8013a78 <_vfiprintf_r+0x78>
 8013ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013baa:	460c      	mov	r4, r1
 8013bac:	2001      	movs	r0, #1
 8013bae:	e7a6      	b.n	8013afe <_vfiprintf_r+0xfe>
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	3401      	adds	r4, #1
 8013bb4:	9305      	str	r3, [sp, #20]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	f04f 0c0a 	mov.w	ip, #10
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bc2:	3a30      	subs	r2, #48	; 0x30
 8013bc4:	2a09      	cmp	r2, #9
 8013bc6:	d903      	bls.n	8013bd0 <_vfiprintf_r+0x1d0>
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d0c6      	beq.n	8013b5a <_vfiprintf_r+0x15a>
 8013bcc:	9105      	str	r1, [sp, #20]
 8013bce:	e7c4      	b.n	8013b5a <_vfiprintf_r+0x15a>
 8013bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	e7f0      	b.n	8013bbc <_vfiprintf_r+0x1bc>
 8013bda:	ab03      	add	r3, sp, #12
 8013bdc:	9300      	str	r3, [sp, #0]
 8013bde:	462a      	mov	r2, r5
 8013be0:	4b12      	ldr	r3, [pc, #72]	; (8013c2c <_vfiprintf_r+0x22c>)
 8013be2:	a904      	add	r1, sp, #16
 8013be4:	4630      	mov	r0, r6
 8013be6:	f7fd fcb1 	bl	801154c <_printf_float>
 8013bea:	4607      	mov	r7, r0
 8013bec:	1c78      	adds	r0, r7, #1
 8013bee:	d1d6      	bne.n	8013b9e <_vfiprintf_r+0x19e>
 8013bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bf2:	07d9      	lsls	r1, r3, #31
 8013bf4:	d405      	bmi.n	8013c02 <_vfiprintf_r+0x202>
 8013bf6:	89ab      	ldrh	r3, [r5, #12]
 8013bf8:	059a      	lsls	r2, r3, #22
 8013bfa:	d402      	bmi.n	8013c02 <_vfiprintf_r+0x202>
 8013bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bfe:	f7fe fa77 	bl	80120f0 <__retarget_lock_release_recursive>
 8013c02:	89ab      	ldrh	r3, [r5, #12]
 8013c04:	065b      	lsls	r3, r3, #25
 8013c06:	f53f af1d 	bmi.w	8013a44 <_vfiprintf_r+0x44>
 8013c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c0c:	e71c      	b.n	8013a48 <_vfiprintf_r+0x48>
 8013c0e:	ab03      	add	r3, sp, #12
 8013c10:	9300      	str	r3, [sp, #0]
 8013c12:	462a      	mov	r2, r5
 8013c14:	4b05      	ldr	r3, [pc, #20]	; (8013c2c <_vfiprintf_r+0x22c>)
 8013c16:	a904      	add	r1, sp, #16
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f7fd ff3b 	bl	8011a94 <_printf_i>
 8013c1e:	e7e4      	b.n	8013bea <_vfiprintf_r+0x1ea>
 8013c20:	08014be4 	.word	0x08014be4
 8013c24:	08014bee 	.word	0x08014bee
 8013c28:	0801154d 	.word	0x0801154d
 8013c2c:	080139db 	.word	0x080139db
 8013c30:	08014bea 	.word	0x08014bea

08013c34 <__sflush_r>:
 8013c34:	898a      	ldrh	r2, [r1, #12]
 8013c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3a:	4605      	mov	r5, r0
 8013c3c:	0710      	lsls	r0, r2, #28
 8013c3e:	460c      	mov	r4, r1
 8013c40:	d458      	bmi.n	8013cf4 <__sflush_r+0xc0>
 8013c42:	684b      	ldr	r3, [r1, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	dc05      	bgt.n	8013c54 <__sflush_r+0x20>
 8013c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	dc02      	bgt.n	8013c54 <__sflush_r+0x20>
 8013c4e:	2000      	movs	r0, #0
 8013c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c56:	2e00      	cmp	r6, #0
 8013c58:	d0f9      	beq.n	8013c4e <__sflush_r+0x1a>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c60:	682f      	ldr	r7, [r5, #0]
 8013c62:	6a21      	ldr	r1, [r4, #32]
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	d032      	beq.n	8013cce <__sflush_r+0x9a>
 8013c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c6a:	89a3      	ldrh	r3, [r4, #12]
 8013c6c:	075a      	lsls	r2, r3, #29
 8013c6e:	d505      	bpl.n	8013c7c <__sflush_r+0x48>
 8013c70:	6863      	ldr	r3, [r4, #4]
 8013c72:	1ac0      	subs	r0, r0, r3
 8013c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c76:	b10b      	cbz	r3, 8013c7c <__sflush_r+0x48>
 8013c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c7a:	1ac0      	subs	r0, r0, r3
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	4602      	mov	r2, r0
 8013c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c82:	6a21      	ldr	r1, [r4, #32]
 8013c84:	4628      	mov	r0, r5
 8013c86:	47b0      	blx	r6
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	d106      	bne.n	8013c9c <__sflush_r+0x68>
 8013c8e:	6829      	ldr	r1, [r5, #0]
 8013c90:	291d      	cmp	r1, #29
 8013c92:	d82b      	bhi.n	8013cec <__sflush_r+0xb8>
 8013c94:	4a29      	ldr	r2, [pc, #164]	; (8013d3c <__sflush_r+0x108>)
 8013c96:	410a      	asrs	r2, r1
 8013c98:	07d6      	lsls	r6, r2, #31
 8013c9a:	d427      	bmi.n	8013cec <__sflush_r+0xb8>
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	6062      	str	r2, [r4, #4]
 8013ca0:	04d9      	lsls	r1, r3, #19
 8013ca2:	6922      	ldr	r2, [r4, #16]
 8013ca4:	6022      	str	r2, [r4, #0]
 8013ca6:	d504      	bpl.n	8013cb2 <__sflush_r+0x7e>
 8013ca8:	1c42      	adds	r2, r0, #1
 8013caa:	d101      	bne.n	8013cb0 <__sflush_r+0x7c>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	b903      	cbnz	r3, 8013cb2 <__sflush_r+0x7e>
 8013cb0:	6560      	str	r0, [r4, #84]	; 0x54
 8013cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cb4:	602f      	str	r7, [r5, #0]
 8013cb6:	2900      	cmp	r1, #0
 8013cb8:	d0c9      	beq.n	8013c4e <__sflush_r+0x1a>
 8013cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cbe:	4299      	cmp	r1, r3
 8013cc0:	d002      	beq.n	8013cc8 <__sflush_r+0x94>
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	f7ff f89e 	bl	8012e04 <_free_r>
 8013cc8:	2000      	movs	r0, #0
 8013cca:	6360      	str	r0, [r4, #52]	; 0x34
 8013ccc:	e7c0      	b.n	8013c50 <__sflush_r+0x1c>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	47b0      	blx	r6
 8013cd4:	1c41      	adds	r1, r0, #1
 8013cd6:	d1c8      	bne.n	8013c6a <__sflush_r+0x36>
 8013cd8:	682b      	ldr	r3, [r5, #0]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0c5      	beq.n	8013c6a <__sflush_r+0x36>
 8013cde:	2b1d      	cmp	r3, #29
 8013ce0:	d001      	beq.n	8013ce6 <__sflush_r+0xb2>
 8013ce2:	2b16      	cmp	r3, #22
 8013ce4:	d101      	bne.n	8013cea <__sflush_r+0xb6>
 8013ce6:	602f      	str	r7, [r5, #0]
 8013ce8:	e7b1      	b.n	8013c4e <__sflush_r+0x1a>
 8013cea:	89a3      	ldrh	r3, [r4, #12]
 8013cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cf0:	81a3      	strh	r3, [r4, #12]
 8013cf2:	e7ad      	b.n	8013c50 <__sflush_r+0x1c>
 8013cf4:	690f      	ldr	r7, [r1, #16]
 8013cf6:	2f00      	cmp	r7, #0
 8013cf8:	d0a9      	beq.n	8013c4e <__sflush_r+0x1a>
 8013cfa:	0793      	lsls	r3, r2, #30
 8013cfc:	680e      	ldr	r6, [r1, #0]
 8013cfe:	bf08      	it	eq
 8013d00:	694b      	ldreq	r3, [r1, #20]
 8013d02:	600f      	str	r7, [r1, #0]
 8013d04:	bf18      	it	ne
 8013d06:	2300      	movne	r3, #0
 8013d08:	eba6 0807 	sub.w	r8, r6, r7
 8013d0c:	608b      	str	r3, [r1, #8]
 8013d0e:	f1b8 0f00 	cmp.w	r8, #0
 8013d12:	dd9c      	ble.n	8013c4e <__sflush_r+0x1a>
 8013d14:	6a21      	ldr	r1, [r4, #32]
 8013d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d18:	4643      	mov	r3, r8
 8013d1a:	463a      	mov	r2, r7
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	47b0      	blx	r6
 8013d20:	2800      	cmp	r0, #0
 8013d22:	dc06      	bgt.n	8013d32 <__sflush_r+0xfe>
 8013d24:	89a3      	ldrh	r3, [r4, #12]
 8013d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d2a:	81a3      	strh	r3, [r4, #12]
 8013d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d30:	e78e      	b.n	8013c50 <__sflush_r+0x1c>
 8013d32:	4407      	add	r7, r0
 8013d34:	eba8 0800 	sub.w	r8, r8, r0
 8013d38:	e7e9      	b.n	8013d0e <__sflush_r+0xda>
 8013d3a:	bf00      	nop
 8013d3c:	dfbffffe 	.word	0xdfbffffe

08013d40 <_fflush_r>:
 8013d40:	b538      	push	{r3, r4, r5, lr}
 8013d42:	690b      	ldr	r3, [r1, #16]
 8013d44:	4605      	mov	r5, r0
 8013d46:	460c      	mov	r4, r1
 8013d48:	b913      	cbnz	r3, 8013d50 <_fflush_r+0x10>
 8013d4a:	2500      	movs	r5, #0
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	bd38      	pop	{r3, r4, r5, pc}
 8013d50:	b118      	cbz	r0, 8013d5a <_fflush_r+0x1a>
 8013d52:	6a03      	ldr	r3, [r0, #32]
 8013d54:	b90b      	cbnz	r3, 8013d5a <_fflush_r+0x1a>
 8013d56:	f7fe f84b 	bl	8011df0 <__sinit>
 8013d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d0f3      	beq.n	8013d4a <_fflush_r+0xa>
 8013d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d64:	07d0      	lsls	r0, r2, #31
 8013d66:	d404      	bmi.n	8013d72 <_fflush_r+0x32>
 8013d68:	0599      	lsls	r1, r3, #22
 8013d6a:	d402      	bmi.n	8013d72 <_fflush_r+0x32>
 8013d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d6e:	f7fe f9be 	bl	80120ee <__retarget_lock_acquire_recursive>
 8013d72:	4628      	mov	r0, r5
 8013d74:	4621      	mov	r1, r4
 8013d76:	f7ff ff5d 	bl	8013c34 <__sflush_r>
 8013d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d7c:	07da      	lsls	r2, r3, #31
 8013d7e:	4605      	mov	r5, r0
 8013d80:	d4e4      	bmi.n	8013d4c <_fflush_r+0xc>
 8013d82:	89a3      	ldrh	r3, [r4, #12]
 8013d84:	059b      	lsls	r3, r3, #22
 8013d86:	d4e1      	bmi.n	8013d4c <_fflush_r+0xc>
 8013d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d8a:	f7fe f9b1 	bl	80120f0 <__retarget_lock_release_recursive>
 8013d8e:	e7dd      	b.n	8013d4c <_fflush_r+0xc>

08013d90 <__swbuf_r>:
 8013d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d92:	460e      	mov	r6, r1
 8013d94:	4614      	mov	r4, r2
 8013d96:	4605      	mov	r5, r0
 8013d98:	b118      	cbz	r0, 8013da2 <__swbuf_r+0x12>
 8013d9a:	6a03      	ldr	r3, [r0, #32]
 8013d9c:	b90b      	cbnz	r3, 8013da2 <__swbuf_r+0x12>
 8013d9e:	f7fe f827 	bl	8011df0 <__sinit>
 8013da2:	69a3      	ldr	r3, [r4, #24]
 8013da4:	60a3      	str	r3, [r4, #8]
 8013da6:	89a3      	ldrh	r3, [r4, #12]
 8013da8:	071a      	lsls	r2, r3, #28
 8013daa:	d525      	bpl.n	8013df8 <__swbuf_r+0x68>
 8013dac:	6923      	ldr	r3, [r4, #16]
 8013dae:	b31b      	cbz	r3, 8013df8 <__swbuf_r+0x68>
 8013db0:	6823      	ldr	r3, [r4, #0]
 8013db2:	6922      	ldr	r2, [r4, #16]
 8013db4:	1a98      	subs	r0, r3, r2
 8013db6:	6963      	ldr	r3, [r4, #20]
 8013db8:	b2f6      	uxtb	r6, r6
 8013dba:	4283      	cmp	r3, r0
 8013dbc:	4637      	mov	r7, r6
 8013dbe:	dc04      	bgt.n	8013dca <__swbuf_r+0x3a>
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f7ff ffbc 	bl	8013d40 <_fflush_r>
 8013dc8:	b9e0      	cbnz	r0, 8013e04 <__swbuf_r+0x74>
 8013dca:	68a3      	ldr	r3, [r4, #8]
 8013dcc:	3b01      	subs	r3, #1
 8013dce:	60a3      	str	r3, [r4, #8]
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	1c5a      	adds	r2, r3, #1
 8013dd4:	6022      	str	r2, [r4, #0]
 8013dd6:	701e      	strb	r6, [r3, #0]
 8013dd8:	6962      	ldr	r2, [r4, #20]
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d004      	beq.n	8013dea <__swbuf_r+0x5a>
 8013de0:	89a3      	ldrh	r3, [r4, #12]
 8013de2:	07db      	lsls	r3, r3, #31
 8013de4:	d506      	bpl.n	8013df4 <__swbuf_r+0x64>
 8013de6:	2e0a      	cmp	r6, #10
 8013de8:	d104      	bne.n	8013df4 <__swbuf_r+0x64>
 8013dea:	4621      	mov	r1, r4
 8013dec:	4628      	mov	r0, r5
 8013dee:	f7ff ffa7 	bl	8013d40 <_fflush_r>
 8013df2:	b938      	cbnz	r0, 8013e04 <__swbuf_r+0x74>
 8013df4:	4638      	mov	r0, r7
 8013df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013df8:	4621      	mov	r1, r4
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	f000 f806 	bl	8013e0c <__swsetup_r>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d0d5      	beq.n	8013db0 <__swbuf_r+0x20>
 8013e04:	f04f 37ff 	mov.w	r7, #4294967295
 8013e08:	e7f4      	b.n	8013df4 <__swbuf_r+0x64>
	...

08013e0c <__swsetup_r>:
 8013e0c:	b538      	push	{r3, r4, r5, lr}
 8013e0e:	4b2a      	ldr	r3, [pc, #168]	; (8013eb8 <__swsetup_r+0xac>)
 8013e10:	4605      	mov	r5, r0
 8013e12:	6818      	ldr	r0, [r3, #0]
 8013e14:	460c      	mov	r4, r1
 8013e16:	b118      	cbz	r0, 8013e20 <__swsetup_r+0x14>
 8013e18:	6a03      	ldr	r3, [r0, #32]
 8013e1a:	b90b      	cbnz	r3, 8013e20 <__swsetup_r+0x14>
 8013e1c:	f7fd ffe8 	bl	8011df0 <__sinit>
 8013e20:	89a3      	ldrh	r3, [r4, #12]
 8013e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e26:	0718      	lsls	r0, r3, #28
 8013e28:	d422      	bmi.n	8013e70 <__swsetup_r+0x64>
 8013e2a:	06d9      	lsls	r1, r3, #27
 8013e2c:	d407      	bmi.n	8013e3e <__swsetup_r+0x32>
 8013e2e:	2309      	movs	r3, #9
 8013e30:	602b      	str	r3, [r5, #0]
 8013e32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e36:	81a3      	strh	r3, [r4, #12]
 8013e38:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3c:	e034      	b.n	8013ea8 <__swsetup_r+0x9c>
 8013e3e:	0758      	lsls	r0, r3, #29
 8013e40:	d512      	bpl.n	8013e68 <__swsetup_r+0x5c>
 8013e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e44:	b141      	cbz	r1, 8013e58 <__swsetup_r+0x4c>
 8013e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e4a:	4299      	cmp	r1, r3
 8013e4c:	d002      	beq.n	8013e54 <__swsetup_r+0x48>
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f7fe ffd8 	bl	8012e04 <_free_r>
 8013e54:	2300      	movs	r3, #0
 8013e56:	6363      	str	r3, [r4, #52]	; 0x34
 8013e58:	89a3      	ldrh	r3, [r4, #12]
 8013e5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e5e:	81a3      	strh	r3, [r4, #12]
 8013e60:	2300      	movs	r3, #0
 8013e62:	6063      	str	r3, [r4, #4]
 8013e64:	6923      	ldr	r3, [r4, #16]
 8013e66:	6023      	str	r3, [r4, #0]
 8013e68:	89a3      	ldrh	r3, [r4, #12]
 8013e6a:	f043 0308 	orr.w	r3, r3, #8
 8013e6e:	81a3      	strh	r3, [r4, #12]
 8013e70:	6923      	ldr	r3, [r4, #16]
 8013e72:	b94b      	cbnz	r3, 8013e88 <__swsetup_r+0x7c>
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e7e:	d003      	beq.n	8013e88 <__swsetup_r+0x7c>
 8013e80:	4621      	mov	r1, r4
 8013e82:	4628      	mov	r0, r5
 8013e84:	f000 f8fe 	bl	8014084 <__smakebuf_r>
 8013e88:	89a0      	ldrh	r0, [r4, #12]
 8013e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e8e:	f010 0301 	ands.w	r3, r0, #1
 8013e92:	d00a      	beq.n	8013eaa <__swsetup_r+0x9e>
 8013e94:	2300      	movs	r3, #0
 8013e96:	60a3      	str	r3, [r4, #8]
 8013e98:	6963      	ldr	r3, [r4, #20]
 8013e9a:	425b      	negs	r3, r3
 8013e9c:	61a3      	str	r3, [r4, #24]
 8013e9e:	6923      	ldr	r3, [r4, #16]
 8013ea0:	b943      	cbnz	r3, 8013eb4 <__swsetup_r+0xa8>
 8013ea2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ea6:	d1c4      	bne.n	8013e32 <__swsetup_r+0x26>
 8013ea8:	bd38      	pop	{r3, r4, r5, pc}
 8013eaa:	0781      	lsls	r1, r0, #30
 8013eac:	bf58      	it	pl
 8013eae:	6963      	ldrpl	r3, [r4, #20]
 8013eb0:	60a3      	str	r3, [r4, #8]
 8013eb2:	e7f4      	b.n	8013e9e <__swsetup_r+0x92>
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	e7f7      	b.n	8013ea8 <__swsetup_r+0x9c>
 8013eb8:	20000080 	.word	0x20000080

08013ebc <memmove>:
 8013ebc:	4288      	cmp	r0, r1
 8013ebe:	b510      	push	{r4, lr}
 8013ec0:	eb01 0402 	add.w	r4, r1, r2
 8013ec4:	d902      	bls.n	8013ecc <memmove+0x10>
 8013ec6:	4284      	cmp	r4, r0
 8013ec8:	4623      	mov	r3, r4
 8013eca:	d807      	bhi.n	8013edc <memmove+0x20>
 8013ecc:	1e43      	subs	r3, r0, #1
 8013ece:	42a1      	cmp	r1, r4
 8013ed0:	d008      	beq.n	8013ee4 <memmove+0x28>
 8013ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013eda:	e7f8      	b.n	8013ece <memmove+0x12>
 8013edc:	4402      	add	r2, r0
 8013ede:	4601      	mov	r1, r0
 8013ee0:	428a      	cmp	r2, r1
 8013ee2:	d100      	bne.n	8013ee6 <memmove+0x2a>
 8013ee4:	bd10      	pop	{r4, pc}
 8013ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013eee:	e7f7      	b.n	8013ee0 <memmove+0x24>

08013ef0 <_sbrk_r>:
 8013ef0:	b538      	push	{r3, r4, r5, lr}
 8013ef2:	4d06      	ldr	r5, [pc, #24]	; (8013f0c <_sbrk_r+0x1c>)
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	4608      	mov	r0, r1
 8013efa:	602b      	str	r3, [r5, #0]
 8013efc:	f7ef fca4 	bl	8003848 <_sbrk>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	d102      	bne.n	8013f0a <_sbrk_r+0x1a>
 8013f04:	682b      	ldr	r3, [r5, #0]
 8013f06:	b103      	cbz	r3, 8013f0a <_sbrk_r+0x1a>
 8013f08:	6023      	str	r3, [r4, #0]
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
 8013f0c:	200068f4 	.word	0x200068f4

08013f10 <__assert_func>:
 8013f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f12:	4614      	mov	r4, r2
 8013f14:	461a      	mov	r2, r3
 8013f16:	4b09      	ldr	r3, [pc, #36]	; (8013f3c <__assert_func+0x2c>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4605      	mov	r5, r0
 8013f1c:	68d8      	ldr	r0, [r3, #12]
 8013f1e:	b14c      	cbz	r4, 8013f34 <__assert_func+0x24>
 8013f20:	4b07      	ldr	r3, [pc, #28]	; (8013f40 <__assert_func+0x30>)
 8013f22:	9100      	str	r1, [sp, #0]
 8013f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f28:	4906      	ldr	r1, [pc, #24]	; (8013f44 <__assert_func+0x34>)
 8013f2a:	462b      	mov	r3, r5
 8013f2c:	f000 f872 	bl	8014014 <fiprintf>
 8013f30:	f000 f906 	bl	8014140 <abort>
 8013f34:	4b04      	ldr	r3, [pc, #16]	; (8013f48 <__assert_func+0x38>)
 8013f36:	461c      	mov	r4, r3
 8013f38:	e7f3      	b.n	8013f22 <__assert_func+0x12>
 8013f3a:	bf00      	nop
 8013f3c:	20000080 	.word	0x20000080
 8013f40:	08014bff 	.word	0x08014bff
 8013f44:	08014c0c 	.word	0x08014c0c
 8013f48:	08014c3a 	.word	0x08014c3a

08013f4c <_calloc_r>:
 8013f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f4e:	fba1 2402 	umull	r2, r4, r1, r2
 8013f52:	b94c      	cbnz	r4, 8013f68 <_calloc_r+0x1c>
 8013f54:	4611      	mov	r1, r2
 8013f56:	9201      	str	r2, [sp, #4]
 8013f58:	f7fe ffc8 	bl	8012eec <_malloc_r>
 8013f5c:	9a01      	ldr	r2, [sp, #4]
 8013f5e:	4605      	mov	r5, r0
 8013f60:	b930      	cbnz	r0, 8013f70 <_calloc_r+0x24>
 8013f62:	4628      	mov	r0, r5
 8013f64:	b003      	add	sp, #12
 8013f66:	bd30      	pop	{r4, r5, pc}
 8013f68:	220c      	movs	r2, #12
 8013f6a:	6002      	str	r2, [r0, #0]
 8013f6c:	2500      	movs	r5, #0
 8013f6e:	e7f8      	b.n	8013f62 <_calloc_r+0x16>
 8013f70:	4621      	mov	r1, r4
 8013f72:	f7fd ffe8 	bl	8011f46 <memset>
 8013f76:	e7f4      	b.n	8013f62 <_calloc_r+0x16>

08013f78 <__ascii_mbtowc>:
 8013f78:	b082      	sub	sp, #8
 8013f7a:	b901      	cbnz	r1, 8013f7e <__ascii_mbtowc+0x6>
 8013f7c:	a901      	add	r1, sp, #4
 8013f7e:	b142      	cbz	r2, 8013f92 <__ascii_mbtowc+0x1a>
 8013f80:	b14b      	cbz	r3, 8013f96 <__ascii_mbtowc+0x1e>
 8013f82:	7813      	ldrb	r3, [r2, #0]
 8013f84:	600b      	str	r3, [r1, #0]
 8013f86:	7812      	ldrb	r2, [r2, #0]
 8013f88:	1e10      	subs	r0, r2, #0
 8013f8a:	bf18      	it	ne
 8013f8c:	2001      	movne	r0, #1
 8013f8e:	b002      	add	sp, #8
 8013f90:	4770      	bx	lr
 8013f92:	4610      	mov	r0, r2
 8013f94:	e7fb      	b.n	8013f8e <__ascii_mbtowc+0x16>
 8013f96:	f06f 0001 	mvn.w	r0, #1
 8013f9a:	e7f8      	b.n	8013f8e <__ascii_mbtowc+0x16>

08013f9c <_realloc_r>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4680      	mov	r8, r0
 8013fa2:	4614      	mov	r4, r2
 8013fa4:	460e      	mov	r6, r1
 8013fa6:	b921      	cbnz	r1, 8013fb2 <_realloc_r+0x16>
 8013fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fac:	4611      	mov	r1, r2
 8013fae:	f7fe bf9d 	b.w	8012eec <_malloc_r>
 8013fb2:	b92a      	cbnz	r2, 8013fc0 <_realloc_r+0x24>
 8013fb4:	f7fe ff26 	bl	8012e04 <_free_r>
 8013fb8:	4625      	mov	r5, r4
 8013fba:	4628      	mov	r0, r5
 8013fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc0:	f000 f8c5 	bl	801414e <_malloc_usable_size_r>
 8013fc4:	4284      	cmp	r4, r0
 8013fc6:	4607      	mov	r7, r0
 8013fc8:	d802      	bhi.n	8013fd0 <_realloc_r+0x34>
 8013fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013fce:	d812      	bhi.n	8013ff6 <_realloc_r+0x5a>
 8013fd0:	4621      	mov	r1, r4
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	f7fe ff8a 	bl	8012eec <_malloc_r>
 8013fd8:	4605      	mov	r5, r0
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0ed      	beq.n	8013fba <_realloc_r+0x1e>
 8013fde:	42bc      	cmp	r4, r7
 8013fe0:	4622      	mov	r2, r4
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	bf28      	it	cs
 8013fe6:	463a      	movcs	r2, r7
 8013fe8:	f7fe f883 	bl	80120f2 <memcpy>
 8013fec:	4631      	mov	r1, r6
 8013fee:	4640      	mov	r0, r8
 8013ff0:	f7fe ff08 	bl	8012e04 <_free_r>
 8013ff4:	e7e1      	b.n	8013fba <_realloc_r+0x1e>
 8013ff6:	4635      	mov	r5, r6
 8013ff8:	e7df      	b.n	8013fba <_realloc_r+0x1e>

08013ffa <__ascii_wctomb>:
 8013ffa:	b149      	cbz	r1, 8014010 <__ascii_wctomb+0x16>
 8013ffc:	2aff      	cmp	r2, #255	; 0xff
 8013ffe:	bf85      	ittet	hi
 8014000:	238a      	movhi	r3, #138	; 0x8a
 8014002:	6003      	strhi	r3, [r0, #0]
 8014004:	700a      	strbls	r2, [r1, #0]
 8014006:	f04f 30ff 	movhi.w	r0, #4294967295
 801400a:	bf98      	it	ls
 801400c:	2001      	movls	r0, #1
 801400e:	4770      	bx	lr
 8014010:	4608      	mov	r0, r1
 8014012:	4770      	bx	lr

08014014 <fiprintf>:
 8014014:	b40e      	push	{r1, r2, r3}
 8014016:	b503      	push	{r0, r1, lr}
 8014018:	4601      	mov	r1, r0
 801401a:	ab03      	add	r3, sp, #12
 801401c:	4805      	ldr	r0, [pc, #20]	; (8014034 <fiprintf+0x20>)
 801401e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014022:	6800      	ldr	r0, [r0, #0]
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	f7ff fceb 	bl	8013a00 <_vfiprintf_r>
 801402a:	b002      	add	sp, #8
 801402c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014030:	b003      	add	sp, #12
 8014032:	4770      	bx	lr
 8014034:	20000080 	.word	0x20000080

08014038 <__swhatbuf_r>:
 8014038:	b570      	push	{r4, r5, r6, lr}
 801403a:	460c      	mov	r4, r1
 801403c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014040:	2900      	cmp	r1, #0
 8014042:	b096      	sub	sp, #88	; 0x58
 8014044:	4615      	mov	r5, r2
 8014046:	461e      	mov	r6, r3
 8014048:	da0d      	bge.n	8014066 <__swhatbuf_r+0x2e>
 801404a:	89a3      	ldrh	r3, [r4, #12]
 801404c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014050:	f04f 0100 	mov.w	r1, #0
 8014054:	bf0c      	ite	eq
 8014056:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801405a:	2340      	movne	r3, #64	; 0x40
 801405c:	2000      	movs	r0, #0
 801405e:	6031      	str	r1, [r6, #0]
 8014060:	602b      	str	r3, [r5, #0]
 8014062:	b016      	add	sp, #88	; 0x58
 8014064:	bd70      	pop	{r4, r5, r6, pc}
 8014066:	466a      	mov	r2, sp
 8014068:	f000 f848 	bl	80140fc <_fstat_r>
 801406c:	2800      	cmp	r0, #0
 801406e:	dbec      	blt.n	801404a <__swhatbuf_r+0x12>
 8014070:	9901      	ldr	r1, [sp, #4]
 8014072:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014076:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801407a:	4259      	negs	r1, r3
 801407c:	4159      	adcs	r1, r3
 801407e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014082:	e7eb      	b.n	801405c <__swhatbuf_r+0x24>

08014084 <__smakebuf_r>:
 8014084:	898b      	ldrh	r3, [r1, #12]
 8014086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014088:	079d      	lsls	r5, r3, #30
 801408a:	4606      	mov	r6, r0
 801408c:	460c      	mov	r4, r1
 801408e:	d507      	bpl.n	80140a0 <__smakebuf_r+0x1c>
 8014090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	6123      	str	r3, [r4, #16]
 8014098:	2301      	movs	r3, #1
 801409a:	6163      	str	r3, [r4, #20]
 801409c:	b002      	add	sp, #8
 801409e:	bd70      	pop	{r4, r5, r6, pc}
 80140a0:	ab01      	add	r3, sp, #4
 80140a2:	466a      	mov	r2, sp
 80140a4:	f7ff ffc8 	bl	8014038 <__swhatbuf_r>
 80140a8:	9900      	ldr	r1, [sp, #0]
 80140aa:	4605      	mov	r5, r0
 80140ac:	4630      	mov	r0, r6
 80140ae:	f7fe ff1d 	bl	8012eec <_malloc_r>
 80140b2:	b948      	cbnz	r0, 80140c8 <__smakebuf_r+0x44>
 80140b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140b8:	059a      	lsls	r2, r3, #22
 80140ba:	d4ef      	bmi.n	801409c <__smakebuf_r+0x18>
 80140bc:	f023 0303 	bic.w	r3, r3, #3
 80140c0:	f043 0302 	orr.w	r3, r3, #2
 80140c4:	81a3      	strh	r3, [r4, #12]
 80140c6:	e7e3      	b.n	8014090 <__smakebuf_r+0xc>
 80140c8:	89a3      	ldrh	r3, [r4, #12]
 80140ca:	6020      	str	r0, [r4, #0]
 80140cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140d0:	81a3      	strh	r3, [r4, #12]
 80140d2:	9b00      	ldr	r3, [sp, #0]
 80140d4:	6163      	str	r3, [r4, #20]
 80140d6:	9b01      	ldr	r3, [sp, #4]
 80140d8:	6120      	str	r0, [r4, #16]
 80140da:	b15b      	cbz	r3, 80140f4 <__smakebuf_r+0x70>
 80140dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140e0:	4630      	mov	r0, r6
 80140e2:	f000 f81d 	bl	8014120 <_isatty_r>
 80140e6:	b128      	cbz	r0, 80140f4 <__smakebuf_r+0x70>
 80140e8:	89a3      	ldrh	r3, [r4, #12]
 80140ea:	f023 0303 	bic.w	r3, r3, #3
 80140ee:	f043 0301 	orr.w	r3, r3, #1
 80140f2:	81a3      	strh	r3, [r4, #12]
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	431d      	orrs	r5, r3
 80140f8:	81a5      	strh	r5, [r4, #12]
 80140fa:	e7cf      	b.n	801409c <__smakebuf_r+0x18>

080140fc <_fstat_r>:
 80140fc:	b538      	push	{r3, r4, r5, lr}
 80140fe:	4d07      	ldr	r5, [pc, #28]	; (801411c <_fstat_r+0x20>)
 8014100:	2300      	movs	r3, #0
 8014102:	4604      	mov	r4, r0
 8014104:	4608      	mov	r0, r1
 8014106:	4611      	mov	r1, r2
 8014108:	602b      	str	r3, [r5, #0]
 801410a:	f7ef fb74 	bl	80037f6 <_fstat>
 801410e:	1c43      	adds	r3, r0, #1
 8014110:	d102      	bne.n	8014118 <_fstat_r+0x1c>
 8014112:	682b      	ldr	r3, [r5, #0]
 8014114:	b103      	cbz	r3, 8014118 <_fstat_r+0x1c>
 8014116:	6023      	str	r3, [r4, #0]
 8014118:	bd38      	pop	{r3, r4, r5, pc}
 801411a:	bf00      	nop
 801411c:	200068f4 	.word	0x200068f4

08014120 <_isatty_r>:
 8014120:	b538      	push	{r3, r4, r5, lr}
 8014122:	4d06      	ldr	r5, [pc, #24]	; (801413c <_isatty_r+0x1c>)
 8014124:	2300      	movs	r3, #0
 8014126:	4604      	mov	r4, r0
 8014128:	4608      	mov	r0, r1
 801412a:	602b      	str	r3, [r5, #0]
 801412c:	f7ef fb73 	bl	8003816 <_isatty>
 8014130:	1c43      	adds	r3, r0, #1
 8014132:	d102      	bne.n	801413a <_isatty_r+0x1a>
 8014134:	682b      	ldr	r3, [r5, #0]
 8014136:	b103      	cbz	r3, 801413a <_isatty_r+0x1a>
 8014138:	6023      	str	r3, [r4, #0]
 801413a:	bd38      	pop	{r3, r4, r5, pc}
 801413c:	200068f4 	.word	0x200068f4

08014140 <abort>:
 8014140:	b508      	push	{r3, lr}
 8014142:	2006      	movs	r0, #6
 8014144:	f000 f834 	bl	80141b0 <raise>
 8014148:	2001      	movs	r0, #1
 801414a:	f7ef fb05 	bl	8003758 <_exit>

0801414e <_malloc_usable_size_r>:
 801414e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014152:	1f18      	subs	r0, r3, #4
 8014154:	2b00      	cmp	r3, #0
 8014156:	bfbc      	itt	lt
 8014158:	580b      	ldrlt	r3, [r1, r0]
 801415a:	18c0      	addlt	r0, r0, r3
 801415c:	4770      	bx	lr

0801415e <_raise_r>:
 801415e:	291f      	cmp	r1, #31
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4604      	mov	r4, r0
 8014164:	460d      	mov	r5, r1
 8014166:	d904      	bls.n	8014172 <_raise_r+0x14>
 8014168:	2316      	movs	r3, #22
 801416a:	6003      	str	r3, [r0, #0]
 801416c:	f04f 30ff 	mov.w	r0, #4294967295
 8014170:	bd38      	pop	{r3, r4, r5, pc}
 8014172:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014174:	b112      	cbz	r2, 801417c <_raise_r+0x1e>
 8014176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801417a:	b94b      	cbnz	r3, 8014190 <_raise_r+0x32>
 801417c:	4620      	mov	r0, r4
 801417e:	f000 f831 	bl	80141e4 <_getpid_r>
 8014182:	462a      	mov	r2, r5
 8014184:	4601      	mov	r1, r0
 8014186:	4620      	mov	r0, r4
 8014188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801418c:	f000 b818 	b.w	80141c0 <_kill_r>
 8014190:	2b01      	cmp	r3, #1
 8014192:	d00a      	beq.n	80141aa <_raise_r+0x4c>
 8014194:	1c59      	adds	r1, r3, #1
 8014196:	d103      	bne.n	80141a0 <_raise_r+0x42>
 8014198:	2316      	movs	r3, #22
 801419a:	6003      	str	r3, [r0, #0]
 801419c:	2001      	movs	r0, #1
 801419e:	e7e7      	b.n	8014170 <_raise_r+0x12>
 80141a0:	2400      	movs	r4, #0
 80141a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80141a6:	4628      	mov	r0, r5
 80141a8:	4798      	blx	r3
 80141aa:	2000      	movs	r0, #0
 80141ac:	e7e0      	b.n	8014170 <_raise_r+0x12>
	...

080141b0 <raise>:
 80141b0:	4b02      	ldr	r3, [pc, #8]	; (80141bc <raise+0xc>)
 80141b2:	4601      	mov	r1, r0
 80141b4:	6818      	ldr	r0, [r3, #0]
 80141b6:	f7ff bfd2 	b.w	801415e <_raise_r>
 80141ba:	bf00      	nop
 80141bc:	20000080 	.word	0x20000080

080141c0 <_kill_r>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4d07      	ldr	r5, [pc, #28]	; (80141e0 <_kill_r+0x20>)
 80141c4:	2300      	movs	r3, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	4608      	mov	r0, r1
 80141ca:	4611      	mov	r1, r2
 80141cc:	602b      	str	r3, [r5, #0]
 80141ce:	f7ef fab3 	bl	8003738 <_kill>
 80141d2:	1c43      	adds	r3, r0, #1
 80141d4:	d102      	bne.n	80141dc <_kill_r+0x1c>
 80141d6:	682b      	ldr	r3, [r5, #0]
 80141d8:	b103      	cbz	r3, 80141dc <_kill_r+0x1c>
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	bd38      	pop	{r3, r4, r5, pc}
 80141de:	bf00      	nop
 80141e0:	200068f4 	.word	0x200068f4

080141e4 <_getpid_r>:
 80141e4:	f7ef baa0 	b.w	8003728 <_getpid>

080141e8 <_init>:
 80141e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ea:	bf00      	nop
 80141ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ee:	bc08      	pop	{r3}
 80141f0:	469e      	mov	lr, r3
 80141f2:	4770      	bx	lr

080141f4 <_fini>:
 80141f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f6:	bf00      	nop
 80141f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141fa:	bc08      	pop	{r3}
 80141fc:	469e      	mov	lr, r3
 80141fe:	4770      	bx	lr
