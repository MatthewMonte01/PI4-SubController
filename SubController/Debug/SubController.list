
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  080157c0  080157c0  000167c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016170  08016170  000181f0  2**0
                  CONTENTS
  4 .ARM          00000008  08016170  08016170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016178  08016178  000181f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016178  08016178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801617c  0801617c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08016180  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068a8  200001f0  08016370  000181f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20006a98  08016370  00018a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002540f  00000000  00000000  00018220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f5  00000000  00000000  0003d62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  00042c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ca  00000000  00000000  00044bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f5d  00000000  00000000  000464c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c15e  00000000  00000000  0007041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efbb9  00000000  00000000  0009c57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096d8  00000000  00000000  0018c17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00195854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080157a8 	.word	0x080157a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080157a8 	.word	0x080157a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e009      	b.n	8000fe2 <Bar30init+0x2a>
	{
		sensor->calibrationResult[i]=0;
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<7;i++)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	ddf2      	ble.n	8000fce <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	sensor->conversionCompleteFlag=0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	sensor->dT=0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->actualPressure=0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	sensor->rawPressure=0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 800102c:	231e      	movs	r3, #30
 800102e:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b29b      	uxth	r3, r3
 800103c:	f107 020e 	add.w	r2, r7, #14
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	9100      	str	r1, [sp, #0]
 8001046:	21ec      	movs	r1, #236	@ 0xec
 8001048:	f004 fef4 	bl	8005e34 <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <Bar30reset+0x48>)
 8001052:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <Bar30reset+0x48>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000020c 	.word	0x2000020c

08001070 <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 8001080:	2302      	movs	r3, #2
 8001082:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	e041      	b.n	800110e <Bar30getCalibration+0x9e>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	3350      	adds	r3, #80	@ 0x50
 800108e:	b2db      	uxtb	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f107 020b 	add.w	r2, r7, #11
 80010a2:	f04f 31ff 	mov.w	r1, #4294967295
 80010a6:	9100      	str	r1, [sp, #0]
 80010a8:	21ec      	movs	r1, #236	@ 0xec
 80010aa:	f004 fec3 	bl	8005e34 <HAL_I2C_Master_Transmit>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010b4:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	3301      	adds	r3, #1
 80010c2:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	9100      	str	r1, [sp, #0]
 80010d6:	21ec      	movs	r1, #236	@ 0xec
 80010d8:	f004 ffaa 	bl	8006030 <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010ea:	7b3b      	ldrb	r3, [r7, #12]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b299      	uxth	r1, r3
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3308      	adds	r3, #8
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	460a      	mov	r2, r1
 8001106:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<7;i++)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3301      	adds	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b06      	cmp	r3, #6
 8001112:	ddba      	ble.n	800108a <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3

}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000020c 	.word	0x2000020c

0800112c <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f845 	bl	80011c8 <initiatePressureConversion>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <Bar30getData+0x98>)
 8001144:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001146:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <Bar30getData+0x98>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <Bar30getData+0x26>
		conversionGood=0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001152:	2003      	movs	r0, #3
 8001154:	f003 f906 	bl	8004364 <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f871 	bl	8001240 <readPressureData>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <Bar30getData+0x98>)
 8001164:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <Bar30getData+0x98>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <Bar30getData+0x46>
		conversionGood=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f846 	bl	8001204 <initiateTemperatureConversion>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <Bar30getData+0x98>)
 800117e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <Bar30getData+0x98>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <Bar30getData+0x60>
		conversionGood=0;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800118c:	2003      	movs	r0, #3
 800118e:	f003 f8e9 	bl	8004364 <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f894 	bl	80012c0 <readTemperatureData>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <Bar30getData+0x98>)
 800119e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <Bar30getData+0x98>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <Bar30getData+0x80>
		conversionGood=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f921 	bl	80013f4 <calculateTemperature>
	calculatePressure(sensor);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f964 	bl	8001480 <calculatePressure>
	return conversionGood;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]

}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000020c 	.word	0x2000020c

080011c8 <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 80011d0:	2344      	movs	r3, #68	@ 0x44
 80011d2:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f107 020f 	add.w	r2, r7, #15
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	21ec      	movs	r1, #236	@ 0xec
 80011e6:	f004 fe25 	bl	8005e34 <HAL_I2C_Master_Transmit>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <initiatePressureConversion+0x38>)
 80011f0:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011f2:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <initiatePressureConversion+0x38>)
 80011f4:	781b      	ldrb	r3, [r3, #0]


}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000020c 	.word	0x2000020c

08001204 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 800120c:	2354      	movs	r3, #84	@ 0x54
 800120e:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 020f 	add.w	r2, r7, #15
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	21ec      	movs	r1, #236	@ 0xec
 8001222:	f004 fe07 	bl	8005e34 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <initiateTemperatureConversion+0x38>)
 800122c:	701a      	strb	r2, [r3, #0]
	return halStatus;
 800122e:	4b03      	ldr	r3, [pc, #12]	@ (800123c <initiateTemperatureConversion+0x38>)
 8001230:	781b      	ldrb	r3, [r3, #0]

}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af02      	add	r7, sp, #8
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f107 020f 	add.w	r2, r7, #15
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	21ec      	movs	r1, #236	@ 0xec
 800125e:	f004 fde9 	bl	8005e34 <HAL_I2C_Master_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <readPressureData+0x7c>)
 8001268:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2303      	movs	r3, #3
 800127a:	21ec      	movs	r1, #236	@ 0xec
 800127c:	f004 fed8 	bl	8006030 <HAL_I2C_Master_Receive>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <readPressureData+0x7c>)
 8001286:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	7b3b      	ldrb	r3, [r7, #12]
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	7bba      	ldrb	r2, [r7, #14]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
	return halStatus;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <readPressureData+0x7c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]

}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000020c 	.word	0x2000020c

080012c0 <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	f107 020f 	add.w	r2, r7, #15
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	21ec      	movs	r1, #236	@ 0xec
 80012de:	f004 fda9 	bl	8005e34 <HAL_I2C_Master_Transmit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <readTemperatureData+0x7c>)
 80012e8:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2303      	movs	r3, #3
 80012fa:	21ec      	movs	r1, #236	@ 0xec
 80012fc:	f004 fe98 	bl	8006030 <HAL_I2C_Master_Receive>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <readTemperatureData+0x7c>)
 8001306:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	7b7b      	ldrb	r3, [r7, #13]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	7bba      	ldrb	r2, [r7, #14]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]


	return halStatus;
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <readTemperatureData+0x7c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000020c 	.word	0x2000020c

08001340 <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	e035      	b.n	80013cc <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00b      	beq.n	8001384 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4053      	eors	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	e009      	b.n	8001398 <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b29b      	uxth	r3, r3
 8001396:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 8001398:	2308      	movs	r3, #8
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e010      	b.n	80013c0 <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e002      	b.n	80013ba <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3b01      	subs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1eb      	bne.n	800139e <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	3301      	adds	r3, #1
 80013ca:	75fb      	strb	r3, [r7, #23]
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d9c6      	bls.n	8001360 <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	0b1b      	lsrs	r3, r3, #12
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3



}
 80013e8:	4618      	mov	r0, r3
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 80013f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 80013fe:	2100      	movs	r1, #0
 8001400:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	6888      	ldr	r0, [r1, #8]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	8bc9      	ldrh	r1, [r1, #30]
 800140a:	0209      	lsls	r1, r1, #8
 800140c:	1a41      	subs	r1, r0, r1
 800140e:	4608      	mov	r0, r1
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	6248      	str	r0, [r1, #36]	@ 0x24
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8001418:	17c8      	asrs	r0, r1, #31
 800141a:	4688      	mov	r8, r1
 800141c:	4681      	mov	r9, r0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	8c09      	ldrh	r1, [r1, #32]
 8001422:	b289      	uxth	r1, r1
 8001424:	2000      	movs	r0, #0
 8001426:	460c      	mov	r4, r1
 8001428:	4605      	mov	r5, r0
 800142a:	fb04 f009 	mul.w	r0, r4, r9
 800142e:	fb08 f105 	mul.w	r1, r8, r5
 8001432:	4401      	add	r1, r0
 8001434:	fba8 2304 	umull	r2, r3, r8, r4
 8001438:	4419      	add	r1, r3
 800143a:	460b      	mov	r3, r1
 800143c:	2b00      	cmp	r3, #0
 800143e:	da06      	bge.n	800144e <calculateTemperature+0x5a>
 8001440:	490e      	ldr	r1, [pc, #56]	@ (800147c <calculateTemperature+0x88>)
 8001442:	eb12 0a01 	adds.w	sl, r2, r1
 8001446:	f143 0b00 	adc.w	fp, r3, #0
 800144a:	4652      	mov	r2, sl
 800144c:	465b      	mov	r3, fp
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	0dd0      	lsrs	r0, r2, #23
 8001458:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 800145c:	15d9      	asrs	r1, r3, #23
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4613      	mov	r3, r2
 8001464:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001468:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	611a      	str	r2, [r3, #16]


}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800147a:	4770      	bx	lr
 800147c:	007fffff 	.word	0x007fffff

08001480 <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 8001480:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001484:	b099      	sub	sp, #100	@ 0x64
 8001486:	af00      	add	r7, sp, #0
 8001488:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t dT=sensor->dT;
 800148a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int64_t offset=0;
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	int64_t sensitivity=0;
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 80014a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014aa:	8b1b      	ldrh	r3, [r3, #24]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	2200      	movs	r2, #0
 80014b0:	461c      	mov	r4, r3
 80014b2:	4615      	mov	r5, r2
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	0429      	lsls	r1, r5, #16
 80014be:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 80014c2:	0420      	lsls	r0, r4, #16
 80014c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c6:	8b9b      	ldrh	r3, [r3, #28]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da00      	bge.n	80014d6 <calculatePressure+0x56>
 80014d4:	337f      	adds	r3, #127	@ 0x7f
 80014d6:	11db      	asrs	r3, r3, #7
 80014d8:	17da      	asrs	r2, r3, #31
 80014da:	469a      	mov	sl, r3
 80014dc:	4693      	mov	fp, r2
 80014de:	eb10 030a 	adds.w	r3, r0, sl
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	eb41 030b 	adc.w	r3, r1, fp
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f4:	8adb      	ldrh	r3, [r3, #22]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	4698      	mov	r8, r3
 80014fc:	4691      	mov	r9, r2
 80014fe:	f04f 0000 	mov.w	r0, #0
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 800150a:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 800150e:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 8001512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001514:	8b5b      	ldrh	r3, [r3, #26]
 8001516:	461a      	mov	r2, r3
 8001518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	da00      	bge.n	8001524 <calculatePressure+0xa4>
 8001522:	33ff      	adds	r3, #255	@ 0xff
 8001524:	121b      	asrs	r3, r3, #8
 8001526:	17da      	asrs	r2, r3, #31
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
 800152a:	637a      	str	r2, [r7, #52]	@ 0x34
 800152c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001530:	4623      	mov	r3, r4
 8001532:	18c3      	adds	r3, r0, r3
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	462b      	mov	r3, r5
 8001538:	eb41 0303 	adc.w	r3, r1, r3
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001542:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 8001546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800154e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001552:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001556:	462a      	mov	r2, r5
 8001558:	fb02 f203 	mul.w	r2, r2, r3
 800155c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800155e:	4621      	mov	r1, r4
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001568:	4621      	mov	r1, r4
 800156a:	fba2 1201 	umull	r1, r2, r2, r1
 800156e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001570:	460a      	mov	r2, r1
 8001572:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001576:	4413      	add	r3, r2
 8001578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800157a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800157e:	2b00      	cmp	r3, #0
 8001580:	da07      	bge.n	8001592 <calculatePressure+0x112>
 8001582:	491b      	ldr	r1, [pc, #108]	@ (80015f0 <calculatePressure+0x170>)
 8001584:	1851      	adds	r1, r2, r1
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	f143 0300 	adc.w	r3, r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	0d50      	lsrs	r0, r2, #21
 800159c:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015a0:	1559      	asrs	r1, r3, #21
 80015a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80015a6:	1a84      	subs	r4, r0, r2
 80015a8:	623c      	str	r4, [r7, #32]
 80015aa:	eb61 0303 	sbc.w	r3, r1, r3
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da08      	bge.n	80015ca <calculatePressure+0x14a>
 80015b8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80015bc:	1851      	adds	r1, r2, r1
 80015be:	6039      	str	r1, [r7, #0]
 80015c0:	f143 0300 	adc.w	r3, r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0b50      	lsrs	r0, r2, #13
 80015d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015d8:	1359      	asrs	r1, r3, #13
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e0:	60da      	str	r2, [r3, #12]


}
 80015e2:	bf00      	nop
 80015e4:	3764      	adds	r7, #100	@ 0x64
 80015e6:	46bd      	mov	sp, r7
 80015e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	001fffff 	.word	0x001fffff

080015f4 <EKF_Init>:
#include "KalmanRollPitch.h"


void EKF_Init(EKF *ekf, float P, float Q[2], float R[3]) {
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001600:	6079      	str	r1, [r7, #4]
 8001602:	603a      	str	r2, [r7, #0]

	/* Reset state estimates */
	ekf->phi_r 		= 0.0f;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	ekf->theta_r 	= 0.0f;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf->P[0][0] = P; ekf->P[0][1] = 0.0f;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	ekf->P[1][0] = 0.0f; ekf->P[1][1] = P;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf->Q[0] = Q[0];
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	619a      	str	r2, [r3, #24]
	ekf->Q[1] = Q[1];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	61da      	str	r2, [r3, #28]

	ekf->R[0] = R[0];
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	621a      	str	r2, [r3, #32]
	ekf->R[1] = R[1];
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
	ekf->R[2] = R[2];
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 8001668:	2364      	movs	r3, #100	@ 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	21d0      	movs	r1, #208	@ 0xd0
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <checkMPU6050Ready+0x20>)
 8001670:	f005 fbb8 	bl	8006de4 <HAL_I2C_IsDeviceReady>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <checkMPU6050Ready+0x1a>
	{
		return 1;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <checkMPU6050Ready+0x1c>
	}
	return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200026dc 	.word	0x200026dc

08001688 <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af04      	add	r7, sp, #16
 800168e:	4603      	mov	r3, r0
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	80fb      	strh	r3, [r7, #6]
 8001694:	460b      	mov	r3, r1
 8001696:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	88f9      	ldrh	r1, [r7, #6]
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <i2cWriteRegMPU6050+0x40>)
 80016ae:	f004 fee5 	bl	800647c <HAL_I2C_Mem_Write>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3

}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200026dc 	.word	0x200026dc

080016cc <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00a      	b.n	80016f8 <MPU6050init+0x2c>
		imu->acc_mps2[i]=0;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3304      	adds	r3, #4
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	ddf1      	ble.n	80016e2 <MPU6050init+0x16>

	for(int i=0;i<3;i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e00a      	b.n	800171a <MPU6050init+0x4e>
		imu->gyr_rps[i]=0;
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3304      	adds	r3, #4
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3301      	adds	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b02      	cmp	r3, #2
 800171e:	ddf1      	ble.n	8001704 <MPU6050init+0x38>

	for(int i=0; i<14;i++)
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e008      	b.n	8001738 <MPU6050init+0x6c>
		imu->rxData[i]=0;
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	3320      	adds	r3, #32
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b0d      	cmp	r3, #13
 800173c:	ddf3      	ble.n	8001726 <MPU6050init+0x5a>

	imu->rxFlag=0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	imu->dataReadyFlag=0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	imu->temp_degC=0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	61da      	str	r2, [r3, #28]

	uint8_t numErrors=0;
 8001756:	2300      	movs	r3, #0
 8001758:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 800175a:	2302      	movs	r3, #2
 800175c:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 800175e:	f107 030a 	add.w	r3, r7, #10
 8001762:	461a      	mov	r2, r3
 8001764:	211a      	movs	r1, #26
 8001766:	20d0      	movs	r0, #208	@ 0xd0
 8001768:	f7ff ff8e 	bl	8001688 <i2cWriteRegMPU6050>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <MPU6050init+0xac>
		numErrors+=1;
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	3301      	adds	r3, #1
 8001776:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 8001778:	2310      	movs	r3, #16
 800177a:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 800177c:	f107 030a 	add.w	r3, r7, #10
 8001780:	461a      	mov	r2, r3
 8001782:	2137      	movs	r1, #55	@ 0x37
 8001784:	20d0      	movs	r0, #208	@ 0xd0
 8001786:	f7ff ff7f 	bl	8001688 <i2cWriteRegMPU6050>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <MPU6050init+0xca>
		numErrors+=1;
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	3301      	adds	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 8001796:	2301      	movs	r3, #1
 8001798:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 800179a:	f107 030a 	add.w	r3, r7, #10
 800179e:	461a      	mov	r2, r3
 80017a0:	2138      	movs	r1, #56	@ 0x38
 80017a2:	20d0      	movs	r0, #208	@ 0xd0
 80017a4:	f7ff ff70 	bl	8001688 <i2cWriteRegMPU6050>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <MPU6050init+0xe8>
		numErrors+=1;
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	3301      	adds	r3, #1
 80017b2:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 80017b8:	f107 030a 	add.w	r3, r7, #10
 80017bc:	461a      	mov	r2, r3
 80017be:	216b      	movs	r1, #107	@ 0x6b
 80017c0:	20d0      	movs	r0, #208	@ 0xd0
 80017c2:	f7ff ff61 	bl	8001688 <i2cWriteRegMPU6050>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <MPU6050init+0x106>
		numErrors+=1;
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	3301      	adds	r3, #1
 80017d0:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3

}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af02      	add	r7, sp, #8
 80017ec:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3320      	adds	r3, #32
 80017f6:	220e      	movs	r2, #14
 80017f8:	9201      	str	r2, [sp, #4]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	223b      	movs	r2, #59	@ 0x3b
 8001800:	21d0      	movs	r1, #208	@ 0xd0
 8001802:	f005 f95b 	bl	8006abc <HAL_I2C_Mem_Read_DMA>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	if(readStatus==HAL_OK)return 1;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <MPU6050readDataDMA+0x36>
 8001818:	2301      	movs	r3, #1
 800181a:	e00a      	b.n	8001832 <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <MPU6050readDataDMA+0x40>
 8001822:	2302      	movs	r3, #2
 8001824:	e005      	b.n	8001832 <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d101      	bne.n	8001830 <MPU6050readDataDMA+0x4a>
 800182c:	2303      	movs	r3, #3
 800182e:	e000      	b.n	8001832 <MPU6050readDataDMA+0x4c>
	else return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <MPU6050convertRawData>:

void MPU6050convertRawData(MPU6050* imu)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	int16_t acc[3]={( (imu->rxData[0]<<8)|imu->rxData[1] ),( (imu->rxData[2]<<8)|imu->rxData[3] ),( (imu->rxData[4]<<8)|imu->rxData[5] )};
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	823b      	strh	r3, [r7, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	827b      	strh	r3, [r7, #18]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21b      	sxth	r3, r3
 800188a:	82bb      	strh	r3, [r7, #20]
	//int16_t temperature=(imu->rxData[6]<<8)|imu->rxData[7];
	int16_t gyr[3]={( (imu->rxData[8]<<8)|imu->rxData[9] ),( (imu->rxData[10]<<8)|imu->rxData[11] ),( (imu->rxData[12]<<8)|imu->rxData[13] )};
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	813b      	strh	r3, [r7, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	817b      	strh	r3, [r7, #10]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	81bb      	strh	r3, [r7, #12]

	imu->acc_mps2[0]=MPU6050_ACC_RAW_TO_MPS2*acc[0];
 80018d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800197c <MPU6050convertRawData+0x140>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->acc_mps2[1]=MPU6050_ACC_RAW_TO_MPS2*acc[1];
 80018ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800197c <MPU6050convertRawData+0x140>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	edc3 7a02 	vstr	s15, [r3, #8]
	imu->acc_mps2[2]=MPU6050_ACC_RAW_TO_MPS2*acc[2];
 8001908:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001914:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800197c <MPU6050convertRawData+0x140>
 8001918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	edc3 7a03 	vstr	s15, [r3, #12]

	imu->gyr_rps[0]=MPU6050_GYR_RAW_TO_RPS*gyr[0];
 8001922:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001980 <MPU6050convertRawData+0x144>
 8001932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->gyr_rps[1]=MPU6050_GYR_RAW_TO_RPS*gyr[1];
 800193c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001980 <MPU6050convertRawData+0x144>
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->gyr_rps[2]=MPU6050_GYR_RAW_TO_RPS*gyr[2];
 8001956:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001980 <MPU6050convertRawData+0x144>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	3a1cf5c1 	.word	0x3a1cf5c1
 8001980:	390bb3fd 	.word	0x390bb3fd

08001984 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800198e:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <SELECT+0x1c>)
 8001990:	f004 f8da 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f002 fce5 	bl	8004364 <HAL_Delay>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40020400 	.word	0x40020400

080019a4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ae:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <DESELECT+0x1c>)
 80019b0:	f004 f8ca 	bl	8005b48 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f002 fcd5 	bl	8004364 <HAL_Delay>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020400 	.word	0x40020400

080019c4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019ce:	bf00      	nop
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <SPI_TxByte+0x30>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d1f8      	bne.n	80019d0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80019de:	1df9      	adds	r1, r7, #7
 80019e0:	2364      	movs	r3, #100	@ 0x64
 80019e2:	2201      	movs	r2, #1
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <SPI_TxByte+0x30>)
 80019e6:	f008 fb24 	bl	800a032 <HAL_SPI_Transmit>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004b4 	.word	0x200004b4

080019f8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a04:	bf00      	nop
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <SPI_TxBuffer+0x30>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d1f8      	bne.n	8001a06 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	2364      	movs	r3, #100	@ 0x64
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <SPI_TxBuffer+0x30>)
 8001a1c:	f008 fb09 	bl	800a032 <HAL_SPI_Transmit>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200004b4 	.word	0x200004b4

08001a2c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001a32:	23ff      	movs	r3, #255	@ 0xff
 8001a34:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a36:	bf00      	nop
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <SPI_RxByte+0x34>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d1f8      	bne.n	8001a38 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a46:	1dba      	adds	r2, r7, #6
 8001a48:	1df9      	adds	r1, r7, #7
 8001a4a:	2364      	movs	r3, #100	@ 0x64
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <SPI_RxByte+0x34>)
 8001a52:	f008 fc2a 	bl	800a2aa <HAL_SPI_TransmitReceive>

	return data;
 8001a56:	79bb      	ldrb	r3, [r7, #6]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200004b4 	.word	0x200004b4

08001a64 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001a6c:	f7ff ffde 	bl	8001a2c <SPI_RxByte>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	701a      	strb	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <SD_ReadyWait+0x30>)
 8001a88:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a8c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001a8e:	f7ff ffcd 	bl	8001a2c <SPI_RxByte>
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2bff      	cmp	r3, #255	@ 0xff
 8001a9a:	d003      	beq.n	8001aa4 <SD_ReadyWait+0x24>
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SD_ReadyWait+0x30>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f4      	bne.n	8001a8e <SD_ReadyWait+0xe>

	return res;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000210 	.word	0x20000210

08001ab4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001aba:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001abe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001ac0:	f7ff ff70 	bl	80019a4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	e005      	b.n	8001ad6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001aca:	20ff      	movs	r0, #255	@ 0xff
 8001acc:	f7ff ff7a 	bl	80019c4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	ddf6      	ble.n	8001aca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001adc:	f7ff ff52 	bl	8001984 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001ae0:	2340      	movs	r3, #64	@ 0x40
 8001ae2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001af4:	2395      	movs	r3, #149	@ 0x95
 8001af6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001af8:	463b      	mov	r3, r7
 8001afa:	2106      	movs	r1, #6
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff7b 	bl	80019f8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b02:	e002      	b.n	8001b0a <SD_PowerOn+0x56>
	{
		cnt--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b0a:	f7ff ff8f 	bl	8001a2c <SPI_RxByte>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d002      	beq.n	8001b1a <SD_PowerOn+0x66>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f4      	bne.n	8001b04 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001b1a:	f7ff ff43 	bl	80019a4 <DESELECT>
	SPI_TxByte(0XFF);
 8001b1e:	20ff      	movs	r0, #255	@ 0xff
 8001b20:	f7ff ff50 	bl	80019c4 <SPI_TxByte>

	PowerFlag = 1;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <SD_PowerOn+0x80>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000213 	.word	0x20000213

08001b38 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <SD_PowerOff+0x14>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20000213 	.word	0x20000213

08001b50 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <SD_CheckPower+0x14>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000213 	.word	0x20000213

08001b68 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <SD_RxDataBlock+0x58>)
 8001b74:	22c8      	movs	r2, #200	@ 0xc8
 8001b76:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001b78:	f7ff ff58 	bl	8001a2c <SPI_RxByte>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2bff      	cmp	r3, #255	@ 0xff
 8001b84:	d103      	bne.n	8001b8e <SD_RxDataBlock+0x26>
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <SD_RxDataBlock+0x58>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f4      	bne.n	8001b78 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b92:	d001      	beq.n	8001b98 <SD_RxDataBlock+0x30>
 8001b94:	2300      	movs	r3, #0
 8001b96:	e00f      	b.n	8001bb8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff60 	bl	8001a64 <SPI_RxBytePtr>
	} while(len--);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	603a      	str	r2, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f4      	bne.n	8001b98 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001bae:	f7ff ff3d 	bl	8001a2c <SPI_RxByte>
	SPI_RxByte();
 8001bb2:	f7ff ff3b 	bl	8001a2c <SPI_RxByte>

	return TRUE;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000020e 	.word	0x2000020e

08001bc4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001bd4:	f7ff ff54 	bl	8001a80 <SD_ReadyWait>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2bff      	cmp	r3, #255	@ 0xff
 8001bdc:	d001      	beq.n	8001be2 <SD_TxDataBlock+0x1e>
 8001bde:	2300      	movs	r3, #0
 8001be0:	e02f      	b.n	8001c42 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff feed 	bl	80019c4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	2bfd      	cmp	r3, #253	@ 0xfd
 8001bee:	d020      	beq.n	8001c32 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff feff 	bl	80019f8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001bfa:	f7ff ff17 	bl	8001a2c <SPI_RxByte>
		SPI_RxByte();
 8001bfe:	f7ff ff15 	bl	8001a2c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001c02:	e00b      	b.n	8001c1c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001c04:	f7ff ff12 	bl	8001a2c <SPI_RxByte>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d006      	beq.n	8001c24 <SD_TxDataBlock+0x60>
			i++;
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	2b40      	cmp	r3, #64	@ 0x40
 8001c20:	d9f0      	bls.n	8001c04 <SD_TxDataBlock+0x40>
 8001c22:	e000      	b.n	8001c26 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001c24:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001c26:	bf00      	nop
 8001c28:	f7ff ff00 	bl	8001a2c <SPI_RxByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0fa      	beq.n	8001c28 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d101      	bne.n	8001c40 <SD_TxDataBlock+0x7c>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	6039      	str	r1, [r7, #0]
 8001c54:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001c56:	f7ff ff13 	bl	8001a80 <SD_ReadyWait>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2bff      	cmp	r3, #255	@ 0xff
 8001c5e:	d001      	beq.n	8001c64 <SD_SendCmd+0x1a>
 8001c60:	23ff      	movs	r3, #255	@ 0xff
 8001c62:	e042      	b.n	8001cea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff feac 	bl	80019c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	0e1b      	lsrs	r3, r3, #24
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fea6 	bl	80019c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fea0 	bl	80019c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe9a 	bl	80019c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe95 	bl	80019c4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b40      	cmp	r3, #64	@ 0x40
 8001c9e:	d102      	bne.n	8001ca6 <SD_SendCmd+0x5c>
 8001ca0:	2395      	movs	r3, #149	@ 0x95
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e007      	b.n	8001cb6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b48      	cmp	r3, #72	@ 0x48
 8001caa:	d102      	bne.n	8001cb2 <SD_SendCmd+0x68>
 8001cac:	2387      	movs	r3, #135	@ 0x87
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e001      	b.n	8001cb6 <SD_SendCmd+0x6c>
	else crc = 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe83 	bl	80019c4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b4c      	cmp	r3, #76	@ 0x4c
 8001cc2:	d101      	bne.n	8001cc8 <SD_SendCmd+0x7e>
 8001cc4:	f7ff feb2 	bl	8001a2c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001cc8:	230a      	movs	r3, #10
 8001cca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001ccc:	f7ff feae 	bl	8001a2c <SPI_RxByte>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001cd4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da05      	bge.n	8001ce8 <SD_SendCmd+0x9e>
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	73bb      	strb	r3, [r7, #14]
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f1      	bne.n	8001ccc <SD_SendCmd+0x82>

	return res;
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SD_disk_initialize+0x14>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d1      	b.n	8001eac <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001d08:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <SD_disk_initialize+0x1c0>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <SD_disk_initialize+0x2a>
 8001d16:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <SD_disk_initialize+0x1c0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e0c6      	b.n	8001eac <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001d1e:	f7ff fec9 	bl	8001ab4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001d22:	f7ff fe2f 	bl	8001984 <SELECT>

	/* check disk type */
	type = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2040      	movs	r0, #64	@ 0x40
 8001d2e:	f7ff ff8c 	bl	8001c4a <SD_SendCmd>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f040 80a1 	bne.w	8001e7c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb8 <SD_disk_initialize+0x1c4>)
 8001d3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d40:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001d42:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001d46:	2048      	movs	r0, #72	@ 0x48
 8001d48:	f7ff ff7f 	bl	8001c4a <SD_SendCmd>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d155      	bne.n	8001dfe <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e00c      	b.n	8001d72 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001d58:	7bfc      	ldrb	r4, [r7, #15]
 8001d5a:	f7ff fe67 	bl	8001a2c <SPI_RxByte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	f104 0310 	add.w	r3, r4, #16
 8001d66:	443b      	add	r3, r7
 8001d68:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9ef      	bls.n	8001d58 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d17e      	bne.n	8001e7c <SD_disk_initialize+0x188>
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	2baa      	cmp	r3, #170	@ 0xaa
 8001d82:	d17b      	bne.n	8001e7c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d84:	2100      	movs	r1, #0
 8001d86:	2077      	movs	r0, #119	@ 0x77
 8001d88:	f7ff ff5f 	bl	8001c4a <SD_SendCmd>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d807      	bhi.n	8001da2 <SD_disk_initialize+0xae>
 8001d92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d96:	2069      	movs	r0, #105	@ 0x69
 8001d98:	f7ff ff57 	bl	8001c4a <SD_SendCmd>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001da2:	4b45      	ldr	r3, [pc, #276]	@ (8001eb8 <SD_disk_initialize+0x1c4>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ec      	bne.n	8001d84 <SD_disk_initialize+0x90>
 8001daa:	e000      	b.n	8001dae <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001dac:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001dae:	4b42      	ldr	r3, [pc, #264]	@ (8001eb8 <SD_disk_initialize+0x1c4>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d062      	beq.n	8001e7c <SD_disk_initialize+0x188>
 8001db6:	2100      	movs	r1, #0
 8001db8:	207a      	movs	r0, #122	@ 0x7a
 8001dba:	f7ff ff46 	bl	8001c4a <SD_SendCmd>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d15b      	bne.n	8001e7c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e00c      	b.n	8001de4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001dca:	7bfc      	ldrb	r4, [r7, #15]
 8001dcc:	f7ff fe2e 	bl	8001a2c <SPI_RxByte>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f104 0310 	add.w	r3, r4, #16
 8001dd8:	443b      	add	r3, r7
 8001dda:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3301      	adds	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d9ef      	bls.n	8001dca <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001dea:	7a3b      	ldrb	r3, [r7, #8]
 8001dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SD_disk_initialize+0x104>
 8001df4:	230c      	movs	r3, #12
 8001df6:	e000      	b.n	8001dfa <SD_disk_initialize+0x106>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	73bb      	strb	r3, [r7, #14]
 8001dfc:	e03e      	b.n	8001e7c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2077      	movs	r0, #119	@ 0x77
 8001e02:	f7ff ff22 	bl	8001c4a <SD_SendCmd>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d808      	bhi.n	8001e1e <SD_disk_initialize+0x12a>
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2069      	movs	r0, #105	@ 0x69
 8001e10:	f7ff ff1b 	bl	8001c4a <SD_SendCmd>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d801      	bhi.n	8001e1e <SD_disk_initialize+0x12a>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e000      	b.n	8001e20 <SD_disk_initialize+0x12c>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d10e      	bne.n	8001e46 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2077      	movs	r0, #119	@ 0x77
 8001e2c:	f7ff ff0d 	bl	8001c4a <SD_SendCmd>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d80e      	bhi.n	8001e54 <SD_disk_initialize+0x160>
 8001e36:	2100      	movs	r1, #0
 8001e38:	2069      	movs	r0, #105	@ 0x69
 8001e3a:	f7ff ff06 	bl	8001c4a <SD_SendCmd>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <SD_disk_initialize+0x160>
 8001e44:	e00c      	b.n	8001e60 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001e46:	2100      	movs	r1, #0
 8001e48:	2041      	movs	r0, #65	@ 0x41
 8001e4a:	f7ff fefe 	bl	8001c4a <SD_SendCmd>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <SD_disk_initialize+0x1c4>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e2      	bne.n	8001e22 <SD_disk_initialize+0x12e>
 8001e5c:	e000      	b.n	8001e60 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001e5e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001e60:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <SD_disk_initialize+0x1c4>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <SD_disk_initialize+0x184>
 8001e68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e6c:	2050      	movs	r0, #80	@ 0x50
 8001e6e:	f7ff feec 	bl	8001c4a <SD_SendCmd>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SD_disk_initialize+0x188>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ebc <SD_disk_initialize+0x1c8>)
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001e82:	f7ff fd8f 	bl	80019a4 <DESELECT>
	SPI_RxByte();
 8001e86:	f7ff fdd1 	bl	8001a2c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <SD_disk_initialize+0x1c0>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <SD_disk_initialize+0x1c0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e001      	b.n	8001ea6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001ea2:	f7ff fe49 	bl	8001b38 <SD_PowerOff>
	}

	return Stat;
 8001ea6:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <SD_disk_initialize+0x1c0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	2000020e 	.word	0x2000020e
 8001ebc:	20000212 	.word	0x20000212

08001ec0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SD_disk_status+0x14>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e002      	b.n	8001eda <SD_disk_status+0x1a>
	return Stat;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <SD_disk_status+0x28>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <SD_disk_read+0x1c>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <SD_disk_read+0x20>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e051      	b.n	8001fb0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <SD_disk_read+0xcc>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SD_disk_read+0x32>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e048      	b.n	8001fb0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <SD_disk_read+0xd0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <SD_disk_read+0x44>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001f30:	f7ff fd28 	bl	8001984 <SELECT>

	if (count == 1)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d111      	bne.n	8001f5e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	2051      	movs	r0, #81	@ 0x51
 8001f3e:	f7ff fe84 	bl	8001c4a <SD_SendCmd>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d129      	bne.n	8001f9c <SD_disk_read+0xb0>
 8001f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f4c:	68b8      	ldr	r0, [r7, #8]
 8001f4e:	f7ff fe0b 	bl	8001b68 <SD_RxDataBlock>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d021      	beq.n	8001f9c <SD_disk_read+0xb0>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	e01e      	b.n	8001f9c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	2052      	movs	r0, #82	@ 0x52
 8001f62:	f7ff fe72 	bl	8001c4a <SD_SendCmd>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d117      	bne.n	8001f9c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f70:	68b8      	ldr	r0, [r7, #8]
 8001f72:	f7ff fdf9 	bl	8001b68 <SD_RxDataBlock>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <SD_disk_read+0xa6>
				buff += 512;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001f82:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ed      	bne.n	8001f6c <SD_disk_read+0x80>
 8001f90:	e000      	b.n	8001f94 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f92:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	204c      	movs	r0, #76	@ 0x4c
 8001f98:	f7ff fe57 	bl	8001c4a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001f9c:	f7ff fd02 	bl	80019a4 <DESELECT>
	SPI_RxByte();
 8001fa0:	f7ff fd44 	bl	8001a2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000212 	.word	0x20000212

08001fc0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <SD_disk_write+0x1c>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <SD_disk_write+0x20>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e06b      	b.n	80020b8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fe0:	4b37      	ldr	r3, [pc, #220]	@ (80020c0 <SD_disk_write+0x100>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SD_disk_write+0x32>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e062      	b.n	80020b8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001ff2:	4b33      	ldr	r3, [pc, #204]	@ (80020c0 <SD_disk_write+0x100>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SD_disk_write+0x44>
 8002000:	2302      	movs	r3, #2
 8002002:	e059      	b.n	80020b8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002004:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <SD_disk_write+0x104>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <SD_disk_write+0x56>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	607b      	str	r3, [r7, #4]

	SELECT();
 8002016:	f7ff fcb5 	bl	8001984 <SELECT>

	if (count == 1)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d110      	bne.n	8002042 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	2058      	movs	r0, #88	@ 0x58
 8002024:	f7ff fe11 	bl	8001c4a <SD_SendCmd>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d13a      	bne.n	80020a4 <SD_disk_write+0xe4>
 800202e:	21fe      	movs	r1, #254	@ 0xfe
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f7ff fdc7 	bl	8001bc4 <SD_TxDataBlock>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d033      	beq.n	80020a4 <SD_disk_write+0xe4>
			count = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	e030      	b.n	80020a4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <SD_disk_write+0x104>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800204e:	2100      	movs	r1, #0
 8002050:	2077      	movs	r0, #119	@ 0x77
 8002052:	f7ff fdfa 	bl	8001c4a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	2057      	movs	r0, #87	@ 0x57
 800205a:	f7ff fdf6 	bl	8001c4a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	2059      	movs	r0, #89	@ 0x59
 8002062:	f7ff fdf2 	bl	8001c4a <SD_SendCmd>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11b      	bne.n	80020a4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800206c:	21fc      	movs	r1, #252	@ 0xfc
 800206e:	68b8      	ldr	r0, [r7, #8]
 8002070:	f7ff fda8 	bl	8001bc4 <SD_TxDataBlock>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <SD_disk_write+0xd0>
				buff += 512;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002080:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ee      	bne.n	800206c <SD_disk_write+0xac>
 800208e:	e000      	b.n	8002092 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002090:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002092:	21fd      	movs	r1, #253	@ 0xfd
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fd95 	bl	8001bc4 <SD_TxDataBlock>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <SD_disk_write+0xe4>
			{
				count = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80020a4:	f7ff fc7e 	bl	80019a4 <DESELECT>
	SPI_RxByte();
 80020a8:	f7ff fcc0 	bl	8001a2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000212 	.word	0x20000212

080020c8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08b      	sub	sp, #44	@ 0x2c
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	603a      	str	r2, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	460b      	mov	r3, r1
 80020d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SD_disk_ioctl+0x1e>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e113      	b.n	800230e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d124      	bne.n	800213c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d012      	beq.n	8002120 <SD_disk_ioctl+0x58>
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	dc1a      	bgt.n	8002134 <SD_disk_ioctl+0x6c>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <SD_disk_ioctl+0x40>
 8002102:	2b01      	cmp	r3, #1
 8002104:	d006      	beq.n	8002114 <SD_disk_ioctl+0x4c>
 8002106:	e015      	b.n	8002134 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002108:	f7ff fd16 	bl	8001b38 <SD_PowerOff>
			res = RES_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002112:	e0fa      	b.n	800230a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002114:	f7ff fcce 	bl	8001ab4 <SD_PowerOn>
			res = RES_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800211e:	e0f4      	b.n	800230a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	1c5c      	adds	r4, r3, #1
 8002124:	f7ff fd14 	bl	8001b50 <SD_CheckPower>
 8002128:	4603      	mov	r3, r0
 800212a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002132:	e0ea      	b.n	800230a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8002134:	2304      	movs	r3, #4
 8002136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800213a:	e0e6      	b.n	800230a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800213c:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <SD_disk_ioctl+0x250>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SD_disk_ioctl+0x86>
 800214a:	2303      	movs	r3, #3
 800214c:	e0df      	b.n	800230e <SD_disk_ioctl+0x246>

		SELECT();
 800214e:	f7ff fc19 	bl	8001984 <SELECT>

		switch (ctrl)
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	2b0d      	cmp	r3, #13
 8002156:	f200 80c9 	bhi.w	80022ec <SD_disk_ioctl+0x224>
 800215a:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <SD_disk_ioctl+0x98>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002257 	.word	0x08002257
 8002164:	08002199 	.word	0x08002199
 8002168:	08002247 	.word	0x08002247
 800216c:	080022ed 	.word	0x080022ed
 8002170:	080022ed 	.word	0x080022ed
 8002174:	080022ed 	.word	0x080022ed
 8002178:	080022ed 	.word	0x080022ed
 800217c:	080022ed 	.word	0x080022ed
 8002180:	080022ed 	.word	0x080022ed
 8002184:	080022ed 	.word	0x080022ed
 8002188:	080022ed 	.word	0x080022ed
 800218c:	08002269 	.word	0x08002269
 8002190:	0800228d 	.word	0x0800228d
 8002194:	080022b1 	.word	0x080022b1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002198:	2100      	movs	r1, #0
 800219a:	2049      	movs	r0, #73	@ 0x49
 800219c:	f7ff fd55 	bl	8001c4a <SD_SendCmd>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80a6 	bne.w	80022f4 <SD_disk_ioctl+0x22c>
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2110      	movs	r1, #16
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fcda 	bl	8001b68 <SD_RxDataBlock>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 809c 	beq.w	80022f4 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021c6:	7d7b      	ldrb	r3, [r7, #21]
 80021c8:	461a      	mov	r2, r3
 80021ca:	7d3b      	ldrb	r3, [r7, #20]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80021d8:	8bfb      	ldrh	r3, [r7, #30]
 80021da:	029a      	lsls	r2, r3, #10
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e02d      	b.n	800223e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021e2:	7c7b      	ldrb	r3, [r7, #17]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	7dbb      	ldrb	r3, [r7, #22]
 80021ec:	09db      	lsrs	r3, r3, #7
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	7d7b      	ldrb	r3, [r7, #21]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0306 	and.w	r3, r3, #6
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4413      	add	r3, r2
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3302      	adds	r3, #2
 8002206:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800220a:	7d3b      	ldrb	r3, [r7, #20]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	b29b      	uxth	r3, r3
 8002218:	4413      	add	r3, r2
 800221a:	b29a      	uxth	r2, r3
 800221c:	7cbb      	ldrb	r3, [r7, #18]
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	b29b      	uxth	r3, r3
 8002222:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002226:	b29b      	uxth	r3, r3
 8002228:	4413      	add	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002230:	8bfa      	ldrh	r2, [r7, #30]
 8002232:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002236:	3b09      	subs	r3, #9
 8002238:	409a      	lsls	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8002244:	e056      	b.n	80022f4 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002254:	e055      	b.n	8002302 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002256:	f7ff fc13 	bl	8001a80 <SD_ReadyWait>
 800225a:	4603      	mov	r3, r0
 800225c:	2bff      	cmp	r3, #255	@ 0xff
 800225e:	d14b      	bne.n	80022f8 <SD_disk_ioctl+0x230>
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002266:	e047      	b.n	80022f8 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002268:	2100      	movs	r1, #0
 800226a:	2049      	movs	r0, #73	@ 0x49
 800226c:	f7ff fced 	bl	8001c4a <SD_SendCmd>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d142      	bne.n	80022fc <SD_disk_ioctl+0x234>
 8002276:	2110      	movs	r1, #16
 8002278:	6a38      	ldr	r0, [r7, #32]
 800227a:	f7ff fc75 	bl	8001b68 <SD_RxDataBlock>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d03b      	beq.n	80022fc <SD_disk_ioctl+0x234>
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800228a:	e037      	b.n	80022fc <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800228c:	2100      	movs	r1, #0
 800228e:	204a      	movs	r0, #74	@ 0x4a
 8002290:	f7ff fcdb 	bl	8001c4a <SD_SendCmd>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d132      	bne.n	8002300 <SD_disk_ioctl+0x238>
 800229a:	2110      	movs	r1, #16
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f7ff fc63 	bl	8001b68 <SD_RxDataBlock>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02b      	beq.n	8002300 <SD_disk_ioctl+0x238>
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022ae:	e027      	b.n	8002300 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80022b0:	2100      	movs	r1, #0
 80022b2:	207a      	movs	r0, #122	@ 0x7a
 80022b4:	f7ff fcc9 	bl	8001c4a <SD_SendCmd>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022c4:	e00b      	b.n	80022de <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80022c6:	6a3c      	ldr	r4, [r7, #32]
 80022c8:	1c63      	adds	r3, r4, #1
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	f7ff fbae 	bl	8001a2c <SPI_RxByte>
 80022d0:	4603      	mov	r3, r0
 80022d2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80022d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022d8:	3301      	adds	r3, #1
 80022da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9ef      	bls.n	80022c6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80022ec:	2304      	movs	r3, #4
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022f2:	e006      	b.n	8002302 <SD_disk_ioctl+0x23a>
			break;
 80022f4:	bf00      	nop
 80022f6:	e004      	b.n	8002302 <SD_disk_ioctl+0x23a>
			break;
 80022f8:	bf00      	nop
 80022fa:	e002      	b.n	8002302 <SD_disk_ioctl+0x23a>
			break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <SD_disk_ioctl+0x23a>
			break;
 8002300:	bf00      	nop
		}

		DESELECT();
 8002302:	f7ff fb4f 	bl	80019a4 <DESELECT>
		SPI_RxByte();
 8002306:	f7ff fb91 	bl	8001a2c <SPI_RxByte>
	}

	return res;
 800230a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800230e:	4618      	mov	r0, r3
 8002310:	372c      	adds	r7, #44	@ 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <vApplicationGetIdleTaskMemory+0x2c>)
 800232c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4a06      	ldr	r2, [pc, #24]	@ (800234c <vApplicationGetIdleTaskMemory+0x30>)
 8002332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000214 	.word	0x20000214
 800234c:	200002b4 	.word	0x200002b4

08002350 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002358:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800235c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002368:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800236c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002370:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002378:	e000      	b.n	800237c <ITM_SendChar+0x2c>
    {
      __NOP();
 800237a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800237c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f9      	beq.n	800237a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002386:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d113      	bne.n	80023d8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80023ba:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // downsample MPU6050 data at 50 Hz
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b14      	cmp	r3, #20
 80023c2:	d109      	bne.n	80023d8 <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 80023c4:	4807      	ldr	r0, [pc, #28]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80023c6:	f7ff fa0e 	bl	80017e6 <MPU6050readDataDMA>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80023d0:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 80023d2:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20002b1d 	.word	0x20002b1d
 80023e4:	20002ac4 	.word	0x20002ac4
 80023e8:	20002b1c 	.word	0x20002b1c

080023ec <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==mpu6050.i2cHandle->Instance)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <HAL_I2C_MemRxCpltCallback+0x2c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d106      	bne.n	8002410 <HAL_I2C_MemRxCpltCallback+0x24>
	{
		mpu6050.rxFlag=0;
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002404:	2200      	movs	r2, #0
 8002406:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		MPU6050convertRawData(&mpu6050);
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <HAL_I2C_MemRxCpltCallback+0x2c>)
 800240c:	f7ff fa16 	bl	800183c <MPU6050convertRawData>
		//MPU6050filterRawData(&mpu6050);
	}

}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20002ac4 	.word	0x20002ac4
 800241c:	00000000 	.word	0x00000000

08002420 <HAL_ADC_ConvCpltCallback>:
	uint8_t len=strlen(string);
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <HAL_ADC_ConvCpltCallback+0xc8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d124      	bne.n	800247c <HAL_ADC_ConvCpltCallback+0x5c>
		joystick.joystickData[0]=adc1Data;
 8002432:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <HAL_ADC_ConvCpltCallback+0xcc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2e      	ldr	r2, [pc, #184]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002438:	6013      	str	r3, [r2, #0]
		joystick.joystickVoltage[0]=(float)joystick.joystickData[0]*3.3/4095.0f;
 800243a:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	ee17 0a90 	vmov	r0, s15
 800244a:	f7fe f89d 	bl	8000588 <__aeabi_f2d>
 800244e:	a322      	add	r3, pc, #136	@ (adr r3, 80024d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fe f8f0 	bl	8000638 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	a31f      	add	r3, pc, #124	@ (adr r3, 80024e0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe fa11 	bl	800088c <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fbd9 	bl	8000c28 <__aeabi_d2f>
 8002476:	4603      	mov	r3, r0
 8002478:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800247a:	6093      	str	r3, [r2, #8]

	}
	if(hadc->Instance==ADC2){
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d124      	bne.n	80024d0 <HAL_ADC_ConvCpltCallback+0xb0>
		joystick.joystickData[1]=adc2Data;
 8002486:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800248c:	6053      	str	r3, [r2, #4]
		joystick.joystickVoltage[1]=(float)joystick.joystickData[1]*3.3/4095.0f;
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	ee17 0a90 	vmov	r0, s15
 800249e:	f7fe f873 	bl	8000588 <__aeabi_f2d>
 80024a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80024d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f8c6 	bl	8000638 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80024e0 <HAL_ADC_ConvCpltCallback+0xc0>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f9e7 	bl	800088c <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fbaf 	bl	8000c28 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024ce:	60d3      	str	r3, [r2, #12]

	}
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	66666666 	.word	0x66666666
 80024dc:	400a6666 	.word	0x400a6666
 80024e0:	00000000 	.word	0x00000000
 80024e4:	40affe00 	.word	0x40affe00
 80024e8:	40012000 	.word	0x40012000
 80024ec:	20002a90 	.word	0x20002a90
 80024f0:	20002a80 	.word	0x20002a80
 80024f4:	40012100 	.word	0x40012100
 80024f8:	20002a94 	.word	0x20002a94

080024fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_UART_RxCpltCallback+0x48>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10f      	bne.n	800252e <HAL_UART_RxCpltCallback+0x32>
	{
		if(currentState==IDLE_STATE)
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <HAL_UART_RxCpltCallback+0x4c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_UART_RxCpltCallback+0x2a>
		{
			if(transferControlByte==0xFF)
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_UART_RxCpltCallback+0x50>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2bff      	cmp	r3, #255	@ 0xff
 800251c:	d107      	bne.n	800252e <HAL_UART_RxCpltCallback+0x32>
				currentState=SEND_ACK_STATE;
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_UART_RxCpltCallback+0x4c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e003      	b.n	800252e <HAL_UART_RxCpltCallback+0x32>
		}

		else if(currentState==SENDING_DATA_STATE)
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_UART_RxCpltCallback+0x4c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d103      	bne.n	8002536 <HAL_UART_RxCpltCallback+0x3a>
			currentState==IDLE_STATE;
		}
		else
			return;
	}
	transferControlByte=0x00;
 800252e:	4b07      	ldr	r3, [pc, #28]	@ (800254c <HAL_UART_RxCpltCallback+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e000      	b.n	8002538 <HAL_UART_RxCpltCallback+0x3c>
			return;
 8002536:	bf00      	nop




}
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40004800 	.word	0x40004800
 8002548:	20002b29 	.word	0x20002b29
 800254c:	20002b28 	.word	0x20002b28

08002550 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]


}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_write>:

int _write(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e009      	b.n	800258a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	60ba      	str	r2, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fee6 	bl	8002350 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	dbf1      	blt.n	8002576 <_write+0x12>
  }
  return len;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b0b8      	sub	sp, #224	@ 0xe0
 80025a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a2:	f001 fe9d 	bl	80042e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a6:	f000 f97b 	bl	80028a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025aa:	f000 fd59 	bl	8003060 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ae:	f000 fd01 	bl	8002fb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80025b2:	f000 f9e1 	bl	8002978 <MX_ADC1_Init>
  MX_I2C1_Init();
 80025b6:	f000 fa83 	bl	8002ac0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80025ba:	f000 fb87 	bl	8002ccc <MX_TIM3_Init>
  MX_I2C2_Init();
 80025be:	f000 faad 	bl	8002b1c <MX_I2C2_Init>
  MX_SPI2_Init();
 80025c2:	f000 fad9 	bl	8002b78 <MX_SPI2_Init>
  MX_FATFS_Init();
 80025c6:	f00a fac1 	bl	800cb4c <MX_FATFS_Init>
  MX_TIM2_Init();
 80025ca:	f000 fb0b 	bl	8002be4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80025ce:	f000 fc95 	bl	8002efc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80025d2:	f000 fce7 	bl	8002fa4 <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 80025d6:	f000 fcbb 	bl	8002f50 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 80025da:	f000 fa1f 	bl	8002a1c <MX_ADC2_Init>
  MX_TIM8_Init();
 80025de:	f000 fbef 	bl	8002dc0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Start servo PWM ( pulse duration from 0.9ms to 2.1ms with 1.5 as center ) duty cycle varies from 4.5% to 7.5%
  //( CCR can go from 425 to 1175 )
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80025e2:	2100      	movs	r1, #0
 80025e4:	488b      	ldr	r0, [pc, #556]	@ (8002814 <main+0x278>)
 80025e6:	f008 fa45 	bl	800aa74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80025ea:	2104      	movs	r1, #4
 80025ec:	4889      	ldr	r0, [pc, #548]	@ (8002814 <main+0x278>)
 80025ee:	f008 fa41 	bl	800aa74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80025f2:	2108      	movs	r1, #8
 80025f4:	4887      	ldr	r0, [pc, #540]	@ (8002814 <main+0x278>)
 80025f6:	f008 fa3d 	bl	800aa74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80025fa:	210c      	movs	r1, #12
 80025fc:	4885      	ldr	r0, [pc, #532]	@ (8002814 <main+0x278>)
 80025fe:	f008 fa39 	bl	800aa74 <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1=SERVO_CENTER_PWM;
 8002602:	4b84      	ldr	r3, [pc, #528]	@ (8002814 <main+0x278>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2=SERVO_CENTER_PWM;
 800260c:	4b81      	ldr	r3, [pc, #516]	@ (8002814 <main+0x278>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3=SERVO_CENTER_PWM;
 8002616:	4b7f      	ldr	r3, [pc, #508]	@ (8002814 <main+0x278>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8002620:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <main+0x278>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40

  // EKF initialisation
  float KalmanQ[2]={KALMAN_Q,KALMAN_Q};
 800262a:	4a7b      	ldr	r2, [pc, #492]	@ (8002818 <main+0x27c>)
 800262c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002634:	e883 0003 	stmia.w	r3, {r0, r1}
  float KalmanR[3]={KALMAN_R,KALMAN_R,KALMAN_R};
 8002638:	4a78      	ldr	r2, [pc, #480]	@ (800281c <main+0x280>)
 800263a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800263e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float KalmanP=KALMAN_P_INIT;
 8002644:	4b76      	ldr	r3, [pc, #472]	@ (8002820 <main+0x284>)
 8002646:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  EKF_Init(&ekf,KalmanP,KalmanQ,KalmanR);
 800264a:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 800264e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002652:	4619      	mov	r1, r3
 8002654:	ed97 0a33 	vldr	s0, [r7, #204]	@ 0xcc
 8002658:	4872      	ldr	r0, [pc, #456]	@ (8002824 <main+0x288>)
 800265a:	f7fe ffcb 	bl	80015f4 <EKF_Init>


  // Start DMA streams

  HAL_ADC_Start_DMA(&hadc1,&adc1Data,1);
 800265e:	2201      	movs	r2, #1
 8002660:	4971      	ldr	r1, [pc, #452]	@ (8002828 <main+0x28c>)
 8002662:	4872      	ldr	r0, [pc, #456]	@ (800282c <main+0x290>)
 8002664:	f001 fff6 	bl	8004654 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,&adc2Data,1);
 8002668:	2201      	movs	r2, #1
 800266a:	4971      	ldr	r1, [pc, #452]	@ (8002830 <main+0x294>)
 800266c:	4871      	ldr	r0, [pc, #452]	@ (8002834 <main+0x298>)
 800266e:	f001 fff1 	bl	8004654 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8002672:	4871      	ldr	r0, [pc, #452]	@ (8002838 <main+0x29c>)
 8002674:	f008 f8d6 	bl	800a824 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8002678:	4870      	ldr	r0, [pc, #448]	@ (800283c <main+0x2a0>)
 800267a:	f008 f8d3 	bl	800a824 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart3,uartRxBuffer,8);
 800267e:	2208      	movs	r2, #8
 8002680:	496f      	ldr	r1, [pc, #444]	@ (8002840 <main+0x2a4>)
 8002682:	4870      	ldr	r0, [pc, #448]	@ (8002844 <main+0x2a8>)
 8002684:	f009 f9b7 	bl	800b9f6 <HAL_UART_Receive_DMA>


  // sensor initialization
  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 8002688:	f7fe ffec 	bl	8001664 <checkMPU6050Ready>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1 );
 8002692:	496d      	ldr	r1, [pc, #436]	@ (8002848 <main+0x2ac>)
 8002694:	486d      	ldr	r0, [pc, #436]	@ (800284c <main+0x2b0>)
 8002696:	f7ff f819 	bl	80016cc <MPU6050init>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 80026a0:	2364      	movs	r3, #100	@ 0x64
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	2301      	movs	r3, #1
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	f107 03b3 	add.w	r3, r7, #179	@ 0xb3
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2301      	movs	r3, #1
 80026b0:	2275      	movs	r2, #117	@ 0x75
 80026b2:	21d0      	movs	r1, #208	@ 0xd0
 80026b4:	4864      	ldr	r0, [pc, #400]	@ (8002848 <main+0x2ac>)
 80026b6:	f003 ffdb 	bl	8006670 <HAL_I2C_Mem_Read>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
  Bar30init(&pressureSensor, &hi2c2);
 80026c0:	4963      	ldr	r1, [pc, #396]	@ (8002850 <main+0x2b4>)
 80026c2:	4864      	ldr	r0, [pc, #400]	@ (8002854 <main+0x2b8>)
 80026c4:	f7fe fc78 	bl	8000fb8 <Bar30init>
  uint8_t i2cGood=0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  i2cGood=Bar30reset(&pressureSensor);
 80026ce:	4861      	ldr	r0, [pc, #388]	@ (8002854 <main+0x2b8>)
 80026d0:	f7fe fca8 	bl	8001024 <Bar30reset>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  printf("Reset Command Result : %i\r\n",i2cGood );
 80026da:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 80026de:	4619      	mov	r1, r3
 80026e0:	485d      	ldr	r0, [pc, #372]	@ (8002858 <main+0x2bc>)
 80026e2:	f010 fecb 	bl	801347c <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 80026e6:	485b      	ldr	r0, [pc, #364]	@ (8002854 <main+0x2b8>)
 80026e8:	f7fe fcc2 	bl	8001070 <Bar30getCalibration>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  printf("Calibration phase result : %i\r\n",i2cGood );
 80026f2:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 80026f6:	4619      	mov	r1, r3
 80026f8:	4858      	ldr	r0, [pc, #352]	@ (800285c <main+0x2c0>)
 80026fa:	f010 febf 	bl	801347c <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 80026fe:	4858      	ldr	r0, [pc, #352]	@ (8002860 <main+0x2c4>)
 8002700:	f7fe fe1e 	bl	8001340 <Bar30CRCcheck>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8

  HAL_UART_Receive_DMA(&huart3,&transferControlByte,1);
 800270a:	2201      	movs	r2, #1
 800270c:	4955      	ldr	r1, [pc, #340]	@ (8002864 <main+0x2c8>)
 800270e:	484d      	ldr	r0, [pc, #308]	@ (8002844 <main+0x2a8>)
 8002710:	f009 f971 	bl	800b9f6 <HAL_UART_Receive_DMA>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of sender */
  osMessageQDef(sender, 32, uint16_t);
 8002714:	4b54      	ldr	r3, [pc, #336]	@ (8002868 <main+0x2cc>)
 8002716:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 800271a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  senderHandle = osMessageCreate(osMessageQ(sender), NULL);
 8002720:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f00d fe67 	bl	80103fa <osMessageCreate>
 800272c:	4603      	mov	r3, r0
 800272e:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <main+0x2d0>)
 8002730:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiver */
  osMessageQDef(receiver, 16, uint16_t);
 8002732:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <main+0x2d4>)
 8002734:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  receiverHandle = osMessageCreate(osMessageQ(receiver), NULL);
 800273e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f00d fe58 	bl	80103fa <osMessageCreate>
 800274a:	4603      	mov	r3, r0
 800274c:	4a49      	ldr	r2, [pc, #292]	@ (8002874 <main+0x2d8>)
 800274e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityIdle, 0, 128);
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <main+0x2dc>)
 8002752:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002756:	461d      	mov	r5, r3
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 8002764:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f00d fd1b 	bl	80101a6 <osThreadCreate>
 8002770:	4603      	mov	r3, r0
 8002772:	4a42      	ldr	r2, [pc, #264]	@ (800287c <main+0x2e0>)
 8002774:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityNormal, 0, 1024);
 8002776:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <main+0x2e4>)
 8002778:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800277c:	461d      	mov	r5, r3
 800277e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 800278a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f00d fd08 	bl	80101a6 <osThreadCreate>
 8002796:	4603      	mov	r3, r0
 8002798:	4a3a      	ldr	r2, [pc, #232]	@ (8002884 <main+0x2e8>)
 800279a:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityHigh, 0, 256);
 800279c:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <main+0x2ec>)
 800279e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80027a2:	461d      	mov	r5, r3
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 80027b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00d fcf5 	bl	80101a6 <osThreadCreate>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a33      	ldr	r2, [pc, #204]	@ (800288c <main+0x2f0>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityAboveNormal, 0, 2048);
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <main+0x2f4>)
 80027c4:	f107 0420 	add.w	r4, r7, #32
 80027c8:	461d      	mov	r5, r3
 80027ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 80027d6:	f107 0320 	add.w	r3, r7, #32
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f00d fce2 	bl	80101a6 <osThreadCreate>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002894 <main+0x2f8>)
 80027e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, getBar30Data, osPriorityNormal, 0, 128);
 80027e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <main+0x2fc>)
 80027ea:	1d3c      	adds	r4, r7, #4
 80027ec:	461d      	mov	r5, r3
 80027ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f00d fcd1 	bl	80101a6 <osThreadCreate>
 8002804:	4603      	mov	r3, r0
 8002806:	4a25      	ldr	r2, [pc, #148]	@ (800289c <main+0x300>)
 8002808:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800280a:	f00d fcc5 	bl	8010198 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <main+0x272>
 8002812:	bf00      	nop
 8002814:	2000288c 	.word	0x2000288c
 8002818:	080157fc 	.word	0x080157fc
 800281c:	08015804 	.word	0x08015804
 8002820:	3dcccccd 	.word	0x3dcccccd
 8002824:	20002a98 	.word	0x20002a98
 8002828:	20002a90 	.word	0x20002a90
 800282c:	2000258c 	.word	0x2000258c
 8002830:	20002a94 	.word	0x20002a94
 8002834:	200025d4 	.word	0x200025d4
 8002838:	20002844 	.word	0x20002844
 800283c:	200028d4 	.word	0x200028d4
 8002840:	20002b20 	.word	0x20002b20
 8002844:	20002960 	.word	0x20002960
 8002848:	200026dc 	.word	0x200026dc
 800284c:	20002ac4 	.word	0x20002ac4
 8002850:	20002730 	.word	0x20002730
 8002854:	20002af4 	.word	0x20002af4
 8002858:	080157c0 	.word	0x080157c0
 800285c:	080157dc 	.word	0x080157dc
 8002860:	20002b08 	.word	0x20002b08
 8002864:	20002b28 	.word	0x20002b28
 8002868:	08015810 	.word	0x08015810
 800286c:	20002a78 	.word	0x20002a78
 8002870:	08015820 	.word	0x08015820
 8002874:	20002a7c 	.word	0x20002a7c
 8002878:	0801583c 	.word	0x0801583c
 800287c:	20002a64 	.word	0x20002a64
 8002880:	08015868 	.word	0x08015868
 8002884:	20002a68 	.word	0x20002a68
 8002888:	08015894 	.word	0x08015894
 800288c:	20002a6c 	.word	0x20002a6c
 8002890:	080158bc 	.word	0x080158bc
 8002894:	20002a70 	.word	0x20002a70
 8002898:	080158e8 	.word	0x080158e8
 800289c:	20002a74 	.word	0x20002a74

080028a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	@ 0x50
 80028a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2234      	movs	r2, #52	@ 0x34
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f010 fe59 	bl	8013566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <SystemClock_Config+0xd0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <SystemClock_Config+0xd0>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <SystemClock_Config+0xd0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <SystemClock_Config+0xd4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <SystemClock_Config+0xd4>)
 80028ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <SystemClock_Config+0xd4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002904:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002906:	2302      	movs	r3, #2
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800290a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002910:	2308      	movs	r3, #8
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002914:	23a8      	movs	r3, #168	@ 0xa8
 8002916:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002918:	2302      	movs	r3, #2
 800291a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800291c:	2307      	movs	r3, #7
 800291e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002920:	2302      	movs	r3, #2
 8002922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4618      	mov	r0, r3
 800292a:	f007 f85b 	bl	80099e4 <HAL_RCC_OscConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002934:	f000 fdc2 	bl	80034bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002938:	230f      	movs	r3, #15
 800293a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800293c:	2302      	movs	r3, #2
 800293e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800294a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800294e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	2105      	movs	r1, #5
 8002956:	4618      	mov	r0, r3
 8002958:	f006 fcca 	bl	80092f0 <HAL_RCC_ClockConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002962:	f000 fdab 	bl	80034bc <Error_Handler>
  }
}
 8002966:	bf00      	nop
 8002968:	3750      	adds	r7, #80	@ 0x50
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000

08002978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800297e:	463b      	mov	r3, r7
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800298a:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 800298c:	4a22      	ldr	r2, [pc, #136]	@ (8002a18 <MX_ADC1_Init+0xa0>)
 800298e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 8002992:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002996:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002998:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800299e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029b2:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80029c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029d8:	2201      	movs	r2, #1
 80029da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029dc:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029de:	f001 fce5 	bl	80043ac <HAL_ADC_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80029e8:	f000 fd68 	bl	80034bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80029f4:	2306      	movs	r3, #6
 80029f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f8:	463b      	mov	r3, r7
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_ADC1_Init+0x9c>)
 80029fe:	f001 ff57 	bl	80048b0 <HAL_ADC_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002a08:	f000 fd58 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000258c 	.word	0x2000258c
 8002a18:	40012000 	.word	0x40012000

08002a1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a22:	463b      	mov	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a30:	4a22      	ldr	r2, [pc, #136]	@ (8002abc <MX_ADC2_Init+0xa0>)
 8002a32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a34:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002a56:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a60:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a66:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a72:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002a82:	f001 fc93 	bl	80043ac <HAL_ADC_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002a8c:	f000 fd16 	bl	80034bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <MX_ADC2_Init+0x9c>)
 8002aa2:	f001 ff05 	bl	80048b0 <HAL_ADC_ConfigChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002aac:	f000 fd06 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200025d4 	.word	0x200025d4
 8002abc:	40012100 	.word	0x40012100

08002ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <MX_I2C1_Init+0x54>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002acc:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <MX_I2C1_Init+0x58>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	@ (8002b10 <MX_I2C1_Init+0x50>)
 8002afe:	f003 f855 	bl	8005bac <HAL_I2C_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b08:	f000 fcd8 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200026dc 	.word	0x200026dc
 8002b14:	40005400 	.word	0x40005400
 8002b18:	000186a0 	.word	0x000186a0

08002b1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b22:	4a13      	ldr	r2, [pc, #76]	@ (8002b70 <MX_I2C2_Init+0x54>)
 8002b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b28:	4a12      	ldr	r2, [pc, #72]	@ (8002b74 <MX_I2C2_Init+0x58>)
 8002b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b58:	4804      	ldr	r0, [pc, #16]	@ (8002b6c <MX_I2C2_Init+0x50>)
 8002b5a:	f003 f827 	bl	8005bac <HAL_I2C_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b64:	f000 fcaa 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20002730 	.word	0x20002730
 8002b70:	40005800 	.word	0x40005800
 8002b74:	000186a0 	.word	0x000186a0

08002b78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b7c:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b7e:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <MX_SPI2_Init+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b82:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b8a:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bac:	2208      	movs	r2, #8
 8002bae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bc4:	220a      	movs	r2, #10
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <MX_SPI2_Init+0x64>)
 8002bca:	f007 f9a9 	bl	8009f20 <HAL_SPI_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002bd4:	f000 fc72 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200004b4 	.word	0x200004b4
 8002be0:	40003800 	.word	0x40003800

08002be4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	@ 0x38
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	f107 0320 	add.w	r3, r7, #32
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	615a      	str	r2, [r3, #20]
 8002c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c14:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c1e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002c2a:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c32:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c3e:	4822      	ldr	r0, [pc, #136]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c40:	f007 fda0 	bl	800a784 <HAL_TIM_Base_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c4a:	f000 fc37 	bl	80034bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c58:	4619      	mov	r1, r3
 8002c5a:	481b      	ldr	r0, [pc, #108]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c5c:	f008 f99c 	bl	800af98 <HAL_TIM_ConfigClockSource>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c66:	f000 fc29 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c6a:	4817      	ldr	r0, [pc, #92]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c6c:	f007 feb2 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c76:	f000 fc21 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	4619      	mov	r1, r3
 8002c88:	480f      	ldr	r0, [pc, #60]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002c8a:	f008 fd85 	bl	800b798 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c94:	f000 fc12 	bl	80034bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c98:	2360      	movs	r3, #96	@ 0x60
 8002c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	4619      	mov	r1, r3
 8002cae:	4806      	ldr	r0, [pc, #24]	@ (8002cc8 <MX_TIM2_Init+0xe4>)
 8002cb0:	f008 f8b0 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002cba:	f000 fbff 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cbe:	bf00      	nop
 8002cc0:	3738      	adds	r7, #56	@ 0x38
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20002844 	.word	0x20002844

08002ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	f107 0320 	add.w	r3, r7, #32
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cee:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <MX_TIM3_Init+0xf0>)
 8002cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002cf6:	22a8      	movs	r2, #168	@ 0xa8
 8002cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b2b      	ldr	r3, [pc, #172]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d14:	4828      	ldr	r0, [pc, #160]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d16:	f007 fe5d 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002d20:	f000 fbcc 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	4619      	mov	r1, r3
 8002d32:	4821      	ldr	r0, [pc, #132]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d34:	f008 fd30 	bl	800b798 <HAL_TIMEx_MasterConfigSynchronization>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d3e:	f000 fbbd 	bl	80034bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d42:	2360      	movs	r3, #96	@ 0x60
 8002d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	4619      	mov	r1, r3
 8002d58:	4817      	ldr	r0, [pc, #92]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d5a:	f008 f85b 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d64:	f000 fbaa 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4812      	ldr	r0, [pc, #72]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d70:	f008 f850 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d7a:	f000 fb9f 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2208      	movs	r2, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d86:	f008 f845 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002d90:	f000 fb94 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	220c      	movs	r2, #12
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002d9c:	f008 f83a 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002da6:	f000 fb89 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <MX_TIM3_Init+0xec>)
 8002dac:	f000 ff80 	bl	8003cb0 <HAL_TIM_MspPostInit>

}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	2000288c 	.word	0x2000288c
 8002dbc:	40000400 	.word	0x40000400

08002dc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b096      	sub	sp, #88	@ 0x58
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2220      	movs	r2, #32
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f010 fbb4 	bl	8013566 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e00:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef8 <MX_TIM8_Init+0x138>)
 8002e02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8400-1;
 8002e04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e06:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002e0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002e12:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e20:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e26:	4b33      	ldr	r3, [pc, #204]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e2c:	4831      	ldr	r0, [pc, #196]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e2e:	f007 fca9 	bl	800a784 <HAL_TIM_Base_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002e38:	f000 fb40 	bl	80034bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e46:	4619      	mov	r1, r3
 8002e48:	482a      	ldr	r0, [pc, #168]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e4a:	f008 f8a5 	bl	800af98 <HAL_TIM_ConfigClockSource>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002e54:	f000 fb32 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e58:	4826      	ldr	r0, [pc, #152]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e5a:	f007 fdbb 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002e64:	f000 fb2a 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e74:	4619      	mov	r1, r3
 8002e76:	481f      	ldr	r0, [pc, #124]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002e78:	f008 fc8e 	bl	800b798 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002e82:	f000 fb1b 	bl	80034bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e86:	2360      	movs	r3, #96	@ 0x60
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e92:	2300      	movs	r3, #0
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4812      	ldr	r0, [pc, #72]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002eac:	f007 ffb2 	bl	800ae14 <HAL_TIM_PWM_ConfigChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002eb6:	f000 fb01 	bl	80034bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	@ (8002ef4 <MX_TIM8_Init+0x134>)
 8002ede:	f008 fcd7 	bl	800b890 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8002ee8:	f000 fae8 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	3758      	adds	r7, #88	@ 0x58
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200028d4 	.word	0x200028d4
 8002ef8:	40010400 	.word	0x40010400

08002efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	@ (8002f4c <MX_USART2_UART_Init+0x50>)
 8002f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f22:	220c      	movs	r2, #12
 8002f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <MX_USART2_UART_Init+0x4c>)
 8002f34:	f008 fd12 	bl	800b95c <HAL_UART_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f3e:	f000 fabd 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000291c 	.word	0x2000291c
 8002f4c:	40004400 	.word	0x40004400

08002f50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f56:	4a12      	ldr	r2, [pc, #72]	@ (8002fa0 <MX_USART3_UART_Init+0x50>)
 8002f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <MX_USART3_UART_Init+0x4c>)
 8002f88:	f008 fce8 	bl	800b95c <HAL_UART_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f92:	f000 fa93 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20002960 	.word	0x20002960
 8002fa0:	40004800 	.word	0x40004800

08002fa4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	4b27      	ldr	r3, [pc, #156]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a26      	ldr	r2, [pc, #152]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b24      	ldr	r3, [pc, #144]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a1f      	ldr	r2, [pc, #124]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <MX_DMA_Init+0xa8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2105      	movs	r1, #5
 8002ff6:	200b      	movs	r0, #11
 8002ff8:	f001 ffcc 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ffc:	200b      	movs	r0, #11
 8002ffe:	f001 ffe5 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2105      	movs	r1, #5
 8003006:	200c      	movs	r0, #12
 8003008:	f001 ffc4 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800300c:	200c      	movs	r0, #12
 800300e:	f001 ffdd 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2105      	movs	r1, #5
 8003016:	200e      	movs	r0, #14
 8003018:	f001 ffbc 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800301c:	200e      	movs	r0, #14
 800301e:	f001 ffd5 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2105      	movs	r1, #5
 8003026:	202f      	movs	r0, #47	@ 0x2f
 8003028:	f001 ffb4 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800302c:	202f      	movs	r0, #47	@ 0x2f
 800302e:	f001 ffcd 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2105      	movs	r1, #5
 8003036:	2038      	movs	r0, #56	@ 0x38
 8003038:	f001 ffac 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800303c:	2038      	movs	r0, #56	@ 0x38
 800303e:	f001 ffc5 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2105      	movs	r1, #5
 8003046:	203a      	movs	r0, #58	@ 0x3a
 8003048:	f001 ffa4 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800304c:	203a      	movs	r0, #58	@ 0x3a
 800304e:	f001 ffbd 	bl	8004fcc <HAL_NVIC_EnableIRQ>

}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ec <MX_GPIO_Init+0x18c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ec <MX_GPIO_Init+0x18c>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b59      	ldr	r3, [pc, #356]	@ (80031ec <MX_GPIO_Init+0x18c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <MX_GPIO_Init+0x18c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a54      	ldr	r2, [pc, #336]	@ (80031ec <MX_GPIO_Init+0x18c>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b52      	ldr	r3, [pc, #328]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b4e      	ldr	r3, [pc, #312]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a4d      	ldr	r2, [pc, #308]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b4b      	ldr	r3, [pc, #300]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b44      	ldr	r3, [pc, #272]	@ (80031ec <MX_GPIO_Init+0x18c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80030e6:	2200      	movs	r2, #0
 80030e8:	f248 1160 	movw	r1, #33120	@ 0x8160
 80030ec:	4840      	ldr	r0, [pc, #256]	@ (80031f0 <MX_GPIO_Init+0x190>)
 80030ee:	f002 fd2b 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2101      	movs	r1, #1
 80030f6:	483f      	ldr	r0, [pc, #252]	@ (80031f4 <MX_GPIO_Init+0x194>)
 80030f8:	f002 fd26 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80030fc:	2201      	movs	r2, #1
 80030fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003102:	483c      	ldr	r0, [pc, #240]	@ (80031f4 <MX_GPIO_Init+0x194>)
 8003104:	f002 fd20 	bl	8005b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003108:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800310c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800310e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4619      	mov	r1, r3
 800311e:	4836      	ldr	r0, [pc, #216]	@ (80031f8 <MX_GPIO_Init+0x198>)
 8003120:	f002 fb7e 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 8003124:	2302      	movs	r3, #2
 8003126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003128:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800312c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	482f      	ldr	r0, [pc, #188]	@ (80031f8 <MX_GPIO_Init+0x198>)
 800313a:	f002 fb71 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
 800313e:	f248 1360 	movw	r3, #33120	@ 0x8160
 8003142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	2301      	movs	r3, #1
 8003146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4619      	mov	r1, r3
 8003156:	4826      	ldr	r0, [pc, #152]	@ (80031f0 <MX_GPIO_Init+0x190>)
 8003158:	f002 fb62 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800315c:	2301      	movs	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003160:	2301      	movs	r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	4820      	ldr	r0, [pc, #128]	@ (80031f4 <MX_GPIO_Init+0x194>)
 8003174:	f002 fb54 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317e:	2301      	movs	r3, #1
 8003180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003186:	2301      	movs	r3, #1
 8003188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4818      	ldr	r0, [pc, #96]	@ (80031f4 <MX_GPIO_Init+0x194>)
 8003192:	f002 fb45 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800319a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4811      	ldr	r0, [pc, #68]	@ (80031f0 <MX_GPIO_Init+0x190>)
 80031ac:	f002 fb38 	bl	8005820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031c2:	230a      	movs	r3, #10
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4808      	ldr	r0, [pc, #32]	@ (80031f0 <MX_GPIO_Init+0x190>)
 80031ce:	f002 fb27 	bl	8005820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	2007      	movs	r0, #7
 80031d8:	f001 fedc 	bl	8004f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031dc:	2007      	movs	r0, #7
 80031de:	f001 fef5 	bl	8004fcc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	@ 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800

080031fc <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003204:	2001      	movs	r0, #1
 8003206:	f00d f81a 	bl	801023e <osDelay>
 800320a:	e7fb      	b.n	8003204 <defaultTask+0x8>

0800320c <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
//			  break;
//
//	  }


	  osDelay(50000); //
 8003214:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003218:	f00d f811 	bl	801023e <osDelay>
 800321c:	e7fa      	b.n	8003214 <sendDataToScreen+0x8>
	...

08003220 <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {

		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 8003228:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <updateControlLoop+0xdc>)
 800322a:	edd3 7a02 	vldr	s15, [r3, #8]
 800322e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003300 <updateControlLoop+0xe0>
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d50e      	bpl.n	800325a <updateControlLoop+0x3a>
		{
			if(verticalCommand==1)
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <updateControlLoop+0xe4>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <updateControlLoop+0x28>
				neutralRudders();
 8003244:	f000 fa48 	bl	80036d8 <neutralRudders>
			turnRight();
 8003248:	f000 f980 	bl	800354c <turnRight>
			horizontalCommand=1;
 800324c:	4b2e      	ldr	r3, [pc, #184]	@ (8003308 <updateControlLoop+0xe8>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 8003252:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <updateControlLoop+0xe4>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e04c      	b.n	80032f4 <updateControlLoop+0xd4>

		}
		else if(joystick.joystickVoltage[0]>JOYSTICK_MAX_THRESHOLD)//go Left
 800325a:	4b28      	ldr	r3, [pc, #160]	@ (80032fc <updateControlLoop+0xdc>)
 800325c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003260:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326c:	dd0e      	ble.n	800328c <updateControlLoop+0x6c>
		{
			if(verticalCommand==1)
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <updateControlLoop+0xe4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <updateControlLoop+0x5a>
				neutralRudders();
 8003276:	f000 fa2f 	bl	80036d8 <neutralRudders>
			turnLeft();
 800327a:	f000 f925 	bl	80034c8 <turnLeft>
			horizontalCommand=1;
 800327e:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <updateControlLoop+0xe8>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 8003284:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <updateControlLoop+0xe4>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e033      	b.n	80032f4 <updateControlLoop+0xd4>
		}

		else if (joystick.joystickVoltage[1]<JOYSTICK_MIN_THRESHOLD)//dive
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <updateControlLoop+0xdc>)
 800328e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003292:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003300 <updateControlLoop+0xe0>
 8003296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d50e      	bpl.n	80032be <updateControlLoop+0x9e>
		{
			if(horizontalCommand==1)
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <updateControlLoop+0xe8>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <updateControlLoop+0x8c>
				neutralRudders();
 80032a8:	f000 fa16 	bl	80036d8 <neutralRudders>
			dive();
 80032ac:	f000 f9d2 	bl	8003654 <dive>
			verticalCommand=1;
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <updateControlLoop+0xe4>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <updateControlLoop+0xe8>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e01a      	b.n	80032f4 <updateControlLoop+0xd4>
		}
		else if(joystick.joystickVoltage[1]>JOYSTICK_MAX_THRESHOLD)//surface
 80032be:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <updateControlLoop+0xdc>)
 80032c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80032c4:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	dd0e      	ble.n	80032f0 <updateControlLoop+0xd0>
		{
			if(horizontalCommand==1)
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <updateControlLoop+0xe8>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <updateControlLoop+0xbe>
				neutralRudders();
 80032da:	f000 f9fd 	bl	80036d8 <neutralRudders>
			surface();
 80032de:	f000 f977 	bl	80035d0 <surface>
			verticalCommand=1;
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <updateControlLoop+0xe4>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <updateControlLoop+0xe8>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e001      	b.n	80032f4 <updateControlLoop+0xd4>
		}
		else
			neutralRudders();
 80032f0:	f000 f9f2 	bl	80036d8 <neutralRudders>



	    osDelay(100); // update control loop every 100 ms
 80032f4:	2064      	movs	r0, #100	@ 0x64
 80032f6:	f00c ffa2 	bl	801023e <osDelay>
		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 80032fa:	e795      	b.n	8003228 <updateControlLoop+0x8>
 80032fc:	20002a80 	.word	0x20002a80
 8003300:	3f19999a 	.word	0x3f19999a
 8003304:	20002b2a 	.word	0x20002b2a
 8003308:	20002b2b 	.word	0x20002b2b

0800330c <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 800330c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003310:	b096      	sub	sp, #88	@ 0x58
 8003312:	af04      	add	r7, sp, #16
 8003314:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	    // Waiting for the Micro SD module to initialize
	  	printf("SD card thread is called!");
 8003316:	4848      	ldr	r0, [pc, #288]	@ (8003438 <recordSDdata+0x12c>)
 8003318:	f010 f8b0 	bl	801347c <iprintf>

	  	fres = f_mount(&fs, "", 0);
 800331c:	2200      	movs	r2, #0
 800331e:	4947      	ldr	r1, [pc, #284]	@ (800343c <recordSDdata+0x130>)
 8003320:	4847      	ldr	r0, [pc, #284]	@ (8003440 <recordSDdata+0x134>)
 8003322:	f00b fe9f 	bl	800f064 <f_mount>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	4b46      	ldr	r3, [pc, #280]	@ (8003444 <recordSDdata+0x138>)
 800332c:	701a      	strb	r2, [r3, #0]
//	  		printf("Micro SD card's mount error!\n");
//	  	}

	  	// FA_OPEN_APPEND opens file if it exists and if not then creates it,
	  	// the pointer is set at the end of the file for appending
	  	fres = f_open(&fil, "accel.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800332e:	2233      	movs	r2, #51	@ 0x33
 8003330:	4945      	ldr	r1, [pc, #276]	@ (8003448 <recordSDdata+0x13c>)
 8003332:	4846      	ldr	r0, [pc, #280]	@ (800344c <recordSDdata+0x140>)
 8003334:	f00b fefa 	bl	800f12c <f_open>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <recordSDdata+0x138>)
 800333e:	701a      	strb	r2, [r3, #0]
//	  		printf("File opened for reading and checking the free space.\n");
//	  	} else if (fres != FR_OK) {
//	  		printf("File was not opened for reading and checking the free space!\n");
//	  	}

	  	fres = f_getfree("", &fre_clust, &pfs);
 8003340:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <recordSDdata+0x144>)
 8003342:	4944      	ldr	r1, [pc, #272]	@ (8003454 <recordSDdata+0x148>)
 8003344:	483d      	ldr	r0, [pc, #244]	@ (800343c <recordSDdata+0x130>)
 8003346:	f00c fc38 	bl	800fbba <f_getfree>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <recordSDdata+0x138>)
 8003350:	701a      	strb	r2, [r3, #0]
	  	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <recordSDdata+0x144>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	3b02      	subs	r3, #2
 800335a:	4a3d      	ldr	r2, [pc, #244]	@ (8003450 <recordSDdata+0x144>)
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	8952      	ldrh	r2, [r2, #10]
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ed 	bl	8000544 <__aeabi_ui2d>
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b3a      	ldr	r3, [pc, #232]	@ (8003458 <recordSDdata+0x14c>)
 8003370:	f7fd f962 	bl	8000638 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2uiz>
 8003380:	4603      	mov	r3, r0
 8003382:	4a36      	ldr	r2, [pc, #216]	@ (800345c <recordSDdata+0x150>)
 8003384:	6013      	str	r3, [r2, #0]
	  	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8003386:	4b32      	ldr	r3, [pc, #200]	@ (8003450 <recordSDdata+0x144>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	895b      	ldrh	r3, [r3, #10]
 800338c:	461a      	mov	r2, r3
 800338e:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <recordSDdata+0x148>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8d4 	bl	8000544 <__aeabi_ui2d>
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <recordSDdata+0x14c>)
 80033a2:	f7fd f949 	bl	8000638 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fc1b 	bl	8000be8 <__aeabi_d2uiz>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <recordSDdata+0x154>)
 80033b6:	6013      	str	r3, [r2, #0]
	  	char mSz[12];
	  	sprintf(mSz, "%lu", freeSpace);
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <recordSDdata+0x154>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033c0:	4928      	ldr	r1, [pc, #160]	@ (8003464 <recordSDdata+0x158>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f010 f86c 	bl	80134a0 <siprintf>

//	  	for (uint8_t i = 0; i < 10; i++) {
//	  		f_puts("NEW BOARD TEST.\n", &fil);
//	  	}
	  	char accDataString[50];
	  	sprintf(accDataString, "ax=%3f, ay=%3f, az=%3f\n", mpu6050.acc_mps2[0],  mpu6050.acc_mps2[1],  mpu6050.acc_mps2[2]);
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <recordSDdata+0x15c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8db 	bl	8000588 <__aeabi_f2d>
 80033d2:	4680      	mov	r8, r0
 80033d4:	4689      	mov	r9, r1
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <recordSDdata+0x15c>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8d4 	bl	8000588 <__aeabi_f2d>
 80033e0:	4604      	mov	r4, r0
 80033e2:	460d      	mov	r5, r1
 80033e4:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <recordSDdata+0x15c>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8cd 	bl	8000588 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	f107 0008 	add.w	r0, r7, #8
 80033f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033fa:	e9cd 4500 	strd	r4, r5, [sp]
 80033fe:	4642      	mov	r2, r8
 8003400:	464b      	mov	r3, r9
 8003402:	491a      	ldr	r1, [pc, #104]	@ (800346c <recordSDdata+0x160>)
 8003404:	f010 f84c 	bl	80134a0 <siprintf>
	  	f_puts(accDataString, &fil);
 8003408:	f107 0308 	add.w	r3, r7, #8
 800340c:	490f      	ldr	r1, [pc, #60]	@ (800344c <recordSDdata+0x140>)
 800340e:	4618      	mov	r0, r3
 8003410:	f00c fd06 	bl	800fe20 <f_puts>

	  	fres = f_close(&fil);
 8003414:	480d      	ldr	r0, [pc, #52]	@ (800344c <recordSDdata+0x140>)
 8003416:	f00c fba1 	bl	800fb5c <f_close>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <recordSDdata+0x138>)
 8003420:	701a      	strb	r2, [r3, #0]
//	  		printf("The file is closed.\n");
//	  	} else if (fres != FR_OK) {
//	  		printf("The file was not closed.\n");
//	  	}

	  	f_mount(NULL, "", 1);
 8003422:	2201      	movs	r2, #1
 8003424:	4905      	ldr	r1, [pc, #20]	@ (800343c <recordSDdata+0x130>)
 8003426:	2000      	movs	r0, #0
 8003428:	f00b fe1c 	bl	800f064 <f_mount>
//	  	if (fres == FR_OK) {
//	  		printf("The Micro SD card is unmounted!\n");
//	  	} else if (fres != FR_OK) {
//	  		printf("The Micro SD was not unmounted!");
//	  	}
    osDelay(5000); // write SD card data every 5 seconds
 800342c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003430:	f00c ff05 	bl	801023e <osDelay>
  {
 8003434:	bf00      	nop
 8003436:	e76e      	b.n	8003316 <recordSDdata+0xa>
 8003438:	08015904 	.word	0x08015904
 800343c:	08015920 	.word	0x08015920
 8003440:	2000050c 	.word	0x2000050c
 8003444:	2000257c 	.word	0x2000257c
 8003448:	08015924 	.word	0x08015924
 800344c:	2000154c 	.word	0x2000154c
 8003450:	20001548 	.word	0x20001548
 8003454:	20002580 	.word	0x20002580
 8003458:	3fe00000 	.word	0x3fe00000
 800345c:	20002584 	.word	0x20002584
 8003460:	20002588 	.word	0x20002588
 8003464:	08015930 	.word	0x08015930
 8003468:	20002ac4 	.word	0x20002ac4
 800346c:	08015934 	.word	0x08015934

08003470 <getBar30Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBar30Data */
void getBar30Data(void const * argument)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBar30Data */
  /* Infinite loop */
	static uint8_t i2cGood=1;
  for(;;)
  {
	 i2cGood=Bar30getData(&pressureSensor);
 8003478:	4805      	ldr	r0, [pc, #20]	@ (8003490 <getBar30Data+0x20>)
 800347a:	f7fd fe57 	bl	800112c <Bar30getData>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <getBar30Data+0x24>)
 8003484:	701a      	strb	r2, [r3, #0]
    osDelay(250);
 8003486:	20fa      	movs	r0, #250	@ 0xfa
 8003488:	f00c fed9 	bl	801023e <osDelay>
	 i2cGood=Bar30getData(&pressureSensor);
 800348c:	bf00      	nop
 800348e:	e7f3      	b.n	8003478 <getBar30Data+0x8>
 8003490:	20002af4 	.word	0x20002af4
 8003494:	20000001 	.word	0x20000001

08003498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034aa:	f000 ff3b 	bl	8004324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000

080034bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034c0:	b672      	cpsid	i
}
 80034c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <Error_Handler+0x8>

080034c8 <turnLeft>:
typedef enum {LEFT,RIGHT,SURFACE,DIVE} COMMAND;



void turnLeft()
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80034cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <turnLeft+0x80>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	f240 2289 	movw	r2, #649	@ 0x289
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d906      	bls.n	80034e8 <turnLeft+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <turnLeft+0x80>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e0:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <turnLeft+0x80>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3ae1      	subs	r2, #225	@ 0xe1
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80034e8:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <turnLeft+0x80>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	f240 2289 	movw	r2, #649	@ 0x289
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d906      	bls.n	8003504 <turnLeft+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 80034f6:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <turnLeft+0x80>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <turnLeft+0x80>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3ae1      	subs	r2, #225	@ 0xe1
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003504:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <turnLeft+0x80>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800350e:	4293      	cmp	r3, r2
 8003510:	d806      	bhi.n	8003520 <turnLeft+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <turnLeft+0x80>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <turnLeft+0x80>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	32e1      	adds	r2, #225	@ 0xe1
 800351e:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <turnLeft+0x80>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800352a:	4293      	cmp	r3, r2
 800352c:	d806      	bhi.n	800353c <turnLeft+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <turnLeft+0x80>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003534:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <turnLeft+0x80>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	32e1      	adds	r2, #225	@ 0xe1
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000288c 	.word	0x2000288c

0800354c <turnRight>:

void turnRight()
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003550:	4b1e      	ldr	r3, [pc, #120]	@ (80035cc <turnRight+0x80>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800355a:	4293      	cmp	r3, r2
 800355c:	d806      	bhi.n	800356c <turnRight+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <turnRight+0x80>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <turnRight+0x80>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	32e1      	adds	r2, #225	@ 0xe1
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <turnRight+0x80>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8003576:	4293      	cmp	r3, r2
 8003578:	d806      	bhi.n	8003588 <turnRight+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 800357a:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <turnRight+0x80>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <turnRight+0x80>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	32e1      	adds	r2, #225	@ 0xe1
 8003586:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003588:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <turnRight+0x80>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358e:	f240 2289 	movw	r2, #649	@ 0x289
 8003592:	4293      	cmp	r3, r2
 8003594:	d906      	bls.n	80035a4 <turnRight+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <turnRight+0x80>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <turnRight+0x80>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3ae1      	subs	r2, #225	@ 0xe1
 80035a2:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <turnRight+0x80>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f240 2289 	movw	r2, #649	@ 0x289
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d906      	bls.n	80035c0 <turnRight+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <turnRight+0x80>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <turnRight+0x80>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3ae1      	subs	r2, #225	@ 0xe1
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	2000288c 	.word	0x2000288c

080035d0 <surface>:
void surface()
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80035d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <surface+0x80>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	f240 2289 	movw	r2, #649	@ 0x289
 80035de:	4293      	cmp	r3, r2
 80035e0:	d906      	bls.n	80035f0 <surface+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <surface+0x80>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <surface+0x80>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3ae1      	subs	r2, #225	@ 0xe1
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 80035f0:	4b17      	ldr	r3, [pc, #92]	@ (8003650 <surface+0x80>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d806      	bhi.n	800360c <surface+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <surface+0x80>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <surface+0x80>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	32e1      	adds	r2, #225	@ 0xe1
 800360a:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <surface+0x80>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	f240 2289 	movw	r2, #649	@ 0x289
 8003616:	4293      	cmp	r3, r2
 8003618:	d906      	bls.n	8003628 <surface+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <surface+0x80>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <surface+0x80>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3ae1      	subs	r2, #225	@ 0xe1
 8003626:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <surface+0x80>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8003632:	4293      	cmp	r3, r2
 8003634:	d806      	bhi.n	8003644 <surface+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <surface+0x80>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <surface+0x80>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	32e1      	adds	r2, #225	@ 0xe1
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	2000288c 	.word	0x2000288c

08003654 <dive>:
void dive()
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003658:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <dive+0x80>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8003662:	4293      	cmp	r3, r2
 8003664:	d806      	bhi.n	8003674 <dive+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <dive+0x80>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <dive+0x80>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	32e1      	adds	r2, #225	@ 0xe1
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <dive+0x80>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	f240 2289 	movw	r2, #649	@ 0x289
 800367e:	4293      	cmp	r3, r2
 8003680:	d906      	bls.n	8003690 <dive+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <dive+0x80>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <dive+0x80>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3ae1      	subs	r2, #225	@ 0xe1
 800368e:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <dive+0x80>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800369a:	4293      	cmp	r3, r2
 800369c:	d806      	bhi.n	80036ac <dive+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <dive+0x80>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <dive+0x80>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	32e1      	adds	r2, #225	@ 0xe1
 80036aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <dive+0x80>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	f240 2289 	movw	r2, #649	@ 0x289
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d906      	bls.n	80036c8 <dive+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <dive+0x80>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c0:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <dive+0x80>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3ae1      	subs	r2, #225	@ 0xe1
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000288c 	.word	0x2000288c

080036d8 <neutralRudders>:
void neutralRudders()
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=SERVO_CENTER_PWM;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <neutralRudders+0x38>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=SERVO_CENTER_PWM;
 80036e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <neutralRudders+0x38>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3=SERVO_CENTER_PWM;
 80036f0:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <neutralRudders+0x38>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80036f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4=SERVO_CENTER_PWM;
 80036fa:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <neutralRudders+0x38>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	2000288c 	.word	0x2000288c

08003714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_MspInit+0x54>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_MspInit+0x54>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <HAL_MspInit+0x54>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_MspInit+0x54>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <HAL_MspInit+0x54>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_MspInit+0x54>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	210f      	movs	r1, #15
 8003756:	f06f 0001 	mvn.w	r0, #1
 800375a:	f001 fc1b 	bl	8004f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800

0800376c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a67      	ldr	r2, [pc, #412]	@ (8003928 <HAL_ADC_MspInit+0x1bc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d161      	bne.n	8003852 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	4b66      	ldr	r3, [pc, #408]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	4a65      	ldr	r2, [pc, #404]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379c:	6453      	str	r3, [r2, #68]	@ 0x44
 800379e:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4b5f      	ldr	r3, [pc, #380]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a5e      	ldr	r2, [pc, #376]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b5c      	ldr	r3, [pc, #368]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ca:	2303      	movs	r3, #3
 80037cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d2:	f107 031c 	add.w	r3, r7, #28
 80037d6:	4619      	mov	r1, r3
 80037d8:	4855      	ldr	r0, [pc, #340]	@ (8003930 <HAL_ADC_MspInit+0x1c4>)
 80037da:	f002 f821 	bl	8005820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80037de:	4b55      	ldr	r3, [pc, #340]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 80037e0:	4a55      	ldr	r2, [pc, #340]	@ (8003938 <HAL_ADC_MspInit+0x1cc>)
 80037e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80037e4:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ea:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f0:	4b50      	ldr	r3, [pc, #320]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 80037f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003806:	4b4b      	ldr	r3, [pc, #300]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800380c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800380e:	4b49      	ldr	r3, [pc, #292]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003816:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800381c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800381e:	4b45      	ldr	r3, [pc, #276]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003820:	2200      	movs	r2, #0
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003824:	4843      	ldr	r0, [pc, #268]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003826:	f001 fbdf 	bl	8004fe8 <HAL_DMA_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003830:	f7ff fe44 	bl	80034bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3f      	ldr	r2, [pc, #252]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38
 800383a:	4a3e      	ldr	r2, [pc, #248]	@ (8003934 <HAL_ADC_MspInit+0x1c8>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2105      	movs	r1, #5
 8003844:	2012      	movs	r0, #18
 8003846:	f001 fba5 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800384a:	2012      	movs	r0, #18
 800384c:	f001 fbbe 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003850:	e066      	b.n	8003920 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a39      	ldr	r2, [pc, #228]	@ (800393c <HAL_ADC_MspInit+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d161      	bne.n	8003920 <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	4b32      	ldr	r3, [pc, #200]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	4a31      	ldr	r2, [pc, #196]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 8003866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800386a:	6453      	str	r3, [r2, #68]	@ 0x44
 800386c:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	4b2b      	ldr	r3, [pc, #172]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6313      	str	r3, [r2, #48]	@ 0x30
 8003888:	4b28      	ldr	r3, [pc, #160]	@ (800392c <HAL_ADC_MspInit+0x1c0>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003894:	2302      	movs	r3, #2
 8003896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003898:	2303      	movs	r3, #3
 800389a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a0:	f107 031c 	add.w	r3, r7, #28
 80038a4:	4619      	mov	r1, r3
 80038a6:	4822      	ldr	r0, [pc, #136]	@ (8003930 <HAL_ADC_MspInit+0x1c4>)
 80038a8:	f001 ffba 	bl	8005820 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80038ac:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038ae:	4a25      	ldr	r2, [pc, #148]	@ (8003944 <HAL_ADC_MspInit+0x1d8>)
 80038b0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80038b2:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038b8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ba:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80038c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80038de:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038e4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80038e6:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ee:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80038f4:	4812      	ldr	r0, [pc, #72]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 80038f6:	f001 fb77 	bl	8004fe8 <HAL_DMA_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8003900:	f7ff fddc 	bl	80034bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0e      	ldr	r2, [pc, #56]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38
 800390a:	4a0d      	ldr	r2, [pc, #52]	@ (8003940 <HAL_ADC_MspInit+0x1d4>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2105      	movs	r1, #5
 8003914:	2012      	movs	r0, #18
 8003916:	f001 fb3d 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800391a:	2012      	movs	r0, #18
 800391c:	f001 fb56 	bl	8004fcc <HAL_NVIC_EnableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3730      	adds	r7, #48	@ 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40012000 	.word	0x40012000
 800392c:	40023800 	.word	0x40023800
 8003930:	40020000 	.word	0x40020000
 8003934:	2000261c 	.word	0x2000261c
 8003938:	40026410 	.word	0x40026410
 800393c:	40012100 	.word	0x40012100
 8003940:	2000267c 	.word	0x2000267c
 8003944:	40026440 	.word	0x40026440

08003948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a76      	ldr	r2, [pc, #472]	@ (8003b40 <HAL_I2C_MspInit+0x1f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	f040 808c 	bne.w	8003a84 <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	4b74      	ldr	r3, [pc, #464]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	4a73      	ldr	r2, [pc, #460]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	6313      	str	r3, [r2, #48]	@ 0x30
 800397c:	4b71      	ldr	r3, [pc, #452]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003988:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398e:	2312      	movs	r3, #18
 8003990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003996:	2303      	movs	r3, #3
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399a:	2304      	movs	r3, #4
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	4619      	mov	r1, r3
 80039a4:	4868      	ldr	r0, [pc, #416]	@ (8003b48 <HAL_I2C_MspInit+0x200>)
 80039a6:	f001 ff3b 	bl	8005820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	4a64      	ldr	r2, [pc, #400]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 80039b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ba:	4b62      	ldr	r3, [pc, #392]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80039c6:	4b61      	ldr	r3, [pc, #388]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039c8:	4a61      	ldr	r2, [pc, #388]	@ (8003b50 <HAL_I2C_MspInit+0x208>)
 80039ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80039cc:	4b5f      	ldr	r3, [pc, #380]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039da:	4b5c      	ldr	r3, [pc, #368]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039e0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e8:	4b58      	ldr	r3, [pc, #352]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ee:	4b57      	ldr	r3, [pc, #348]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80039f4:	4b55      	ldr	r3, [pc, #340]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80039fa:	4b54      	ldr	r3, [pc, #336]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 80039fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a02:	4b52      	ldr	r3, [pc, #328]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003a08:	4850      	ldr	r0, [pc, #320]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 8003a0a:	f001 faed 	bl	8004fe8 <HAL_DMA_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8003a14:	f7ff fd52 	bl	80034bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8003b4c <HAL_I2C_MspInit+0x204>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003a24:	4b4b      	ldr	r3, [pc, #300]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a26:	4a4c      	ldr	r2, [pc, #304]	@ (8003b58 <HAL_I2C_MspInit+0x210>)
 8003a28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a30:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a32:	4b48      	ldr	r3, [pc, #288]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a34:	2240      	movs	r2, #64	@ 0x40
 8003a36:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a38:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3e:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a46:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4c:	4b41      	ldr	r3, [pc, #260]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003a52:	4b40      	ldr	r3, [pc, #256]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a58:	4b3e      	ldr	r3, [pc, #248]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a60:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003a66:	483b      	ldr	r0, [pc, #236]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a68:	f001 fabe 	bl	8004fe8 <HAL_DMA_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8003a72:	f7ff fd23 	bl	80034bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a36      	ldr	r2, [pc, #216]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a7c:	4a35      	ldr	r2, [pc, #212]	@ (8003b54 <HAL_I2C_MspInit+0x20c>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003a82:	e058      	b.n	8003b36 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a34      	ldr	r2, [pc, #208]	@ (8003b5c <HAL_I2C_MspInit+0x214>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d153      	bne.n	8003b36 <HAL_I2C_MspInit+0x1ee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b2c      	ldr	r3, [pc, #176]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	4a2b      	ldr	r2, [pc, #172]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9e:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aba:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003acc:	2312      	movs	r3, #18
 8003ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4819      	ldr	r0, [pc, #100]	@ (8003b48 <HAL_I2C_MspInit+0x200>)
 8003ae4:	f001 fe9c 	bl	8005820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aee:	2312      	movs	r3, #18
 8003af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003afa:	2304      	movs	r3, #4
 8003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	4816      	ldr	r0, [pc, #88]	@ (8003b60 <HAL_I2C_MspInit+0x218>)
 8003b06:	f001 fe8b 	bl	8005820 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a0c      	ldr	r2, [pc, #48]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003b14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_I2C_MspInit+0x1fc>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2105      	movs	r1, #5
 8003b2a:	2021      	movs	r0, #33	@ 0x21
 8003b2c:	f001 fa32 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b30:	2021      	movs	r0, #33	@ 0x21
 8003b32:	f001 fa4b 	bl	8004fcc <HAL_NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3730      	adds	r7, #48	@ 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40005400 	.word	0x40005400
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	20002784 	.word	0x20002784
 8003b50:	40026010 	.word	0x40026010
 8003b54:	200027e4 	.word	0x200027e4
 8003b58:	400260b8 	.word	0x400260b8
 8003b5c:	40005800 	.word	0x40005800
 8003b60:	40020800 	.word	0x40020800

08003b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	@ 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_SPI_MspInit+0x84>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d12c      	bne.n	8003be0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	4a10      	ldr	r2, [pc, #64]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <HAL_SPI_MspInit+0x88>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bbe:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bd0:	2305      	movs	r3, #5
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <HAL_SPI_MspInit+0x8c>)
 8003bdc:	f001 fe20 	bl	8005820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003be0:	bf00      	nop
 8003be2:	3728      	adds	r7, #40	@ 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40003800 	.word	0x40003800
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40020400 	.word	0x40020400

08003bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c22:	e012      	b.n	8003c4a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <HAL_TIM_Base_MspInit+0x68>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10d      	bne.n	8003c4a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	4a08      	ldr	r2, [pc, #32]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_TIM_Base_MspInit+0x64>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca8 <HAL_TIM_PWM_MspInit+0x48>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d115      	bne.n	8003c9e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_TIM_PWM_MspInit+0x4c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <HAL_TIM_PWM_MspInit+0x4c>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_TIM_PWM_MspInit+0x4c>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2105      	movs	r1, #5
 8003c92:	201d      	movs	r0, #29
 8003c94:	f001 f97e 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c98:	201d      	movs	r0, #29
 8003c9a:	f001 f997 	bl	8004fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	@ (8003d18 <HAL_TIM_MspPostInit+0x68>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11e      	bne.n	8003d10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a10      	ldr	r2, [pc, #64]	@ (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003cee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003cf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d00:	2302      	movs	r3, #2
 8003d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4805      	ldr	r0, [pc, #20]	@ (8003d20 <HAL_TIM_MspPostInit+0x70>)
 8003d0c:	f001 fd88 	bl	8005820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020800 	.word	0x40020800

08003d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	@ 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a67      	ldr	r2, [pc, #412]	@ (8003ee0 <HAL_UART_MspInit+0x1bc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12c      	bne.n	8003da0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	4b66      	ldr	r3, [pc, #408]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	4a65      	ldr	r2, [pc, #404]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d56:	4b63      	ldr	r3, [pc, #396]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	4b5f      	ldr	r3, [pc, #380]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d72:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d7e:	230c      	movs	r3, #12
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d8e:	2307      	movs	r3, #7
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4853      	ldr	r0, [pc, #332]	@ (8003ee8 <HAL_UART_MspInit+0x1c4>)
 8003d9a:	f001 fd41 	bl	8005820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d9e:	e09a      	b.n	8003ed6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a51      	ldr	r2, [pc, #324]	@ (8003eec <HAL_UART_MspInit+0x1c8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f040 8095 	bne.w	8003ed6 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003db6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	4a44      	ldr	r2, [pc, #272]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd8:	4b42      	ldr	r3, [pc, #264]	@ (8003ee4 <HAL_UART_MspInit+0x1c0>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003de4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df2:	2303      	movs	r3, #3
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003df6:	2307      	movs	r3, #7
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfa:	f107 031c 	add.w	r3, r7, #28
 8003dfe:	4619      	mov	r1, r3
 8003e00:	483b      	ldr	r0, [pc, #236]	@ (8003ef0 <HAL_UART_MspInit+0x1cc>)
 8003e02:	f001 fd0d 	bl	8005820 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003e06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e08:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef8 <HAL_UART_MspInit+0x1d4>)
 8003e0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003e0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e12:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e14:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e20:	4b34      	ldr	r3, [pc, #208]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e26:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e28:	4b32      	ldr	r3, [pc, #200]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003e34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e3a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e42:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e4a:	482a      	ldr	r0, [pc, #168]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e4c:	f001 f8cc 	bl	8004fe8 <HAL_DMA_Init>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_UART_MspInit+0x136>
      Error_Handler();
 8003e56:	f7ff fb31 	bl	80034bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a25      	ldr	r2, [pc, #148]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e60:	4a24      	ldr	r2, [pc, #144]	@ (8003ef4 <HAL_UART_MspInit+0x1d0>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003e66:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e68:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_UART_MspInit+0x1dc>)
 8003e6a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003e6c:	4b23      	ldr	r3, [pc, #140]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e72:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e76:	2240      	movs	r2, #64	@ 0x40
 8003e78:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7a:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e80:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e86:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8003e94:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ea2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003eaa:	4814      	ldr	r0, [pc, #80]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003eac:	f001 f89c 	bl	8004fe8 <HAL_DMA_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003eb6:	f7ff fb01 	bl	80034bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003ebe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8003efc <HAL_UART_MspInit+0x1d8>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2105      	movs	r1, #5
 8003eca:	2027      	movs	r0, #39	@ 0x27
 8003ecc:	f001 f862 	bl	8004f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ed0:	2027      	movs	r0, #39	@ 0x27
 8003ed2:	f001 f87b 	bl	8004fcc <HAL_NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3730      	adds	r7, #48	@ 0x30
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40004400 	.word	0x40004400
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	200029a4 	.word	0x200029a4
 8003ef8:	40026028 	.word	0x40026028
 8003efc:	20002a04 	.word	0x20002a04
 8003f00:	40026058 	.word	0x40026058

08003f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	@ 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f24:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 faf2 	bl	8009524 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003f40:	f005 fadc 	bl	80094fc <HAL_RCC_GetPCLK2Freq>
 8003f44:	4603      	mov	r3, r0
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_InitTick+0xd8>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	3b01      	subs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f58:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <HAL_InitTick+0xe0>)
 8003f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f5e:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f66:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003f7e:	4818      	ldr	r0, [pc, #96]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f80:	f006 fc00 	bl	800a784 <HAL_TIM_Base_Init>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11b      	bne.n	8003fca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003f92:	4813      	ldr	r0, [pc, #76]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f94:	f006 fcae 	bl	800a8f4 <HAL_TIM_Base_Start_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d111      	bne.n	8003fca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fa6:	2019      	movs	r0, #25
 8003fa8:	f001 f810 	bl	8004fcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d808      	bhi.n	8003fc4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	2019      	movs	r0, #25
 8003fb8:	f000 ffec 	bl	8004f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_InitTick+0xe4>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e002      	b.n	8003fca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3730      	adds	r7, #48	@ 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	431bde83 	.word	0x431bde83
 8003fe0:	20002b2c 	.word	0x20002b2c
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	20000008 	.word	0x20000008

08003fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <NMI_Handler+0x4>

08003ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <HardFault_Handler+0x4>

08003ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <MemManage_Handler+0x4>

08004004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <UsageFault_Handler+0x4>

08004014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 8004026:	2002      	movs	r0, #2
 8004028:	f001 fda8 	bl	8005b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}

08004030 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004034:	4802      	ldr	r0, [pc, #8]	@ (8004040 <DMA1_Stream0_IRQHandler+0x10>)
 8004036:	f001 f96f 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20002784 	.word	0x20002784

08004044 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004048:	4802      	ldr	r0, [pc, #8]	@ (8004054 <DMA1_Stream1_IRQHandler+0x10>)
 800404a:	f001 f965 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200029a4 	.word	0x200029a4

08004058 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800405c:	4802      	ldr	r0, [pc, #8]	@ (8004068 <DMA1_Stream3_IRQHandler+0x10>)
 800405e:	f001 f95b 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20002a04 	.word	0x20002a04

0800406c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004070:	4803      	ldr	r0, [pc, #12]	@ (8004080 <ADC_IRQHandler+0x14>)
 8004072:	f000 f9de 	bl	8004432 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004076:	4803      	ldr	r0, [pc, #12]	@ (8004084 <ADC_IRQHandler+0x18>)
 8004078:	f000 f9db 	bl	8004432 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000258c 	.word	0x2000258c
 8004084:	200025d4 	.word	0x200025d4

08004088 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800408c:	4802      	ldr	r0, [pc, #8]	@ (8004098 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800408e:	f006 fdb9 	bl	800ac04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20002b2c 	.word	0x20002b2c

0800409c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <TIM3_IRQHandler+0x10>)
 80040a2:	f006 fdaf 	bl	800ac04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000288c 	.word	0x2000288c

080040b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80040b4:	4802      	ldr	r0, [pc, #8]	@ (80040c0 <I2C2_EV_IRQHandler+0x10>)
 80040b6:	f002 ffc3 	bl	8007040 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20002730 	.word	0x20002730

080040c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80040c8:	4802      	ldr	r0, [pc, #8]	@ (80040d4 <USART3_IRQHandler+0x10>)
 80040ca:	f007 fcc5 	bl	800ba58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20002960 	.word	0x20002960

080040d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80040dc:	4802      	ldr	r0, [pc, #8]	@ (80040e8 <DMA1_Stream7_IRQHandler+0x10>)
 80040de:	f001 f91b 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200027e4 	.word	0x200027e4

080040ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040f0:	4802      	ldr	r0, [pc, #8]	@ (80040fc <DMA2_Stream0_IRQHandler+0x10>)
 80040f2:	f001 f911 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000261c 	.word	0x2000261c

08004100 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004104:	4802      	ldr	r0, [pc, #8]	@ (8004110 <DMA2_Stream2_IRQHandler+0x10>)
 8004106:	f001 f907 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000267c 	.word	0x2000267c

08004114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return 1;
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_kill>:

int _kill(int pid, int sig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800412e:	f00f fac3 	bl	80136b8 <__errno>
 8004132:	4603      	mov	r3, r0
 8004134:	2216      	movs	r2, #22
 8004136:	601a      	str	r2, [r3, #0]
  return -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_exit>:

void _exit (int status)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800414c:	f04f 31ff 	mov.w	r1, #4294967295
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ffe7 	bl	8004124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <_exit+0x12>

0800415a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e00a      	b.n	8004182 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800416c:	f3af 8000 	nop.w
 8004170:	4601      	mov	r1, r0
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	60ba      	str	r2, [r7, #8]
 8004178:	b2ca      	uxtb	r2, r1
 800417a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	dbf0      	blt.n	800416c <_read+0x12>
  }

  return len;
 800418a:	687b      	ldr	r3, [r7, #4]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800419c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041bc:	605a      	str	r2, [r3, #4]
  return 0;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_isatty>:

int _isatty(int file)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041d4:	2301      	movs	r3, #1
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004204:	4a14      	ldr	r2, [pc, #80]	@ (8004258 <_sbrk+0x5c>)
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <_sbrk+0x60>)
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <_sbrk+0x64>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004218:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <_sbrk+0x64>)
 800421a:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <_sbrk+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421e:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <_sbrk+0x64>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d207      	bcs.n	800423c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800422c:	f00f fa44 	bl	80136b8 <__errno>
 8004230:	4603      	mov	r3, r0
 8004232:	220c      	movs	r2, #12
 8004234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e009      	b.n	8004250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800423c:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <_sbrk+0x64>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004242:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <_sbrk+0x64>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <_sbrk+0x64>)
 800424c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20020000 	.word	0x20020000
 800425c:	00000400 	.word	0x00000400
 8004260:	20002b74 	.word	0x20002b74
 8004264:	20006a98 	.word	0x20006a98

08004268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <SystemInit+0x20>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <SystemInit+0x20>)
 8004274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800428c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004292:	490e      	ldr	r1, [pc, #56]	@ (80042cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004294:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	@ (80042d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042a8:	4c0b      	ldr	r4, [pc, #44]	@ (80042d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042b6:	f7ff ffd7 	bl	8004268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ba:	f00f fa03 	bl	80136c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042be:	f7fe f96d 	bl	800259c <main>
  bx  lr    
 80042c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80042d0:	08016180 	.word	0x08016180
  ldr r2, =_sbss
 80042d4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80042d8:	20006a98 	.word	0x20006a98

080042dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <CAN1_RX0_IRQHandler>
	...

080042e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004320 <HAL_Init+0x40>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <HAL_Init+0x40>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	@ (8004320 <HAL_Init+0x40>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 fe38 	bl	8004f7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f7ff fdf8 	bl	8003f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff f9fe 	bl	8003714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_IncTick+0x20>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_IncTick+0x24>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4413      	add	r3, r2
 8004334:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <HAL_IncTick+0x24>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	20002b78 	.word	0x20002b78

0800434c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return uwTick;
 8004350:	4b03      	ldr	r3, [pc, #12]	@ (8004360 <HAL_GetTick+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20002b78 	.word	0x20002b78

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff ffee 	bl	800434c <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <HAL_Delay+0x44>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800438a:	bf00      	nop
 800438c:	f7ff ffde 	bl	800434c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c

080043ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e033      	b.n	800442a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff f9ce 	bl	800376c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d118      	bne.n	800441c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043f2:	f023 0302 	bic.w	r3, r3, #2
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb88 	bl	8004b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
 800441a:	e001      	b.n	8004420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d049      	beq.n	80044fc <HAL_ADC_IRQHandler+0xca>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d046      	beq.n	80044fc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d12b      	bne.n	80044ec <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d127      	bne.n	80044ec <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d119      	bne.n	80044ec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0220 	bic.w	r2, r2, #32
 80044c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fd ff97 	bl	8002420 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0212 	mvn.w	r2, #18
 80044fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d057      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x190>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d054      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d139      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d12b      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004564:	2b00      	cmp	r3, #0
 8004566:	d124      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11d      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800457a:	2b00      	cmp	r3, #0
 800457c:	d119      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800458c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fc2c 	bl	8004e10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 020c 	mvn.w	r2, #12
 80045c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d017      	beq.n	8004608 <HAL_ADC_IRQHandler+0x1d6>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d014      	beq.n	8004608 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10d      	bne.n	8004608 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f945 	bl	8004888 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0201 	mvn.w	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004616:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d015      	beq.n	800464a <HAL_ADC_IRQHandler+0x218>
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d012      	beq.n	800464a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0220 	mvn.w	r2, #32
 8004638:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f92e 	bl	800489c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	601a      	str	r2, [r3, #0]
  }
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_ADC_Start_DMA+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0e9      	b.n	8004846 <HAL_ADC_Start_DMA+0x1f2>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d018      	beq.n	80046ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004698:	4b6d      	ldr	r3, [pc, #436]	@ (8004850 <HAL_ADC_Start_DMA+0x1fc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a6d      	ldr	r2, [pc, #436]	@ (8004854 <HAL_ADC_Start_DMA+0x200>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	0c9a      	lsrs	r2, r3, #18
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046ac:	e002      	b.n	80046b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f9      	bne.n	80046ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c8:	d107      	bne.n	80046da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 80a1 	bne.w	800482c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004714:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004728:	d106      	bne.n	8004738 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f023 0206 	bic.w	r2, r3, #6
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
 8004736:	e002      	b.n	800473e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004746:	4b44      	ldr	r3, [pc, #272]	@ (8004858 <HAL_ADC_Start_DMA+0x204>)
 8004748:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	4a43      	ldr	r2, [pc, #268]	@ (800485c <HAL_ADC_Start_DMA+0x208>)
 8004750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	4a42      	ldr	r2, [pc, #264]	@ (8004860 <HAL_ADC_Start_DMA+0x20c>)
 8004758:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	4a41      	ldr	r2, [pc, #260]	@ (8004864 <HAL_ADC_Start_DMA+0x210>)
 8004760:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800476a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800477a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	334c      	adds	r3, #76	@ 0x4c
 8004796:	4619      	mov	r1, r3
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f000 fcd2 	bl	8005144 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d12a      	bne.n	8004802 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <HAL_ADC_Start_DMA+0x214>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d015      	beq.n	80047e2 <HAL_ADC_Start_DMA+0x18e>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	@ (800486c <HAL_ADC_Start_DMA+0x218>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d105      	bne.n	80047cc <HAL_ADC_Start_DMA+0x178>
 80047c0:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <HAL_ADC_Start_DMA+0x204>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <HAL_ADC_Start_DMA+0x21c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d136      	bne.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
 80047d6:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <HAL_ADC_Start_DMA+0x204>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d130      	bne.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d129      	bne.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e020      	b.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <HAL_ADC_Start_DMA+0x214>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d11b      	bne.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d114      	bne.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004828:	609a      	str	r2, [r3, #8]
 800482a:	e00b      	b.n	8004844 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	f043 0210 	orr.w	r2, r3, #16
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000004 	.word	0x20000004
 8004854:	431bde83 	.word	0x431bde83
 8004858:	40012300 	.word	0x40012300
 800485c:	08004d0d 	.word	0x08004d0d
 8004860:	08004dc7 	.word	0x08004dc7
 8004864:	08004de3 	.word	0x08004de3
 8004868:	40012000 	.word	0x40012000
 800486c:	40012100 	.word	0x40012100
 8004870:	40012200 	.word	0x40012200

08004874 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x1c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e113      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x244>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d925      	bls.n	8004928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68d9      	ldr	r1, [r3, #12]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	3b1e      	subs	r3, #30
 80048f2:	2207      	movs	r2, #7
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43da      	mvns	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	400a      	ands	r2, r1
 8004900:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68d9      	ldr	r1, [r3, #12]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	4618      	mov	r0, r3
 8004914:	4603      	mov	r3, r0
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4403      	add	r3, r0
 800491a:	3b1e      	subs	r3, #30
 800491c:	409a      	lsls	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e022      	b.n	800496e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6919      	ldr	r1, [r3, #16]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	2207      	movs	r2, #7
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	400a      	ands	r2, r1
 800494a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6919      	ldr	r1, [r3, #16]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	4618      	mov	r0, r3
 800495e:	4603      	mov	r3, r0
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	4403      	add	r3, r0
 8004964:	409a      	lsls	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d824      	bhi.n	80049c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	3b05      	subs	r3, #5
 8004988:	221f      	movs	r2, #31
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43da      	mvns	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	400a      	ands	r2, r1
 8004996:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4618      	mov	r0, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	3b05      	subs	r3, #5
 80049b2:	fa00 f203 	lsl.w	r2, r0, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80049be:	e04c      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d824      	bhi.n	8004a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	3b23      	subs	r3, #35	@ 0x23
 80049da:	221f      	movs	r2, #31
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43da      	mvns	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	400a      	ands	r2, r1
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4618      	mov	r0, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	3b23      	subs	r3, #35	@ 0x23
 8004a04:	fa00 f203 	lsl.w	r2, r0, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a10:	e023      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	3b41      	subs	r3, #65	@ 0x41
 8004a24:	221f      	movs	r2, #31
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	400a      	ands	r2, r1
 8004a32:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4618      	mov	r0, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3b41      	subs	r3, #65	@ 0x41
 8004a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a5a:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <HAL_ADC_ConfigChannel+0x250>)
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <HAL_ADC_ConfigChannel+0x254>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10f      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1d8>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b12      	cmp	r3, #18
 8004a6e:	d10b      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b04 <HAL_ADC_ConfigChannel+0x254>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d12b      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x23a>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <HAL_ADC_ConfigChannel+0x258>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0x1f4>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b11      	cmp	r3, #17
 8004aa2:	d122      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a11      	ldr	r2, [pc, #68]	@ (8004b08 <HAL_ADC_ConfigChannel+0x258>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d111      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ac6:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <HAL_ADC_ConfigChannel+0x25c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a11      	ldr	r2, [pc, #68]	@ (8004b10 <HAL_ADC_ConfigChannel+0x260>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	0c9a      	lsrs	r2, r3, #18
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004adc:	e002      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f9      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40012300 	.word	0x40012300
 8004b04:	40012000 	.word	0x40012000
 8004b08:	10000012 	.word	0x10000012
 8004b0c:	20000004 	.word	0x20000004
 8004b10:	431bde83 	.word	0x431bde83

08004b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b1c:	4b79      	ldr	r3, [pc, #484]	@ (8004d04 <ADC_Init+0x1f0>)
 8004b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	4a58      	ldr	r2, [pc, #352]	@ (8004d08 <ADC_Init+0x1f4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d022      	beq.n	8004bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6899      	ldr	r1, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	e00f      	b.n	8004c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0202 	bic.w	r2, r2, #2
 8004c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6899      	ldr	r1, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	7e1b      	ldrb	r3, [r3, #24]
 8004c2c:	005a      	lsls	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	035a      	lsls	r2, r3, #13
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e007      	b.n	8004c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	051a      	lsls	r2, r3, #20
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cca:	025a      	lsls	r2, r3, #9
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	029a      	lsls	r2, r3, #10
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	609a      	str	r2, [r3, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40012300 	.word	0x40012300
 8004d08:	0f000001 	.word	0x0f000001

08004d0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d13c      	bne.n	8004da0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d12b      	bne.n	8004d98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d127      	bne.n	8004d98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d119      	bne.n	8004d98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0220 	bic.w	r2, r2, #32
 8004d72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7fd fb41 	bl	8002420 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d9e:	e00e      	b.n	8004dbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fd75 	bl	800489c <HAL_ADC_ErrorCallback>
}
 8004db2:	e004      	b.n	8004dbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fd4d 	bl	8004874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fd4a 	bl	800489c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <__NVIC_SetPriorityGrouping>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	@ (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_GetPriorityGrouping>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <__NVIC_GetPriorityGrouping+0x18>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0307 	and.w	r3, r3, #7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_EnableIRQ>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	db0b      	blt.n	8004eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	4907      	ldr	r1, [pc, #28]	@ (8004ec0 <__NVIC_EnableIRQ+0x38>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e100 	.word	0xe000e100

08004ec4 <__NVIC_SetPriority>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db0a      	blt.n	8004eee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <__NVIC_SetPriority+0x4c>)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	0112      	lsls	r2, r2, #4
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004eec:	e00a      	b.n	8004f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	4908      	ldr	r1, [pc, #32]	@ (8004f14 <__NVIC_SetPriority+0x50>)
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	3b04      	subs	r3, #4
 8004efc:	0112      	lsls	r2, r2, #4
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	440b      	add	r3, r1
 8004f02:	761a      	strb	r2, [r3, #24]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000e100 	.word	0xe000e100
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <NVIC_EncodePriority>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f1c3 0307 	rsb	r3, r3, #7
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	bf28      	it	cs
 8004f36:	2304      	movcs	r3, #4
 8004f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d902      	bls.n	8004f48 <NVIC_EncodePriority+0x30>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3b03      	subs	r3, #3
 8004f46:	e000      	b.n	8004f4a <NVIC_EncodePriority+0x32>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f60:	f04f 31ff 	mov.w	r1, #4294967295
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	43d9      	mvns	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	4313      	orrs	r3, r2
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3724      	adds	r7, #36	@ 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff4c 	bl	8004e24 <__NVIC_SetPriorityGrouping>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa6:	f7ff ff61 	bl	8004e6c <__NVIC_GetPriorityGrouping>
 8004faa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	6978      	ldr	r0, [r7, #20]
 8004fb2:	f7ff ffb1 	bl	8004f18 <NVIC_EncodePriority>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff80 	bl	8004ec4 <__NVIC_SetPriority>
}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff54 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff f9aa 	bl	800434c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e099      	b.n	8005138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005024:	e00f      	b.n	8005046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005026:	f7ff f991 	bl	800434c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b05      	cmp	r3, #5
 8005032:	d908      	bls.n	8005046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e078      	b.n	8005138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e8      	bne.n	8005026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4b38      	ldr	r3, [pc, #224]	@ (8005140 <HAL_DMA_Init+0x158>)
 8005060:	4013      	ands	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	2b04      	cmp	r3, #4
 800509e:	d107      	bne.n	80050b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	4313      	orrs	r3, r2
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0307 	bic.w	r3, r3, #7
 80050c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d117      	bne.n	800510a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fb1b 	bl	8005728 <DMA_CheckFifoParam>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2240      	movs	r2, #64	@ 0x40
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005106:	2301      	movs	r3, #1
 8005108:	e016      	b.n	8005138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fad2 	bl	80056bc <DMA_CalcBaseAndBitshift>
 8005118:	4603      	mov	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	223f      	movs	r2, #63	@ 0x3f
 8005122:	409a      	lsls	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	f010803f 	.word	0xf010803f

08005144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_DMA_Start_IT+0x26>
 8005166:	2302      	movs	r3, #2
 8005168:	e040      	b.n	80051ec <HAL_DMA_Start_IT+0xa8>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12f      	bne.n	80051de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa64 	bl	8005660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519c:	223f      	movs	r2, #63	@ 0x3f
 800519e:	409a      	lsls	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0216 	orr.w	r2, r2, #22
 80051b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e005      	b.n	80051ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005200:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005202:	f7ff f8a3 	bl	800434c <HAL_GetTick>
 8005206:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d008      	beq.n	8005226 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2280      	movs	r2, #128	@ 0x80
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e052      	b.n	80052cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0216 	bic.w	r2, r2, #22
 8005234:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005244:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_DMA_Abort+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0208 	bic.w	r2, r2, #8
 8005264:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005276:	e013      	b.n	80052a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005278:	f7ff f868 	bl	800434c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b05      	cmp	r3, #5
 8005284:	d90c      	bls.n	80052a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2203      	movs	r2, #3
 8005290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e015      	b.n	80052cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e4      	bne.n	8005278 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b2:	223f      	movs	r2, #63	@ 0x3f
 80052b4:	409a      	lsls	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d004      	beq.n	80052f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2280      	movs	r2, #128	@ 0x80
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00c      	b.n	800530c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2205      	movs	r2, #5
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005324:	4b8e      	ldr	r3, [pc, #568]	@ (8005560 <HAL_DMA_IRQHandler+0x248>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a8e      	ldr	r2, [pc, #568]	@ (8005564 <HAL_DMA_IRQHandler+0x24c>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	0a9b      	lsrs	r3, r3, #10
 8005330:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	2208      	movs	r2, #8
 8005344:	409a      	lsls	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01a      	beq.n	8005384 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005370:	2208      	movs	r2, #8
 8005372:	409a      	lsls	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	2201      	movs	r2, #1
 80053a8:	409a      	lsls	r2, r3
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053be:	2204      	movs	r2, #4
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053dc:	2204      	movs	r2, #4
 80053de:	409a      	lsls	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f4:	2210      	movs	r2, #16
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d043      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005412:	2210      	movs	r2, #16
 8005414:	409a      	lsls	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d018      	beq.n	800545a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d024      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
 8005446:	e01f      	b.n	8005488 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
 8005458:	e016      	b.n	8005488 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0208 	bic.w	r2, r2, #8
 8005476:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	2220      	movs	r2, #32
 800548e:	409a      	lsls	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 808f 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8087 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	2220      	movs	r2, #32
 80054b0:	409a      	lsls	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d136      	bne.n	8005530 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0216 	bic.w	r2, r2, #22
 80054d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <HAL_DMA_IRQHandler+0x1da>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0208 	bic.w	r2, r2, #8
 8005500:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	223f      	movs	r2, #63	@ 0x3f
 8005508:	409a      	lsls	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005522:	2b00      	cmp	r3, #0
 8005524:	d07e      	beq.n	8005624 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
        }
        return;
 800552e:	e079      	b.n	8005624 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01d      	beq.n	800557a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10d      	bne.n	8005568 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	2b00      	cmp	r3, #0
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
 800555c:	e02c      	b.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
 800555e:	bf00      	nop
 8005560:	20000004 	.word	0x20000004
 8005564:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d023      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	e01e      	b.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0210 	bic.w	r2, r2, #16
 8005596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d032      	beq.n	8005626 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d022      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2205      	movs	r2, #5
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d307      	bcc.n	8005600 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f2      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x2cc>
 80055fe:	e000      	b.n	8005602 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005600:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
 8005622:	e000      	b.n	8005626 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005624:	bf00      	nop
    }
  }
}
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800563a:	b2db      	uxtb	r3, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800567c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	d108      	bne.n	80056a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800569e:	e007      	b.n	80056b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3b10      	subs	r3, #16
 80056cc:	4a14      	ldr	r2, [pc, #80]	@ (8005720 <DMA_CalcBaseAndBitshift+0x64>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056d6:	4a13      	ldr	r2, [pc, #76]	@ (8005724 <DMA_CalcBaseAndBitshift+0x68>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d909      	bls.n	80056fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	1d1a      	adds	r2, r3, #4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80056fc:	e007      	b.n	800570e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	aaaaaaab 	.word	0xaaaaaaab
 8005724:	080159b4 	.word	0x080159b4

08005728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11f      	bne.n	8005782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d856      	bhi.n	80057f6 <DMA_CheckFifoParam+0xce>
 8005748:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <DMA_CheckFifoParam+0x28>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005761 	.word	0x08005761
 8005754:	08005773 	.word	0x08005773
 8005758:	08005761 	.word	0x08005761
 800575c:	080057f7 	.word	0x080057f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d046      	beq.n	80057fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005770:	e043      	b.n	80057fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800577a:	d140      	bne.n	80057fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e03d      	b.n	80057fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	d121      	bne.n	80057d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d837      	bhi.n	8005802 <DMA_CheckFifoParam+0xda>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <DMA_CheckFifoParam+0x70>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057af 	.word	0x080057af
 80057a0:	080057a9 	.word	0x080057a9
 80057a4:	080057c1 	.word	0x080057c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e030      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d025      	beq.n	8005806 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057be:	e022      	b.n	8005806 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057c8:	d11f      	bne.n	800580a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057ce:	e01c      	b.n	800580a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d903      	bls.n	80057de <DMA_CheckFifoParam+0xb6>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d003      	beq.n	80057e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057dc:	e018      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
      break;
 80057e2:	e015      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      break;
 80057f4:	e00b      	b.n	800580e <DMA_CheckFifoParam+0xe6>
      break;
 80057f6:	bf00      	nop
 80057f8:	e00a      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e008      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 80057fe:	bf00      	nop
 8005800:	e006      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;   
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <DMA_CheckFifoParam+0xe8>
      break;
 800580e:	bf00      	nop
    }
  } 
  
  return status; 
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e165      	b.n	8005b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800583c:	2201      	movs	r2, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4013      	ands	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	429a      	cmp	r2, r3
 8005856:	f040 8154 	bne.w	8005b02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b01      	cmp	r3, #1
 8005864:	d005      	beq.n	8005872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800586e:	2b02      	cmp	r3, #2
 8005870:	d130      	bne.n	80058d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	2203      	movs	r2, #3
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4013      	ands	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058a8:	2201      	movs	r2, #1
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 0201 	and.w	r2, r3, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d017      	beq.n	8005910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d123      	bne.n	8005964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	08da      	lsrs	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3208      	adds	r2, #8
 8005924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	220f      	movs	r2, #15
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	08da      	lsrs	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3208      	adds	r2, #8
 800595e:	69b9      	ldr	r1, [r7, #24]
 8005960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2203      	movs	r2, #3
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0203 	and.w	r2, r3, #3
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80ae 	beq.w	8005b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005b20 <HAL_GPIO_Init+0x300>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005b20 <HAL_GPIO_Init+0x300>)
 80059b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80059b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005b20 <HAL_GPIO_Init+0x300>)
 80059b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059c2:	4a58      	ldr	r2, [pc, #352]	@ (8005b24 <HAL_GPIO_Init+0x304>)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	3302      	adds	r3, #2
 80059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005b28 <HAL_GPIO_Init+0x308>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d025      	beq.n	8005a3a <HAL_GPIO_Init+0x21a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a4e      	ldr	r2, [pc, #312]	@ (8005b2c <HAL_GPIO_Init+0x30c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01f      	beq.n	8005a36 <HAL_GPIO_Init+0x216>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a4d      	ldr	r2, [pc, #308]	@ (8005b30 <HAL_GPIO_Init+0x310>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d019      	beq.n	8005a32 <HAL_GPIO_Init+0x212>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a4c      	ldr	r2, [pc, #304]	@ (8005b34 <HAL_GPIO_Init+0x314>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_GPIO_Init+0x20e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a4b      	ldr	r2, [pc, #300]	@ (8005b38 <HAL_GPIO_Init+0x318>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00d      	beq.n	8005a2a <HAL_GPIO_Init+0x20a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a4a      	ldr	r2, [pc, #296]	@ (8005b3c <HAL_GPIO_Init+0x31c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <HAL_GPIO_Init+0x206>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a49      	ldr	r2, [pc, #292]	@ (8005b40 <HAL_GPIO_Init+0x320>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <HAL_GPIO_Init+0x202>
 8005a1e:	2306      	movs	r3, #6
 8005a20:	e00c      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a22:	2307      	movs	r3, #7
 8005a24:	e00a      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a26:	2305      	movs	r3, #5
 8005a28:	e008      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	e006      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e004      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e002      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_GPIO_Init+0x21c>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f002 0203 	and.w	r2, r2, #3
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	4093      	lsls	r3, r2
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a4c:	4935      	ldr	r1, [pc, #212]	@ (8005b24 <HAL_GPIO_Init+0x304>)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	3302      	adds	r3, #2
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a7e:	4a31      	ldr	r2, [pc, #196]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a84:	4b2f      	ldr	r3, [pc, #188]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005aa8:	4a26      	ldr	r2, [pc, #152]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aae:	4b25      	ldr	r3, [pc, #148]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005afc:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <HAL_GPIO_Init+0x324>)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	f67f ae96 	bls.w	800583c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	3724      	adds	r7, #36	@ 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40013800 	.word	0x40013800
 8005b28:	40020000 	.word	0x40020000
 8005b2c:	40020400 	.word	0x40020400
 8005b30:	40020800 	.word	0x40020800
 8005b34:	40020c00 	.word	0x40020c00
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40021400 	.word	0x40021400
 8005b40:	40021800 	.word	0x40021800
 8005b44:	40013c00 	.word	0x40013c00

08005b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
 8005b54:	4613      	mov	r3, r2
 8005b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b58:	787b      	ldrb	r3, [r7, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b64:	e003      	b.n	8005b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	041a      	lsls	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	619a      	str	r2, [r3, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b86:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b92:	4a05      	ldr	r2, [pc, #20]	@ (8005ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fc fc00 	bl	80023a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40013c00 	.word	0x40013c00

08005bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e12b      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fd feb8 	bl	8003948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	@ 0x24
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c10:	f003 fc60 	bl	80094d4 <HAL_RCC_GetPCLK1Freq>
 8005c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a81      	ldr	r2, [pc, #516]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d807      	bhi.n	8005c30 <HAL_I2C_Init+0x84>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a80      	ldr	r2, [pc, #512]	@ (8005e24 <HAL_I2C_Init+0x278>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bf94      	ite	ls
 8005c28:	2301      	movls	r3, #1
 8005c2a:	2300      	movhi	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e006      	b.n	8005c3e <HAL_I2C_Init+0x92>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a7d      	ldr	r2, [pc, #500]	@ (8005e28 <HAL_I2C_Init+0x27c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	bf94      	ite	ls
 8005c38:	2301      	movls	r3, #1
 8005c3a:	2300      	movhi	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0e7      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a78      	ldr	r2, [pc, #480]	@ (8005e2c <HAL_I2C_Init+0x280>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0c9b      	lsrs	r3, r3, #18
 8005c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a6a      	ldr	r2, [pc, #424]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d802      	bhi.n	8005c80 <HAL_I2C_Init+0xd4>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e009      	b.n	8005c94 <HAL_I2C_Init+0xe8>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	4a69      	ldr	r2, [pc, #420]	@ (8005e30 <HAL_I2C_Init+0x284>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	3301      	adds	r3, #1
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	495c      	ldr	r1, [pc, #368]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	d819      	bhi.n	8005ce8 <HAL_I2C_Init+0x13c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e59      	subs	r1, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cc8:	400b      	ands	r3, r1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_I2C_Init+0x138>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1e59      	subs	r1, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	e051      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	e04f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_I2C_Init+0x168>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1e58      	subs	r0, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e012      	b.n	8005d3a <HAL_I2C_Init+0x18e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1e58      	subs	r0, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	0099      	lsls	r1, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Init+0x196>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e022      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10e      	bne.n	8005d68 <HAL_I2C_Init+0x1bc>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e58      	subs	r0, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	440b      	add	r3, r1
 8005d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d66:	e00f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e58      	subs	r0, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	0099      	lsls	r1, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	6809      	ldr	r1, [r1, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6911      	ldr	r1, [r2, #16]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	4311      	orrs	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	000186a0 	.word	0x000186a0
 8005e24:	001e847f 	.word	0x001e847f
 8005e28:	003d08ff 	.word	0x003d08ff
 8005e2c:	431bde83 	.word	0x431bde83
 8005e30:	10624dd3 	.word	0x10624dd3

08005e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	460b      	mov	r3, r1
 8005e42:	817b      	strh	r3, [r7, #10]
 8005e44:	4613      	mov	r3, r2
 8005e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e48:	f7fe fa80 	bl	800434c <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	f040 80e0 	bne.w	800601c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	2319      	movs	r3, #25
 8005e62:	2201      	movs	r2, #1
 8005e64:	4970      	ldr	r1, [pc, #448]	@ (8006028 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f003 f818 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
 8005e74:	e0d3      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0x50>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0cc      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d007      	beq.n	8005eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2221      	movs	r2, #33	@ 0x21
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	893a      	ldrh	r2, [r7, #8]
 8005eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a50      	ldr	r2, [pc, #320]	@ (800602c <HAL_I2C_Master_Transmit+0x1f8>)
 8005eea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005eec:	8979      	ldrh	r1, [r7, #10]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f002 fb4a 	bl	800858c <I2C_MasterRequestWrite>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e08d      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f18:	e066      	b.n	8005fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6a39      	ldr	r1, [r7, #32]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f003 f892 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d107      	bne.n	8005f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e06b      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_I2C_Master_Transmit+0x188>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	6a39      	ldr	r1, [r7, #32]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f003 f882 	bl	80090ca <I2C_WaitOnBTFFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d107      	bne.n	8005fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e01a      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d194      	bne.n	8005f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	00100002 	.word	0x00100002
 800602c:	ffff0000 	.word	0xffff0000

08006030 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	@ 0x30
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	461a      	mov	r2, r3
 800603c:	460b      	mov	r3, r1
 800603e:	817b      	strh	r3, [r7, #10]
 8006040:	4613      	mov	r3, r2
 8006042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006044:	f7fe f982 	bl	800434c <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	f040 820b 	bne.w	800646e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2319      	movs	r3, #25
 800605e:	2201      	movs	r2, #1
 8006060:	497c      	ldr	r1, [pc, #496]	@ (8006254 <HAL_I2C_Master_Receive+0x224>)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f002 ff1a 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
 8006070:	e1fe      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_I2C_Master_Receive+0x50>
 800607c:	2302      	movs	r3, #2
 800607e:	e1f7      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d007      	beq.n	80060a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2222      	movs	r2, #34	@ 0x22
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2210      	movs	r2, #16
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	893a      	ldrh	r2, [r7, #8]
 80060d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a5c      	ldr	r2, [pc, #368]	@ (8006258 <HAL_I2C_Master_Receive+0x228>)
 80060e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060e8:	8979      	ldrh	r1, [r7, #10]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f002 face 	bl	8008690 <I2C_MasterRequestRead>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e1b8      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d113      	bne.n	800612e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e18c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11b      	bne.n	800616e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e16c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	2b02      	cmp	r3, #2
 8006174:	d11b      	bne.n	80061ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	e14c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061d4:	e138      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061da:	2b03      	cmp	r3, #3
 80061dc:	f200 80f1 	bhi.w	80063c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d123      	bne.n	8006230 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f002 ffdf 	bl	80091b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e139      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800622e:	e10b      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006234:	2b02      	cmp	r3, #2
 8006236:	d14e      	bne.n	80062d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	4906      	ldr	r1, [pc, #24]	@ (800625c <HAL_I2C_Master_Receive+0x22c>)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f002 fe2a 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e10e      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
 8006252:	bf00      	nop
 8006254:	00100002 	.word	0x00100002
 8006258:	ffff0000 	.word	0xffff0000
 800625c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800626e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062d4:	e0b8      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	4966      	ldr	r1, [pc, #408]	@ (8006478 <HAL_I2C_Master_Receive+0x448>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f002 fddb 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0bf      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	2200      	movs	r2, #0
 800633a:	494f      	ldr	r1, [pc, #316]	@ (8006478 <HAL_I2C_Master_Receive+0x448>)
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f002 fdad 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e091      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800635a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063c0:	e042      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f002 fef2 	bl	80091b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e04c      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d118      	bne.n	8006448 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f aec2 	bne.w	80061d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	@ 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	00010004 	.word	0x00010004

0800647c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	460b      	mov	r3, r1
 8006490:	813b      	strh	r3, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006496:	f7fd ff59 	bl	800434c <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	f040 80d9 	bne.w	800665c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2319      	movs	r3, #25
 80064b0:	2201      	movs	r2, #1
 80064b2:	496d      	ldr	r1, [pc, #436]	@ (8006668 <HAL_I2C_Mem_Write+0x1ec>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f002 fcf1 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e0cc      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Mem_Write+0x56>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0c5      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d007      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2221      	movs	r2, #33	@ 0x21
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2240      	movs	r2, #64	@ 0x40
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a4d      	ldr	r2, [pc, #308]	@ (800666c <HAL_I2C_Mem_Write+0x1f0>)
 8006538:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800653a:	88f8      	ldrh	r0, [r7, #6]
 800653c:	893a      	ldrh	r2, [r7, #8]
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4603      	mov	r3, r0
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f002 f96e 	bl	800882c <I2C_RequestMemoryWrite>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d052      	beq.n	80065fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e081      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f002 fd72 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	2b04      	cmp	r3, #4
 8006570:	d107      	bne.n	8006582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e06b      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d11b      	bne.n	80065fc <HAL_I2C_Mem_Write+0x180>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1aa      	bne.n	800655a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f002 fd5e 	bl	80090ca <I2C_WaitOnBTFFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	2b04      	cmp	r3, #4
 800661a:	d107      	bne.n	800662c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800662a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e016      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	00100002 	.word	0x00100002
 800666c:	ffff0000 	.word	0xffff0000

08006670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	@ 0x30
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	817b      	strh	r3, [r7, #10]
 8006682:	460b      	mov	r3, r1
 8006684:	813b      	strh	r3, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800668a:	f7fd fe5f 	bl	800434c <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b20      	cmp	r3, #32
 800669a:	f040 8208 	bne.w	8006aae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	2319      	movs	r3, #25
 80066a4:	2201      	movs	r2, #1
 80066a6:	497b      	ldr	r1, [pc, #492]	@ (8006894 <HAL_I2C_Mem_Read+0x224>)
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f002 fbf7 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e1fb      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_I2C_Mem_Read+0x56>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e1f4      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d007      	beq.n	80066ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2222      	movs	r2, #34	@ 0x22
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2240      	movs	r2, #64	@ 0x40
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006716:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800671c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a5b      	ldr	r2, [pc, #364]	@ (8006898 <HAL_I2C_Mem_Read+0x228>)
 800672c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800672e:	88f8      	ldrh	r0, [r7, #6]
 8006730:	893a      	ldrh	r2, [r7, #8]
 8006732:	8979      	ldrh	r1, [r7, #10]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4603      	mov	r3, r0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f002 f90a 	bl	8008958 <I2C_RequestMemoryRead>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e1b0      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d113      	bne.n	800677e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e184      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006782:	2b01      	cmp	r3, #1
 8006784:	d11b      	bne.n	80067be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e164      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d11b      	bne.n	80067fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	e144      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006814:	e138      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681a:	2b03      	cmp	r3, #3
 800681c:	f200 80f1 	bhi.w	8006a02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006824:	2b01      	cmp	r3, #1
 8006826:	d123      	bne.n	8006870 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f002 fcbf 	bl	80091b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e139      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800686e:	e10b      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	2b02      	cmp	r3, #2
 8006876:	d14e      	bne.n	8006916 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	2200      	movs	r2, #0
 8006880:	4906      	ldr	r1, [pc, #24]	@ (800689c <HAL_I2C_Mem_Read+0x22c>)
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f002 fb0a 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e10e      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
 8006892:	bf00      	nop
 8006894:	00100002 	.word	0x00100002
 8006898:	ffff0000 	.word	0xffff0000
 800689c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006914:	e0b8      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691c:	2200      	movs	r2, #0
 800691e:	4966      	ldr	r1, [pc, #408]	@ (8006ab8 <HAL_I2C_Mem_Read+0x448>)
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f002 fabb 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0bf      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800693e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	494f      	ldr	r1, [pc, #316]	@ (8006ab8 <HAL_I2C_Mem_Read+0x448>)
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f002 fa8d 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e091      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800699a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a00:	e042      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f002 fbd2 	bl	80091b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e04c      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d118      	bne.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f aec2 	bne.w	8006816 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	@ 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	00010004 	.word	0x00010004

08006abc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	@ 0x30
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	817b      	strh	r3, [r7, #10]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	813b      	strh	r3, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ad6:	f7fd fc39 	bl	800434c <HAL_GetTick>
 8006ada:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	f040 8176 	bne.w	8006dda <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006aee:	4b95      	ldr	r3, [pc, #596]	@ (8006d44 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	4a94      	ldr	r2, [pc, #592]	@ (8006d48 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	0a1a      	lsrs	r2, r3, #8
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009a      	lsls	r2, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d116      	bne.n	8006b42 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e14c      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d0db      	beq.n	8006b08 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_I2C_Mem_Read_DMA+0xa2>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e13e      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d007      	beq.n	8006b84 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2222      	movs	r2, #34	@ 0x22
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a62      	ldr	r2, [pc, #392]	@ (8006d4c <HAL_I2C_Mem_Read_DMA+0x290>)
 8006bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006bc6:	897a      	ldrh	r2, [r7, #10]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006bcc:	893a      	ldrh	r2, [r7, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80cc 	beq.w	8006d80 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02d      	beq.n	8006c4c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	4a56      	ldr	r2, [pc, #344]	@ (8006d50 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	4a55      	ldr	r2, [pc, #340]	@ (8006d54 <HAL_I2C_Mem_Read_DMA+0x298>)
 8006bfe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	2200      	movs	r2, #0
 8006c06:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	2200      	movs	r2, #0
 8006c16:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3310      	adds	r3, #16
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	461a      	mov	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	f7fe fa85 	bl	8005144 <HAL_DMA_Start_IT>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006c40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8087 	bne.w	8006d58 <HAL_I2C_Mem_Read_DMA+0x29c>
 8006c4a:	e013      	b.n	8006c74 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0b3      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006c74:	88f8      	ldrh	r0, [r7, #6]
 8006c76:	893a      	ldrh	r2, [r7, #8]
 8006c78:	8979      	ldrh	r1, [r7, #10]
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	2323      	movs	r3, #35	@ 0x23
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	4603      	mov	r3, r0
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f001 fe67 	bl	8008958 <I2C_RequestMemoryRead>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d023      	beq.n	8006cd8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fb1d 	bl	80052d4 <HAL_DMA_Abort_IT>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cb6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e081      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d108      	bne.n	8006cf2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e007      	b.n	8006d02 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d2e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	e049      	b.n	8006dd6 <HAL_I2C_Mem_Read_DMA+0x31a>
 8006d42:	bf00      	nop
 8006d44:	20000004 	.word	0x20000004
 8006d48:	14f8b589 	.word	0x14f8b589
 8006d4c:	ffff0000 	.word	0xffff0000
 8006d50:	08008b29 	.word	0x08008b29
 8006d54:	08008cd3 	.word	0x08008cd3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6c:	f043 0210 	orr.w	r2, r3, #16
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e02d      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006d80:	88f8      	ldrh	r0, [r7, #6]
 8006d82:	893a      	ldrh	r2, [r7, #8]
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	2323      	movs	r3, #35	@ 0x23
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4603      	mov	r3, r0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 fde1 	bl	8008958 <I2C_RequestMemoryRead>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e01d      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dc4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8006dda:	2302      	movs	r3, #2
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	@ 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	@ 0x28
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	460b      	mov	r3, r1
 8006df2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006df4:	f7fd faaa 	bl	800434c <HAL_GetTick>
 8006df8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	f040 8111 	bne.w	800702e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	2319      	movs	r3, #25
 8006e12:	2201      	movs	r2, #1
 8006e14:	4988      	ldr	r1, [pc, #544]	@ (8007038 <HAL_I2C_IsDeviceReady+0x254>)
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f002 f840 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
 8006e24:	e104      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_I2C_IsDeviceReady+0x50>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e0fd      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d007      	beq.n	8006e5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2224      	movs	r2, #36	@ 0x24
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a70      	ldr	r2, [pc, #448]	@ (800703c <HAL_I2C_IsDeviceReady+0x258>)
 8006e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f001 fffe 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00d      	beq.n	8006ec2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb4:	d103      	bne.n	8006ebe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ebc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e0b6      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ed0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006ed2:	f7fd fa3b 	bl	800434c <HAL_GetTick>
 8006ed6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006f06:	e025      	b.n	8006f54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f08:	f7fd fa20 	bl	800434c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d302      	bcc.n	8006f1e <HAL_I2C_IsDeviceReady+0x13a>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	22a0      	movs	r2, #160	@ 0xa0
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f5e:	d005      	beq.n	8006f6c <HAL_I2C_IsDeviceReady+0x188>
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_I2C_IsDeviceReady+0x188>
 8006f66:	7dbb      	ldrb	r3, [r7, #22]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0cd      	beq.n	8006f08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d129      	bne.n	8006fd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	2319      	movs	r3, #25
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4921      	ldr	r1, [pc, #132]	@ (8007038 <HAL_I2C_IsDeviceReady+0x254>)
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 ff72 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e036      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e02c      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fe4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006fee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	2319      	movs	r3, #25
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	490f      	ldr	r1, [pc, #60]	@ (8007038 <HAL_I2C_IsDeviceReady+0x254>)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f001 ff4e 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e012      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3301      	adds	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	f4ff af32 	bcc.w	8006e7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800702e:	2302      	movs	r3, #2
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	00100002 	.word	0x00100002
 800703c:	ffff0000 	.word	0xffff0000

08007040 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007060:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b10      	cmp	r3, #16
 800706e:	d003      	beq.n	8007078 <HAL_I2C_EV_IRQHandler+0x38>
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	f040 80b1 	bne.w	80071da <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <HAL_I2C_EV_IRQHandler+0x6e>
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007098:	d003      	beq.n	80070a2 <HAL_I2C_EV_IRQHandler+0x62>
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80070a0:	d101      	bne.n	80070a6 <HAL_I2C_EV_IRQHandler+0x66>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <HAL_I2C_EV_IRQHandler+0x68>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	f000 8114 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <HAL_I2C_EV_IRQHandler+0x90>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f002 f8f9 	bl	80092ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fcb5 	bl	8007a38 <I2C_Master_SB>
 80070ce:	e083      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <HAL_I2C_EV_IRQHandler+0xac>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fd2d 	bl	8007b44 <I2C_Master_ADD10>
 80070ea:	e075      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <HAL_I2C_EV_IRQHandler+0xc8>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fd49 	bl	8007b98 <I2C_Master_ADDR>
 8007106:	e067      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d036      	beq.n	8007180 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800711c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007120:	f000 80db 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <HAL_I2C_EV_IRQHandler+0x10a>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <HAL_I2C_EV_IRQHandler+0x10a>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f92d 	bl	80073a2 <I2C_MasterTransmit_TXE>
 8007148:	e046      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80c2 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80bc 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b21      	cmp	r3, #33	@ 0x21
 8007166:	d103      	bne.n	8007170 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f9b6 	bl	80074da <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800716e:	e0b4      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b40      	cmp	r3, #64	@ 0x40
 8007174:	f040 80b1 	bne.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa24 	bl	80075c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800717e:	e0ac      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718e:	f000 80a4 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <HAL_I2C_EV_IRQHandler+0x178>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_I2C_EV_IRQHandler+0x178>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa9c 	bl	80076ee <I2C_MasterReceive_RXNE>
 80071b6:	e00f      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 808b 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8085 	beq.w	80072da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb47 	bl	8007864 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d6:	e080      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29a>
 80071d8:	e07f      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e007      	b.n	80071fc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d011      	beq.n	800722a <HAL_I2C_EV_IRQHandler+0x1ea>
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00c      	beq.n	800722a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ff07 	bl	8008036 <I2C_Slave_ADDR>
 8007228:	e05a      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_I2C_EV_IRQHandler+0x206>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 ff42 	bl	80080c8 <I2C_Slave_STOPF>
 8007244:	e04c      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b21      	cmp	r3, #33	@ 0x21
 800724a:	d002      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x212>
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b29      	cmp	r3, #41	@ 0x29
 8007250:	d120      	bne.n	8007294 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <HAL_I2C_EV_IRQHandler+0x238>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <HAL_I2C_EV_IRQHandler+0x238>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d103      	bne.n	8007278 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fe22 	bl	8007eba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007276:	e032      	b.n	80072de <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d02d      	beq.n	80072de <HAL_I2C_EV_IRQHandler+0x29e>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007288:	2b00      	cmp	r3, #0
 800728a:	d028      	beq.n	80072de <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fe51 	bl	8007f34 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007292:	e024      	b.n	80072de <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <HAL_I2C_EV_IRQHandler+0x27a>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_I2C_EV_IRQHandler+0x27a>
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fe5f 	bl	8007f76 <I2C_SlaveReceive_RXNE>
 80072b8:	e012      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fe8f 	bl	8007ff2 <I2C_SlaveReceive_BTF>
 80072d4:	e004      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80072d6:	bf00      	nop
 80072d8:	e002      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
 8007342:	4613      	mov	r3, r2
 8007344:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073b8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d150      	bne.n	800746a <I2C_MasterTransmit_TXE+0xc8>
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b21      	cmp	r3, #33	@ 0x21
 80073cc:	d14d      	bne.n	800746a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d01d      	beq.n	8007410 <I2C_MasterTransmit_TXE+0x6e>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d01a      	beq.n	8007410 <I2C_MasterTransmit_TXE+0x6e>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073e0:	d016      	beq.n	8007410 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80073f0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2211      	movs	r2, #17
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff6c 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800740e:	e060      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800741e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800742e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d107      	bne.n	800745a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff ff87 	bl	8007366 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007458:	e03b      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff ff3f 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007468:	e033      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b21      	cmp	r3, #33	@ 0x21
 800746e:	d005      	beq.n	800747c <I2C_MasterTransmit_TXE+0xda>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b40      	cmp	r3, #64	@ 0x40
 8007474:	d12d      	bne.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b22      	cmp	r3, #34	@ 0x22
 800747a:	d12a      	bne.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d108      	bne.n	8007498 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007494:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007496:	e01c      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d103      	bne.n	80074ac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f88e 	bl	80075c6 <I2C_MemoryTransmit_TXE_BTF>
}
 80074aa:	e012      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80074d0:	e7ff      	b.n	80074d2 <I2C_MasterTransmit_TXE+0x130>
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b21      	cmp	r3, #33	@ 0x21
 80074f2:	d164      	bne.n	80075be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007522:	e04c      	b.n	80075be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b08      	cmp	r3, #8
 8007528:	d01d      	beq.n	8007566 <I2C_MasterTransmit_BTF+0x8c>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b20      	cmp	r3, #32
 800752e:	d01a      	beq.n	8007566 <I2C_MasterTransmit_BTF+0x8c>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007536:	d016      	beq.n	8007566 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007546:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2211      	movs	r2, #17
 800754c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fec1 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
}
 8007564:	e02b      	b.n	80075be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007574:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007584:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b40      	cmp	r3, #64	@ 0x40
 800759e:	d107      	bne.n	80075b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fedc 	bl	8007366 <HAL_I2C_MemTxCpltCallback>
}
 80075ae:	e006      	b.n	80075be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fe94 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11d      	bne.n	800761a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d10b      	bne.n	80075fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80075fc:	e073      	b.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007602:	b29b      	uxth	r3, r3
 8007604:	121b      	asrs	r3, r3, #8
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007618:	e065      	b.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	2b01      	cmp	r3, #1
 8007620:	d10b      	bne.n	800763a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007638:	e055      	b.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800763e:	2b02      	cmp	r3, #2
 8007640:	d151      	bne.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b22      	cmp	r3, #34	@ 0x22
 8007646:	d10d      	bne.n	8007664 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007656:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007662:	e040      	b.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d015      	beq.n	800769a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b21      	cmp	r3, #33	@ 0x21
 8007672:	d112      	bne.n	800769a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007698:	e025      	b.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d120      	bne.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b21      	cmp	r3, #33	@ 0x21
 80076a8:	d11d      	bne.n	80076e6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80076b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fe40 	bl	8007366 <HAL_I2C_MemTxCpltCallback>
}
 80076e6:	bf00      	nop
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b22      	cmp	r3, #34	@ 0x22
 8007700:	f040 80ac 	bne.w	800785c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d921      	bls.n	8007756 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b03      	cmp	r3, #3
 8007740:	f040 808c 	bne.w	800785c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007752:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007754:	e082      	b.n	800785c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	2b02      	cmp	r3, #2
 800775c:	d075      	beq.n	800784a <I2C_MasterReceive_RXNE+0x15c>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <I2C_MasterReceive_RXNE+0x7c>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d16f      	bne.n	800784a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 fcee 	bl	800914c <I2C_WaitOnSTOPRequestThroughIT>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d142      	bne.n	80077fc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007784:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007794:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b40      	cmp	r3, #64	@ 0x40
 80077ce:	d10a      	bne.n	80077e6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa fe04 	bl	80023ec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80077e4:	e03a      	b.n	800785c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2212      	movs	r2, #18
 80077f2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fd80 	bl	80072fa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80077fa:	e02f      	b.n	800785c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800780a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fd99 	bl	800737a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007848:	e008      	b.n	800785c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007858:	605a      	str	r2, [r3, #4]
}
 800785a:	e7ff      	b.n	800785c <I2C_MasterReceive_RXNE+0x16e>
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b04      	cmp	r3, #4
 800787a:	d11b      	bne.n	80078b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800788a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80078b2:	e0bd      	b.n	8007a30 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d129      	bne.n	8007912 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d00a      	beq.n	80078ea <I2C_MasterReceive_BTF+0x86>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d007      	beq.n	80078ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007910:	e08e      	b.n	8007a30 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d176      	bne.n	8007a0a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d002      	beq.n	8007928 <I2C_MasterReceive_BTF+0xc4>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b10      	cmp	r3, #16
 8007926:	d108      	bne.n	800793a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e019      	b.n	800796e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b04      	cmp	r3, #4
 800793e:	d002      	beq.n	8007946 <I2C_MasterReceive_BTF+0xe2>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d108      	bne.n	8007958 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e00a      	b.n	800796e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b10      	cmp	r3, #16
 800795c:	d007      	beq.n	800796e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800796c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80079c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d10a      	bne.n	80079f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fa fcfd 	bl	80023ec <HAL_I2C_MemRxCpltCallback>
}
 80079f2:	e01d      	b.n	8007a30 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2212      	movs	r2, #18
 8007a00:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fc79 	bl	80072fa <HAL_I2C_MasterRxCpltCallback>
}
 8007a08:	e012      	b.n	8007a30 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b40      	cmp	r3, #64	@ 0x40
 8007a4a:	d117      	bne.n	8007a7c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d109      	bne.n	8007a68 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a64:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007a66:	e067      	b.n	8007b38 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	611a      	str	r2, [r3, #16]
}
 8007a7a:	e05d      	b.n	8007b38 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a84:	d133      	bne.n	8007aee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b21      	cmp	r3, #33	@ 0x21
 8007a90:	d109      	bne.n	8007aa6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007aa2:	611a      	str	r2, [r3, #16]
 8007aa4:	e008      	b.n	8007ab8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f043 0301 	orr.w	r3, r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <I2C_Master_SB+0x92>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d108      	bne.n	8007adc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d032      	beq.n	8007b38 <I2C_Master_SB+0x100>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02d      	beq.n	8007b38 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aea:	605a      	str	r2, [r3, #4]
}
 8007aec:	e024      	b.n	8007b38 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10e      	bne.n	8007b14 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	11db      	asrs	r3, r3, #7
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0306 	and.w	r3, r3, #6
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f063 030f 	orn	r3, r3, #15
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	611a      	str	r2, [r3, #16]
}
 8007b12:	e011      	b.n	8007b38 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10d      	bne.n	8007b38 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	11db      	asrs	r3, r3, #7
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0306 	and.w	r3, r3, #6
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f063 030e 	orn	r3, r3, #14
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	611a      	str	r2, [r3, #16]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <I2C_Master_ADD10+0x26>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <I2C_Master_ADD10+0x48>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b8a:	605a      	str	r2, [r3, #4]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b091      	sub	sp, #68	@ 0x44
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ba6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b22      	cmp	r3, #34	@ 0x22
 8007bc0:	f040 8169 	bne.w	8007e96 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10f      	bne.n	8007bec <I2C_Master_ADDR+0x54>
 8007bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d10b      	bne.n	8007bec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	e160      	b.n	8007eae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11d      	bne.n	8007c30 <I2C_Master_ADDR+0x98>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007bfc:	d118      	bne.n	8007c30 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfe:	2300      	movs	r3, #0
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c22:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c2e:	e13e      	b.n	8007eae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d113      	bne.n	8007c62 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e115      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f040 808a 	bne.w	8007d82 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c74:	d137      	bne.n	8007ce6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c84:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c94:	d113      	bne.n	8007cbe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ca4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	e0e7      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	623b      	str	r3, [r7, #32]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	623b      	str	r3, [r7, #32]
 8007cd2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e0d3      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d02e      	beq.n	8007d4a <I2C_Master_ADDR+0x1b2>
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d02b      	beq.n	8007d4a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf4:	2b12      	cmp	r3, #18
 8007cf6:	d102      	bne.n	8007cfe <I2C_Master_ADDR+0x166>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d125      	bne.n	8007d4a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d00e      	beq.n	8007d22 <I2C_Master_ADDR+0x18a>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d00b      	beq.n	8007d22 <I2C_Master_ADDR+0x18a>
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d008      	beq.n	8007d22 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	e007      	b.n	8007d32 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d30:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	e0a1      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d58:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e085      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d14d      	bne.n	8007e28 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d016      	beq.n	8007dc0 <I2C_Master_ADDR+0x228>
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d013      	beq.n	8007dc0 <I2C_Master_ADDR+0x228>
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d010      	beq.n	8007dc0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e007      	b.n	8007dd0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007dce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dde:	d117      	bne.n	8007e10 <I2C_Master_ADDR+0x278>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007de6:	d00b      	beq.n	8007e00 <I2C_Master_ADDR+0x268>
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d008      	beq.n	8007e00 <I2C_Master_ADDR+0x268>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d005      	beq.n	8007e00 <I2C_Master_ADDR+0x268>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d002      	beq.n	8007e00 <I2C_Master_ADDR+0x268>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d107      	bne.n	8007e10 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	e032      	b.n	8007e8e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e36:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e46:	d117      	bne.n	8007e78 <I2C_Master_ADDR+0x2e0>
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e4e:	d00b      	beq.n	8007e68 <I2C_Master_ADDR+0x2d0>
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d008      	beq.n	8007e68 <I2C_Master_ADDR+0x2d0>
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d005      	beq.n	8007e68 <I2C_Master_ADDR+0x2d0>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d002      	beq.n	8007e68 <I2C_Master_ADDR+0x2d0>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d107      	bne.n	8007e78 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e76:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007e94:	e00b      	b.n	8007eae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	e7ff      	b.n	8007eae <I2C_Master_ADDR+0x316>
 8007eae:	bf00      	nop
 8007eb0:	3744      	adds	r7, #68	@ 0x44
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02b      	beq.n	8007f2c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d114      	bne.n	8007f2c <I2C_SlaveTransmit_TXE+0x72>
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b29      	cmp	r3, #41	@ 0x29
 8007f06:	d111      	bne.n	8007f2c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2221      	movs	r2, #33	@ 0x21
 8007f1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2228      	movs	r2, #40	@ 0x28
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff f9f1 	bl	800730e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d011      	beq.n	8007f6a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d02c      	beq.n	8007fea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d114      	bne.n	8007fea <I2C_SlaveReceive_RXNE+0x74>
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc4:	d111      	bne.n	8007fea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2222      	movs	r2, #34	@ 0x22
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2228      	movs	r2, #40	@ 0x28
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff f99c 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d012      	beq.n	800802a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691a      	ldr	r2, [r3, #16]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008050:	2b28      	cmp	r3, #40	@ 0x28
 8008052:	d125      	bne.n	80080a0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008062:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800806e:	2301      	movs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	81bb      	strh	r3, [r7, #12]
 8008082:	e002      	b.n	800808a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008092:	89ba      	ldrh	r2, [r7, #12]
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f94c 	bl	8007336 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800809e:	e00e      	b.n	80080be <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080a0:	2300      	movs	r3, #0
 80080a2:	60bb      	str	r3, [r7, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	60bb      	str	r3, [r7, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80080e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80080e8:	2300      	movs	r3, #0
 80080ea:	60bb      	str	r3, [r7, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	60bb      	str	r3, [r7, #8]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008114:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008124:	d172      	bne.n	800820c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b22      	cmp	r3, #34	@ 0x22
 800812a:	d002      	beq.n	8008132 <I2C_Slave_STOPF+0x6a>
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008130:	d135      	bne.n	800819e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814e:	f043 0204 	orr.w	r2, r3, #4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008164:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd fa5e 	bl	800562c <HAL_DMA_GetState>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d049      	beq.n	800820a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	4a69      	ldr	r2, [pc, #420]	@ (8008320 <I2C_Slave_STOPF+0x258>)
 800817c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd f8a6 	bl	80052d4 <HAL_DMA_Abort_IT>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d03d      	beq.n	800820a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800819c:	e035      	b.n	800820a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ba:	f043 0204 	orr.w	r2, r3, #4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd fa28 	bl	800562c <HAL_DMA_GetState>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d014      	beq.n	800820c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008320 <I2C_Slave_STOPF+0x258>)
 80081e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fd f870 	bl	80052d4 <HAL_DMA_Abort_IT>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	e000      	b.n	800820c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800820a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d03e      	beq.n	8008294 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b04      	cmp	r3, #4
 8008222:	d112      	bne.n	800824a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008254:	2b40      	cmp	r3, #64	@ 0x40
 8008256:	d112      	bne.n	800827e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	f043 0204 	orr.w	r2, r3, #4
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f843 	bl	8008328 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80082a2:	e039      	b.n	8008318 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a8:	d109      	bne.n	80082be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2228      	movs	r2, #40	@ 0x28
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff f832 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b28      	cmp	r3, #40	@ 0x28
 80082c8:	d111      	bne.n	80082ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a15      	ldr	r2, [pc, #84]	@ (8008324 <I2C_Slave_STOPF+0x25c>)
 80082ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff f833 	bl	8007352 <HAL_I2C_ListenCpltCallback>
}
 80082ec:	e014      	b.n	8008318 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f2:	2b22      	cmp	r3, #34	@ 0x22
 80082f4:	d002      	beq.n	80082fc <I2C_Slave_STOPF+0x234>
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	2b22      	cmp	r3, #34	@ 0x22
 80082fa:	d10d      	bne.n	8008318 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff f805 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	08008d4d 	.word	0x08008d4d
 8008324:	ffff0000 	.word	0xffff0000

08008328 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800833e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b10      	cmp	r3, #16
 8008344:	d002      	beq.n	800834c <I2C_ITError+0x24>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d10a      	bne.n	8008362 <I2C_ITError+0x3a>
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b22      	cmp	r3, #34	@ 0x22
 8008350:	d107      	bne.n	8008362 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008360:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008368:	2b28      	cmp	r3, #40	@ 0x28
 800836a:	d107      	bne.n	800837c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2228      	movs	r2, #40	@ 0x28
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800837a:	e015      	b.n	80083a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800838a:	d00a      	beq.n	80083a2 <I2C_ITError+0x7a>
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b60      	cmp	r3, #96	@ 0x60
 8008390:	d007      	beq.n	80083a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b6:	d162      	bne.n	800847e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d020      	beq.n	8008418 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083da:	4a6a      	ldr	r2, [pc, #424]	@ (8008584 <I2C_ITError+0x25c>)
 80083dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fc ff76 	bl	80052d4 <HAL_DMA_Abort_IT>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8089 	beq.w	8008502 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008412:	4610      	mov	r0, r2
 8008414:	4798      	blx	r3
 8008416:	e074      	b.n	8008502 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	4a59      	ldr	r2, [pc, #356]	@ (8008584 <I2C_ITError+0x25c>)
 800841e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	4618      	mov	r0, r3
 8008426:	f7fc ff55 	bl	80052d4 <HAL_DMA_Abort_IT>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d068      	beq.n	8008502 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843a:	2b40      	cmp	r3, #64	@ 0x40
 800843c:	d10b      	bne.n	8008456 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	e041      	b.n	8008502 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b60      	cmp	r3, #96	@ 0x60
 8008488:	d125      	bne.n	80084d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	d10b      	bne.n	80084be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fe ff5d 	bl	800738e <HAL_I2C_AbortCpltCallback>
 80084d4:	e015      	b.n	8008502 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e0:	2b40      	cmp	r3, #64	@ 0x40
 80084e2:	d10b      	bne.n	80084fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fe ff3c 	bl	800737a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008506:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800853e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008546:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b04      	cmp	r3, #4
 8008552:	d113      	bne.n	800857c <I2C_ITError+0x254>
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b28      	cmp	r3, #40	@ 0x28
 8008558:	d110      	bne.n	800857c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a0a      	ldr	r2, [pc, #40]	@ (8008588 <I2C_ITError+0x260>)
 800855e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe feeb 	bl	8007352 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	08008d4d 	.word	0x08008d4d
 8008588:	ffff0000 	.word	0xffff0000

0800858c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	460b      	mov	r3, r1
 800859a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d006      	beq.n	80085b6 <I2C_MasterRequestWrite+0x2a>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d003      	beq.n	80085b6 <I2C_MasterRequestWrite+0x2a>
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085b4:	d108      	bne.n	80085c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e00b      	b.n	80085e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	2b12      	cmp	r3, #18
 80085ce:	d107      	bne.n	80085e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 fc55 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00d      	beq.n	8008614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008606:	d103      	bne.n	8008610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e035      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800861c:	d108      	bne.n	8008630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800862c:	611a      	str	r2, [r3, #16]
 800862e:	e01b      	b.n	8008668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008630:	897b      	ldrh	r3, [r7, #10]
 8008632:	11db      	asrs	r3, r3, #7
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0306 	and.w	r3, r3, #6
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f063 030f 	orn	r3, r3, #15
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	490e      	ldr	r1, [pc, #56]	@ (8008688 <I2C_MasterRequestWrite+0xfc>)
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fc7b 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e010      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800865e:	897b      	ldrh	r3, [r7, #10]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	4907      	ldr	r1, [pc, #28]	@ (800868c <I2C_MasterRequestWrite+0x100>)
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 fc6b 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	00010008 	.word	0x00010008
 800868c:	00010002 	.word	0x00010002

08008690 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	460b      	mov	r3, r1
 800869e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d006      	beq.n	80086ca <I2C_MasterRequestRead+0x3a>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d003      	beq.n	80086ca <I2C_MasterRequestRead+0x3a>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80086c8:	d108      	bne.n	80086dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e00b      	b.n	80086f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e0:	2b11      	cmp	r3, #17
 80086e2:	d107      	bne.n	80086f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fbcb 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00d      	beq.n	8008728 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871a:	d103      	bne.n	8008724 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008722:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e079      	b.n	800881c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008730:	d108      	bne.n	8008744 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008732:	897b      	ldrh	r3, [r7, #10]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	611a      	str	r2, [r3, #16]
 8008742:	e05f      	b.n	8008804 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008744:	897b      	ldrh	r3, [r7, #10]
 8008746:	11db      	asrs	r3, r3, #7
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0306 	and.w	r3, r3, #6
 800874e:	b2db      	uxtb	r3, r3
 8008750:	f063 030f 	orn	r3, r3, #15
 8008754:	b2da      	uxtb	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4930      	ldr	r1, [pc, #192]	@ (8008824 <I2C_MasterRequestRead+0x194>)
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 fbf1 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e054      	b.n	800881c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008772:	897b      	ldrh	r3, [r7, #10]
 8008774:	b2da      	uxtb	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4929      	ldr	r1, [pc, #164]	@ (8008828 <I2C_MasterRequestRead+0x198>)
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 fbe1 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e044      	b.n	800881c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fb69 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00d      	beq.n	80087ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087de:	d103      	bne.n	80087e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087e6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e017      	b.n	800881c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80087ec:	897b      	ldrh	r3, [r7, #10]
 80087ee:	11db      	asrs	r3, r3, #7
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0306 	and.w	r3, r3, #6
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f063 030e 	orn	r3, r3, #14
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4907      	ldr	r1, [pc, #28]	@ (8008828 <I2C_MasterRequestRead+0x198>)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fb9d 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	00010008 	.word	0x00010008
 8008828:	00010002 	.word	0x00010002

0800882c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	4603      	mov	r3, r0
 800883c:	817b      	strh	r3, [r7, #10]
 800883e:	460b      	mov	r3, r1
 8008840:	813b      	strh	r3, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008854:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	2200      	movs	r2, #0
 800885e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fb1a 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887c:	d103      	bne.n	8008886 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008884:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e05f      	b.n	800894a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800888a:	897b      	ldrh	r3, [r7, #10]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008898:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	492d      	ldr	r1, [pc, #180]	@ (8008954 <I2C_RequestMemoryWrite+0x128>)
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fb52 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e04c      	b.n	800894a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c8:	6a39      	ldr	r1, [r7, #32]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fbbc 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d107      	bne.n	80088ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e02b      	b.n	800894a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d105      	bne.n	8008904 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80088f8:	893b      	ldrh	r3, [r7, #8]
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	611a      	str	r2, [r3, #16]
 8008902:	e021      	b.n	8008948 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008904:	893b      	ldrh	r3, [r7, #8]
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	b29b      	uxth	r3, r3
 800890a:	b2da      	uxtb	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008914:	6a39      	ldr	r1, [r7, #32]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fb96 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00d      	beq.n	800893e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008926:	2b04      	cmp	r3, #4
 8008928:	d107      	bne.n	800893a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008938:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e005      	b.n	800894a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800893e:	893b      	ldrh	r3, [r7, #8]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	00010002 	.word	0x00010002

08008958 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	461a      	mov	r2, r3
 8008966:	4603      	mov	r3, r0
 8008968:	817b      	strh	r3, [r7, #10]
 800896a:	460b      	mov	r3, r1
 800896c:	813b      	strh	r3, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008980:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	2200      	movs	r2, #0
 800899a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fa7c 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d103      	bne.n	80089c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e0aa      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089c6:	897b      	ldrh	r3, [r7, #10]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80089d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	6a3a      	ldr	r2, [r7, #32]
 80089da:	4952      	ldr	r1, [pc, #328]	@ (8008b24 <I2C_RequestMemoryRead+0x1cc>)
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fab4 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e097      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a04:	6a39      	ldr	r1, [r7, #32]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fb1e 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d107      	bne.n	8008a2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e076      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d105      	bne.n	8008a40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a34:	893b      	ldrh	r3, [r7, #8]
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	611a      	str	r2, [r3, #16]
 8008a3e:	e021      	b.n	8008a84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a40:	893b      	ldrh	r3, [r7, #8]
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a50:	6a39      	ldr	r1, [r7, #32]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 faf8 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d107      	bne.n	8008a76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e050      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a7a:	893b      	ldrh	r3, [r7, #8]
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a86:	6a39      	ldr	r1, [r7, #32]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fadd 	bl	8009048 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00d      	beq.n	8008ab0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d107      	bne.n	8008aac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e035      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008abe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f9e5 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00d      	beq.n	8008af4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae6:	d103      	bne.n	8008af0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e013      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008af4:	897b      	ldrh	r3, [r7, #10]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f043 0301 	orr.w	r3, r3, #1
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	6a3a      	ldr	r2, [r7, #32]
 8008b08:	4906      	ldr	r1, [pc, #24]	@ (8008b24 <I2C_RequestMemoryRead+0x1cc>)
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fa1d 	bl	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	00010002 	.word	0x00010002

08008b28 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b3c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b44:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b68:	2200      	movs	r2, #0
 8008b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	2200      	movs	r2, #0
 8008b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008b7c:	7cfb      	ldrb	r3, [r7, #19]
 8008b7e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008b82:	2b21      	cmp	r3, #33	@ 0x21
 8008b84:	d007      	beq.n	8008b96 <I2C_DMAXferCplt+0x6e>
 8008b86:	7cfb      	ldrb	r3, [r7, #19]
 8008b88:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8008b8c:	2b22      	cmp	r3, #34	@ 0x22
 8008b8e:	d131      	bne.n	8008bf4 <I2C_DMAXferCplt+0xcc>
 8008b90:	7cbb      	ldrb	r3, [r7, #18]
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d12e      	bne.n	8008bf4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ba4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008bac:	7cfb      	ldrb	r3, [r7, #19]
 8008bae:	2b29      	cmp	r3, #41	@ 0x29
 8008bb0:	d10a      	bne.n	8008bc8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2221      	movs	r2, #33	@ 0x21
 8008bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2228      	movs	r2, #40	@ 0x28
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bc0:	6978      	ldr	r0, [r7, #20]
 8008bc2:	f7fe fba4 	bl	800730e <HAL_I2C_SlaveTxCpltCallback>
 8008bc6:	e00c      	b.n	8008be2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008bc8:	7cfb      	ldrb	r3, [r7, #19]
 8008bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bcc:	d109      	bne.n	8008be2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2222      	movs	r2, #34	@ 0x22
 8008bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2228      	movs	r2, #40	@ 0x28
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bdc:	6978      	ldr	r0, [r7, #20]
 8008bde:	f7fe fba0 	bl	8007322 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008bf0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008bf2:	e06a      	b.n	8008cca <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d064      	beq.n	8008cca <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d107      	bne.n	8008c1a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c18:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008c28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c30:	d009      	beq.n	8008c46 <I2C_DMAXferCplt+0x11e>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d006      	beq.n	8008c46 <I2C_DMAXferCplt+0x11e>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008c3e:	d002      	beq.n	8008c46 <I2C_DMAXferCplt+0x11e>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d107      	bne.n	8008c56 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c64:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c74:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008c84:	6978      	ldr	r0, [r7, #20]
 8008c86:	f7fe fb78 	bl	800737a <HAL_I2C_ErrorCallback>
}
 8008c8a:	e01e      	b.n	8008cca <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b40      	cmp	r3, #64	@ 0x40
 8008c9e:	d10a      	bne.n	8008cb6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008cae:	6978      	ldr	r0, [r7, #20]
 8008cb0:	f7f9 fb9c 	bl	80023ec <HAL_I2C_MemRxCpltCallback>
}
 8008cb4:	e009      	b.n	8008cca <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2212      	movs	r2, #18
 8008cc2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008cc4:	6978      	ldr	r0, [r7, #20]
 8008cc6:	f7fe fb18 	bl	80072fa <HAL_I2C_MasterRxCpltCallback>
}
 8008cca:	bf00      	nop
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	2200      	movs	r2, #0
 8008cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fc fca1 	bl	8005648 <HAL_DMA_GetError>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d01b      	beq.n	8008d44 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d1a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d36:	f043 0210 	orr.w	r2, r3, #16
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7fe fb1b 	bl	800737a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d66:	4b4b      	ldr	r3, [pc, #300]	@ (8008e94 <I2C_DMAAbort+0x148>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	08db      	lsrs	r3, r3, #3
 8008d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e98 <I2C_DMAAbort+0x14c>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	0a1a      	lsrs	r2, r3, #8
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	00da      	lsls	r2, r3, #3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008d92:	e00a      	b.n	8008daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da8:	d0ea      	beq.n	8008d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db6:	2200      	movs	r2, #0
 8008db8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dec:	2200      	movs	r2, #0
 8008dee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b60      	cmp	r3, #96	@ 0x60
 8008e1a:	d10e      	bne.n	8008e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f7fe faab 	bl	800738e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e38:	e027      	b.n	8008e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e3a:	7cfb      	ldrb	r3, [r7, #19]
 8008e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e40:	2b28      	cmp	r3, #40	@ 0x28
 8008e42:	d117      	bne.n	8008e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0201 	orr.w	r2, r2, #1
 8008e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2200      	movs	r2, #0
 8008e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2228      	movs	r2, #40	@ 0x28
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008e72:	e007      	b.n	8008e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008e84:	6978      	ldr	r0, [r7, #20]
 8008e86:	f7fe fa78 	bl	800737a <HAL_I2C_ErrorCallback>
}
 8008e8a:	bf00      	nop
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20000004 	.word	0x20000004
 8008e98:	14f8b589 	.word	0x14f8b589

08008e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eac:	e025      	b.n	8008efa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d021      	beq.n	8008efa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb6:	f7fb fa49 	bl	800434c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d302      	bcc.n	8008ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d116      	bne.n	8008efa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	f043 0220 	orr.w	r2, r3, #32
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e023      	b.n	8008f42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	0c1b      	lsrs	r3, r3, #16
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d10d      	bne.n	8008f20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	43da      	mvns	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	bf0c      	ite	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	2300      	movne	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	e00c      	b.n	8008f3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	43da      	mvns	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf0c      	ite	eq
 8008f32:	2301      	moveq	r3, #1
 8008f34:	2300      	movne	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d0b6      	beq.n	8008eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f58:	e051      	b.n	8008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f68:	d123      	bne.n	8008fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9e:	f043 0204 	orr.w	r2, r3, #4
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e046      	b.n	8009040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d021      	beq.n	8008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fba:	f7fb f9c7 	bl	800434c <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d302      	bcc.n	8008fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d116      	bne.n	8008ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fea:	f043 0220 	orr.w	r2, r3, #32
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e020      	b.n	8009040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	d10c      	bne.n	8009022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	43da      	mvns	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	bf14      	ite	ne
 800901a:	2301      	movne	r3, #1
 800901c:	2300      	moveq	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e00b      	b.n	800903a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	43da      	mvns	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d18d      	bne.n	8008f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009054:	e02d      	b.n	80090b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f900 	bl	800925c <I2C_IsAcknowledgeFailed>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e02d      	b.n	80090c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d021      	beq.n	80090b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800906e:	f7fb f96d 	bl	800434c <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d116      	bne.n	80090b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e007      	b.n	80090c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090bc:	2b80      	cmp	r3, #128	@ 0x80
 80090be:	d1ca      	bne.n	8009056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090d6:	e02d      	b.n	8009134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f8bf 	bl	800925c <I2C_IsAcknowledgeFailed>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e02d      	b.n	8009144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d021      	beq.n	8009134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f0:	f7fb f92c 	bl	800434c <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d302      	bcc.n	8009106 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d116      	bne.n	8009134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009120:	f043 0220 	orr.w	r2, r3, #32
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e007      	b.n	8009144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b04      	cmp	r3, #4
 8009140:	d1ca      	bne.n	80090d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009158:	4b13      	ldr	r3, [pc, #76]	@ (80091a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	08db      	lsrs	r3, r3, #3
 800915e:	4a13      	ldr	r2, [pc, #76]	@ (80091ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009160:	fba2 2303 	umull	r2, r3, r2, r3
 8009164:	0a1a      	lsrs	r2, r3, #8
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3b01      	subs	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d107      	bne.n	800918a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	f043 0220 	orr.w	r2, r3, #32
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e008      	b.n	800919c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009198:	d0e9      	beq.n	800916e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	20000004 	.word	0x20000004
 80091ac:	14f8b589 	.word	0x14f8b589

080091b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091bc:	e042      	b.n	8009244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b10      	cmp	r3, #16
 80091ca:	d119      	bne.n	8009200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0210 	mvn.w	r2, #16
 80091d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e029      	b.n	8009254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009200:	f7fb f8a4 	bl	800434c <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d116      	bne.n	8009244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2220      	movs	r2, #32
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009230:	f043 0220 	orr.w	r2, r3, #32
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e007      	b.n	8009254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800924e:	2b40      	cmp	r3, #64	@ 0x40
 8009250:	d1b5      	bne.n	80091be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009272:	d11b      	bne.n	80092ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800927c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	f043 0204 	orr.w	r2, r3, #4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80092ca:	d103      	bne.n	80092d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80092d2:	e007      	b.n	80092e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80092dc:	d102      	bne.n	80092e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2208      	movs	r2, #8
 80092e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e0cc      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009304:	4b68      	ldr	r3, [pc, #416]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d90c      	bls.n	800932c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009312:	4b65      	ldr	r3, [pc, #404]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800931a:	4b63      	ldr	r3, [pc, #396]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d001      	beq.n	800932c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e0b8      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d020      	beq.n	800937a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009344:	4b59      	ldr	r3, [pc, #356]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	4a58      	ldr	r2, [pc, #352]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 800934a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800934e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800935c:	4b53      	ldr	r3, [pc, #332]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	4a52      	ldr	r2, [pc, #328]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009368:	4b50      	ldr	r3, [pc, #320]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	494d      	ldr	r1, [pc, #308]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009376:	4313      	orrs	r3, r2
 8009378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d044      	beq.n	8009410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d107      	bne.n	800939e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800938e:	4b47      	ldr	r3, [pc, #284]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d119      	bne.n	80093ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e07f      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d003      	beq.n	80093ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d107      	bne.n	80093be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ae:	4b3f      	ldr	r3, [pc, #252]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e06f      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093be:	4b3b      	ldr	r3, [pc, #236]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e067      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093ce:	4b37      	ldr	r3, [pc, #220]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f023 0203 	bic.w	r2, r3, #3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	4934      	ldr	r1, [pc, #208]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 80093dc:	4313      	orrs	r3, r2
 80093de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093e0:	f7fa ffb4 	bl	800434c <HAL_GetTick>
 80093e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e6:	e00a      	b.n	80093fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e8:	f7fa ffb0 	bl	800434c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d901      	bls.n	80093fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e04f      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093fe:	4b2b      	ldr	r3, [pc, #172]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 020c 	and.w	r2, r3, #12
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	429a      	cmp	r2, r3
 800940e:	d1eb      	bne.n	80093e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009410:	4b25      	ldr	r3, [pc, #148]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d20c      	bcs.n	8009438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941e:	4b22      	ldr	r3, [pc, #136]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009426:	4b20      	ldr	r3, [pc, #128]	@ (80094a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d001      	beq.n	8009438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e032      	b.n	800949e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009444:	4b19      	ldr	r3, [pc, #100]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4916      	ldr	r1, [pc, #88]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009462:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	490e      	ldr	r1, [pc, #56]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 8009472:	4313      	orrs	r3, r2
 8009474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009476:	f000 f887 	bl	8009588 <HAL_RCC_GetSysClockFreq>
 800947a:	4602      	mov	r2, r0
 800947c:	4b0b      	ldr	r3, [pc, #44]	@ (80094ac <HAL_RCC_ClockConfig+0x1bc>)
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	091b      	lsrs	r3, r3, #4
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	490a      	ldr	r1, [pc, #40]	@ (80094b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009488:	5ccb      	ldrb	r3, [r1, r3]
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	4a09      	ldr	r2, [pc, #36]	@ (80094b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009492:	4b09      	ldr	r3, [pc, #36]	@ (80094b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	f7fa fd34 	bl	8003f04 <HAL_InitTick>

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	40023c00 	.word	0x40023c00
 80094ac:	40023800 	.word	0x40023800
 80094b0:	0801599c 	.word	0x0801599c
 80094b4:	20000004 	.word	0x20000004
 80094b8:	20000008 	.word	0x20000008

080094bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094c0:	4b03      	ldr	r3, [pc, #12]	@ (80094d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80094c2:	681b      	ldr	r3, [r3, #0]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20000004 	.word	0x20000004

080094d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094d8:	f7ff fff0 	bl	80094bc <HAL_RCC_GetHCLKFreq>
 80094dc:	4602      	mov	r2, r0
 80094de:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	0a9b      	lsrs	r3, r3, #10
 80094e4:	f003 0307 	and.w	r3, r3, #7
 80094e8:	4903      	ldr	r1, [pc, #12]	@ (80094f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094ea:	5ccb      	ldrb	r3, [r1, r3]
 80094ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	40023800 	.word	0x40023800
 80094f8:	080159ac 	.word	0x080159ac

080094fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009500:	f7ff ffdc 	bl	80094bc <HAL_RCC_GetHCLKFreq>
 8009504:	4602      	mov	r2, r0
 8009506:	4b05      	ldr	r3, [pc, #20]	@ (800951c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	0b5b      	lsrs	r3, r3, #13
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	4903      	ldr	r1, [pc, #12]	@ (8009520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009512:	5ccb      	ldrb	r3, [r1, r3]
 8009514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009518:	4618      	mov	r0, r3
 800951a:	bd80      	pop	{r7, pc}
 800951c:	40023800 	.word	0x40023800
 8009520:	080159ac 	.word	0x080159ac

08009524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	220f      	movs	r2, #15
 8009532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009534:	4b12      	ldr	r3, [pc, #72]	@ (8009580 <HAL_RCC_GetClockConfig+0x5c>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0203 	and.w	r2, r3, #3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009540:	4b0f      	ldr	r3, [pc, #60]	@ (8009580 <HAL_RCC_GetClockConfig+0x5c>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <HAL_RCC_GetClockConfig+0x5c>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009558:	4b09      	ldr	r3, [pc, #36]	@ (8009580 <HAL_RCC_GetClockConfig+0x5c>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	08db      	lsrs	r3, r3, #3
 800955e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009566:	4b07      	ldr	r3, [pc, #28]	@ (8009584 <HAL_RCC_GetClockConfig+0x60>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 020f 	and.w	r2, r3, #15
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	601a      	str	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40023800 	.word	0x40023800
 8009584:	40023c00 	.word	0x40023c00

08009588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800958c:	b0ae      	sub	sp, #184	@ 0xb8
 800958e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095ae:	4bcb      	ldr	r3, [pc, #812]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f003 030c 	and.w	r3, r3, #12
 80095b6:	2b0c      	cmp	r3, #12
 80095b8:	f200 8204 	bhi.w	80099c4 <HAL_RCC_GetSysClockFreq+0x43c>
 80095bc:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	080095f9 	.word	0x080095f9
 80095c8:	080099c5 	.word	0x080099c5
 80095cc:	080099c5 	.word	0x080099c5
 80095d0:	080099c5 	.word	0x080099c5
 80095d4:	08009601 	.word	0x08009601
 80095d8:	080099c5 	.word	0x080099c5
 80095dc:	080099c5 	.word	0x080099c5
 80095e0:	080099c5 	.word	0x080099c5
 80095e4:	08009609 	.word	0x08009609
 80095e8:	080099c5 	.word	0x080099c5
 80095ec:	080099c5 	.word	0x080099c5
 80095f0:	080099c5 	.word	0x080099c5
 80095f4:	080097f9 	.word	0x080097f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095f8:	4bb9      	ldr	r3, [pc, #740]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80095fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80095fe:	e1e5      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009600:	4bb7      	ldr	r3, [pc, #732]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8009602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009606:	e1e1      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009608:	4bb4      	ldr	r3, [pc, #720]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009614:	4bb1      	ldr	r3, [pc, #708]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d071      	beq.n	8009704 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009620:	4bae      	ldr	r3, [pc, #696]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	099b      	lsrs	r3, r3, #6
 8009626:	2200      	movs	r2, #0
 8009628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800962c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800963c:	2300      	movs	r3, #0
 800963e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009646:	4622      	mov	r2, r4
 8009648:	462b      	mov	r3, r5
 800964a:	f04f 0000 	mov.w	r0, #0
 800964e:	f04f 0100 	mov.w	r1, #0
 8009652:	0159      	lsls	r1, r3, #5
 8009654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009658:	0150      	lsls	r0, r2, #5
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4621      	mov	r1, r4
 8009660:	1a51      	subs	r1, r2, r1
 8009662:	6439      	str	r1, [r7, #64]	@ 0x40
 8009664:	4629      	mov	r1, r5
 8009666:	eb63 0301 	sbc.w	r3, r3, r1
 800966a:	647b      	str	r3, [r7, #68]	@ 0x44
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009678:	4649      	mov	r1, r9
 800967a:	018b      	lsls	r3, r1, #6
 800967c:	4641      	mov	r1, r8
 800967e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009682:	4641      	mov	r1, r8
 8009684:	018a      	lsls	r2, r1, #6
 8009686:	4641      	mov	r1, r8
 8009688:	1a51      	subs	r1, r2, r1
 800968a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800968c:	4649      	mov	r1, r9
 800968e:	eb63 0301 	sbc.w	r3, r3, r1
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80096a0:	4649      	mov	r1, r9
 80096a2:	00cb      	lsls	r3, r1, #3
 80096a4:	4641      	mov	r1, r8
 80096a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096aa:	4641      	mov	r1, r8
 80096ac:	00ca      	lsls	r2, r1, #3
 80096ae:	4610      	mov	r0, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	4622      	mov	r2, r4
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ba:	462b      	mov	r3, r5
 80096bc:	460a      	mov	r2, r1
 80096be:	eb42 0303 	adc.w	r3, r2, r3
 80096c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80096d0:	4629      	mov	r1, r5
 80096d2:	028b      	lsls	r3, r1, #10
 80096d4:	4621      	mov	r1, r4
 80096d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096da:	4621      	mov	r1, r4
 80096dc:	028a      	lsls	r2, r1, #10
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80096f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80096f4:	f7f7 fae8 	bl	8000cc8 <__aeabi_uldivmod>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4613      	mov	r3, r2
 80096fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009702:	e067      	b.n	80097d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009704:	4b75      	ldr	r3, [pc, #468]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	099b      	lsrs	r3, r3, #6
 800970a:	2200      	movs	r2, #0
 800970c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009710:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800971e:	2300      	movs	r3, #0
 8009720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009722:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	f04f 0000 	mov.w	r0, #0
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	0159      	lsls	r1, r3, #5
 8009734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009738:	0150      	lsls	r0, r2, #5
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4621      	mov	r1, r4
 8009740:	1a51      	subs	r1, r2, r1
 8009742:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009744:	4629      	mov	r1, r5
 8009746:	eb63 0301 	sbc.w	r3, r3, r1
 800974a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800974c:	f04f 0200 	mov.w	r2, #0
 8009750:	f04f 0300 	mov.w	r3, #0
 8009754:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009758:	4649      	mov	r1, r9
 800975a:	018b      	lsls	r3, r1, #6
 800975c:	4641      	mov	r1, r8
 800975e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009762:	4641      	mov	r1, r8
 8009764:	018a      	lsls	r2, r1, #6
 8009766:	4641      	mov	r1, r8
 8009768:	ebb2 0a01 	subs.w	sl, r2, r1
 800976c:	4649      	mov	r1, r9
 800976e:	eb63 0b01 	sbc.w	fp, r3, r1
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800977e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009786:	4692      	mov	sl, r2
 8009788:	469b      	mov	fp, r3
 800978a:	4623      	mov	r3, r4
 800978c:	eb1a 0303 	adds.w	r3, sl, r3
 8009790:	623b      	str	r3, [r7, #32]
 8009792:	462b      	mov	r3, r5
 8009794:	eb4b 0303 	adc.w	r3, fp, r3
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80097a6:	4629      	mov	r1, r5
 80097a8:	028b      	lsls	r3, r1, #10
 80097aa:	4621      	mov	r1, r4
 80097ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097b0:	4621      	mov	r1, r4
 80097b2:	028a      	lsls	r2, r1, #10
 80097b4:	4610      	mov	r0, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097bc:	2200      	movs	r2, #0
 80097be:	673b      	str	r3, [r7, #112]	@ 0x70
 80097c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80097c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80097c6:	f7f7 fa7f 	bl	8000cc8 <__aeabi_uldivmod>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4613      	mov	r3, r2
 80097d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097d4:	4b41      	ldr	r3, [pc, #260]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	0c1b      	lsrs	r3, r3, #16
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	3301      	adds	r3, #1
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80097e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80097f6:	e0e9      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097f8:	4b38      	ldr	r3, [pc, #224]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009800:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009804:	4b35      	ldr	r3, [pc, #212]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d069      	beq.n	80098e4 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009810:	4b32      	ldr	r3, [pc, #200]	@ (80098dc <HAL_RCC_GetSysClockFreq+0x354>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	099b      	lsrs	r3, r3, #6
 8009816:	2200      	movs	r2, #0
 8009818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800981a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800981c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800981e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009822:	663b      	str	r3, [r7, #96]	@ 0x60
 8009824:	2300      	movs	r3, #0
 8009826:	667b      	str	r3, [r7, #100]	@ 0x64
 8009828:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800982c:	4622      	mov	r2, r4
 800982e:	462b      	mov	r3, r5
 8009830:	f04f 0000 	mov.w	r0, #0
 8009834:	f04f 0100 	mov.w	r1, #0
 8009838:	0159      	lsls	r1, r3, #5
 800983a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800983e:	0150      	lsls	r0, r2, #5
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4621      	mov	r1, r4
 8009846:	1a51      	subs	r1, r2, r1
 8009848:	61b9      	str	r1, [r7, #24]
 800984a:	4629      	mov	r1, r5
 800984c:	eb63 0301 	sbc.w	r3, r3, r1
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	f04f 0200 	mov.w	r2, #0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800985e:	4659      	mov	r1, fp
 8009860:	018b      	lsls	r3, r1, #6
 8009862:	4651      	mov	r1, sl
 8009864:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009868:	4651      	mov	r1, sl
 800986a:	018a      	lsls	r2, r1, #6
 800986c:	4651      	mov	r1, sl
 800986e:	ebb2 0801 	subs.w	r8, r2, r1
 8009872:	4659      	mov	r1, fp
 8009874:	eb63 0901 	sbc.w	r9, r3, r1
 8009878:	f04f 0200 	mov.w	r2, #0
 800987c:	f04f 0300 	mov.w	r3, #0
 8009880:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009884:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009888:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800988c:	4690      	mov	r8, r2
 800988e:	4699      	mov	r9, r3
 8009890:	4623      	mov	r3, r4
 8009892:	eb18 0303 	adds.w	r3, r8, r3
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	462b      	mov	r3, r5
 800989a:	eb49 0303 	adc.w	r3, r9, r3
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80098ac:	4629      	mov	r1, r5
 80098ae:	028b      	lsls	r3, r1, #10
 80098b0:	4621      	mov	r1, r4
 80098b2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098b6:	4621      	mov	r1, r4
 80098b8:	028a      	lsls	r2, r1, #10
 80098ba:	4610      	mov	r0, r2
 80098bc:	4619      	mov	r1, r3
 80098be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098c2:	2200      	movs	r2, #0
 80098c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80098c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098cc:	f7f7 f9fc 	bl	8000cc8 <__aeabi_uldivmod>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4613      	mov	r3, r2
 80098d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098da:	e063      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0x41c>
 80098dc:	40023800 	.word	0x40023800
 80098e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098e4:	4b3d      	ldr	r3, [pc, #244]	@ (80099dc <HAL_RCC_GetSysClockFreq+0x454>)
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	099b      	lsrs	r3, r3, #6
 80098ea:	2200      	movs	r2, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	4611      	mov	r1, r2
 80098f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80098f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f6:	2300      	movs	r3, #0
 80098f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80098fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80098fe:	4642      	mov	r2, r8
 8009900:	464b      	mov	r3, r9
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f04f 0100 	mov.w	r1, #0
 800990a:	0159      	lsls	r1, r3, #5
 800990c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009910:	0150      	lsls	r0, r2, #5
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4641      	mov	r1, r8
 8009918:	1a51      	subs	r1, r2, r1
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	4649      	mov	r1, r9
 800991e:	eb63 0301 	sbc.w	r3, r3, r1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	f04f 0200 	mov.w	r2, #0
 8009928:	f04f 0300 	mov.w	r3, #0
 800992c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009930:	4659      	mov	r1, fp
 8009932:	018b      	lsls	r3, r1, #6
 8009934:	4651      	mov	r1, sl
 8009936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800993a:	4651      	mov	r1, sl
 800993c:	018a      	lsls	r2, r1, #6
 800993e:	4651      	mov	r1, sl
 8009940:	1a54      	subs	r4, r2, r1
 8009942:	4659      	mov	r1, fp
 8009944:	eb63 0501 	sbc.w	r5, r3, r1
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	00eb      	lsls	r3, r5, #3
 8009952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009956:	00e2      	lsls	r2, r4, #3
 8009958:	4614      	mov	r4, r2
 800995a:	461d      	mov	r5, r3
 800995c:	4643      	mov	r3, r8
 800995e:	18e3      	adds	r3, r4, r3
 8009960:	603b      	str	r3, [r7, #0]
 8009962:	464b      	mov	r3, r9
 8009964:	eb45 0303 	adc.w	r3, r5, r3
 8009968:	607b      	str	r3, [r7, #4]
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009976:	4629      	mov	r1, r5
 8009978:	028b      	lsls	r3, r1, #10
 800997a:	4621      	mov	r1, r4
 800997c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009980:	4621      	mov	r1, r4
 8009982:	028a      	lsls	r2, r1, #10
 8009984:	4610      	mov	r0, r2
 8009986:	4619      	mov	r1, r3
 8009988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800998c:	2200      	movs	r2, #0
 800998e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009990:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009992:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009996:	f7f7 f997 	bl	8000cc8 <__aeabi_uldivmod>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4613      	mov	r3, r2
 80099a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80099a4:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <HAL_RCC_GetSysClockFreq+0x454>)
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	0f1b      	lsrs	r3, r3, #28
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80099b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80099be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80099c2:	e003      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099c4:	4b06      	ldr	r3, [pc, #24]	@ (80099e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80099c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80099ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	37b8      	adds	r7, #184	@ 0xb8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099da:	bf00      	nop
 80099dc:	40023800 	.word	0x40023800
 80099e0:	00f42400 	.word	0x00f42400

080099e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e28d      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 8083 	beq.w	8009b0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a04:	4b94      	ldr	r3, [pc, #592]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 030c 	and.w	r3, r3, #12
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d019      	beq.n	8009a44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009a10:	4b91      	ldr	r3, [pc, #580]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d106      	bne.n	8009a2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a28:	d00c      	beq.n	8009a44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009a32:	2b0c      	cmp	r3, #12
 8009a34:	d112      	bne.n	8009a5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a36:	4b88      	ldr	r3, [pc, #544]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a42:	d10b      	bne.n	8009a5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a44:	4b84      	ldr	r3, [pc, #528]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d05b      	beq.n	8009b08 <HAL_RCC_OscConfig+0x124>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d157      	bne.n	8009b08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e25a      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a64:	d106      	bne.n	8009a74 <HAL_RCC_OscConfig+0x90>
 8009a66:	4b7c      	ldr	r3, [pc, #496]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a7b      	ldr	r2, [pc, #492]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e01d      	b.n	8009ab0 <HAL_RCC_OscConfig+0xcc>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a7c:	d10c      	bne.n	8009a98 <HAL_RCC_OscConfig+0xb4>
 8009a7e:	4b76      	ldr	r3, [pc, #472]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a75      	ldr	r2, [pc, #468]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	4b73      	ldr	r3, [pc, #460]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a72      	ldr	r2, [pc, #456]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	e00b      	b.n	8009ab0 <HAL_RCC_OscConfig+0xcc>
 8009a98:	4b6f      	ldr	r3, [pc, #444]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d013      	beq.n	8009ae0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab8:	f7fa fc48 	bl	800434c <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ac0:	f7fa fc44 	bl	800434c <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b64      	cmp	r3, #100	@ 0x64
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e21f      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ad2:	4b61      	ldr	r3, [pc, #388]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCC_OscConfig+0xdc>
 8009ade:	e014      	b.n	8009b0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae0:	f7fa fc34 	bl	800434c <HAL_GetTick>
 8009ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ae8:	f7fa fc30 	bl	800434c <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b64      	cmp	r3, #100	@ 0x64
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e20b      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009afa:	4b57      	ldr	r3, [pc, #348]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f0      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x104>
 8009b06:	e000      	b.n	8009b0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d06f      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b16:	4b50      	ldr	r3, [pc, #320]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f003 030c 	and.w	r3, r3, #12
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d017      	beq.n	8009b52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009b22:	4b4d      	ldr	r3, [pc, #308]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d105      	bne.n	8009b3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b3a:	4b47      	ldr	r3, [pc, #284]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009b42:	2b0c      	cmp	r3, #12
 8009b44:	d11c      	bne.n	8009b80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b46:	4b44      	ldr	r3, [pc, #272]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d116      	bne.n	8009b80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b52:	4b41      	ldr	r3, [pc, #260]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d005      	beq.n	8009b6a <HAL_RCC_OscConfig+0x186>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d001      	beq.n	8009b6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e1d3      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4937      	ldr	r1, [pc, #220]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b7e:	e03a      	b.n	8009bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d020      	beq.n	8009bca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b88:	4b34      	ldr	r3, [pc, #208]	@ (8009c5c <HAL_RCC_OscConfig+0x278>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8e:	f7fa fbdd 	bl	800434c <HAL_GetTick>
 8009b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b94:	e008      	b.n	8009ba8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b96:	f7fa fbd9 	bl	800434c <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e1b4      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0f0      	beq.n	8009b96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bb4:	4b28      	ldr	r3, [pc, #160]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	4925      	ldr	r1, [pc, #148]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	600b      	str	r3, [r1, #0]
 8009bc8:	e015      	b.n	8009bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bca:	4b24      	ldr	r3, [pc, #144]	@ (8009c5c <HAL_RCC_OscConfig+0x278>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd0:	f7fa fbbc 	bl	800434c <HAL_GetTick>
 8009bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bd8:	f7fa fbb8 	bl	800434c <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e193      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bea:	4b1b      	ldr	r3, [pc, #108]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f0      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d036      	beq.n	8009c70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d016      	beq.n	8009c38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c0a:	4b15      	ldr	r3, [pc, #84]	@ (8009c60 <HAL_RCC_OscConfig+0x27c>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c10:	f7fa fb9c 	bl	800434c <HAL_GetTick>
 8009c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c18:	f7fa fb98 	bl	800434c <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e173      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c58 <HAL_RCC_OscConfig+0x274>)
 8009c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0f0      	beq.n	8009c18 <HAL_RCC_OscConfig+0x234>
 8009c36:	e01b      	b.n	8009c70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c38:	4b09      	ldr	r3, [pc, #36]	@ (8009c60 <HAL_RCC_OscConfig+0x27c>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c3e:	f7fa fb85 	bl	800434c <HAL_GetTick>
 8009c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c44:	e00e      	b.n	8009c64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c46:	f7fa fb81 	bl	800434c <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d907      	bls.n	8009c64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e15c      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	42470000 	.word	0x42470000
 8009c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c64:	4b8a      	ldr	r3, [pc, #552]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ea      	bne.n	8009c46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 8097 	beq.w	8009dac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c82:	4b83      	ldr	r3, [pc, #524]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10f      	bne.n	8009cae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60bb      	str	r3, [r7, #8]
 8009c92:	4b7f      	ldr	r3, [pc, #508]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c96:	4a7e      	ldr	r2, [pc, #504]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ca6:	60bb      	str	r3, [r7, #8]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009caa:	2301      	movs	r3, #1
 8009cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cae:	4b79      	ldr	r3, [pc, #484]	@ (8009e94 <HAL_RCC_OscConfig+0x4b0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d118      	bne.n	8009cec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cba:	4b76      	ldr	r3, [pc, #472]	@ (8009e94 <HAL_RCC_OscConfig+0x4b0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a75      	ldr	r2, [pc, #468]	@ (8009e94 <HAL_RCC_OscConfig+0x4b0>)
 8009cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cc6:	f7fa fb41 	bl	800434c <HAL_GetTick>
 8009cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ccc:	e008      	b.n	8009ce0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cce:	f7fa fb3d 	bl	800434c <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e118      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8009e94 <HAL_RCC_OscConfig+0x4b0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0f0      	beq.n	8009cce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d106      	bne.n	8009d02 <HAL_RCC_OscConfig+0x31e>
 8009cf4:	4b66      	ldr	r3, [pc, #408]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf8:	4a65      	ldr	r2, [pc, #404]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d00:	e01c      	b.n	8009d3c <HAL_RCC_OscConfig+0x358>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d10c      	bne.n	8009d24 <HAL_RCC_OscConfig+0x340>
 8009d0a:	4b61      	ldr	r3, [pc, #388]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d0e:	4a60      	ldr	r2, [pc, #384]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d10:	f043 0304 	orr.w	r3, r3, #4
 8009d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d16:	4b5e      	ldr	r3, [pc, #376]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d1c:	f043 0301 	orr.w	r3, r3, #1
 8009d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d22:	e00b      	b.n	8009d3c <HAL_RCC_OscConfig+0x358>
 8009d24:	4b5a      	ldr	r3, [pc, #360]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d28:	4a59      	ldr	r2, [pc, #356]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d2a:	f023 0301 	bic.w	r3, r3, #1
 8009d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d30:	4b57      	ldr	r3, [pc, #348]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d34:	4a56      	ldr	r2, [pc, #344]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d36:	f023 0304 	bic.w	r3, r3, #4
 8009d3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d015      	beq.n	8009d70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d44:	f7fa fb02 	bl	800434c <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d4a:	e00a      	b.n	8009d62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d4c:	f7fa fafe 	bl	800434c <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e0d7      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d62:	4b4b      	ldr	r3, [pc, #300]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0ee      	beq.n	8009d4c <HAL_RCC_OscConfig+0x368>
 8009d6e:	e014      	b.n	8009d9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d70:	f7fa faec 	bl	800434c <HAL_GetTick>
 8009d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d76:	e00a      	b.n	8009d8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d78:	f7fa fae8 	bl	800434c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d901      	bls.n	8009d8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e0c1      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d8e:	4b40      	ldr	r3, [pc, #256]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1ee      	bne.n	8009d78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d105      	bne.n	8009dac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009da0:	4b3b      	ldr	r3, [pc, #236]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da4:	4a3a      	ldr	r2, [pc, #232]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009daa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80ad 	beq.w	8009f10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009db6:	4b36      	ldr	r3, [pc, #216]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 030c 	and.w	r3, r3, #12
 8009dbe:	2b08      	cmp	r3, #8
 8009dc0:	d060      	beq.n	8009e84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d145      	bne.n	8009e56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dca:	4b33      	ldr	r3, [pc, #204]	@ (8009e98 <HAL_RCC_OscConfig+0x4b4>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd0:	f7fa fabc 	bl	800434c <HAL_GetTick>
 8009dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dd8:	f7fa fab8 	bl	800434c <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e093      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dea:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f0      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69da      	ldr	r2, [r3, #28]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e04:	019b      	lsls	r3, r3, #6
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	041b      	lsls	r3, r3, #16
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	061b      	lsls	r3, r3, #24
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e20:	071b      	lsls	r3, r3, #28
 8009e22:	491b      	ldr	r1, [pc, #108]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e28:	4b1b      	ldr	r3, [pc, #108]	@ (8009e98 <HAL_RCC_OscConfig+0x4b4>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2e:	f7fa fa8d 	bl	800434c <HAL_GetTick>
 8009e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e34:	e008      	b.n	8009e48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e36:	f7fa fa89 	bl	800434c <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e064      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e48:	4b11      	ldr	r3, [pc, #68]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0f0      	beq.n	8009e36 <HAL_RCC_OscConfig+0x452>
 8009e54:	e05c      	b.n	8009f10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e56:	4b10      	ldr	r3, [pc, #64]	@ (8009e98 <HAL_RCC_OscConfig+0x4b4>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7fa fa76 	bl	800434c <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e64:	f7fa fa72 	bl	800434c <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e04d      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e76:	4b06      	ldr	r3, [pc, #24]	@ (8009e90 <HAL_RCC_OscConfig+0x4ac>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x480>
 8009e82:	e045      	b.n	8009f10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d107      	bne.n	8009e9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e040      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
 8009e90:	40023800 	.word	0x40023800
 8009e94:	40007000 	.word	0x40007000
 8009e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8009f1c <HAL_RCC_OscConfig+0x538>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d030      	beq.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d129      	bne.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d122      	bne.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d119      	bne.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d10f      	bne.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d107      	bne.n	8009f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	40023800 	.word	0x40023800

08009f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e07b      	b.n	800a02a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d108      	bne.n	8009f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f42:	d009      	beq.n	8009f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	61da      	str	r2, [r3, #28]
 8009f4a:	e005      	b.n	8009f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7f9 fdf6 	bl	8003b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fdc:	ea42 0103 	orr.w	r1, r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	f003 0104 	and.w	r1, r3, #4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffe:	f003 0210 	and.w	r2, r3, #16
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b088      	sub	sp, #32
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4613      	mov	r3, r2
 800a040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_SPI_Transmit+0x22>
 800a050:	2302      	movs	r3, #2
 800a052:	e126      	b.n	800a2a2 <HAL_SPI_Transmit+0x270>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a05c:	f7fa f976 	bl	800434c <HAL_GetTick>
 800a060:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d002      	beq.n	800a078 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a072:	2302      	movs	r3, #2
 800a074:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a076:	e10b      	b.n	800a290 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <HAL_SPI_Transmit+0x52>
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a088:	e102      	b.n	800a290 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	88fa      	ldrh	r2, [r7, #6]
 800a0a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	88fa      	ldrh	r2, [r7, #6]
 800a0a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0d0:	d10f      	bne.n	800a0f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fc:	2b40      	cmp	r3, #64	@ 0x40
 800a0fe:	d007      	beq.n	800a110 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a10e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a118:	d14b      	bne.n	800a1b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_SPI_Transmit+0xf6>
 800a122:	8afb      	ldrh	r3, [r7, #22]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d13e      	bne.n	800a1a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12c:	881a      	ldrh	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a138:	1c9a      	adds	r2, r3, #2
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a14c:	e02b      	b.n	800a1a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d112      	bne.n	800a182 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a160:	881a      	ldrh	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16c:	1c9a      	adds	r2, r3, #2
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a176:	b29b      	uxth	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a180:	e011      	b.n	800a1a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a182:	f7fa f8e3 	bl	800434c <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d803      	bhi.n	800a19a <HAL_SPI_Transmit+0x168>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d102      	bne.n	800a1a0 <HAL_SPI_Transmit+0x16e>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a1a4:	e074      	b.n	800a290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1ce      	bne.n	800a14e <HAL_SPI_Transmit+0x11c>
 800a1b0:	e04c      	b.n	800a24c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <HAL_SPI_Transmit+0x18e>
 800a1ba:	8afb      	ldrh	r3, [r7, #22]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d140      	bne.n	800a242 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a1e6:	e02c      	b.n	800a242 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d113      	bne.n	800a21e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	7812      	ldrb	r2, [r2, #0]
 800a202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a21c:	e011      	b.n	800a242 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a21e:	f7fa f895 	bl	800434c <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d803      	bhi.n	800a236 <HAL_SPI_Transmit+0x204>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d102      	bne.n	800a23c <HAL_SPI_Transmit+0x20a>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a240:	e026      	b.n	800a290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a246:	b29b      	uxth	r3, r3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1cd      	bne.n	800a1e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fa55 	bl	800a700 <SPI_EndRxTxTransaction>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2220      	movs	r2, #32
 800a260:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a26a:	2300      	movs	r3, #0
 800a26c:	613b      	str	r3, [r7, #16]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	77fb      	strb	r3, [r7, #31]
 800a28c:	e000      	b.n	800a290 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a28e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a2a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3720      	adds	r7, #32
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b08c      	sub	sp, #48	@ 0x30
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x26>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e18a      	b.n	800a5e6 <HAL_SPI_TransmitReceive+0x33c>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2d8:	f7fa f838 	bl	800434c <HAL_GetTick>
 800a2dc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a2ee:	887b      	ldrh	r3, [r7, #2]
 800a2f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d00f      	beq.n	800a31a <HAL_SPI_TransmitReceive+0x70>
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a300:	d107      	bne.n	800a312 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <HAL_SPI_TransmitReceive+0x68>
 800a30a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a30e:	2b04      	cmp	r3, #4
 800a310:	d003      	beq.n	800a31a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a312:	2302      	movs	r3, #2
 800a314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a318:	e15b      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <HAL_SPI_TransmitReceive+0x82>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <HAL_SPI_TransmitReceive+0x82>
 800a326:	887b      	ldrh	r3, [r7, #2]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a332:	e14e      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d003      	beq.n	800a348 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2205      	movs	r2, #5
 800a344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	887a      	ldrh	r2, [r7, #2]
 800a358:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	887a      	ldrh	r2, [r7, #2]
 800a35e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	887a      	ldrh	r2, [r7, #2]
 800a36a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	887a      	ldrh	r2, [r7, #2]
 800a370:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a388:	2b40      	cmp	r3, #64	@ 0x40
 800a38a:	d007      	beq.n	800a39c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a39a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3a4:	d178      	bne.n	800a498 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <HAL_SPI_TransmitReceive+0x10a>
 800a3ae:	8b7b      	ldrh	r3, [r7, #26]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d166      	bne.n	800a482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b8:	881a      	ldrh	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c4:	1c9a      	adds	r2, r3, #2
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3d8:	e053      	b.n	800a482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d11b      	bne.n	800a420 <HAL_SPI_TransmitReceive+0x176>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d016      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x176>
 800a3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d113      	bne.n	800a420 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3fc:	881a      	ldrh	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a408:	1c9a      	adds	r2, r3, #2
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d119      	bne.n	800a462 <HAL_SPI_TransmitReceive+0x1b8>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d014      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a442:	b292      	uxth	r2, r2
 800a444:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44a:	1c9a      	adds	r2, r3, #2
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a45e:	2301      	movs	r3, #1
 800a460:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a462:	f7f9 ff73 	bl	800434c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a46e:	429a      	cmp	r2, r3
 800a470:	d807      	bhi.n	800a482 <HAL_SPI_TransmitReceive+0x1d8>
 800a472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d003      	beq.n	800a482 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a480:	e0a7      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1a6      	bne.n	800a3da <HAL_SPI_TransmitReceive+0x130>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a490:	b29b      	uxth	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1a1      	bne.n	800a3da <HAL_SPI_TransmitReceive+0x130>
 800a496:	e07c      	b.n	800a592 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <HAL_SPI_TransmitReceive+0x1fc>
 800a4a0:	8b7b      	ldrh	r3, [r7, #26]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d16b      	bne.n	800a57e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	330c      	adds	r3, #12
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4cc:	e057      	b.n	800a57e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d11c      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x26c>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d017      	beq.n	800a516 <HAL_SPI_TransmitReceive+0x26c>
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d114      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	330c      	adds	r3, #12
 800a4f6:	7812      	ldrb	r2, [r2, #0]
 800a4f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b01      	cmp	r3, #1
 800a522:	d119      	bne.n	800a558 <HAL_SPI_TransmitReceive+0x2ae>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68da      	ldr	r2, [r3, #12]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a554:	2301      	movs	r3, #1
 800a556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a558:	f7f9 fef8 	bl	800434c <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a564:	429a      	cmp	r2, r3
 800a566:	d803      	bhi.n	800a570 <HAL_SPI_TransmitReceive+0x2c6>
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	d102      	bne.n	800a576 <HAL_SPI_TransmitReceive+0x2cc>
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	d103      	bne.n	800a57e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a57c:	e029      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a582:	b29b      	uxth	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1a2      	bne.n	800a4ce <HAL_SPI_TransmitReceive+0x224>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d19d      	bne.n	800a4ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 f8b2 	bl	800a700 <SPI_EndRxTxTransaction>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d006      	beq.n	800a5b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a5ae:	e010      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10b      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	e000      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a5d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a5e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3730      	adds	r7, #48	@ 0x30
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a600:	f7f9 fea4 	bl	800434c <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a610:	f7f9 fe9c 	bl	800434c <HAL_GetTick>
 800a614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a616:	4b39      	ldr	r3, [pc, #228]	@ (800a6fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	015b      	lsls	r3, r3, #5
 800a61c:	0d1b      	lsrs	r3, r3, #20
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a626:	e054      	b.n	800a6d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d050      	beq.n	800a6d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a630:	f7f9 fe8c 	bl	800434c <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d902      	bls.n	800a646 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d13d      	bne.n	800a6c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a65e:	d111      	bne.n	800a684 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a668:	d004      	beq.n	800a674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a672:	d107      	bne.n	800a684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68c:	d10f      	bne.n	800a6ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e017      	b.n	800a6f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	bf0c      	ite	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	2300      	movne	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d19b      	bne.n	800a628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000004 	.word	0x20000004

0800a700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a70c:	4b1b      	ldr	r3, [pc, #108]	@ (800a77c <SPI_EndRxTxTransaction+0x7c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1b      	ldr	r2, [pc, #108]	@ (800a780 <SPI_EndRxTxTransaction+0x80>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	0d5b      	lsrs	r3, r3, #21
 800a718:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a72a:	d112      	bne.n	800a752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	2180      	movs	r1, #128	@ 0x80
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff ff5a 	bl	800a5f0 <SPI_WaitFlagStateUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a746:	f043 0220 	orr.w	r2, r3, #32
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e00f      	b.n	800a772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a768:	2b80      	cmp	r3, #128	@ 0x80
 800a76a:	d0f2      	beq.n	800a752 <SPI_EndRxTxTransaction+0x52>
 800a76c:	e000      	b.n	800a770 <SPI_EndRxTxTransaction+0x70>
        break;
 800a76e:	bf00      	nop
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000004 	.word	0x20000004
 800a780:	165e9f81 	.word	0x165e9f81

0800a784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e041      	b.n	800a81a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f9 fa22 	bl	8003bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 fcd8 	bl	800b178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b01      	cmp	r3, #1
 800a836:	d001      	beq.n	800a83c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e046      	b.n	800a8ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a23      	ldr	r2, [pc, #140]	@ (800a8d8 <HAL_TIM_Base_Start+0xb4>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d022      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a856:	d01d      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a1f      	ldr	r2, [pc, #124]	@ (800a8dc <HAL_TIM_Base_Start+0xb8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d018      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e0 <HAL_TIM_Base_Start+0xbc>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a1c      	ldr	r2, [pc, #112]	@ (800a8e4 <HAL_TIM_Base_Start+0xc0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00e      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e8 <HAL_TIM_Base_Start+0xc4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d009      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a19      	ldr	r2, [pc, #100]	@ (800a8ec <HAL_TIM_Base_Start+0xc8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_TIM_Base_Start+0x70>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a18      	ldr	r2, [pc, #96]	@ (800a8f0 <HAL_TIM_Base_Start+0xcc>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d111      	bne.n	800a8b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b06      	cmp	r3, #6
 800a8a4:	d010      	beq.n	800a8c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f042 0201 	orr.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b6:	e007      	b.n	800a8c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f042 0201 	orr.w	r2, r2, #1
 800a8c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	40010000 	.word	0x40010000
 800a8dc:	40000400 	.word	0x40000400
 800a8e0:	40000800 	.word	0x40000800
 800a8e4:	40000c00 	.word	0x40000c00
 800a8e8:	40010400 	.word	0x40010400
 800a8ec:	40014000 	.word	0x40014000
 800a8f0:	40001800 	.word	0x40001800

0800a8f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b01      	cmp	r3, #1
 800a906:	d001      	beq.n	800a90c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e04e      	b.n	800a9aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a23      	ldr	r2, [pc, #140]	@ (800a9b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d022      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a936:	d01d      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1f      	ldr	r2, [pc, #124]	@ (800a9bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d018      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a1e      	ldr	r2, [pc, #120]	@ (800a9c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d013      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a1c      	ldr	r2, [pc, #112]	@ (800a9c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00e      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d009      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a19      	ldr	r2, [pc, #100]	@ (800a9cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x80>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d111      	bne.n	800a998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b06      	cmp	r3, #6
 800a984:	d010      	beq.n	800a9a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f042 0201 	orr.w	r2, r2, #1
 800a994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a996:	e007      	b.n	800a9a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	40010000 	.word	0x40010000
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800
 800a9c4:	40000c00 	.word	0x40000c00
 800a9c8:	40010400 	.word	0x40010400
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40001800 	.word	0x40001800

0800a9d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e041      	b.n	800aa6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7f9 f930 	bl	8003c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f000 fbb0 	bl	800b178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
	...

0800aa74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d109      	bne.n	800aa98 <HAL_TIM_PWM_Start+0x24>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	e022      	b.n	800aade <HAL_TIM_PWM_Start+0x6a>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	d109      	bne.n	800aab2 <HAL_TIM_PWM_Start+0x3e>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	bf14      	ite	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	2300      	moveq	r3, #0
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	e015      	b.n	800aade <HAL_TIM_PWM_Start+0x6a>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d109      	bne.n	800aacc <HAL_TIM_PWM_Start+0x58>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	bf14      	ite	ne
 800aac4:	2301      	movne	r3, #1
 800aac6:	2300      	moveq	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	e008      	b.n	800aade <HAL_TIM_PWM_Start+0x6a>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	bf14      	ite	ne
 800aad8:	2301      	movne	r3, #1
 800aada:	2300      	moveq	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e07c      	b.n	800abe0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <HAL_TIM_PWM_Start+0x82>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaf4:	e013      	b.n	800ab1e <HAL_TIM_PWM_Start+0xaa>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d104      	bne.n	800ab06 <HAL_TIM_PWM_Start+0x92>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab04:	e00b      	b.n	800ab1e <HAL_TIM_PWM_Start+0xaa>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d104      	bne.n	800ab16 <HAL_TIM_PWM_Start+0xa2>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab14:	e003      	b.n	800ab1e <HAL_TIM_PWM_Start+0xaa>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2201      	movs	r2, #1
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fe10 	bl	800b74c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a2d      	ldr	r2, [pc, #180]	@ (800abe8 <HAL_TIM_PWM_Start+0x174>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d004      	beq.n	800ab40 <HAL_TIM_PWM_Start+0xcc>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a2c      	ldr	r2, [pc, #176]	@ (800abec <HAL_TIM_PWM_Start+0x178>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d101      	bne.n	800ab44 <HAL_TIM_PWM_Start+0xd0>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e000      	b.n	800ab46 <HAL_TIM_PWM_Start+0xd2>
 800ab44:	2300      	movs	r3, #0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d007      	beq.n	800ab5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a22      	ldr	r2, [pc, #136]	@ (800abe8 <HAL_TIM_PWM_Start+0x174>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d022      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6c:	d01d      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a1f      	ldr	r2, [pc, #124]	@ (800abf0 <HAL_TIM_PWM_Start+0x17c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d018      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a1d      	ldr	r2, [pc, #116]	@ (800abf4 <HAL_TIM_PWM_Start+0x180>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a1c      	ldr	r2, [pc, #112]	@ (800abf8 <HAL_TIM_PWM_Start+0x184>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00e      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a16      	ldr	r2, [pc, #88]	@ (800abec <HAL_TIM_PWM_Start+0x178>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d009      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a18      	ldr	r2, [pc, #96]	@ (800abfc <HAL_TIM_PWM_Start+0x188>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d004      	beq.n	800abaa <HAL_TIM_PWM_Start+0x136>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a16      	ldr	r2, [pc, #88]	@ (800ac00 <HAL_TIM_PWM_Start+0x18c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d111      	bne.n	800abce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0307 	and.w	r3, r3, #7
 800abb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b06      	cmp	r3, #6
 800abba:	d010      	beq.n	800abde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abcc:	e007      	b.n	800abde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f042 0201 	orr.w	r2, r2, #1
 800abdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40010000 	.word	0x40010000
 800abec:	40010400 	.word	0x40010400
 800abf0:	40000400 	.word	0x40000400
 800abf4:	40000800 	.word	0x40000800
 800abf8:	40000c00 	.word	0x40000c00
 800abfc:	40014000 	.word	0x40014000
 800ac00:	40001800 	.word	0x40001800

0800ac04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d122      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d11b      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0202 	mvn.w	r2, #2
 800ac30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fa77 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800ac4c:	e005      	b.n	800ac5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fa69 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fa7a 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d122      	bne.n	800acb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d11b      	bne.n	800acb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0204 	mvn.w	r2, #4
 800ac84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa4d 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800aca0:	e005      	b.n	800acae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fa3f 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fa50 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0308 	and.w	r3, r3, #8
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d122      	bne.n	800ad08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b08      	cmp	r3, #8
 800acce:	d11b      	bne.n	800ad08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f06f 0208 	mvn.w	r2, #8
 800acd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2204      	movs	r2, #4
 800acde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa23 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800acf4:	e005      	b.n	800ad02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa15 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fa26 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f003 0310 	and.w	r3, r3, #16
 800ad12:	2b10      	cmp	r3, #16
 800ad14:	d122      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d11b      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0210 	mvn.w	r2, #16
 800ad2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2208      	movs	r2, #8
 800ad32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9f9 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800ad48:	e005      	b.n	800ad56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9eb 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f9fc 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10e      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d107      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0201 	mvn.w	r2, #1
 800ad80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7f8 fb88 	bl	8003498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad92:	2b80      	cmp	r3, #128	@ 0x80
 800ad94:	d10e      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ada0:	2b80      	cmp	r3, #128	@ 0x80
 800ada2:	d107      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800adac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fdca 	bl	800b948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adbe:	2b40      	cmp	r3, #64	@ 0x40
 800adc0:	d10e      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adcc:	2b40      	cmp	r3, #64	@ 0x40
 800adce:	d107      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f9c1 	bl	800b162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b20      	cmp	r3, #32
 800adec:	d10e      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d107      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0220 	mvn.w	r2, #32
 800ae04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fd94 	bl	800b934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e0ae      	b.n	800af90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b0c      	cmp	r3, #12
 800ae3e:	f200 809f 	bhi.w	800af80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ae42:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae7d 	.word	0x0800ae7d
 800ae4c:	0800af81 	.word	0x0800af81
 800ae50:	0800af81 	.word	0x0800af81
 800ae54:	0800af81 	.word	0x0800af81
 800ae58:	0800aebd 	.word	0x0800aebd
 800ae5c:	0800af81 	.word	0x0800af81
 800ae60:	0800af81 	.word	0x0800af81
 800ae64:	0800af81 	.word	0x0800af81
 800ae68:	0800aeff 	.word	0x0800aeff
 800ae6c:	0800af81 	.word	0x0800af81
 800ae70:	0800af81 	.word	0x0800af81
 800ae74:	0800af81 	.word	0x0800af81
 800ae78:	0800af3f 	.word	0x0800af3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fa18 	bl	800b2b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0208 	orr.w	r2, r2, #8
 800ae96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	699a      	ldr	r2, [r3, #24]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0204 	bic.w	r2, r2, #4
 800aea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6999      	ldr	r1, [r3, #24]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	691a      	ldr	r2, [r3, #16]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	619a      	str	r2, [r3, #24]
      break;
 800aeba:	e064      	b.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fa68 	bl	800b398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	699a      	ldr	r2, [r3, #24]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6999      	ldr	r1, [r3, #24]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	021a      	lsls	r2, r3, #8
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	619a      	str	r2, [r3, #24]
      break;
 800aefc:	e043      	b.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68b9      	ldr	r1, [r7, #8]
 800af04:	4618      	mov	r0, r3
 800af06:	f000 fabd 	bl	800b484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69da      	ldr	r2, [r3, #28]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f042 0208 	orr.w	r2, r2, #8
 800af18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69da      	ldr	r2, [r3, #28]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0204 	bic.w	r2, r2, #4
 800af28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	69d9      	ldr	r1, [r3, #28]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	61da      	str	r2, [r3, #28]
      break;
 800af3c:	e023      	b.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fb11 	bl	800b56c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69d9      	ldr	r1, [r3, #28]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	021a      	lsls	r2, r3, #8
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	61da      	str	r2, [r3, #28]
      break;
 800af7e:	e002      	b.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	75fb      	strb	r3, [r7, #23]
      break;
 800af84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_TIM_ConfigClockSource+0x1c>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e0b4      	b.n	800b11e <HAL_TIM_ConfigClockSource+0x186>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2202      	movs	r2, #2
 800afc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800afd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afec:	d03e      	beq.n	800b06c <HAL_TIM_ConfigClockSource+0xd4>
 800afee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aff2:	f200 8087 	bhi.w	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800aff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800affa:	f000 8086 	beq.w	800b10a <HAL_TIM_ConfigClockSource+0x172>
 800affe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b002:	d87f      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b004:	2b70      	cmp	r3, #112	@ 0x70
 800b006:	d01a      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0xa6>
 800b008:	2b70      	cmp	r3, #112	@ 0x70
 800b00a:	d87b      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b00c:	2b60      	cmp	r3, #96	@ 0x60
 800b00e:	d050      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x11a>
 800b010:	2b60      	cmp	r3, #96	@ 0x60
 800b012:	d877      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b014:	2b50      	cmp	r3, #80	@ 0x50
 800b016:	d03c      	beq.n	800b092 <HAL_TIM_ConfigClockSource+0xfa>
 800b018:	2b50      	cmp	r3, #80	@ 0x50
 800b01a:	d873      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b01c:	2b40      	cmp	r3, #64	@ 0x40
 800b01e:	d058      	beq.n	800b0d2 <HAL_TIM_ConfigClockSource+0x13a>
 800b020:	2b40      	cmp	r3, #64	@ 0x40
 800b022:	d86f      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b024:	2b30      	cmp	r3, #48	@ 0x30
 800b026:	d064      	beq.n	800b0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800b028:	2b30      	cmp	r3, #48	@ 0x30
 800b02a:	d86b      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	d060      	beq.n	800b0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800b030:	2b20      	cmp	r3, #32
 800b032:	d867      	bhi.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d05c      	beq.n	800b0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800b038:	2b10      	cmp	r3, #16
 800b03a:	d05a      	beq.n	800b0f2 <HAL_TIM_ConfigClockSource+0x15a>
 800b03c:	e062      	b.n	800b104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	6899      	ldr	r1, [r3, #8]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f000 fb5d 	bl	800b70c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	609a      	str	r2, [r3, #8]
      break;
 800b06a:	e04f      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	6899      	ldr	r1, [r3, #8]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f000 fb46 	bl	800b70c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689a      	ldr	r2, [r3, #8]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b08e:	609a      	str	r2, [r3, #8]
      break;
 800b090:	e03c      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	6859      	ldr	r1, [r3, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f000 faba 	bl	800b618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2150      	movs	r1, #80	@ 0x50
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fb13 	bl	800b6d6 <TIM_ITRx_SetConfig>
      break;
 800b0b0:	e02c      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	6859      	ldr	r1, [r3, #4]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f000 fad9 	bl	800b676 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2160      	movs	r1, #96	@ 0x60
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fb03 	bl	800b6d6 <TIM_ITRx_SetConfig>
      break;
 800b0d0:	e01c      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6859      	ldr	r1, [r3, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f000 fa9a 	bl	800b618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2140      	movs	r1, #64	@ 0x40
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 faf3 	bl	800b6d6 <TIM_ITRx_SetConfig>
      break;
 800b0f0:	e00c      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f000 faea 	bl	800b6d6 <TIM_ITRx_SetConfig>
      break;
 800b102:	e003      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	73fb      	strb	r3, [r7, #15]
      break;
 800b108:	e000      	b.n	800b10c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b10a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b16a:	bf00      	nop
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
	...

0800b178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a40      	ldr	r2, [pc, #256]	@ (800b28c <TIM_Base_SetConfig+0x114>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d013      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b196:	d00f      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a3d      	ldr	r2, [pc, #244]	@ (800b290 <TIM_Base_SetConfig+0x118>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00b      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a3c      	ldr	r2, [pc, #240]	@ (800b294 <TIM_Base_SetConfig+0x11c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d007      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a3b      	ldr	r2, [pc, #236]	@ (800b298 <TIM_Base_SetConfig+0x120>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d003      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a3a      	ldr	r2, [pc, #232]	@ (800b29c <TIM_Base_SetConfig+0x124>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d108      	bne.n	800b1ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a2f      	ldr	r2, [pc, #188]	@ (800b28c <TIM_Base_SetConfig+0x114>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d02b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d8:	d027      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a2c      	ldr	r2, [pc, #176]	@ (800b290 <TIM_Base_SetConfig+0x118>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d023      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a2b      	ldr	r2, [pc, #172]	@ (800b294 <TIM_Base_SetConfig+0x11c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d01f      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a2a      	ldr	r2, [pc, #168]	@ (800b298 <TIM_Base_SetConfig+0x120>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a29      	ldr	r2, [pc, #164]	@ (800b29c <TIM_Base_SetConfig+0x124>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d017      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a28      	ldr	r2, [pc, #160]	@ (800b2a0 <TIM_Base_SetConfig+0x128>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d013      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a27      	ldr	r2, [pc, #156]	@ (800b2a4 <TIM_Base_SetConfig+0x12c>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00f      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a26      	ldr	r2, [pc, #152]	@ (800b2a8 <TIM_Base_SetConfig+0x130>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a25      	ldr	r2, [pc, #148]	@ (800b2ac <TIM_Base_SetConfig+0x134>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d007      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a24      	ldr	r2, [pc, #144]	@ (800b2b0 <TIM_Base_SetConfig+0x138>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d003      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a23      	ldr	r2, [pc, #140]	@ (800b2b4 <TIM_Base_SetConfig+0x13c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d108      	bne.n	800b23c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a0a      	ldr	r2, [pc, #40]	@ (800b28c <TIM_Base_SetConfig+0x114>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d003      	beq.n	800b270 <TIM_Base_SetConfig+0xf8>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a0c      	ldr	r2, [pc, #48]	@ (800b29c <TIM_Base_SetConfig+0x124>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d103      	bne.n	800b278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	615a      	str	r2, [r3, #20]
}
 800b27e:	bf00      	nop
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	40010000 	.word	0x40010000
 800b290:	40000400 	.word	0x40000400
 800b294:	40000800 	.word	0x40000800
 800b298:	40000c00 	.word	0x40000c00
 800b29c:	40010400 	.word	0x40010400
 800b2a0:	40014000 	.word	0x40014000
 800b2a4:	40014400 	.word	0x40014400
 800b2a8:	40014800 	.word	0x40014800
 800b2ac:	40001800 	.word	0x40001800
 800b2b0:	40001c00 	.word	0x40001c00
 800b2b4:	40002000 	.word	0x40002000

0800b2b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 0201 	bic.w	r2, r3, #1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f023 0302 	bic.w	r3, r3, #2
 800b300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a20      	ldr	r2, [pc, #128]	@ (800b390 <TIM_OC1_SetConfig+0xd8>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d003      	beq.n	800b31c <TIM_OC1_SetConfig+0x64>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a1f      	ldr	r2, [pc, #124]	@ (800b394 <TIM_OC1_SetConfig+0xdc>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d10c      	bne.n	800b336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f023 0308 	bic.w	r3, r3, #8
 800b322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f023 0304 	bic.w	r3, r3, #4
 800b334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a15      	ldr	r2, [pc, #84]	@ (800b390 <TIM_OC1_SetConfig+0xd8>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d003      	beq.n	800b346 <TIM_OC1_SetConfig+0x8e>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a14      	ldr	r2, [pc, #80]	@ (800b394 <TIM_OC1_SetConfig+0xdc>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d111      	bne.n	800b36a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b34c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4313      	orrs	r3, r2
 800b368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	621a      	str	r2, [r3, #32]
}
 800b384:	bf00      	nop
 800b386:	371c      	adds	r7, #28
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	40010000 	.word	0x40010000
 800b394:	40010400 	.word	0x40010400

0800b398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	f023 0210 	bic.w	r2, r3, #16
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	021b      	lsls	r3, r3, #8
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f023 0320 	bic.w	r3, r3, #32
 800b3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	011b      	lsls	r3, r3, #4
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a22      	ldr	r2, [pc, #136]	@ (800b47c <TIM_OC2_SetConfig+0xe4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d003      	beq.n	800b400 <TIM_OC2_SetConfig+0x68>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a21      	ldr	r2, [pc, #132]	@ (800b480 <TIM_OC2_SetConfig+0xe8>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d10d      	bne.n	800b41c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	4313      	orrs	r3, r2
 800b412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b41a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a17      	ldr	r2, [pc, #92]	@ (800b47c <TIM_OC2_SetConfig+0xe4>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d003      	beq.n	800b42c <TIM_OC2_SetConfig+0x94>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a16      	ldr	r2, [pc, #88]	@ (800b480 <TIM_OC2_SetConfig+0xe8>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d113      	bne.n	800b454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b43a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	621a      	str	r2, [r3, #32]
}
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	40010000 	.word	0x40010000
 800b480:	40010400 	.word	0x40010400

0800b484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f023 0303 	bic.w	r3, r3, #3
 800b4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	021b      	lsls	r3, r3, #8
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a21      	ldr	r2, [pc, #132]	@ (800b564 <TIM_OC3_SetConfig+0xe0>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d003      	beq.n	800b4ea <TIM_OC3_SetConfig+0x66>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a20      	ldr	r2, [pc, #128]	@ (800b568 <TIM_OC3_SetConfig+0xe4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d10d      	bne.n	800b506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	021b      	lsls	r3, r3, #8
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <TIM_OC3_SetConfig+0xe0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d003      	beq.n	800b516 <TIM_OC3_SetConfig+0x92>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a15      	ldr	r2, [pc, #84]	@ (800b568 <TIM_OC3_SetConfig+0xe4>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d113      	bne.n	800b53e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b51c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	621a      	str	r2, [r3, #32]
}
 800b558:	bf00      	nop
 800b55a:	371c      	adds	r7, #28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	40010000 	.word	0x40010000
 800b568:	40010400 	.word	0x40010400

0800b56c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	031b      	lsls	r3, r3, #12
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a12      	ldr	r2, [pc, #72]	@ (800b610 <TIM_OC4_SetConfig+0xa4>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d003      	beq.n	800b5d4 <TIM_OC4_SetConfig+0x68>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a11      	ldr	r2, [pc, #68]	@ (800b614 <TIM_OC4_SetConfig+0xa8>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d109      	bne.n	800b5e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	019b      	lsls	r3, r3, #6
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	621a      	str	r2, [r3, #32]
}
 800b602:	bf00      	nop
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	40010000 	.word	0x40010000
 800b614:	40010400 	.word	0x40010400

0800b618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	f023 0201 	bic.w	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f023 030a 	bic.w	r3, r3, #10
 800b654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	621a      	str	r2, [r3, #32]
}
 800b66a:	bf00      	nop
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b676:	b480      	push	{r7}
 800b678:	b087      	sub	sp, #28
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f023 0210 	bic.w	r2, r3, #16
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	031b      	lsls	r3, r3, #12
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b6b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	621a      	str	r2, [r3, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b085      	sub	sp, #20
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	f043 0307 	orr.w	r3, r3, #7
 800b6f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	609a      	str	r2, [r3, #8]
}
 800b700:	bf00      	nop
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	021a      	lsls	r2, r3, #8
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	431a      	orrs	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	4313      	orrs	r3, r2
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	4313      	orrs	r3, r2
 800b738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	609a      	str	r2, [r3, #8]
}
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f003 031f 	and.w	r3, r3, #31
 800b75e:	2201      	movs	r2, #1
 800b760:	fa02 f303 	lsl.w	r3, r2, r3
 800b764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a1a      	ldr	r2, [r3, #32]
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	43db      	mvns	r3, r3
 800b76e:	401a      	ands	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a1a      	ldr	r2, [r3, #32]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f003 031f 	and.w	r3, r3, #31
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	fa01 f303 	lsl.w	r3, r1, r3
 800b784:	431a      	orrs	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
	...

0800b798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d101      	bne.n	800b7b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e05a      	b.n	800b866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a21      	ldr	r2, [pc, #132]	@ (800b874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d022      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7fc:	d01d      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a1d      	ldr	r2, [pc, #116]	@ (800b878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d018      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a1b      	ldr	r2, [pc, #108]	@ (800b87c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d013      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1a      	ldr	r2, [pc, #104]	@ (800b880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d00e      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a18      	ldr	r2, [pc, #96]	@ (800b884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d009      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a17      	ldr	r2, [pc, #92]	@ (800b888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d004      	beq.n	800b83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a15      	ldr	r2, [pc, #84]	@ (800b88c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d10c      	bne.n	800b854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40010000 	.word	0x40010000
 800b878:	40000400 	.word	0x40000400
 800b87c:	40000800 	.word	0x40000800
 800b880:	40000c00 	.word	0x40000c00
 800b884:	40010400 	.word	0x40010400
 800b888:	40014000 	.word	0x40014000
 800b88c:	40001800 	.word	0x40001800

0800b890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	e03d      	b.n	800b928 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e03f      	b.n	800b9ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7f8 f9ce 	bl	8003d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2224      	movs	r2, #36	@ 0x24
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68da      	ldr	r2, [r3, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b99e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fe5f 	bl	800c664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	695a      	ldr	r2, [r3, #20]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b9c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b9d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	4613      	mov	r3, r2
 800ba02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d11d      	bne.n	800ba4c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <HAL_UART_Receive_DMA+0x26>
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e016      	b.n	800ba4e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <HAL_UART_Receive_DMA+0x38>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e00f      	b.n	800ba4e <HAL_UART_Receive_DMA+0x58>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ba3c:	88fb      	ldrh	r3, [r7, #6]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	68b9      	ldr	r1, [r7, #8]
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 fbae 	bl	800c1a4 <UART_Start_Receive_DMA>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	e000      	b.n	800ba4e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ba4c:	2302      	movs	r3, #2
  }
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b0ba      	sub	sp, #232	@ 0xe8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ba96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10f      	bne.n	800babe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <HAL_UART_IRQHandler+0x66>
 800baaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fd19 	bl	800c4ee <UART_Receive_IT>
      return;
 800babc:	e256      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800babe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80de 	beq.w	800bc84 <HAL_UART_IRQHandler+0x22c>
 800bac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d106      	bne.n	800bae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bad8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80d1 	beq.w	800bc84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <HAL_UART_IRQHandler+0xae>
 800baee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bafe:	f043 0201 	orr.w	r2, r3, #1
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <HAL_UART_IRQHandler+0xd2>
 800bb12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb22:	f043 0202 	orr.w	r2, r3, #2
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb2e:	f003 0302 	and.w	r3, r3, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <HAL_UART_IRQHandler+0xf6>
 800bb36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb46:	f043 0204 	orr.w	r2, r3, #4
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <HAL_UART_IRQHandler+0x126>
 800bb5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d105      	bne.n	800bb72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d005      	beq.n	800bb7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb76:	f043 0208 	orr.w	r2, r3, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 81ed 	beq.w	800bf62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d008      	beq.n	800bba6 <HAL_UART_IRQHandler+0x14e>
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fca4 	bl	800c4ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb0:	2b40      	cmp	r3, #64	@ 0x40
 800bbb2:	bf0c      	ite	eq
 800bbb4:	2301      	moveq	r3, #1
 800bbb6:	2300      	movne	r3, #0
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbc2:	f003 0308 	and.w	r3, r3, #8
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d103      	bne.n	800bbd2 <HAL_UART_IRQHandler+0x17a>
 800bbca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d04f      	beq.n	800bc72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fbac 	bl	800c330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe2:	2b40      	cmp	r3, #64	@ 0x40
 800bbe4:	d141      	bne.n	800bc6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3314      	adds	r3, #20
 800bbec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3314      	adds	r3, #20
 800bc0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1d9      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d013      	beq.n	800bc62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	4a7d      	ldr	r2, [pc, #500]	@ (800be34 <HAL_UART_IRQHandler+0x3dc>)
 800bc40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f9 fb44 	bl	80052d4 <HAL_DMA_Abort_IT>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d016      	beq.n	800bc80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc60:	e00e      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f990 	bl	800bf88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc68:	e00a      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f98c 	bl	800bf88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	e006      	b.n	800bc80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f988 	bl	800bf88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800bc7e:	e170      	b.n	800bf62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc80:	bf00      	nop
    return;
 800bc82:	e16e      	b.n	800bf62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f040 814a 	bne.w	800bf22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc92:	f003 0310 	and.w	r3, r3, #16
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 8143 	beq.w	800bf22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bca0:	f003 0310 	and.w	r3, r3, #16
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 813c 	beq.w	800bf22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60bb      	str	r3, [r7, #8]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcca:	2b40      	cmp	r3, #64	@ 0x40
 800bccc:	f040 80b4 	bne.w	800be38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8140 	beq.w	800bf66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bcea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	f080 8139 	bcs.w	800bf66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd06:	f000 8088 	beq.w	800be1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	330c      	adds	r3, #12
 800bd10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd18:	e853 3f00 	ldrex	r3, [r3]
 800bd1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bd20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	330c      	adds	r3, #12
 800bd32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bd3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd46:	e841 2300 	strex	r3, r2, [r1]
 800bd4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1d9      	bne.n	800bd0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd68:	f023 0301 	bic.w	r3, r3, #1
 800bd6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3314      	adds	r3, #20
 800bd76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e1      	bne.n	800bd56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3314      	adds	r3, #20
 800bd98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bda2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bda4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bda8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3314      	adds	r3, #20
 800bdb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bdb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bdb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bdbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bdc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e3      	bne.n	800bd92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2220      	movs	r2, #32
 800bdce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	330c      	adds	r3, #12
 800bdde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bde2:	e853 3f00 	ldrex	r3, [r3]
 800bde6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bde8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdea:	f023 0310 	bic.w	r3, r3, #16
 800bdee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	330c      	adds	r3, #12
 800bdf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bdfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bdfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be04:	e841 2300 	strex	r3, r2, [r1]
 800be08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800be0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e3      	bne.n	800bdd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be14:	4618      	mov	r0, r3
 800be16:	f7f9 f9ed 	bl	80051f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be22:	b29b      	uxth	r3, r3
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	b29b      	uxth	r3, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f8b6 	bl	800bf9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be30:	e099      	b.n	800bf66 <HAL_UART_IRQHandler+0x50e>
 800be32:	bf00      	nop
 800be34:	0800c3f7 	.word	0x0800c3f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be40:	b29b      	uxth	r3, r3
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 808b 	beq.w	800bf6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800be54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8086 	beq.w	800bf6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	330c      	adds	r3, #12
 800be64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	e853 3f00 	ldrex	r3, [r3]
 800be6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	330c      	adds	r3, #12
 800be7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800be82:	647a      	str	r2, [r7, #68]	@ 0x44
 800be84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e3      	bne.n	800be5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3314      	adds	r3, #20
 800be9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	623b      	str	r3, [r7, #32]
   return(result);
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3314      	adds	r3, #20
 800beb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800beba:	633a      	str	r2, [r7, #48]	@ 0x30
 800bebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e3      	bne.n	800be96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	330c      	adds	r3, #12
 800bee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	60fb      	str	r3, [r7, #12]
   return(result);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f023 0310 	bic.w	r3, r3, #16
 800bef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	330c      	adds	r3, #12
 800befc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bf00:	61fa      	str	r2, [r7, #28]
 800bf02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf04:	69b9      	ldr	r1, [r7, #24]
 800bf06:	69fa      	ldr	r2, [r7, #28]
 800bf08:	e841 2300 	strex	r3, r2, [r1]
 800bf0c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e3      	bne.n	800bedc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f83e 	bl	800bf9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf20:	e023      	b.n	800bf6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d009      	beq.n	800bf42 <HAL_UART_IRQHandler+0x4ea>
 800bf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa6f 	bl	800c41e <UART_Transmit_IT>
    return;
 800bf40:	e014      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00e      	beq.n	800bf6c <HAL_UART_IRQHandler+0x514>
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d008      	beq.n	800bf6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 faaf 	bl	800c4be <UART_EndTransmit_IT>
    return;
 800bf60:	e004      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
    return;
 800bf62:	bf00      	nop
 800bf64:	e002      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
      return;
 800bf66:	bf00      	nop
 800bf68:	e000      	b.n	800bf6c <HAL_UART_IRQHandler+0x514>
      return;
 800bf6a:	bf00      	nop
  }
}
 800bf6c:	37e8      	adds	r7, #232	@ 0xe8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop

0800bf74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b09c      	sub	sp, #112	@ 0x70
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d172      	bne.n	800c0b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bfd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bfe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bff6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bff8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bffc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1e5      	bne.n	800bfd6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3314      	adds	r3, #20
 800c010:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c01c:	f023 0301 	bic.w	r3, r3, #1
 800c020:	667b      	str	r3, [r7, #100]	@ 0x64
 800c022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3314      	adds	r3, #20
 800c028:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c02a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c02c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c032:	e841 2300 	strex	r3, r2, [r1]
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e5      	bne.n	800c00a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3314      	adds	r3, #20
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	623b      	str	r3, [r7, #32]
   return(result);
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c054:	663b      	str	r3, [r7, #96]	@ 0x60
 800c056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3314      	adds	r3, #20
 800c05c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c05e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e5      	bne.n	800c03e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c074:	2220      	movs	r2, #32
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d119      	bne.n	800c0b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	330c      	adds	r3, #12
 800c088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	e853 3f00 	ldrex	r3, [r3]
 800c090:	60fb      	str	r3, [r7, #12]
   return(result);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f023 0310 	bic.w	r3, r3, #16
 800c098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c09a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	330c      	adds	r3, #12
 800c0a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c0a2:	61fa      	str	r2, [r7, #28]
 800c0a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a6:	69b9      	ldr	r1, [r7, #24]
 800c0a8:	69fa      	ldr	r2, [r7, #28]
 800c0aa:	e841 2300 	strex	r3, r2, [r1]
 800c0ae:	617b      	str	r3, [r7, #20]
   return(result);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e5      	bne.n	800c082 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d106      	bne.n	800c0cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0c6:	f7ff ff69 	bl	800bf9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0ca:	e002      	b.n	800c0d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c0cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0ce:	f7f6 fa15 	bl	80024fc <HAL_UART_RxCpltCallback>
}
 800c0d2:	bf00      	nop
 800c0d4:	3770      	adds	r7, #112	@ 0x70
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d108      	bne.n	800c102 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c0f4:	085b      	lsrs	r3, r3, #1
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f7ff ff4e 	bl	800bf9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c100:	e002      	b.n	800c108 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff ff36 	bl	800bf74 <HAL_UART_RxHalfCpltCallback>
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c118:	2300      	movs	r3, #0
 800c11a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c120:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c12c:	2b80      	cmp	r3, #128	@ 0x80
 800c12e:	bf0c      	ite	eq
 800c130:	2301      	moveq	r3, #1
 800c132:	2300      	movne	r3, #0
 800c134:	b2db      	uxtb	r3, r3
 800c136:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b21      	cmp	r3, #33	@ 0x21
 800c142:	d108      	bne.n	800c156 <UART_DMAError+0x46>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2200      	movs	r2, #0
 800c14e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c150:	68b8      	ldr	r0, [r7, #8]
 800c152:	f000 f8c5 	bl	800c2e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c160:	2b40      	cmp	r3, #64	@ 0x40
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b22      	cmp	r3, #34	@ 0x22
 800c176:	d108      	bne.n	800c18a <UART_DMAError+0x7a>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d005      	beq.n	800c18a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2200      	movs	r2, #0
 800c182:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c184:	68b8      	ldr	r0, [r7, #8]
 800c186:	f000 f8d3 	bl	800c330 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18e:	f043 0210 	orr.w	r2, r3, #16
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c196:	68b8      	ldr	r0, [r7, #8]
 800c198:	f7ff fef6 	bl	800bf88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c19c:	bf00      	nop
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b098      	sub	sp, #96	@ 0x60
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	88fa      	ldrh	r2, [r7, #6]
 800c1bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2222      	movs	r2, #34	@ 0x22
 800c1c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d0:	4a40      	ldr	r2, [pc, #256]	@ (800c2d4 <UART_Start_Receive_DMA+0x130>)
 800c1d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d8:	4a3f      	ldr	r2, [pc, #252]	@ (800c2d8 <UART_Start_Receive_DMA+0x134>)
 800c1da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e0:	4a3e      	ldr	r2, [pc, #248]	@ (800c2dc <UART_Start_Receive_DMA+0x138>)
 800c1e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c1ec:	f107 0308 	add.w	r3, r7, #8
 800c1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	88fb      	ldrh	r3, [r7, #6]
 800c204:	f7f8 ff9e 	bl	8005144 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c208:	2300      	movs	r3, #0
 800c20a:	613b      	str	r3, [r7, #16]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d019      	beq.n	800c262 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	330c      	adds	r3, #12
 800c234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c244:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	330c      	adds	r3, #12
 800c24c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c24e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c250:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e5      	bne.n	800c22e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3314      	adds	r3, #20
 800c268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c274:	f043 0301 	orr.w	r3, r3, #1
 800c278:	657b      	str	r3, [r7, #84]	@ 0x54
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3314      	adds	r3, #20
 800c280:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c282:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c284:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e5      	bne.n	800c262 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3314      	adds	r3, #20
 800c29c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c2b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	6a39      	ldr	r1, [r7, #32]
 800c2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e5      	bne.n	800c296 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3760      	adds	r7, #96	@ 0x60
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	0800bfb5 	.word	0x0800bfb5
 800c2d8:	0800c0db 	.word	0x0800c0db
 800c2dc:	0800c111 	.word	0x0800c111

0800c2e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b089      	sub	sp, #36	@ 0x24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	330c      	adds	r3, #12
 800c306:	69fa      	ldr	r2, [r7, #28]
 800c308:	61ba      	str	r2, [r7, #24]
 800c30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6979      	ldr	r1, [r7, #20]
 800c30e:	69ba      	ldr	r2, [r7, #24]
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	613b      	str	r3, [r7, #16]
   return(result);
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e5      	bne.n	800c2e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800c324:	bf00      	nop
 800c326:	3724      	adds	r7, #36	@ 0x24
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c330:	b480      	push	{r7}
 800c332:	b095      	sub	sp, #84	@ 0x54
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	330c      	adds	r3, #12
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c34e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	330c      	adds	r3, #12
 800c356:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c358:	643a      	str	r2, [r7, #64]	@ 0x40
 800c35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e5      	bne.n	800c338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3314      	adds	r3, #20
 800c372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	e853 3f00 	ldrex	r3, [r3]
 800c37a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	f023 0301 	bic.w	r3, r3, #1
 800c382:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3314      	adds	r3, #20
 800c38a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c38c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c394:	e841 2300 	strex	r3, r2, [r1]
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e5      	bne.n	800c36c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d119      	bne.n	800c3dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	330c      	adds	r3, #12
 800c3ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	e853 3f00 	ldrex	r3, [r3]
 800c3b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f023 0310 	bic.w	r3, r3, #16
 800c3be:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3c8:	61ba      	str	r2, [r7, #24]
 800c3ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3cc:	6979      	ldr	r1, [r7, #20]
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	e841 2300 	strex	r3, r2, [r1]
 800c3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e5      	bne.n	800c3a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c3ea:	bf00      	nop
 800c3ec:	3754      	adds	r7, #84	@ 0x54
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff fdb9 	bl	800bf88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c416:	bf00      	nop
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b21      	cmp	r3, #33	@ 0x21
 800c430:	d13e      	bne.n	800c4b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c43a:	d114      	bne.n	800c466 <UART_Transmit_IT+0x48>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d110      	bne.n	800c466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	1c9a      	adds	r2, r3, #2
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	621a      	str	r2, [r3, #32]
 800c464:	e008      	b.n	800c478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	1c59      	adds	r1, r3, #1
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	6211      	str	r1, [r2, #32]
 800c470:	781a      	ldrb	r2, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	3b01      	subs	r3, #1
 800c480:	b29b      	uxth	r3, r3
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	4619      	mov	r1, r3
 800c486:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10f      	bne.n	800c4ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c49a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68da      	ldr	r2, [r3, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e000      	b.n	800c4b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c4b0:	2302      	movs	r3, #2
  }
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7f6 f836 	bl	8002550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b08c      	sub	sp, #48	@ 0x30
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b22      	cmp	r3, #34	@ 0x22
 800c500:	f040 80ab 	bne.w	800c65a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c50c:	d117      	bne.n	800c53e <UART_Receive_IT+0x50>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d113      	bne.n	800c53e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	b29b      	uxth	r3, r3
 800c528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c536:	1c9a      	adds	r2, r3, #2
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c53c:	e026      	b.n	800c58c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c542:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c544:	2300      	movs	r3, #0
 800c546:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c550:	d007      	beq.n	800c562 <UART_Receive_IT+0x74>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <UART_Receive_IT+0x82>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d106      	bne.n	800c570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	e008      	b.n	800c582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	b2db      	uxtb	r3, r3
 800c578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c590:	b29b      	uxth	r3, r3
 800c592:	3b01      	subs	r3, #1
 800c594:	b29b      	uxth	r3, r3
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4619      	mov	r1, r3
 800c59a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d15a      	bne.n	800c656 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68da      	ldr	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0220 	bic.w	r2, r2, #32
 800c5ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	695a      	ldr	r2, [r3, #20]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0201 	bic.w	r2, r2, #1
 800c5ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d135      	bne.n	800c64c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	330c      	adds	r3, #12
 800c5ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f023 0310 	bic.w	r3, r3, #16
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	330c      	adds	r3, #12
 800c604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c606:	623a      	str	r2, [r7, #32]
 800c608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60a:	69f9      	ldr	r1, [r7, #28]
 800c60c:	6a3a      	ldr	r2, [r7, #32]
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	61bb      	str	r3, [r7, #24]
   return(result);
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e5      	bne.n	800c5e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0310 	and.w	r3, r3, #16
 800c624:	2b10      	cmp	r3, #16
 800c626:	d10a      	bne.n	800c63e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7ff fca9 	bl	800bf9c <HAL_UARTEx_RxEventCallback>
 800c64a:	e002      	b.n	800c652 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7f5 ff55 	bl	80024fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	e002      	b.n	800c65c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	e000      	b.n	800c65c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c65a:	2302      	movs	r3, #2
  }
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3730      	adds	r7, #48	@ 0x30
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c668:	b0c0      	sub	sp, #256	@ 0x100
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c680:	68d9      	ldr	r1, [r3, #12]
 800c682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	ea40 0301 	orr.w	r3, r0, r1
 800c68c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c6bc:	f021 010c 	bic.w	r1, r1, #12
 800c6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c6ca:	430b      	orrs	r3, r1
 800c6cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6de:	6999      	ldr	r1, [r3, #24]
 800c6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	ea40 0301 	orr.w	r3, r0, r1
 800c6ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4b8f      	ldr	r3, [pc, #572]	@ (800c930 <UART_SetConfig+0x2cc>)
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d005      	beq.n	800c704 <UART_SetConfig+0xa0>
 800c6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	4b8d      	ldr	r3, [pc, #564]	@ (800c934 <UART_SetConfig+0x2d0>)
 800c700:	429a      	cmp	r2, r3
 800c702:	d104      	bne.n	800c70e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c704:	f7fc fefa 	bl	80094fc <HAL_RCC_GetPCLK2Freq>
 800c708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c70c:	e003      	b.n	800c716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c70e:	f7fc fee1 	bl	80094d4 <HAL_RCC_GetPCLK1Freq>
 800c712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c720:	f040 810c 	bne.w	800c93c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c728:	2200      	movs	r2, #0
 800c72a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c72e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c736:	4622      	mov	r2, r4
 800c738:	462b      	mov	r3, r5
 800c73a:	1891      	adds	r1, r2, r2
 800c73c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c73e:	415b      	adcs	r3, r3
 800c740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c746:	4621      	mov	r1, r4
 800c748:	eb12 0801 	adds.w	r8, r2, r1
 800c74c:	4629      	mov	r1, r5
 800c74e:	eb43 0901 	adc.w	r9, r3, r1
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	f04f 0300 	mov.w	r3, #0
 800c75a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c75e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c766:	4690      	mov	r8, r2
 800c768:	4699      	mov	r9, r3
 800c76a:	4623      	mov	r3, r4
 800c76c:	eb18 0303 	adds.w	r3, r8, r3
 800c770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c774:	462b      	mov	r3, r5
 800c776:	eb49 0303 	adc.w	r3, r9, r3
 800c77a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c78a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c78e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c792:	460b      	mov	r3, r1
 800c794:	18db      	adds	r3, r3, r3
 800c796:	653b      	str	r3, [r7, #80]	@ 0x50
 800c798:	4613      	mov	r3, r2
 800c79a:	eb42 0303 	adc.w	r3, r2, r3
 800c79e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c7a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c7a8:	f7f4 fa8e 	bl	8000cc8 <__aeabi_uldivmod>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4b61      	ldr	r3, [pc, #388]	@ (800c938 <UART_SetConfig+0x2d4>)
 800c7b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c7b6:	095b      	lsrs	r3, r3, #5
 800c7b8:	011c      	lsls	r4, r3, #4
 800c7ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c7c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c7c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	464b      	mov	r3, r9
 800c7d0:	1891      	adds	r1, r2, r2
 800c7d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c7d4:	415b      	adcs	r3, r3
 800c7d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c7dc:	4641      	mov	r1, r8
 800c7de:	eb12 0a01 	adds.w	sl, r2, r1
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	eb43 0b01 	adc.w	fp, r3, r1
 800c7e8:	f04f 0200 	mov.w	r2, #0
 800c7ec:	f04f 0300 	mov.w	r3, #0
 800c7f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c7f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c7f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7fc:	4692      	mov	sl, r2
 800c7fe:	469b      	mov	fp, r3
 800c800:	4643      	mov	r3, r8
 800c802:	eb1a 0303 	adds.w	r3, sl, r3
 800c806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c80a:	464b      	mov	r3, r9
 800c80c:	eb4b 0303 	adc.w	r3, fp, r3
 800c810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c828:	460b      	mov	r3, r1
 800c82a:	18db      	adds	r3, r3, r3
 800c82c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c82e:	4613      	mov	r3, r2
 800c830:	eb42 0303 	adc.w	r3, r2, r3
 800c834:	647b      	str	r3, [r7, #68]	@ 0x44
 800c836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c83a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c83e:	f7f4 fa43 	bl	8000cc8 <__aeabi_uldivmod>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4611      	mov	r1, r2
 800c848:	4b3b      	ldr	r3, [pc, #236]	@ (800c938 <UART_SetConfig+0x2d4>)
 800c84a:	fba3 2301 	umull	r2, r3, r3, r1
 800c84e:	095b      	lsrs	r3, r3, #5
 800c850:	2264      	movs	r2, #100	@ 0x64
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	1acb      	subs	r3, r1, r3
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c85e:	4b36      	ldr	r3, [pc, #216]	@ (800c938 <UART_SetConfig+0x2d4>)
 800c860:	fba3 2302 	umull	r2, r3, r3, r2
 800c864:	095b      	lsrs	r3, r3, #5
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c86c:	441c      	add	r4, r3
 800c86e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c872:	2200      	movs	r2, #0
 800c874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c87c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c880:	4642      	mov	r2, r8
 800c882:	464b      	mov	r3, r9
 800c884:	1891      	adds	r1, r2, r2
 800c886:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c888:	415b      	adcs	r3, r3
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c88c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c890:	4641      	mov	r1, r8
 800c892:	1851      	adds	r1, r2, r1
 800c894:	6339      	str	r1, [r7, #48]	@ 0x30
 800c896:	4649      	mov	r1, r9
 800c898:	414b      	adcs	r3, r1
 800c89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c89c:	f04f 0200 	mov.w	r2, #0
 800c8a0:	f04f 0300 	mov.w	r3, #0
 800c8a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c8a8:	4659      	mov	r1, fp
 800c8aa:	00cb      	lsls	r3, r1, #3
 800c8ac:	4651      	mov	r1, sl
 800c8ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8b2:	4651      	mov	r1, sl
 800c8b4:	00ca      	lsls	r2, r1, #3
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	4642      	mov	r2, r8
 800c8be:	189b      	adds	r3, r3, r2
 800c8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	460a      	mov	r2, r1
 800c8c8:	eb42 0303 	adc.w	r3, r2, r3
 800c8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c8dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c8e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	18db      	adds	r3, r3, r3
 800c8e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	eb42 0303 	adc.w	r3, r2, r3
 800c8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c8f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c8fa:	f7f4 f9e5 	bl	8000cc8 <__aeabi_uldivmod>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4b0d      	ldr	r3, [pc, #52]	@ (800c938 <UART_SetConfig+0x2d4>)
 800c904:	fba3 1302 	umull	r1, r3, r3, r2
 800c908:	095b      	lsrs	r3, r3, #5
 800c90a:	2164      	movs	r1, #100	@ 0x64
 800c90c:	fb01 f303 	mul.w	r3, r1, r3
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	3332      	adds	r3, #50	@ 0x32
 800c916:	4a08      	ldr	r2, [pc, #32]	@ (800c938 <UART_SetConfig+0x2d4>)
 800c918:	fba2 2303 	umull	r2, r3, r2, r3
 800c91c:	095b      	lsrs	r3, r3, #5
 800c91e:	f003 0207 	and.w	r2, r3, #7
 800c922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4422      	add	r2, r4
 800c92a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c92c:	e106      	b.n	800cb3c <UART_SetConfig+0x4d8>
 800c92e:	bf00      	nop
 800c930:	40011000 	.word	0x40011000
 800c934:	40011400 	.word	0x40011400
 800c938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c940:	2200      	movs	r2, #0
 800c942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c94a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c94e:	4642      	mov	r2, r8
 800c950:	464b      	mov	r3, r9
 800c952:	1891      	adds	r1, r2, r2
 800c954:	6239      	str	r1, [r7, #32]
 800c956:	415b      	adcs	r3, r3
 800c958:	627b      	str	r3, [r7, #36]	@ 0x24
 800c95a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c95e:	4641      	mov	r1, r8
 800c960:	1854      	adds	r4, r2, r1
 800c962:	4649      	mov	r1, r9
 800c964:	eb43 0501 	adc.w	r5, r3, r1
 800c968:	f04f 0200 	mov.w	r2, #0
 800c96c:	f04f 0300 	mov.w	r3, #0
 800c970:	00eb      	lsls	r3, r5, #3
 800c972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c976:	00e2      	lsls	r2, r4, #3
 800c978:	4614      	mov	r4, r2
 800c97a:	461d      	mov	r5, r3
 800c97c:	4643      	mov	r3, r8
 800c97e:	18e3      	adds	r3, r4, r3
 800c980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c984:	464b      	mov	r3, r9
 800c986:	eb45 0303 	adc.w	r3, r5, r3
 800c98a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c98e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c99a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c99e:	f04f 0200 	mov.w	r2, #0
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	008b      	lsls	r3, r1, #2
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	008a      	lsls	r2, r1, #2
 800c9b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c9bc:	f7f4 f984 	bl	8000cc8 <__aeabi_uldivmod>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4b60      	ldr	r3, [pc, #384]	@ (800cb48 <UART_SetConfig+0x4e4>)
 800c9c6:	fba3 2302 	umull	r2, r3, r3, r2
 800c9ca:	095b      	lsrs	r3, r3, #5
 800c9cc:	011c      	lsls	r4, r3, #4
 800c9ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c9d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c9dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c9e0:	4642      	mov	r2, r8
 800c9e2:	464b      	mov	r3, r9
 800c9e4:	1891      	adds	r1, r2, r2
 800c9e6:	61b9      	str	r1, [r7, #24]
 800c9e8:	415b      	adcs	r3, r3
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	1851      	adds	r1, r2, r1
 800c9f4:	6139      	str	r1, [r7, #16]
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	414b      	adcs	r3, r1
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	f04f 0200 	mov.w	r2, #0
 800ca00:	f04f 0300 	mov.w	r3, #0
 800ca04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca08:	4659      	mov	r1, fp
 800ca0a:	00cb      	lsls	r3, r1, #3
 800ca0c:	4651      	mov	r1, sl
 800ca0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca12:	4651      	mov	r1, sl
 800ca14:	00ca      	lsls	r2, r1, #3
 800ca16:	4610      	mov	r0, r2
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	189b      	adds	r3, r3, r2
 800ca20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca24:	464b      	mov	r3, r9
 800ca26:	460a      	mov	r2, r1
 800ca28:	eb42 0303 	adc.w	r3, r2, r3
 800ca2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ca3c:	f04f 0200 	mov.w	r2, #0
 800ca40:	f04f 0300 	mov.w	r3, #0
 800ca44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ca48:	4649      	mov	r1, r9
 800ca4a:	008b      	lsls	r3, r1, #2
 800ca4c:	4641      	mov	r1, r8
 800ca4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca52:	4641      	mov	r1, r8
 800ca54:	008a      	lsls	r2, r1, #2
 800ca56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ca5a:	f7f4 f935 	bl	8000cc8 <__aeabi_uldivmod>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4611      	mov	r1, r2
 800ca64:	4b38      	ldr	r3, [pc, #224]	@ (800cb48 <UART_SetConfig+0x4e4>)
 800ca66:	fba3 2301 	umull	r2, r3, r3, r1
 800ca6a:	095b      	lsrs	r3, r3, #5
 800ca6c:	2264      	movs	r2, #100	@ 0x64
 800ca6e:	fb02 f303 	mul.w	r3, r2, r3
 800ca72:	1acb      	subs	r3, r1, r3
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	3332      	adds	r3, #50	@ 0x32
 800ca78:	4a33      	ldr	r2, [pc, #204]	@ (800cb48 <UART_SetConfig+0x4e4>)
 800ca7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7e:	095b      	lsrs	r3, r3, #5
 800ca80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca84:	441c      	add	r4, r3
 800ca86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca8e:	677a      	str	r2, [r7, #116]	@ 0x74
 800ca90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	1891      	adds	r1, r2, r2
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	415b      	adcs	r3, r3
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800caa4:	4641      	mov	r1, r8
 800caa6:	1851      	adds	r1, r2, r1
 800caa8:	6039      	str	r1, [r7, #0]
 800caaa:	4649      	mov	r1, r9
 800caac:	414b      	adcs	r3, r1
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cabc:	4659      	mov	r1, fp
 800cabe:	00cb      	lsls	r3, r1, #3
 800cac0:	4651      	mov	r1, sl
 800cac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cac6:	4651      	mov	r1, sl
 800cac8:	00ca      	lsls	r2, r1, #3
 800caca:	4610      	mov	r0, r2
 800cacc:	4619      	mov	r1, r3
 800cace:	4603      	mov	r3, r0
 800cad0:	4642      	mov	r2, r8
 800cad2:	189b      	adds	r3, r3, r2
 800cad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cad6:	464b      	mov	r3, r9
 800cad8:	460a      	mov	r2, r1
 800cada:	eb42 0303 	adc.w	r3, r2, r3
 800cade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	663b      	str	r3, [r7, #96]	@ 0x60
 800caea:	667a      	str	r2, [r7, #100]	@ 0x64
 800caec:	f04f 0200 	mov.w	r2, #0
 800caf0:	f04f 0300 	mov.w	r3, #0
 800caf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800caf8:	4649      	mov	r1, r9
 800cafa:	008b      	lsls	r3, r1, #2
 800cafc:	4641      	mov	r1, r8
 800cafe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb02:	4641      	mov	r1, r8
 800cb04:	008a      	lsls	r2, r1, #2
 800cb06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cb0a:	f7f4 f8dd 	bl	8000cc8 <__aeabi_uldivmod>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	4b0d      	ldr	r3, [pc, #52]	@ (800cb48 <UART_SetConfig+0x4e4>)
 800cb14:	fba3 1302 	umull	r1, r3, r3, r2
 800cb18:	095b      	lsrs	r3, r3, #5
 800cb1a:	2164      	movs	r1, #100	@ 0x64
 800cb1c:	fb01 f303 	mul.w	r3, r1, r3
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	3332      	adds	r3, #50	@ 0x32
 800cb26:	4a08      	ldr	r2, [pc, #32]	@ (800cb48 <UART_SetConfig+0x4e4>)
 800cb28:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2c:	095b      	lsrs	r3, r3, #5
 800cb2e:	f003 020f 	and.w	r2, r3, #15
 800cb32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4422      	add	r2, r4
 800cb3a:	609a      	str	r2, [r3, #8]
}
 800cb3c:	bf00      	nop
 800cb3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cb42:	46bd      	mov	sp, r7
 800cb44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb48:	51eb851f 	.word	0x51eb851f

0800cb4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cb50:	4904      	ldr	r1, [pc, #16]	@ (800cb64 <MX_FATFS_Init+0x18>)
 800cb52:	4805      	ldr	r0, [pc, #20]	@ (800cb68 <MX_FATFS_Init+0x1c>)
 800cb54:	f003 f9d4 	bl	800ff00 <FATFS_LinkDriver>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	4b03      	ldr	r3, [pc, #12]	@ (800cb6c <MX_FATFS_Init+0x20>)
 800cb5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cb60:	bf00      	nop
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20002b80 	.word	0x20002b80
 800cb68:	20000010 	.word	0x20000010
 800cb6c:	20002b7c 	.word	0x20002b7c

0800cb70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cb74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800cb8a:	79fb      	ldrb	r3, [r7, #7]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f5 f8b1 	bl	8001cf4 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800cb92:	bf00      	nop
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7f5 f989 	bl	8001ec0 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800cbae:	bf00      	nop
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
 800cbc2:	603b      	str	r3, [r7, #0]
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800cbc8:	7bf8      	ldrb	r0, [r7, #15]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	f7f5 f98c 	bl	8001eec <SD_disk_read>
  /* USER CODE END READ */
}
 800cbd4:	bf00      	nop
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800cbee:	7bf8      	ldrb	r0, [r7, #15]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	f7f5 f9e3 	bl	8001fc0 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800cbfa:	bf00      	nop
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	603a      	str	r2, [r7, #0]
 800cc0e:	71fb      	strb	r3, [r7, #7]
 800cc10:	460b      	mov	r3, r1
 800cc12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800cc14:	79fb      	ldrb	r3, [r7, #7]
 800cc16:	79b9      	ldrb	r1, [r7, #6]
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f5 fa54 	bl	80020c8 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800cc20:	bf00      	nop
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	4a08      	ldr	r2, [pc, #32]	@ (800cc5c <disk_status+0x30>)
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4413      	add	r3, r2
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	79fa      	ldrb	r2, [r7, #7]
 800cc44:	4905      	ldr	r1, [pc, #20]	@ (800cc5c <disk_status+0x30>)
 800cc46:	440a      	add	r2, r1
 800cc48:	7a12      	ldrb	r2, [r2, #8]
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4798      	blx	r3
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	20002bac 	.word	0x20002bac

0800cc60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	4a0d      	ldr	r2, [pc, #52]	@ (800cca8 <disk_initialize+0x48>)
 800cc72:	5cd3      	ldrb	r3, [r2, r3]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d111      	bne.n	800cc9c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	4a0b      	ldr	r2, [pc, #44]	@ (800cca8 <disk_initialize+0x48>)
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	4a09      	ldr	r2, [pc, #36]	@ (800cca8 <disk_initialize+0x48>)
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	79fa      	ldrb	r2, [r7, #7]
 800cc8e:	4906      	ldr	r1, [pc, #24]	@ (800cca8 <disk_initialize+0x48>)
 800cc90:	440a      	add	r2, r1
 800cc92:	7a12      	ldrb	r2, [r2, #8]
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	20002bac 	.word	0x20002bac

0800ccac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ccac:	b590      	push	{r4, r7, lr}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60b9      	str	r1, [r7, #8]
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	603b      	str	r3, [r7, #0]
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	4a0a      	ldr	r2, [pc, #40]	@ (800cce8 <disk_read+0x3c>)
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	689c      	ldr	r4, [r3, #8]
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	4a07      	ldr	r2, [pc, #28]	@ (800cce8 <disk_read+0x3c>)
 800cccc:	4413      	add	r3, r2
 800ccce:	7a18      	ldrb	r0, [r3, #8]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	47a0      	blx	r4
 800ccd8:	4603      	mov	r3, r0
 800ccda:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd90      	pop	{r4, r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20002bac 	.word	0x20002bac

0800ccec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ccec:	b590      	push	{r4, r7, lr}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	607a      	str	r2, [r7, #4]
 800ccf6:	603b      	str	r3, [r7, #0]
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	4a0a      	ldr	r2, [pc, #40]	@ (800cd28 <disk_write+0x3c>)
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	68dc      	ldr	r4, [r3, #12]
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4a07      	ldr	r2, [pc, #28]	@ (800cd28 <disk_write+0x3c>)
 800cd0c:	4413      	add	r3, r2
 800cd0e:	7a18      	ldrb	r0, [r3, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	47a0      	blx	r4
 800cd18:	4603      	mov	r3, r0
 800cd1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd90      	pop	{r4, r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20002bac 	.word	0x20002bac

0800cd2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	603a      	str	r2, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd3c:	79fb      	ldrb	r3, [r7, #7]
 800cd3e:	4a09      	ldr	r2, [pc, #36]	@ (800cd64 <disk_ioctl+0x38>)
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	79fa      	ldrb	r2, [r7, #7]
 800cd4a:	4906      	ldr	r1, [pc, #24]	@ (800cd64 <disk_ioctl+0x38>)
 800cd4c:	440a      	add	r2, r1
 800cd4e:	7a10      	ldrb	r0, [r2, #8]
 800cd50:	79b9      	ldrb	r1, [r7, #6]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	4798      	blx	r3
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
  return res;
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	20002bac 	.word	0x20002bac

0800cd68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3301      	adds	r3, #1
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cd78:	89fb      	ldrh	r3, [r7, #14]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	b21a      	sxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	b21b      	sxth	r3, r3
 800cd84:	4313      	orrs	r3, r2
 800cd86:	b21b      	sxth	r3, r3
 800cd88:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cd8a:	89fb      	ldrh	r3, [r7, #14]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3303      	adds	r3, #3
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	021b      	lsls	r3, r3, #8
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	3202      	adds	r2, #2
 800cdb0:	7812      	ldrb	r2, [r2, #0]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	3201      	adds	r2, #1
 800cdbe:	7812      	ldrb	r2, [r2, #0]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]
	return rv;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	887a      	ldrh	r2, [r7, #2]
 800cdf2:	b2d2      	uxtb	r2, r2
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	887b      	ldrh	r3, [r7, #2]
 800cdf8:	0a1b      	lsrs	r3, r3, #8
 800cdfa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	607a      	str	r2, [r7, #4]
 800ce02:	887a      	ldrh	r2, [r7, #2]
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	701a      	strb	r2, [r3, #0]
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	1c5a      	adds	r2, r3, #1
 800ce22:	607a      	str	r2, [r7, #4]
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	b2d2      	uxtb	r2, r2
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	0a1b      	lsrs	r3, r3, #8
 800ce2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	607a      	str	r2, [r7, #4]
 800ce36:	683a      	ldr	r2, [r7, #0]
 800ce38:	b2d2      	uxtb	r2, r2
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	0a1b      	lsrs	r3, r3, #8
 800ce40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	1c5a      	adds	r2, r3, #1
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	b2d2      	uxtb	r2, r2
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	0a1b      	lsrs	r3, r3, #8
 800ce52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	607a      	str	r2, [r7, #4]
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	b2d2      	uxtb	r2, r2
 800ce5e:	701a      	strb	r2, [r3, #0]
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00d      	beq.n	800cea2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	1c53      	adds	r3, r2, #1
 800ce8a:	613b      	str	r3, [r7, #16]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	1c59      	adds	r1, r3, #1
 800ce90:	6179      	str	r1, [r7, #20]
 800ce92:	7812      	ldrb	r2, [r2, #0]
 800ce94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	607b      	str	r3, [r7, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1f1      	bne.n	800ce86 <mem_cpy+0x1a>
	}
}
 800cea2:	bf00      	nop
 800cea4:	371c      	adds	r7, #28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ceae:	b480      	push	{r7}
 800ceb0:	b087      	sub	sp, #28
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	617a      	str	r2, [r7, #20]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3b01      	subs	r3, #1
 800cece:	607b      	str	r3, [r7, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1f3      	bne.n	800cebe <mem_set+0x10>
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	371c      	adds	r7, #28
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cee4:	b480      	push	{r7}
 800cee6:	b089      	sub	sp, #36	@ 0x24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	61fa      	str	r2, [r7, #28]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	4619      	mov	r1, r3
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	61ba      	str	r2, [r7, #24]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	1acb      	subs	r3, r1, r3
 800cf10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	607b      	str	r3, [r7, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <mem_cmp+0x40>
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d0eb      	beq.n	800cefc <mem_cmp+0x18>

	return r;
 800cf24:	697b      	ldr	r3, [r7, #20]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3724      	adds	r7, #36	@ 0x24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cf32:	b480      	push	{r7}
 800cf34:	b083      	sub	sp, #12
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cf3c:	e002      	b.n	800cf44 <chk_chr+0x12>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3301      	adds	r3, #1
 800cf42:	607b      	str	r3, [r7, #4]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d005      	beq.n	800cf58 <chk_chr+0x26>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	461a      	mov	r2, r3
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d1f2      	bne.n	800cf3e <chk_chr+0xc>
	return *str;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d009      	beq.n	800cf8a <lock_fs+0x22>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f003 f8c2 	bl	8010104 <ff_req_grant>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <lock_fs+0x22>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <lock_fs+0x24>
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00d      	beq.n	800cfc2 <unlock_fs+0x2e>
 800cfa6:	78fb      	ldrb	r3, [r7, #3]
 800cfa8:	2b0c      	cmp	r3, #12
 800cfaa:	d00a      	beq.n	800cfc2 <unlock_fs+0x2e>
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	2b0b      	cmp	r3, #11
 800cfb0:	d007      	beq.n	800cfc2 <unlock_fs+0x2e>
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	2b0f      	cmp	r3, #15
 800cfb6:	d004      	beq.n	800cfc2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	695b      	ldr	r3, [r3, #20]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f003 f8b6 	bl	801012e <ff_rel_grant>
	}
}
 800cfc2:	bf00      	nop
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	e029      	b.n	800d034 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cfe0:	4a27      	ldr	r2, [pc, #156]	@ (800d080 <chk_lock+0xb4>)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	011b      	lsls	r3, r3, #4
 800cfe6:	4413      	add	r3, r2
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d01d      	beq.n	800d02a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfee:	4a24      	ldr	r2, [pc, #144]	@ (800d080 <chk_lock+0xb4>)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	4413      	add	r3, r2
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d116      	bne.n	800d02e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d000:	4a1f      	ldr	r2, [pc, #124]	@ (800d080 <chk_lock+0xb4>)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d010:	429a      	cmp	r2, r3
 800d012:	d10c      	bne.n	800d02e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d014:	4a1a      	ldr	r2, [pc, #104]	@ (800d080 <chk_lock+0xb4>)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	011b      	lsls	r3, r3, #4
 800d01a:	4413      	add	r3, r2
 800d01c:	3308      	adds	r3, #8
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d024:	429a      	cmp	r2, r3
 800d026:	d102      	bne.n	800d02e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d028:	e007      	b.n	800d03a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d02a:	2301      	movs	r3, #1
 800d02c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3301      	adds	r3, #1
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d9d2      	bls.n	800cfe0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d109      	bne.n	800d054 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <chk_lock+0x80>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d101      	bne.n	800d050 <chk_lock+0x84>
 800d04c:	2300      	movs	r3, #0
 800d04e:	e010      	b.n	800d072 <chk_lock+0xa6>
 800d050:	2312      	movs	r3, #18
 800d052:	e00e      	b.n	800d072 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d108      	bne.n	800d06c <chk_lock+0xa0>
 800d05a:	4a09      	ldr	r2, [pc, #36]	@ (800d080 <chk_lock+0xb4>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	4413      	add	r3, r2
 800d062:	330c      	adds	r3, #12
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d06a:	d101      	bne.n	800d070 <chk_lock+0xa4>
 800d06c:	2310      	movs	r3, #16
 800d06e:	e000      	b.n	800d072 <chk_lock+0xa6>
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20002b8c 	.word	0x20002b8c

0800d084 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d08a:	2300      	movs	r3, #0
 800d08c:	607b      	str	r3, [r7, #4]
 800d08e:	e002      	b.n	800d096 <enq_lock+0x12>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3301      	adds	r3, #1
 800d094:	607b      	str	r3, [r7, #4]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d806      	bhi.n	800d0aa <enq_lock+0x26>
 800d09c:	4a09      	ldr	r2, [pc, #36]	@ (800d0c4 <enq_lock+0x40>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	011b      	lsls	r3, r3, #4
 800d0a2:	4413      	add	r3, r2
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1f2      	bne.n	800d090 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	bf14      	ite	ne
 800d0b0:	2301      	movne	r3, #1
 800d0b2:	2300      	moveq	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20002b8c 	.word	0x20002b8c

0800d0c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	e01f      	b.n	800d118 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0d8:	4a41      	ldr	r2, [pc, #260]	@ (800d1e0 <inc_lock+0x118>)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	4413      	add	r3, r2
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d113      	bne.n	800d112 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d0ea:	4a3d      	ldr	r2, [pc, #244]	@ (800d1e0 <inc_lock+0x118>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	011b      	lsls	r3, r3, #4
 800d0f0:	4413      	add	r3, r2
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d109      	bne.n	800d112 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d0fe:	4a38      	ldr	r2, [pc, #224]	@ (800d1e0 <inc_lock+0x118>)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	011b      	lsls	r3, r3, #4
 800d104:	4413      	add	r3, r2
 800d106:	3308      	adds	r3, #8
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d10e:	429a      	cmp	r2, r3
 800d110:	d006      	beq.n	800d120 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3301      	adds	r3, #1
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d9dc      	bls.n	800d0d8 <inc_lock+0x10>
 800d11e:	e000      	b.n	800d122 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d120:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b02      	cmp	r3, #2
 800d126:	d132      	bne.n	800d18e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d128:	2300      	movs	r3, #0
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	e002      	b.n	800d134 <inc_lock+0x6c>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3301      	adds	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d806      	bhi.n	800d148 <inc_lock+0x80>
 800d13a:	4a29      	ldr	r2, [pc, #164]	@ (800d1e0 <inc_lock+0x118>)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	011b      	lsls	r3, r3, #4
 800d140:	4413      	add	r3, r2
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1f2      	bne.n	800d12e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d101      	bne.n	800d152 <inc_lock+0x8a>
 800d14e:	2300      	movs	r3, #0
 800d150:	e040      	b.n	800d1d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	4922      	ldr	r1, [pc, #136]	@ (800d1e0 <inc_lock+0x118>)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	011b      	lsls	r3, r3, #4
 800d15c:	440b      	add	r3, r1
 800d15e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689a      	ldr	r2, [r3, #8]
 800d164:	491e      	ldr	r1, [pc, #120]	@ (800d1e0 <inc_lock+0x118>)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	011b      	lsls	r3, r3, #4
 800d16a:	440b      	add	r3, r1
 800d16c:	3304      	adds	r3, #4
 800d16e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	695a      	ldr	r2, [r3, #20]
 800d174:	491a      	ldr	r1, [pc, #104]	@ (800d1e0 <inc_lock+0x118>)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	011b      	lsls	r3, r3, #4
 800d17a:	440b      	add	r3, r1
 800d17c:	3308      	adds	r3, #8
 800d17e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d180:	4a17      	ldr	r2, [pc, #92]	@ (800d1e0 <inc_lock+0x118>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	011b      	lsls	r3, r3, #4
 800d186:	4413      	add	r3, r2
 800d188:	330c      	adds	r3, #12
 800d18a:	2200      	movs	r2, #0
 800d18c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d009      	beq.n	800d1a8 <inc_lock+0xe0>
 800d194:	4a12      	ldr	r2, [pc, #72]	@ (800d1e0 <inc_lock+0x118>)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	4413      	add	r3, r2
 800d19c:	330c      	adds	r3, #12
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <inc_lock+0xe0>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e015      	b.n	800d1d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d108      	bne.n	800d1c0 <inc_lock+0xf8>
 800d1ae:	4a0c      	ldr	r2, [pc, #48]	@ (800d1e0 <inc_lock+0x118>)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	011b      	lsls	r3, r3, #4
 800d1b4:	4413      	add	r3, r2
 800d1b6:	330c      	adds	r3, #12
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	e001      	b.n	800d1c4 <inc_lock+0xfc>
 800d1c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1c4:	4906      	ldr	r1, [pc, #24]	@ (800d1e0 <inc_lock+0x118>)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	011b      	lsls	r3, r3, #4
 800d1ca:	440b      	add	r3, r1
 800d1cc:	330c      	adds	r3, #12
 800d1ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3301      	adds	r3, #1
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	20002b8c 	.word	0x20002b8c

0800d1e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d825      	bhi.n	800d244 <dec_lock+0x60>
		n = Files[i].ctr;
 800d1f8:	4a17      	ldr	r2, [pc, #92]	@ (800d258 <dec_lock+0x74>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	011b      	lsls	r3, r3, #4
 800d1fe:	4413      	add	r3, r2
 800d200:	330c      	adds	r3, #12
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d206:	89fb      	ldrh	r3, [r7, #14]
 800d208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d20c:	d101      	bne.n	800d212 <dec_lock+0x2e>
 800d20e:	2300      	movs	r3, #0
 800d210:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d212:	89fb      	ldrh	r3, [r7, #14]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <dec_lock+0x3a>
 800d218:	89fb      	ldrh	r3, [r7, #14]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d21e:	4a0e      	ldr	r2, [pc, #56]	@ (800d258 <dec_lock+0x74>)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	011b      	lsls	r3, r3, #4
 800d224:	4413      	add	r3, r2
 800d226:	330c      	adds	r3, #12
 800d228:	89fa      	ldrh	r2, [r7, #14]
 800d22a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d22c:	89fb      	ldrh	r3, [r7, #14]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d105      	bne.n	800d23e <dec_lock+0x5a>
 800d232:	4a09      	ldr	r2, [pc, #36]	@ (800d258 <dec_lock+0x74>)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	011b      	lsls	r3, r3, #4
 800d238:	4413      	add	r3, r2
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	737b      	strb	r3, [r7, #13]
 800d242:	e001      	b.n	800d248 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d244:	2302      	movs	r3, #2
 800d246:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d248:	7b7b      	ldrb	r3, [r7, #13]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	20002b8c 	.word	0x20002b8c

0800d25c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d264:	2300      	movs	r3, #0
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e010      	b.n	800d28c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d26a:	4a0d      	ldr	r2, [pc, #52]	@ (800d2a0 <clear_lock+0x44>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	011b      	lsls	r3, r3, #4
 800d270:	4413      	add	r3, r2
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	429a      	cmp	r2, r3
 800d278:	d105      	bne.n	800d286 <clear_lock+0x2a>
 800d27a:	4a09      	ldr	r2, [pc, #36]	@ (800d2a0 <clear_lock+0x44>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	011b      	lsls	r3, r3, #4
 800d280:	4413      	add	r3, r2
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3301      	adds	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d9eb      	bls.n	800d26a <clear_lock+0xe>
	}
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20002b8c 	.word	0x20002b8c

0800d2a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	78db      	ldrb	r3, [r3, #3]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d034      	beq.n	800d322 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7858      	ldrb	r0, [r3, #1]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	f7ff fd0e 	bl	800ccec <disk_write>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	73fb      	strb	r3, [r7, #15]
 800d2da:	e022      	b.n	800d322 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	1ad2      	subs	r2, r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d217      	bcs.n	800d322 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	789b      	ldrb	r3, [r3, #2]
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	e010      	b.n	800d31c <sync_window+0x78>
					wsect += fs->fsize;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	4413      	add	r3, r2
 800d302:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7858      	ldrb	r0, [r3, #1]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d30e:	2301      	movs	r3, #1
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	f7ff fceb 	bl	800ccec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	3b01      	subs	r3, #1
 800d31a:	613b      	str	r3, [r7, #16]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d8eb      	bhi.n	800d2fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d322:	7bfb      	ldrb	r3, [r7, #15]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d01b      	beq.n	800d37c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ffad 	bl	800d2a4 <sync_window>
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d113      	bne.n	800d37c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7858      	ldrb	r0, [r3, #1]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d35e:	2301      	movs	r3, #1
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	f7ff fca3 	bl	800ccac <disk_read>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d004      	beq.n	800d376 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d36c:	f04f 33ff 	mov.w	r3, #4294967295
 800d370:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d372:	2301      	movs	r3, #1
 800d374:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7ff ff87 	bl	800d2a4 <sync_window>
 800d396:	4603      	mov	r3, r0
 800d398:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d159      	bne.n	800d454 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	d149      	bne.n	800d43c <sync_fs+0xb4>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	791b      	ldrb	r3, [r3, #4]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d145      	bne.n	800d43c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	899b      	ldrh	r3, [r3, #12]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	2100      	movs	r1, #0
 800d3be:	f7ff fd76 	bl	800ceae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	333c      	adds	r3, #60	@ 0x3c
 800d3c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d3ca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fd05 	bl	800cdde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	333c      	adds	r3, #60	@ 0x3c
 800d3d8:	4921      	ldr	r1, [pc, #132]	@ (800d460 <sync_fs+0xd8>)
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff fd1a 	bl	800ce14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	333c      	adds	r3, #60	@ 0x3c
 800d3e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d3e8:	491e      	ldr	r1, [pc, #120]	@ (800d464 <sync_fs+0xdc>)
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff fd12 	bl	800ce14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	333c      	adds	r3, #60	@ 0x3c
 800d3f4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	69db      	ldr	r3, [r3, #28]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4610      	mov	r0, r2
 800d400:	f7ff fd08 	bl	800ce14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	333c      	adds	r3, #60	@ 0x3c
 800d408:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	4619      	mov	r1, r3
 800d412:	4610      	mov	r0, r2
 800d414:	f7ff fcfe 	bl	800ce14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7858      	ldrb	r0, [r3, #1]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d430:	2301      	movs	r3, #1
 800d432:	f7ff fc5b 	bl	800ccec <disk_write>
			fs->fsi_flag = 0;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	2200      	movs	r2, #0
 800d442:	2100      	movs	r1, #0
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fc71 	bl	800cd2c <disk_ioctl>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <sync_fs+0xcc>
 800d450:	2301      	movs	r3, #1
 800d452:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	41615252 	.word	0x41615252
 800d464:	61417272 	.word	0x61417272

0800d468 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	3b02      	subs	r3, #2
 800d476:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	3b02      	subs	r3, #2
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d301      	bcc.n	800d488 <clust2sect+0x20>
 800d484:	2300      	movs	r3, #0
 800d486:	e008      	b.n	800d49a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	461a      	mov	r2, r3
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	fb03 f202 	mul.w	r2, r3, r2
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d498:	4413      	add	r3, r2
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b086      	sub	sp, #24
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d904      	bls.n	800d4c6 <get_fat+0x20>
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d302      	bcc.n	800d4cc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	e0ba      	b.n	800d642 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	f000 8082 	beq.w	800d5e0 <get_fat+0x13a>
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	f300 80a6 	bgt.w	800d62e <get_fat+0x188>
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d002      	beq.n	800d4ec <get_fat+0x46>
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d055      	beq.n	800d596 <get_fat+0xf0>
 800d4ea:	e0a0      	b.n	800d62e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	899b      	ldrh	r3, [r3, #12]
 800d502:	4619      	mov	r1, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	fbb3 f3f1 	udiv	r3, r3, r1
 800d50a:	4413      	add	r3, r2
 800d50c:	4619      	mov	r1, r3
 800d50e:	6938      	ldr	r0, [r7, #16]
 800d510:	f7ff ff0c 	bl	800d32c <move_window>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	f040 808c 	bne.w	800d634 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	60fa      	str	r2, [r7, #12]
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	8992      	ldrh	r2, [r2, #12]
 800d526:	fbb3 f1f2 	udiv	r1, r3, r2
 800d52a:	fb01 f202 	mul.w	r2, r1, r2
 800d52e:	1a9b      	subs	r3, r3, r2
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	4413      	add	r3, r2
 800d534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d538:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	899b      	ldrh	r3, [r3, #12]
 800d542:	4619      	mov	r1, r3
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	fbb3 f3f1 	udiv	r3, r3, r1
 800d54a:	4413      	add	r3, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	6938      	ldr	r0, [r7, #16]
 800d550:	f7ff feec 	bl	800d32c <move_window>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d16e      	bne.n	800d638 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	899b      	ldrh	r3, [r3, #12]
 800d55e:	461a      	mov	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	fbb3 f1f2 	udiv	r1, r3, r2
 800d566:	fb01 f202 	mul.w	r2, r1, r2
 800d56a:	1a9b      	subs	r3, r3, r2
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	4413      	add	r3, r2
 800d570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d574:	021b      	lsls	r3, r3, #8
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	4313      	orrs	r3, r2
 800d57a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <get_fat+0xe6>
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	091b      	lsrs	r3, r3, #4
 800d58a:	e002      	b.n	800d592 <get_fat+0xec>
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d592:	617b      	str	r3, [r7, #20]
			break;
 800d594:	e055      	b.n	800d642 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	899b      	ldrh	r3, [r3, #12]
 800d59e:	085b      	lsrs	r3, r3, #1
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5aa:	4413      	add	r3, r2
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6938      	ldr	r0, [r7, #16]
 800d5b0:	f7ff febc 	bl	800d32c <move_window>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d140      	bne.n	800d63c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	8992      	ldrh	r2, [r2, #12]
 800d5c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5cc:	fb00 f202 	mul.w	r2, r0, r2
 800d5d0:	1a9b      	subs	r3, r3, r2
 800d5d2:	440b      	add	r3, r1
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7ff fbc7 	bl	800cd68 <ld_word>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	617b      	str	r3, [r7, #20]
			break;
 800d5de:	e030      	b.n	800d642 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	899b      	ldrh	r3, [r3, #12]
 800d5e8:	089b      	lsrs	r3, r3, #2
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6938      	ldr	r0, [r7, #16]
 800d5fa:	f7ff fe97 	bl	800d32c <move_window>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d11d      	bne.n	800d640 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	8992      	ldrh	r2, [r2, #12]
 800d612:	fbb3 f0f2 	udiv	r0, r3, r2
 800d616:	fb00 f202 	mul.w	r2, r0, r2
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	440b      	add	r3, r1
 800d61e:	4618      	mov	r0, r3
 800d620:	f7ff fbba 	bl	800cd98 <ld_dword>
 800d624:	4603      	mov	r3, r0
 800d626:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d62a:	617b      	str	r3, [r7, #20]
			break;
 800d62c:	e009      	b.n	800d642 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d62e:	2301      	movs	r3, #1
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	e006      	b.n	800d642 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d634:	bf00      	nop
 800d636:	e004      	b.n	800d642 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d638:	bf00      	nop
 800d63a:	e002      	b.n	800d642 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d63c:	bf00      	nop
 800d63e:	e000      	b.n	800d642 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d640:	bf00      	nop
		}
	}

	return val;
 800d642:	697b      	ldr	r3, [r7, #20]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b089      	sub	sp, #36	@ 0x24
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d658:	2302      	movs	r3, #2
 800d65a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	f240 8109 	bls.w	800d876 <put_fat+0x22a>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	f080 8103 	bcs.w	800d876 <put_fat+0x22a>
		switch (fs->fs_type) {
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b03      	cmp	r3, #3
 800d676:	f000 80b6 	beq.w	800d7e6 <put_fat+0x19a>
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	f300 80fb 	bgt.w	800d876 <put_fat+0x22a>
 800d680:	2b01      	cmp	r3, #1
 800d682:	d003      	beq.n	800d68c <put_fat+0x40>
 800d684:	2b02      	cmp	r3, #2
 800d686:	f000 8083 	beq.w	800d790 <put_fat+0x144>
 800d68a:	e0f4      	b.n	800d876 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	61bb      	str	r3, [r7, #24]
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	085b      	lsrs	r3, r3, #1
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	4413      	add	r3, r2
 800d698:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	899b      	ldrh	r3, [r3, #12]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fe3c 	bl	800d32c <move_window>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6b8:	7ffb      	ldrb	r3, [r7, #31]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f040 80d4 	bne.w	800d868 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	1c5a      	adds	r2, r3, #1
 800d6ca:	61ba      	str	r2, [r7, #24]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	8992      	ldrh	r2, [r2, #12]
 800d6d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6d4:	fb00 f202 	mul.w	r2, r0, r2
 800d6d8:	1a9b      	subs	r3, r3, r2
 800d6da:	440b      	add	r3, r1
 800d6dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00d      	beq.n	800d704 <put_fat+0xb8>
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b25b      	sxtb	r3, r3
 800d6ee:	f003 030f 	and.w	r3, r3, #15
 800d6f2:	b25a      	sxtb	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	011b      	lsls	r3, r3, #4
 800d6fa:	b25b      	sxtb	r3, r3
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	b25b      	sxtb	r3, r3
 800d700:	b2db      	uxtb	r3, r3
 800d702:	e001      	b.n	800d708 <put_fat+0xbc>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2201      	movs	r2, #1
 800d710:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	4619      	mov	r1, r3
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d722:	4413      	add	r3, r2
 800d724:	4619      	mov	r1, r3
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7ff fe00 	bl	800d32c <move_window>
 800d72c:	4603      	mov	r3, r0
 800d72e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d730:	7ffb      	ldrb	r3, [r7, #31]
 800d732:	2b00      	cmp	r3, #0
 800d734:	f040 809a 	bne.w	800d86c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	461a      	mov	r2, r3
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	fbb3 f0f2 	udiv	r0, r3, r2
 800d74a:	fb00 f202 	mul.w	r2, r0, r2
 800d74e:	1a9b      	subs	r3, r3, r2
 800d750:	440b      	add	r3, r1
 800d752:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	f003 0301 	and.w	r3, r3, #1
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <put_fat+0x11a>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	091b      	lsrs	r3, r3, #4
 800d762:	b2db      	uxtb	r3, r3
 800d764:	e00e      	b.n	800d784 <put_fat+0x138>
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	b25b      	sxtb	r3, r3
 800d76c:	f023 030f 	bic.w	r3, r3, #15
 800d770:	b25a      	sxtb	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	0a1b      	lsrs	r3, r3, #8
 800d776:	b25b      	sxtb	r3, r3
 800d778:	f003 030f 	and.w	r3, r3, #15
 800d77c:	b25b      	sxtb	r3, r3
 800d77e:	4313      	orrs	r3, r2
 800d780:	b25b      	sxtb	r3, r3
 800d782:	b2db      	uxtb	r3, r3
 800d784:	697a      	ldr	r2, [r7, #20]
 800d786:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	70da      	strb	r2, [r3, #3]
			break;
 800d78e:	e072      	b.n	800d876 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	899b      	ldrh	r3, [r3, #12]
 800d798:	085b      	lsrs	r3, r3, #1
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	4619      	mov	r1, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7a4:	4413      	add	r3, r2
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f7ff fdbf 	bl	800d32c <move_window>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7b2:	7ffb      	ldrb	r3, [r7, #31]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d15b      	bne.n	800d870 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	8992      	ldrh	r2, [r2, #12]
 800d7c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7ca:	fb00 f202 	mul.w	r2, r0, r2
 800d7ce:	1a9b      	subs	r3, r3, r2
 800d7d0:	440b      	add	r3, r1
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	b292      	uxth	r2, r2
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fb00 	bl	800cdde <st_word>
			fs->wflag = 1;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	70da      	strb	r2, [r3, #3]
			break;
 800d7e4:	e047      	b.n	800d876 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	899b      	ldrh	r3, [r3, #12]
 800d7ee:	089b      	lsrs	r3, r3, #2
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7fa:	4413      	add	r3, r2
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7ff fd94 	bl	800d32c <move_window>
 800d804:	4603      	mov	r3, r0
 800d806:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d808:	7ffb      	ldrb	r3, [r7, #31]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d132      	bne.n	800d874 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	8992      	ldrh	r2, [r2, #12]
 800d822:	fbb3 f0f2 	udiv	r0, r3, r2
 800d826:	fb00 f202 	mul.w	r2, r0, r2
 800d82a:	1a9b      	subs	r3, r3, r2
 800d82c:	440b      	add	r3, r1
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fab2 	bl	800cd98 <ld_dword>
 800d834:	4603      	mov	r3, r0
 800d836:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d83a:	4323      	orrs	r3, r4
 800d83c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	8992      	ldrh	r2, [r2, #12]
 800d84c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d850:	fb00 f202 	mul.w	r2, r0, r2
 800d854:	1a9b      	subs	r3, r3, r2
 800d856:	440b      	add	r3, r1
 800d858:	6879      	ldr	r1, [r7, #4]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fada 	bl	800ce14 <st_dword>
			fs->wflag = 1;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2201      	movs	r2, #1
 800d864:	70da      	strb	r2, [r3, #3]
			break;
 800d866:	e006      	b.n	800d876 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d868:	bf00      	nop
 800d86a:	e004      	b.n	800d876 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d86c:	bf00      	nop
 800d86e:	e002      	b.n	800d876 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d870:	bf00      	nop
 800d872:	e000      	b.n	800d876 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d874:	bf00      	nop
		}
	}
	return res;
 800d876:	7ffb      	ldrb	r3, [r7, #31]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3724      	adds	r7, #36	@ 0x24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd90      	pop	{r4, r7, pc}

0800d880 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d904      	bls.n	800d8a6 <remove_chain+0x26>
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	6a1b      	ldr	r3, [r3, #32]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d301      	bcc.n	800d8aa <remove_chain+0x2a>
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	e04b      	b.n	800d942 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00c      	beq.n	800d8ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	69b8      	ldr	r0, [r7, #24]
 800d8b8:	f7ff fec8 	bl	800d64c <put_fat>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d8c0:	7ffb      	ldrb	r3, [r7, #31]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d001      	beq.n	800d8ca <remove_chain+0x4a>
 800d8c6:	7ffb      	ldrb	r3, [r7, #31]
 800d8c8:	e03b      	b.n	800d942 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f7ff fdea 	bl	800d4a6 <get_fat>
 800d8d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d031      	beq.n	800d93e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d101      	bne.n	800d8e4 <remove_chain+0x64>
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	e02e      	b.n	800d942 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d101      	bne.n	800d8f0 <remove_chain+0x70>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e028      	b.n	800d942 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	68b9      	ldr	r1, [r7, #8]
 800d8f4:	69b8      	ldr	r0, [r7, #24]
 800d8f6:	f7ff fea9 	bl	800d64c <put_fat>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d8fe:	7ffb      	ldrb	r3, [r7, #31]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <remove_chain+0x88>
 800d904:	7ffb      	ldrb	r3, [r7, #31]
 800d906:	e01c      	b.n	800d942 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	69da      	ldr	r2, [r3, #28]
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	3b02      	subs	r3, #2
 800d912:	429a      	cmp	r2, r3
 800d914:	d20b      	bcs.n	800d92e <remove_chain+0xae>
			fs->free_clst++;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	791b      	ldrb	r3, [r3, #4]
 800d924:	f043 0301 	orr.w	r3, r3, #1
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d3c6      	bcc.n	800d8ca <remove_chain+0x4a>
 800d93c:	e000      	b.n	800d940 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d93e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3720      	adds	r7, #32
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b088      	sub	sp, #32
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10d      	bne.n	800d97c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <create_chain+0x2c>
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	429a      	cmp	r2, r3
 800d974:	d31b      	bcc.n	800d9ae <create_chain+0x64>
 800d976:	2301      	movs	r3, #1
 800d978:	61bb      	str	r3, [r7, #24]
 800d97a:	e018      	b.n	800d9ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d97c:	6839      	ldr	r1, [r7, #0]
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff fd91 	bl	800d4a6 <get_fat>
 800d984:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d801      	bhi.n	800d990 <create_chain+0x46>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e070      	b.n	800da72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d996:	d101      	bne.n	800d99c <create_chain+0x52>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	e06a      	b.n	800da72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d201      	bcs.n	800d9aa <create_chain+0x60>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	e063      	b.n	800da72 <create_chain+0x128>
		scl = clst;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	6a1b      	ldr	r3, [r3, #32]
 800d9bc:	69fa      	ldr	r2, [r7, #28]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d307      	bcc.n	800d9d2 <create_chain+0x88>
				ncl = 2;
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d9c6:	69fa      	ldr	r2, [r7, #28]
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d901      	bls.n	800d9d2 <create_chain+0x88>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	e04f      	b.n	800da72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d9d2:	69f9      	ldr	r1, [r7, #28]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff fd66 	bl	800d4a6 <get_fat>
 800d9da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00e      	beq.n	800da00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d003      	beq.n	800d9f0 <create_chain+0xa6>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d101      	bne.n	800d9f4 <create_chain+0xaa>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	e03e      	b.n	800da72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d9f4:	69fa      	ldr	r2, [r7, #28]
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d1da      	bne.n	800d9b2 <create_chain+0x68>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e038      	b.n	800da72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800da00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800da02:	f04f 32ff 	mov.w	r2, #4294967295
 800da06:	69f9      	ldr	r1, [r7, #28]
 800da08:	6938      	ldr	r0, [r7, #16]
 800da0a:	f7ff fe1f 	bl	800d64c <put_fat>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <create_chain+0xe2>
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d006      	beq.n	800da2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800da1e:	69fa      	ldr	r2, [r7, #28]
 800da20:	6839      	ldr	r1, [r7, #0]
 800da22:	6938      	ldr	r0, [r7, #16]
 800da24:	f7ff fe12 	bl	800d64c <put_fat>
 800da28:	4603      	mov	r3, r0
 800da2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800da2c:	7dfb      	ldrb	r3, [r7, #23]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d116      	bne.n	800da60 <create_chain+0x116>
		fs->last_clst = ncl;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	69fa      	ldr	r2, [r7, #28]
 800da36:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	69da      	ldr	r2, [r3, #28]
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6a1b      	ldr	r3, [r3, #32]
 800da40:	3b02      	subs	r3, #2
 800da42:	429a      	cmp	r2, r3
 800da44:	d804      	bhi.n	800da50 <create_chain+0x106>
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	69db      	ldr	r3, [r3, #28]
 800da4a:	1e5a      	subs	r2, r3, #1
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	791b      	ldrb	r3, [r3, #4]
 800da54:	f043 0301 	orr.w	r3, r3, #1
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	711a      	strb	r2, [r3, #4]
 800da5e:	e007      	b.n	800da70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d102      	bne.n	800da6c <create_chain+0x122>
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	e000      	b.n	800da6e <create_chain+0x124>
 800da6c:	2301      	movs	r3, #1
 800da6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800da70:	69fb      	ldr	r3, [r7, #28]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3720      	adds	r7, #32
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b087      	sub	sp, #28
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da8e:	3304      	adds	r3, #4
 800da90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	899b      	ldrh	r3, [r3, #12]
 800da96:	461a      	mov	r2, r3
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	8952      	ldrh	r2, [r2, #10]
 800daa2:	fbb3 f3f2 	udiv	r3, r3, r2
 800daa6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	1d1a      	adds	r2, r3, #4
 800daac:	613a      	str	r2, [r7, #16]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <clmt_clust+0x42>
 800dab8:	2300      	movs	r3, #0
 800daba:	e010      	b.n	800dade <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d307      	bcc.n	800dad4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	3304      	adds	r3, #4
 800dad0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dad2:	e7e9      	b.n	800daa8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dad4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	4413      	add	r3, r2
}
 800dade:	4618      	mov	r0, r3
 800dae0:	371c      	adds	r7, #28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b086      	sub	sp, #24
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db00:	d204      	bcs.n	800db0c <dir_sdi+0x22>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	f003 031f 	and.w	r3, r3, #31
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800db0c:	2302      	movs	r3, #2
 800db0e:	e071      	b.n	800dbf4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	683a      	ldr	r2, [r7, #0]
 800db14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <dir_sdi+0x46>
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b02      	cmp	r3, #2
 800db28:	d902      	bls.n	800db30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10c      	bne.n	800db50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	095b      	lsrs	r3, r3, #5
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	8912      	ldrh	r2, [r2, #8]
 800db3e:	4293      	cmp	r3, r2
 800db40:	d301      	bcc.n	800db46 <dir_sdi+0x5c>
 800db42:	2302      	movs	r3, #2
 800db44:	e056      	b.n	800dbf4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	61da      	str	r2, [r3, #28]
 800db4e:	e02d      	b.n	800dbac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	895b      	ldrh	r3, [r3, #10]
 800db54:	461a      	mov	r2, r3
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	899b      	ldrh	r3, [r3, #12]
 800db5a:	fb02 f303 	mul.w	r3, r2, r3
 800db5e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db60:	e019      	b.n	800db96 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6979      	ldr	r1, [r7, #20]
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fc9d 	bl	800d4a6 <get_fat>
 800db6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db74:	d101      	bne.n	800db7a <dir_sdi+0x90>
 800db76:	2301      	movs	r3, #1
 800db78:	e03c      	b.n	800dbf4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d904      	bls.n	800db8a <dir_sdi+0xa0>
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	6a1b      	ldr	r3, [r3, #32]
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	429a      	cmp	r2, r3
 800db88:	d301      	bcc.n	800db8e <dir_sdi+0xa4>
 800db8a:	2302      	movs	r3, #2
 800db8c:	e032      	b.n	800dbf4 <dir_sdi+0x10a>
			ofs -= csz;
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d2e1      	bcs.n	800db62 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800db9e:	6979      	ldr	r1, [r7, #20]
 800dba0:	6938      	ldr	r0, [r7, #16]
 800dba2:	f7ff fc61 	bl	800d468 <clust2sect>
 800dba6:	4602      	mov	r2, r0
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <dir_sdi+0xd4>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e01a      	b.n	800dbf4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	69da      	ldr	r2, [r3, #28]
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	899b      	ldrh	r3, [r3, #12]
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbce:	441a      	add	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	899b      	ldrh	r3, [r3, #12]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbe6:	fb00 f202 	mul.w	r2, r0, r2
 800dbea:	1a9b      	subs	r3, r3, r2
 800dbec:	18ca      	adds	r2, r1, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	3320      	adds	r3, #32
 800dc12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	69db      	ldr	r3, [r3, #28]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <dir_next+0x28>
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc22:	d301      	bcc.n	800dc28 <dir_next+0x2c>
 800dc24:	2304      	movs	r3, #4
 800dc26:	e0bb      	b.n	800dda0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	899b      	ldrh	r3, [r3, #12]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc34:	fb01 f202 	mul.w	r2, r1, r2
 800dc38:	1a9b      	subs	r3, r3, r2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f040 809d 	bne.w	800dd7a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	1c5a      	adds	r2, r3, #1
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10b      	bne.n	800dc6a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	095b      	lsrs	r3, r3, #5
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	8912      	ldrh	r2, [r2, #8]
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	f0c0 808d 	bcc.w	800dd7a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	61da      	str	r2, [r3, #28]
 800dc66:	2304      	movs	r3, #4
 800dc68:	e09a      	b.n	800dda0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	899b      	ldrh	r3, [r3, #12]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	8952      	ldrh	r2, [r2, #10]
 800dc7a:	3a01      	subs	r2, #1
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d17b      	bne.n	800dd7a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f7ff fc0b 	bl	800d4a6 <get_fat>
 800dc90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d801      	bhi.n	800dc9c <dir_next+0xa0>
 800dc98:	2302      	movs	r3, #2
 800dc9a:	e081      	b.n	800dda0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca2:	d101      	bne.n	800dca8 <dir_next+0xac>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e07b      	b.n	800dda0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6a1b      	ldr	r3, [r3, #32]
 800dcac:	697a      	ldr	r2, [r7, #20]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d359      	bcc.n	800dd66 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d104      	bne.n	800dcc2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	61da      	str	r2, [r3, #28]
 800dcbe:	2304      	movs	r3, #4
 800dcc0:	e06e      	b.n	800dda0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7ff fe3d 	bl	800d94a <create_chain>
 800dcd0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <dir_next+0xe0>
 800dcd8:	2307      	movs	r3, #7
 800dcda:	e061      	b.n	800dda0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d101      	bne.n	800dce6 <dir_next+0xea>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e05c      	b.n	800dda0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcec:	d101      	bne.n	800dcf2 <dir_next+0xf6>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e056      	b.n	800dda0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7ff fad6 	bl	800d2a4 <sync_window>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <dir_next+0x106>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e04e      	b.n	800dda0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	899b      	ldrh	r3, [r3, #12]
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	2100      	movs	r1, #0
 800dd10:	f7ff f8cd 	bl	800ceae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd14:	2300      	movs	r3, #0
 800dd16:	613b      	str	r3, [r7, #16]
 800dd18:	6979      	ldr	r1, [r7, #20]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fba4 	bl	800d468 <clust2sect>
 800dd20:	4602      	mov	r2, r0
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd26:	e012      	b.n	800dd4e <dir_next+0x152>
						fs->wflag = 1;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f7ff fab8 	bl	800d2a4 <sync_window>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <dir_next+0x142>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e030      	b.n	800dda0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	3301      	adds	r3, #1
 800dd42:	613b      	str	r3, [r7, #16]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	895b      	ldrh	r3, [r3, #10]
 800dd52:	461a      	mov	r2, r3
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d3e6      	bcc.n	800dd28 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	1ad2      	subs	r2, r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	697a      	ldr	r2, [r7, #20]
 800dd6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dd6c:	6979      	ldr	r1, [r7, #20]
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7ff fb7a 	bl	800d468 <clust2sect>
 800dd74:	4602      	mov	r2, r0
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	899b      	ldrh	r3, [r3, #12]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd92:	fb00 f202 	mul.w	r2, r0, r2
 800dd96:	1a9b      	subs	r3, r3, r2
 800dd98:	18ca      	adds	r2, r1, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ddb8:	2100      	movs	r1, #0
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff fe95 	bl	800daea <dir_sdi>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d12b      	bne.n	800de22 <dir_alloc+0x7a>
		n = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff faa9 	bl	800d32c <move_window>
 800ddda:	4603      	mov	r3, r0
 800dddc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d11d      	bne.n	800de20 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	2be5      	cmp	r3, #229	@ 0xe5
 800ddec:	d004      	beq.n	800ddf8 <dir_alloc+0x50>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d107      	bne.n	800de08 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	613b      	str	r3, [r7, #16]
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d102      	bne.n	800de0c <dir_alloc+0x64>
 800de06:	e00c      	b.n	800de22 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de08:	2300      	movs	r3, #0
 800de0a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800de0c:	2101      	movs	r1, #1
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff fef4 	bl	800dbfc <dir_next>
 800de14:	4603      	mov	r3, r0
 800de16:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800de18:	7dfb      	ldrb	r3, [r7, #23]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d0d7      	beq.n	800ddce <dir_alloc+0x26>
 800de1e:	e000      	b.n	800de22 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800de20:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de22:	7dfb      	ldrb	r3, [r7, #23]
 800de24:	2b04      	cmp	r3, #4
 800de26:	d101      	bne.n	800de2c <dir_alloc+0x84>
 800de28:	2307      	movs	r3, #7
 800de2a:	75fb      	strb	r3, [r7, #23]
	return res;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3718      	adds	r7, #24
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	331a      	adds	r3, #26
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe ff8f 	bl	800cd68 <ld_word>
 800de4a:	4603      	mov	r3, r0
 800de4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b03      	cmp	r3, #3
 800de54:	d109      	bne.n	800de6a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	3314      	adds	r3, #20
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe ff84 	bl	800cd68 <ld_word>
 800de60:	4603      	mov	r3, r0
 800de62:	041b      	lsls	r3, r3, #16
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	4313      	orrs	r3, r2
 800de68:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800de6a:	68fb      	ldr	r3, [r7, #12]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	331a      	adds	r3, #26
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	b292      	uxth	r2, r2
 800de88:	4611      	mov	r1, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe ffa7 	bl	800cdde <st_word>
	if (fs->fs_type == FS_FAT32) {
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b03      	cmp	r3, #3
 800de96:	d109      	bne.n	800deac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f103 0214 	add.w	r2, r3, #20
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0c1b      	lsrs	r3, r3, #16
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	4619      	mov	r1, r3
 800dea6:	4610      	mov	r0, r2
 800dea8:	f7fe ff99 	bl	800cdde <st_word>
	}
}
 800deac:	bf00      	nop
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	331a      	adds	r3, #26
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe ff50 	bl	800cd68 <ld_word>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <cmp_lfn+0x1e>
 800dece:	2300      	movs	r3, #0
 800ded0:	e059      	b.n	800df86 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800deda:	1e5a      	subs	r2, r3, #1
 800dedc:	4613      	mov	r3, r2
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dee8:	2301      	movs	r3, #1
 800deea:	81fb      	strh	r3, [r7, #14]
 800deec:	2300      	movs	r3, #0
 800deee:	613b      	str	r3, [r7, #16]
 800def0:	e033      	b.n	800df5a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800def2:	4a27      	ldr	r2, [pc, #156]	@ (800df90 <cmp_lfn+0xdc>)
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	4413      	add	r3, r2
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	4413      	add	r3, r2
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe ff31 	bl	800cd68 <ld_word>
 800df06:	4603      	mov	r3, r0
 800df08:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800df0a:	89fb      	ldrh	r3, [r7, #14]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d01a      	beq.n	800df46 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2bfe      	cmp	r3, #254	@ 0xfe
 800df14:	d812      	bhi.n	800df3c <cmp_lfn+0x88>
 800df16:	89bb      	ldrh	r3, [r7, #12]
 800df18:	4618      	mov	r0, r3
 800df1a:	f002 f83d 	bl	800ff98 <ff_wtoupper>
 800df1e:	4603      	mov	r3, r0
 800df20:	461c      	mov	r4, r3
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	1c5a      	adds	r2, r3, #1
 800df26:	617a      	str	r2, [r7, #20]
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	4413      	add	r3, r2
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f002 f831 	bl	800ff98 <ff_wtoupper>
 800df36:	4603      	mov	r3, r0
 800df38:	429c      	cmp	r4, r3
 800df3a:	d001      	beq.n	800df40 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800df3c:	2300      	movs	r3, #0
 800df3e:	e022      	b.n	800df86 <cmp_lfn+0xd2>
			}
			wc = uc;
 800df40:	89bb      	ldrh	r3, [r7, #12]
 800df42:	81fb      	strh	r3, [r7, #14]
 800df44:	e006      	b.n	800df54 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800df46:	89bb      	ldrh	r3, [r7, #12]
 800df48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d001      	beq.n	800df54 <cmp_lfn+0xa0>
 800df50:	2300      	movs	r3, #0
 800df52:	e018      	b.n	800df86 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	3301      	adds	r3, #1
 800df58:	613b      	str	r3, [r7, #16]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	2b0c      	cmp	r3, #12
 800df5e:	d9c8      	bls.n	800def2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00b      	beq.n	800df84 <cmp_lfn+0xd0>
 800df6c:	89fb      	ldrh	r3, [r7, #14]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d008      	beq.n	800df84 <cmp_lfn+0xd0>
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	4413      	add	r3, r2
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <cmp_lfn+0xd0>
 800df80:	2300      	movs	r3, #0
 800df82:	e000      	b.n	800df86 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800df84:	2301      	movs	r3, #1
}
 800df86:	4618      	mov	r0, r3
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd90      	pop	{r4, r7, pc}
 800df8e:	bf00      	nop
 800df90:	08015a3c 	.word	0x08015a3c

0800df94 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	4611      	mov	r1, r2
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	71fb      	strb	r3, [r7, #7]
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	330d      	adds	r3, #13
 800dfae:	79ba      	ldrb	r2, [r7, #6]
 800dfb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	330b      	adds	r3, #11
 800dfb6:	220f      	movs	r2, #15
 800dfb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	330c      	adds	r3, #12
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	331a      	adds	r3, #26
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe ff08 	bl	800cdde <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	1e5a      	subs	r2, r3, #1
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	82fb      	strh	r3, [r7, #22]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dfe6:	8afb      	ldrh	r3, [r7, #22]
 800dfe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d007      	beq.n	800e000 <put_lfn+0x6c>
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	61fa      	str	r2, [r7, #28]
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	4413      	add	r3, r2
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e000:	4a17      	ldr	r2, [pc, #92]	@ (800e060 <put_lfn+0xcc>)
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	4413      	add	r3, r2
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	461a      	mov	r2, r3
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	8afa      	ldrh	r2, [r7, #22]
 800e010:	4611      	mov	r1, r2
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe fee3 	bl	800cdde <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e018:	8afb      	ldrh	r3, [r7, #22]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d102      	bne.n	800e024 <put_lfn+0x90>
 800e01e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e022:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	3301      	adds	r3, #1
 800e028:	61bb      	str	r3, [r7, #24]
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2b0c      	cmp	r3, #12
 800e02e:	d9da      	bls.n	800dfe6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e030:	8afb      	ldrh	r3, [r7, #22]
 800e032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e036:	4293      	cmp	r3, r2
 800e038:	d006      	beq.n	800e048 <put_lfn+0xb4>
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	4413      	add	r3, r2
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d103      	bne.n	800e050 <put_lfn+0xbc>
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e04e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	79fa      	ldrb	r2, [r7, #7]
 800e054:	701a      	strb	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	08015a3c 	.word	0x08015a3c

0800e064 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08c      	sub	sp, #48	@ 0x30
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e072:	220b      	movs	r2, #11
 800e074:	68b9      	ldr	r1, [r7, #8]
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f7fe fef8 	bl	800ce6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	2b05      	cmp	r3, #5
 800e080:	d92b      	bls.n	800e0da <gen_numname+0x76>
		sr = seq;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e086:	e022      	b.n	800e0ce <gen_numname+0x6a>
			wc = *lfn++;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	1c9a      	adds	r2, r3, #2
 800e08c:	607a      	str	r2, [r7, #4]
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e092:	2300      	movs	r3, #0
 800e094:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e096:	e017      	b.n	800e0c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	005a      	lsls	r2, r3, #1
 800e09c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	4413      	add	r3, r2
 800e0a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e0a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0a8:	085b      	lsrs	r3, r3, #1
 800e0aa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d005      	beq.n	800e0c2 <gen_numname+0x5e>
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e0bc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e0c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ca:	2b0f      	cmp	r3, #15
 800e0cc:	d9e4      	bls.n	800e098 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1d8      	bne.n	800e088 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e0da:	2307      	movs	r3, #7
 800e0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	f003 030f 	and.w	r3, r3, #15
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	3330      	adds	r3, #48	@ 0x30
 800e0ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e0ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0f2:	2b39      	cmp	r3, #57	@ 0x39
 800e0f4:	d904      	bls.n	800e100 <gen_numname+0x9c>
 800e0f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0fa:	3307      	adds	r3, #7
 800e0fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e102:	1e5a      	subs	r2, r3, #1
 800e104:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e106:	3330      	adds	r3, #48	@ 0x30
 800e108:	443b      	add	r3, r7
 800e10a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e10e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	091b      	lsrs	r3, r3, #4
 800e116:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1df      	bne.n	800e0de <gen_numname+0x7a>
	ns[i] = '~';
 800e11e:	f107 0214 	add.w	r2, r7, #20
 800e122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e124:	4413      	add	r3, r2
 800e126:	227e      	movs	r2, #126	@ 0x7e
 800e128:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e12e:	e002      	b.n	800e136 <gen_numname+0xd2>
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	3301      	adds	r3, #1
 800e134:	627b      	str	r3, [r7, #36]	@ 0x24
 800e136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d205      	bcs.n	800e14a <gen_numname+0xe6>
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e142:	4413      	add	r3, r2
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b20      	cmp	r3, #32
 800e148:	d1f2      	bne.n	800e130 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14c:	2b07      	cmp	r3, #7
 800e14e:	d807      	bhi.n	800e160 <gen_numname+0xfc>
 800e150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e156:	3330      	adds	r3, #48	@ 0x30
 800e158:	443b      	add	r3, r7
 800e15a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e15e:	e000      	b.n	800e162 <gen_numname+0xfe>
 800e160:	2120      	movs	r1, #32
 800e162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	627a      	str	r2, [r7, #36]	@ 0x24
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4413      	add	r3, r2
 800e16c:	460a      	mov	r2, r1
 800e16e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	2b07      	cmp	r3, #7
 800e174:	d9e9      	bls.n	800e14a <gen_numname+0xe6>
}
 800e176:	bf00      	nop
 800e178:	bf00      	nop
 800e17a:	3730      	adds	r7, #48	@ 0x30
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e18c:	230b      	movs	r3, #11
 800e18e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	b2da      	uxtb	r2, r3
 800e194:	0852      	lsrs	r2, r2, #1
 800e196:	01db      	lsls	r3, r3, #7
 800e198:	4313      	orrs	r3, r2
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	1c59      	adds	r1, r3, #1
 800e1a0:	6079      	str	r1, [r7, #4]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	60bb      	str	r3, [r7, #8]
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1ed      	bne.n	800e190 <sum_sfn+0x10>
	return sum;
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b086      	sub	sp, #24
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7ff fc89 	bl	800daea <dir_sdi>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <dir_find+0x24>
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	e0a9      	b.n	800e33a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1e6:	23ff      	movs	r3, #255	@ 0xff
 800e1e8:	753b      	strb	r3, [r7, #20]
 800e1ea:	7d3b      	ldrb	r3, [r7, #20]
 800e1ec:	757b      	strb	r3, [r7, #21]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	69db      	ldr	r3, [r3, #28]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6938      	ldr	r0, [r7, #16]
 800e1fe:	f7ff f895 	bl	800d32c <move_window>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f040 8090 	bne.w	800e32e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e216:	7dbb      	ldrb	r3, [r7, #22]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <dir_find+0x60>
 800e21c:	2304      	movs	r3, #4
 800e21e:	75fb      	strb	r3, [r7, #23]
 800e220:	e08a      	b.n	800e338 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	330b      	adds	r3, #11
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e22e:	73fb      	strb	r3, [r7, #15]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	7bfa      	ldrb	r2, [r7, #15]
 800e234:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e236:	7dbb      	ldrb	r3, [r7, #22]
 800e238:	2be5      	cmp	r3, #229	@ 0xe5
 800e23a:	d007      	beq.n	800e24c <dir_find+0x8a>
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	f003 0308 	and.w	r3, r3, #8
 800e242:	2b00      	cmp	r3, #0
 800e244:	d009      	beq.n	800e25a <dir_find+0x98>
 800e246:	7bfb      	ldrb	r3, [r7, #15]
 800e248:	2b0f      	cmp	r3, #15
 800e24a:	d006      	beq.n	800e25a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e24c:	23ff      	movs	r3, #255	@ 0xff
 800e24e:	757b      	strb	r3, [r7, #21]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f04f 32ff 	mov.w	r2, #4294967295
 800e256:	631a      	str	r2, [r3, #48]	@ 0x30
 800e258:	e05e      	b.n	800e318 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
 800e25c:	2b0f      	cmp	r3, #15
 800e25e:	d136      	bne.n	800e2ce <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d154      	bne.n	800e318 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e26e:	7dbb      	ldrb	r3, [r7, #22]
 800e270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00d      	beq.n	800e294 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a1b      	ldr	r3, [r3, #32]
 800e27c:	7b5b      	ldrb	r3, [r3, #13]
 800e27e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e280:	7dbb      	ldrb	r3, [r7, #22]
 800e282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e286:	75bb      	strb	r3, [r7, #22]
 800e288:	7dbb      	ldrb	r3, [r7, #22]
 800e28a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	695a      	ldr	r2, [r3, #20]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e294:	7dba      	ldrb	r2, [r7, #22]
 800e296:	7d7b      	ldrb	r3, [r7, #21]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d115      	bne.n	800e2c8 <dir_find+0x106>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a1b      	ldr	r3, [r3, #32]
 800e2a0:	330d      	adds	r3, #13
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	7d3a      	ldrb	r2, [r7, #20]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d10e      	bne.n	800e2c8 <dir_find+0x106>
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	691a      	ldr	r2, [r3, #16]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	f7ff fdfd 	bl	800deb4 <cmp_lfn>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <dir_find+0x106>
 800e2c0:	7d7b      	ldrb	r3, [r7, #21]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	e000      	b.n	800e2ca <dir_find+0x108>
 800e2c8:	23ff      	movs	r3, #255	@ 0xff
 800e2ca:	757b      	strb	r3, [r7, #21]
 800e2cc:	e024      	b.n	800e318 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e2ce:	7d7b      	ldrb	r3, [r7, #21]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d109      	bne.n	800e2e8 <dir_find+0x126>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7ff ff51 	bl	800e180 <sum_sfn>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	7d3b      	ldrb	r3, [r7, #20]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d024      	beq.n	800e332 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10a      	bne.n	800e30c <dir_find+0x14a>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6a18      	ldr	r0, [r3, #32]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3324      	adds	r3, #36	@ 0x24
 800e2fe:	220b      	movs	r2, #11
 800e300:	4619      	mov	r1, r3
 800e302:	f7fe fdef 	bl	800cee4 <mem_cmp>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d014      	beq.n	800e336 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e30c:	23ff      	movs	r3, #255	@ 0xff
 800e30e:	757b      	strb	r3, [r7, #21]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f04f 32ff 	mov.w	r2, #4294967295
 800e316:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e318:	2100      	movs	r1, #0
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fc6e 	bl	800dbfc <dir_next>
 800e320:	4603      	mov	r3, r0
 800e322:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e324:	7dfb      	ldrb	r3, [r7, #23]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f43f af65 	beq.w	800e1f6 <dir_find+0x34>
 800e32c:	e004      	b.n	800e338 <dir_find+0x176>
		if (res != FR_OK) break;
 800e32e:	bf00      	nop
 800e330:	e002      	b.n	800e338 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e332:	bf00      	nop
 800e334:	e000      	b.n	800e338 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e336:	bf00      	nop

	return res;
 800e338:	7dfb      	ldrb	r3, [r7, #23]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b08c      	sub	sp, #48	@ 0x30
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e358:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <dir_register+0x20>
 800e360:	2306      	movs	r3, #6
 800e362:	e0e0      	b.n	800e526 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e364:	2300      	movs	r3, #0
 800e366:	627b      	str	r3, [r7, #36]	@ 0x24
 800e368:	e002      	b.n	800e370 <dir_register+0x2c>
 800e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36c:	3301      	adds	r3, #1
 800e36e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	691a      	ldr	r2, [r3, #16]
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	4413      	add	r3, r2
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1f4      	bne.n	800e36a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e386:	f107 030c 	add.w	r3, r7, #12
 800e38a:	220c      	movs	r2, #12
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fd6d 	bl	800ce6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	f003 0301 	and.w	r3, r3, #1
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d032      	beq.n	800e402 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2240      	movs	r2, #64	@ 0x40
 800e3a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e3a8:	e016      	b.n	800e3d8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	691a      	ldr	r2, [r3, #16]
 800e3b4:	f107 010c 	add.w	r1, r7, #12
 800e3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ba:	f7ff fe53 	bl	800e064 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff feff 	bl	800e1c2 <dir_find>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3da:	2b63      	cmp	r3, #99	@ 0x63
 800e3dc:	d9e5      	bls.n	800e3aa <dir_register+0x66>
 800e3de:	e000      	b.n	800e3e2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e3e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	2b64      	cmp	r3, #100	@ 0x64
 800e3e6:	d101      	bne.n	800e3ec <dir_register+0xa8>
 800e3e8:	2307      	movs	r3, #7
 800e3ea:	e09c      	b.n	800e526 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d002      	beq.n	800e3fa <dir_register+0xb6>
 800e3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e3f8:	e095      	b.n	800e526 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e3fa:	7dfa      	ldrb	r2, [r7, #23]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	f003 0302 	and.w	r3, r3, #2
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <dir_register+0xd8>
 800e40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40e:	330c      	adds	r3, #12
 800e410:	4a47      	ldr	r2, [pc, #284]	@ (800e530 <dir_register+0x1ec>)
 800e412:	fba2 2303 	umull	r2, r3, r2, r3
 800e416:	089b      	lsrs	r3, r3, #2
 800e418:	3301      	adds	r3, #1
 800e41a:	e000      	b.n	800e41e <dir_register+0xda>
 800e41c:	2301      	movs	r3, #1
 800e41e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e420:	6a39      	ldr	r1, [r7, #32]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff fcc0 	bl	800dda8 <dir_alloc>
 800e428:	4603      	mov	r3, r0
 800e42a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e42e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e432:	2b00      	cmp	r3, #0
 800e434:	d148      	bne.n	800e4c8 <dir_register+0x184>
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	3b01      	subs	r3, #1
 800e43a:	623b      	str	r3, [r7, #32]
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d042      	beq.n	800e4c8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695a      	ldr	r2, [r3, #20]
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	015b      	lsls	r3, r3, #5
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	4619      	mov	r1, r3
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff fb4b 	bl	800daea <dir_sdi>
 800e454:	4603      	mov	r3, r0
 800e456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e45a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d132      	bne.n	800e4c8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3324      	adds	r3, #36	@ 0x24
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff fe8a 	bl	800e180 <sum_sfn>
 800e46c:	4603      	mov	r3, r0
 800e46e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	4619      	mov	r1, r3
 800e476:	69f8      	ldr	r0, [r7, #28]
 800e478:	f7fe ff58 	bl	800d32c <move_window>
 800e47c:	4603      	mov	r3, r0
 800e47e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e486:	2b00      	cmp	r3, #0
 800e488:	d11d      	bne.n	800e4c6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	6918      	ldr	r0, [r3, #16]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a19      	ldr	r1, [r3, #32]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	b2da      	uxtb	r2, r3
 800e496:	7efb      	ldrb	r3, [r7, #27]
 800e498:	f7ff fd7c 	bl	800df94 <put_lfn>
				fs->wflag = 1;
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff fba9 	bl	800dbfc <dir_next>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e4b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d107      	bne.n	800e4c8 <dir_register+0x184>
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	623b      	str	r3, [r7, #32]
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1d5      	bne.n	800e470 <dir_register+0x12c>
 800e4c4:	e000      	b.n	800e4c8 <dir_register+0x184>
				if (res != FR_OK) break;
 800e4c6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d128      	bne.n	800e522 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	69f8      	ldr	r0, [r7, #28]
 800e4d8:	f7fe ff28 	bl	800d32c <move_window>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d11b      	bne.n	800e522 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	2220      	movs	r2, #32
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fe fcdb 	bl	800ceae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a18      	ldr	r0, [r3, #32]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3324      	adds	r3, #36	@ 0x24
 800e500:	220b      	movs	r2, #11
 800e502:	4619      	mov	r1, r3
 800e504:	f7fe fcb2 	bl	800ce6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	330c      	adds	r3, #12
 800e514:	f002 0218 	and.w	r2, r2, #24
 800e518:	b2d2      	uxtb	r2, r2
 800e51a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	2201      	movs	r2, #1
 800e520:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e526:	4618      	mov	r0, r3
 800e528:	3730      	adds	r7, #48	@ 0x30
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	4ec4ec4f 	.word	0x4ec4ec4f

0800e534 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08a      	sub	sp, #40	@ 0x28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	613b      	str	r3, [r7, #16]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	61ba      	str	r2, [r7, #24]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	4413      	add	r3, r2
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e564:	2b1f      	cmp	r3, #31
 800e566:	d940      	bls.n	800e5ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e56a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e56c:	d006      	beq.n	800e57c <create_name+0x48>
 800e56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e570:	2b5c      	cmp	r3, #92	@ 0x5c
 800e572:	d110      	bne.n	800e596 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e574:	e002      	b.n	800e57c <create_name+0x48>
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	3301      	adds	r3, #1
 800e57a:	61bb      	str	r3, [r7, #24]
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	4413      	add	r3, r2
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b2f      	cmp	r3, #47	@ 0x2f
 800e586:	d0f6      	beq.n	800e576 <create_name+0x42>
 800e588:	693a      	ldr	r2, [r7, #16]
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	4413      	add	r3, r2
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	2b5c      	cmp	r3, #92	@ 0x5c
 800e592:	d0f0      	beq.n	800e576 <create_name+0x42>
			break;
 800e594:	e02a      	b.n	800e5ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	2bfe      	cmp	r3, #254	@ 0xfe
 800e59a:	d901      	bls.n	800e5a0 <create_name+0x6c>
 800e59c:	2306      	movs	r3, #6
 800e59e:	e17d      	b.n	800e89c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e5a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e5a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f001 fcb8 	bl	800ff20 <ff_convert>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e5b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <create_name+0x8a>
 800e5ba:	2306      	movs	r3, #6
 800e5bc:	e16e      	b.n	800e89c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e5be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5c2:	d809      	bhi.n	800e5d8 <create_name+0xa4>
 800e5c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	488d      	ldr	r0, [pc, #564]	@ (800e800 <create_name+0x2cc>)
 800e5ca:	f7fe fcb2 	bl	800cf32 <chk_chr>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <create_name+0xa4>
 800e5d4:	2306      	movs	r3, #6
 800e5d6:	e161      	b.n	800e89c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	1c5a      	adds	r2, r3, #1
 800e5dc:	617a      	str	r2, [r7, #20]
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e5e8:	e7b4      	b.n	800e554 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e5ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e5ec:	693a      	ldr	r2, [r7, #16]
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	441a      	add	r2, r3
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e5f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5f8:	2b1f      	cmp	r3, #31
 800e5fa:	d801      	bhi.n	800e600 <create_name+0xcc>
 800e5fc:	2304      	movs	r3, #4
 800e5fe:	e000      	b.n	800e602 <create_name+0xce>
 800e600:	2300      	movs	r3, #0
 800e602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e606:	e011      	b.n	800e62c <create_name+0xf8>
		w = lfn[di - 1];
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e60e:	3b01      	subs	r3, #1
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	4413      	add	r3, r2
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e61a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e61c:	2b20      	cmp	r3, #32
 800e61e:	d002      	beq.n	800e626 <create_name+0xf2>
 800e620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e622:	2b2e      	cmp	r3, #46	@ 0x2e
 800e624:	d106      	bne.n	800e634 <create_name+0x100>
		di--;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	3b01      	subs	r3, #1
 800e62a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1ea      	bne.n	800e608 <create_name+0xd4>
 800e632:	e000      	b.n	800e636 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e634:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	4413      	add	r3, r2
 800e63e:	2200      	movs	r2, #0
 800e640:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <create_name+0x118>
 800e648:	2306      	movs	r3, #6
 800e64a:	e127      	b.n	800e89c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3324      	adds	r3, #36	@ 0x24
 800e650:	220b      	movs	r2, #11
 800e652:	2120      	movs	r1, #32
 800e654:	4618      	mov	r0, r3
 800e656:	f7fe fc2a 	bl	800ceae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e65a:	2300      	movs	r3, #0
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	e002      	b.n	800e666 <create_name+0x132>
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	3301      	adds	r3, #1
 800e664:	61bb      	str	r3, [r7, #24]
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	4413      	add	r3, r2
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	2b20      	cmp	r3, #32
 800e672:	d0f5      	beq.n	800e660 <create_name+0x12c>
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e680:	d0ee      	beq.n	800e660 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d009      	beq.n	800e69c <create_name+0x168>
 800e688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e68c:	f043 0303 	orr.w	r3, r3, #3
 800e690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e694:	e002      	b.n	800e69c <create_name+0x168>
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	3b01      	subs	r3, #1
 800e69a:	617b      	str	r3, [r7, #20]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d009      	beq.n	800e6b6 <create_name+0x182>
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6b4:	d1ef      	bne.n	800e696 <create_name+0x162>

	i = b = 0; ni = 8;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e6bc:	2300      	movs	r3, #0
 800e6be:	623b      	str	r3, [r7, #32]
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	61ba      	str	r2, [r7, #24]
 800e6ca:	005b      	lsls	r3, r3, #1
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e6d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 8090 	beq.w	800e7fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e6dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6de:	2b20      	cmp	r3, #32
 800e6e0:	d006      	beq.n	800e6f0 <create_name+0x1bc>
 800e6e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6e6:	d10a      	bne.n	800e6fe <create_name+0x1ca>
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d006      	beq.n	800e6fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6f4:	f043 0303 	orr.w	r3, r3, #3
 800e6f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e6fc:	e07d      	b.n	800e7fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e6fe:	6a3a      	ldr	r2, [r7, #32]
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	429a      	cmp	r2, r3
 800e704:	d203      	bcs.n	800e70e <create_name+0x1da>
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d123      	bne.n	800e756 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	2b0b      	cmp	r3, #11
 800e712:	d106      	bne.n	800e722 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e718:	f043 0303 	orr.w	r3, r3, #3
 800e71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e720:	e075      	b.n	800e80e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e722:	69ba      	ldr	r2, [r7, #24]
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	429a      	cmp	r2, r3
 800e728:	d005      	beq.n	800e736 <create_name+0x202>
 800e72a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e72e:	f043 0303 	orr.w	r3, r3, #3
 800e732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e736:	69ba      	ldr	r2, [r7, #24]
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d866      	bhi.n	800e80c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	61bb      	str	r3, [r7, #24]
 800e742:	2308      	movs	r3, #8
 800e744:	623b      	str	r3, [r7, #32]
 800e746:	230b      	movs	r3, #11
 800e748:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e74a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e754:	e051      	b.n	800e7fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e758:	2b7f      	cmp	r3, #127	@ 0x7f
 800e75a:	d914      	bls.n	800e786 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e75c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e75e:	2100      	movs	r1, #0
 800e760:	4618      	mov	r0, r3
 800e762:	f001 fbdd 	bl	800ff20 <ff_convert>
 800e766:	4603      	mov	r3, r0
 800e768:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d004      	beq.n	800e77a <create_name+0x246>
 800e770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e772:	3b80      	subs	r3, #128	@ 0x80
 800e774:	4a23      	ldr	r2, [pc, #140]	@ (800e804 <create_name+0x2d0>)
 800e776:	5cd3      	ldrb	r3, [r2, r3]
 800e778:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e77a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e77e:	f043 0302 	orr.w	r3, r3, #2
 800e782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d007      	beq.n	800e79c <create_name+0x268>
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e78e:	4619      	mov	r1, r3
 800e790:	481d      	ldr	r0, [pc, #116]	@ (800e808 <create_name+0x2d4>)
 800e792:	f7fe fbce 	bl	800cf32 <chk_chr>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d008      	beq.n	800e7ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e79c:	235f      	movs	r3, #95	@ 0x5f
 800e79e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7a4:	f043 0303 	orr.w	r3, r3, #3
 800e7a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e7ac:	e01b      	b.n	800e7e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e7ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b0:	2b40      	cmp	r3, #64	@ 0x40
 800e7b2:	d909      	bls.n	800e7c8 <create_name+0x294>
 800e7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b6:	2b5a      	cmp	r3, #90	@ 0x5a
 800e7b8:	d806      	bhi.n	800e7c8 <create_name+0x294>
					b |= 2;
 800e7ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7be:	f043 0302 	orr.w	r3, r3, #2
 800e7c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e7c6:	e00e      	b.n	800e7e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e7c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7ca:	2b60      	cmp	r3, #96	@ 0x60
 800e7cc:	d90b      	bls.n	800e7e6 <create_name+0x2b2>
 800e7ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7d0:	2b7a      	cmp	r3, #122	@ 0x7a
 800e7d2:	d808      	bhi.n	800e7e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e7d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7d8:	f043 0301 	orr.w	r3, r3, #1
 800e7dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e7e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7e2:	3b20      	subs	r3, #32
 800e7e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e7e6:	6a3b      	ldr	r3, [r7, #32]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	623a      	str	r2, [r7, #32]
 800e7ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7ee:	b2d1      	uxtb	r1, r2
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	460a      	mov	r2, r1
 800e7f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e7fa:	e763      	b.n	800e6c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e7fc:	bf00      	nop
 800e7fe:	e006      	b.n	800e80e <create_name+0x2da>
 800e800:	0801594c 	.word	0x0801594c
 800e804:	080159bc 	.word	0x080159bc
 800e808:	08015958 	.word	0x08015958
			if (si > di) break;			/* No extension */
 800e80c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e814:	2be5      	cmp	r3, #229	@ 0xe5
 800e816:	d103      	bne.n	800e820 <create_name+0x2ec>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2205      	movs	r2, #5
 800e81c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2b08      	cmp	r3, #8
 800e824:	d104      	bne.n	800e830 <create_name+0x2fc>
 800e826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e830:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e834:	f003 030c 	and.w	r3, r3, #12
 800e838:	2b0c      	cmp	r3, #12
 800e83a:	d005      	beq.n	800e848 <create_name+0x314>
 800e83c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e840:	f003 0303 	and.w	r3, r3, #3
 800e844:	2b03      	cmp	r3, #3
 800e846:	d105      	bne.n	800e854 <create_name+0x320>
 800e848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e858:	f003 0302 	and.w	r3, r3, #2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d117      	bne.n	800e890 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e864:	f003 0303 	and.w	r3, r3, #3
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d105      	bne.n	800e878 <create_name+0x344>
 800e86c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e870:	f043 0310 	orr.w	r3, r3, #16
 800e874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e878:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e87c:	f003 030c 	and.w	r3, r3, #12
 800e880:	2b04      	cmp	r3, #4
 800e882:	d105      	bne.n	800e890 <create_name+0x35c>
 800e884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e888:	f043 0308 	orr.w	r3, r3, #8
 800e88c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e896:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e89a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3728      	adds	r7, #40	@ 0x28
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8b8:	e002      	b.n	800e8c0 <follow_path+0x1c>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8c6:	d0f8      	beq.n	800e8ba <follow_path+0x16>
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8ce:	d0f4      	beq.n	800e8ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	2b1f      	cmp	r3, #31
 800e8dc:	d80a      	bhi.n	800e8f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2280      	movs	r2, #128	@ 0x80
 800e8e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff f8fe 	bl	800daea <dir_sdi>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	75fb      	strb	r3, [r7, #23]
 800e8f2:	e048      	b.n	800e986 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e8f4:	463b      	mov	r3, r7
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7ff fe1b 	bl	800e534 <create_name>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e902:	7dfb      	ldrb	r3, [r7, #23]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d139      	bne.n	800e97c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fc5a 	bl	800e1c2 <dir_find>
 800e90e:	4603      	mov	r3, r0
 800e910:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e918:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00a      	beq.n	800e936 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e920:	7dfb      	ldrb	r3, [r7, #23]
 800e922:	2b04      	cmp	r3, #4
 800e924:	d12c      	bne.n	800e980 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e926:	7afb      	ldrb	r3, [r7, #11]
 800e928:	f003 0304 	and.w	r3, r3, #4
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d127      	bne.n	800e980 <follow_path+0xdc>
 800e930:	2305      	movs	r3, #5
 800e932:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e934:	e024      	b.n	800e980 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e936:	7afb      	ldrb	r3, [r7, #11]
 800e938:	f003 0304 	and.w	r3, r3, #4
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d121      	bne.n	800e984 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	799b      	ldrb	r3, [r3, #6]
 800e944:	f003 0310 	and.w	r3, r3, #16
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d102      	bne.n	800e952 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e94c:	2305      	movs	r3, #5
 800e94e:	75fb      	strb	r3, [r7, #23]
 800e950:	e019      	b.n	800e986 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	695b      	ldr	r3, [r3, #20]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	8992      	ldrh	r2, [r2, #12]
 800e960:	fbb3 f0f2 	udiv	r0, r3, r2
 800e964:	fb00 f202 	mul.w	r2, r0, r2
 800e968:	1a9b      	subs	r3, r3, r2
 800e96a:	440b      	add	r3, r1
 800e96c:	4619      	mov	r1, r3
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff fa61 	bl	800de36 <ld_clust>
 800e974:	4602      	mov	r2, r0
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e97a:	e7bb      	b.n	800e8f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e97c:	bf00      	nop
 800e97e:	e002      	b.n	800e986 <follow_path+0xe2>
				break;
 800e980:	bf00      	nop
 800e982:	e000      	b.n	800e986 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e984:	bf00      	nop
			}
		}
	}

	return res;
 800e986:	7dfb      	ldrb	r3, [r7, #23]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e990:	b480      	push	{r7}
 800e992:	b087      	sub	sp, #28
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e998:	f04f 33ff 	mov.w	r3, #4294967295
 800e99c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d031      	beq.n	800ea0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e002      	b.n	800e9b4 <get_ldnumber+0x24>
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	617b      	str	r3, [r7, #20]
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b1f      	cmp	r3, #31
 800e9ba:	d903      	bls.n	800e9c4 <get_ldnumber+0x34>
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b3a      	cmp	r3, #58	@ 0x3a
 800e9c2:	d1f4      	bne.n	800e9ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b3a      	cmp	r3, #58	@ 0x3a
 800e9ca:	d11c      	bne.n	800ea06 <get_ldnumber+0x76>
			tp = *path;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	1c5a      	adds	r2, r3, #1
 800e9d6:	60fa      	str	r2, [r7, #12]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	3b30      	subs	r3, #48	@ 0x30
 800e9dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	2b09      	cmp	r3, #9
 800e9e2:	d80e      	bhi.n	800ea02 <get_ldnumber+0x72>
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d10a      	bne.n	800ea02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d107      	bne.n	800ea02 <get_ldnumber+0x72>
					vol = (int)i;
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	e002      	b.n	800ea0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea06:	2300      	movs	r3, #0
 800ea08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea0a:	693b      	ldr	r3, [r7, #16]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	70da      	strb	r2, [r3, #3]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7fe fc7a 	bl	800d32c <move_window>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <check_fs+0x2a>
 800ea3e:	2304      	movs	r3, #4
 800ea40:	e038      	b.n	800eab4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	333c      	adds	r3, #60	@ 0x3c
 800ea46:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe f98c 	bl	800cd68 <ld_word>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d001      	beq.n	800ea60 <check_fs+0x48>
 800ea5c:	2303      	movs	r3, #3
 800ea5e:	e029      	b.n	800eab4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea66:	2be9      	cmp	r3, #233	@ 0xe9
 800ea68:	d009      	beq.n	800ea7e <check_fs+0x66>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea70:	2beb      	cmp	r3, #235	@ 0xeb
 800ea72:	d11e      	bne.n	800eab2 <check_fs+0x9a>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ea7a:	2b90      	cmp	r3, #144	@ 0x90
 800ea7c:	d119      	bne.n	800eab2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	333c      	adds	r3, #60	@ 0x3c
 800ea82:	3336      	adds	r3, #54	@ 0x36
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe f987 	bl	800cd98 <ld_dword>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ea90:	4a0a      	ldr	r2, [pc, #40]	@ (800eabc <check_fs+0xa4>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d101      	bne.n	800ea9a <check_fs+0x82>
 800ea96:	2300      	movs	r3, #0
 800ea98:	e00c      	b.n	800eab4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	333c      	adds	r3, #60	@ 0x3c
 800ea9e:	3352      	adds	r3, #82	@ 0x52
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fe f979 	bl	800cd98 <ld_dword>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4a05      	ldr	r2, [pc, #20]	@ (800eac0 <check_fs+0xa8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d101      	bne.n	800eab2 <check_fs+0x9a>
 800eaae:	2300      	movs	r3, #0
 800eab0:	e000      	b.n	800eab4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eab2:	2302      	movs	r3, #2
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	00544146 	.word	0x00544146
 800eac0:	33544146 	.word	0x33544146

0800eac4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b096      	sub	sp, #88	@ 0x58
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f7ff ff59 	bl	800e990 <get_ldnumber>
 800eade:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da01      	bge.n	800eaea <find_volume+0x26>
 800eae6:	230b      	movs	r3, #11
 800eae8:	e26a      	b.n	800efc0 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eaea:	4aa3      	ldr	r2, [pc, #652]	@ (800ed78 <find_volume+0x2b4>)
 800eaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaf2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <find_volume+0x3a>
 800eafa:	230c      	movs	r3, #12
 800eafc:	e260      	b.n	800efc0 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800eafe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eb00:	f7fe fa32 	bl	800cf68 <lock_fs>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <find_volume+0x4a>
 800eb0a:	230f      	movs	r3, #15
 800eb0c:	e258      	b.n	800efc0 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	f023 0301 	bic.w	r3, r3, #1
 800eb1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01a      	beq.n	800eb5a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800eb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb26:	785b      	ldrb	r3, [r3, #1]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fe f87f 	bl	800cc2c <disk_status>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10c      	bne.n	800eb5a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d007      	beq.n	800eb56 <find_volume+0x92>
 800eb46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb4a:	f003 0304 	and.w	r3, r3, #4
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800eb52:	230a      	movs	r3, #10
 800eb54:	e234      	b.n	800efc0 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800eb56:	2300      	movs	r3, #0
 800eb58:	e232      	b.n	800efc0 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6a:	785b      	ldrb	r3, [r3, #1]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe f877 	bl	800cc60 <disk_initialize>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eb78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb84:	2303      	movs	r3, #3
 800eb86:	e21b      	b.n	800efc0 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d007      	beq.n	800eb9e <find_volume+0xda>
 800eb8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb92:	f003 0304 	and.w	r3, r3, #4
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800eb9a:	230a      	movs	r3, #10
 800eb9c:	e210      	b.n	800efc0 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba0:	7858      	ldrb	r0, [r3, #1]
 800eba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba4:	330c      	adds	r3, #12
 800eba6:	461a      	mov	r2, r3
 800eba8:	2102      	movs	r1, #2
 800ebaa:	f7fe f8bf 	bl	800cd2c <disk_ioctl>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <find_volume+0xf4>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e203      	b.n	800efc0 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	899b      	ldrh	r3, [r3, #12]
 800ebbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebc0:	d80d      	bhi.n	800ebde <find_volume+0x11a>
 800ebc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc4:	899b      	ldrh	r3, [r3, #12]
 800ebc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebca:	d308      	bcc.n	800ebde <find_volume+0x11a>
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebce:	899b      	ldrh	r3, [r3, #12]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd4:	899b      	ldrh	r3, [r3, #12]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	4013      	ands	r3, r2
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <find_volume+0x11e>
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e1ee      	b.n	800efc0 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ebe6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ebe8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ebea:	f7ff ff15 	bl	800ea18 <check_fs>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ebf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d149      	bne.n	800ec90 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec00:	e01e      	b.n	800ec40 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec04:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ec08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec0a:	011b      	lsls	r3, r3, #4
 800ec0c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ec10:	4413      	add	r3, r2
 800ec12:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec16:	3304      	adds	r3, #4
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d006      	beq.n	800ec2c <find_volume+0x168>
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	3308      	adds	r3, #8
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe f8b8 	bl	800cd98 <ld_dword>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	e000      	b.n	800ec2e <find_volume+0x16a>
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	3358      	adds	r3, #88	@ 0x58
 800ec34:	443b      	add	r3, r7
 800ec36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d9dd      	bls.n	800ec02 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec46:	2300      	movs	r3, #0
 800ec48:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ec4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <find_volume+0x192>
 800ec50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec52:	3b01      	subs	r3, #1
 800ec54:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	3358      	adds	r3, #88	@ 0x58
 800ec5c:	443b      	add	r3, r7
 800ec5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec62:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d005      	beq.n	800ec76 <find_volume+0x1b2>
 800ec6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec6e:	f7ff fed3 	bl	800ea18 <check_fs>
 800ec72:	4603      	mov	r3, r0
 800ec74:	e000      	b.n	800ec78 <find_volume+0x1b4>
 800ec76:	2303      	movs	r3, #3
 800ec78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d905      	bls.n	800ec90 <find_volume+0x1cc>
 800ec84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec86:	3301      	adds	r3, #1
 800ec88:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d9e2      	bls.n	800ec56 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec94:	2b04      	cmp	r3, #4
 800ec96:	d101      	bne.n	800ec9c <find_volume+0x1d8>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e191      	b.n	800efc0 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d901      	bls.n	800eca8 <find_volume+0x1e4>
 800eca4:	230d      	movs	r3, #13
 800eca6:	e18b      	b.n	800efc0 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecaa:	333c      	adds	r3, #60	@ 0x3c
 800ecac:	330b      	adds	r3, #11
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe f85a 	bl	800cd68 <ld_word>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecba:	899b      	ldrh	r3, [r3, #12]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d001      	beq.n	800ecc4 <find_volume+0x200>
 800ecc0:	230d      	movs	r3, #13
 800ecc2:	e17d      	b.n	800efc0 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecc6:	333c      	adds	r3, #60	@ 0x3c
 800ecc8:	3316      	adds	r3, #22
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe f84c 	bl	800cd68 <ld_word>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ecd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <find_volume+0x224>
 800ecda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecdc:	333c      	adds	r3, #60	@ 0x3c
 800ecde:	3324      	adds	r3, #36	@ 0x24
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fe f859 	bl	800cd98 <ld_dword>
 800ece6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ece8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecec:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ecee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf0:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d005      	beq.n	800ed0c <find_volume+0x248>
 800ed00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed02:	789b      	ldrb	r3, [r3, #2]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d001      	beq.n	800ed0c <find_volume+0x248>
 800ed08:	230d      	movs	r3, #13
 800ed0a:	e159      	b.n	800efc0 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0e:	789b      	ldrb	r3, [r3, #2]
 800ed10:	461a      	mov	r2, r3
 800ed12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed14:	fb02 f303 	mul.w	r3, r2, r3
 800ed18:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800ed20:	461a      	mov	r2, r3
 800ed22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed28:	895b      	ldrh	r3, [r3, #10]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d008      	beq.n	800ed40 <find_volume+0x27c>
 800ed2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed30:	895b      	ldrh	r3, [r3, #10]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed36:	895b      	ldrh	r3, [r3, #10]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <find_volume+0x280>
 800ed40:	230d      	movs	r3, #13
 800ed42:	e13d      	b.n	800efc0 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed46:	333c      	adds	r3, #60	@ 0x3c
 800ed48:	3311      	adds	r3, #17
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe f80c 	bl	800cd68 <ld_word>
 800ed50:	4603      	mov	r3, r0
 800ed52:	461a      	mov	r2, r3
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5a:	891b      	ldrh	r3, [r3, #8]
 800ed5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed5e:	8992      	ldrh	r2, [r2, #12]
 800ed60:	0952      	lsrs	r2, r2, #5
 800ed62:	b292      	uxth	r2, r2
 800ed64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed68:	fb01 f202 	mul.w	r2, r1, r2
 800ed6c:	1a9b      	subs	r3, r3, r2
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d003      	beq.n	800ed7c <find_volume+0x2b8>
 800ed74:	230d      	movs	r3, #13
 800ed76:	e123      	b.n	800efc0 <find_volume+0x4fc>
 800ed78:	20002b84 	.word	0x20002b84

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7e:	333c      	adds	r3, #60	@ 0x3c
 800ed80:	3313      	adds	r3, #19
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fd fff0 	bl	800cd68 <ld_word>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ed8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d106      	bne.n	800eda0 <find_volume+0x2dc>
 800ed92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed94:	333c      	adds	r3, #60	@ 0x3c
 800ed96:	3320      	adds	r3, #32
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fd fffd 	bl	800cd98 <ld_dword>
 800ed9e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda2:	333c      	adds	r3, #60	@ 0x3c
 800eda4:	330e      	adds	r3, #14
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd ffde 	bl	800cd68 <ld_word>
 800edac:	4603      	mov	r3, r0
 800edae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800edb0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <find_volume+0x2f6>
 800edb6:	230d      	movs	r3, #13
 800edb8:	e102      	b.n	800efc0 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800edba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800edbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edbe:	4413      	add	r3, r2
 800edc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edc2:	8911      	ldrh	r1, [r2, #8]
 800edc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edc6:	8992      	ldrh	r2, [r2, #12]
 800edc8:	0952      	lsrs	r2, r2, #5
 800edca:	b292      	uxth	r2, r2
 800edcc:	fbb1 f2f2 	udiv	r2, r1, r2
 800edd0:	b292      	uxth	r2, r2
 800edd2:	4413      	add	r3, r2
 800edd4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800edd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edda:	429a      	cmp	r2, r3
 800eddc:	d201      	bcs.n	800ede2 <find_volume+0x31e>
 800edde:	230d      	movs	r3, #13
 800ede0:	e0ee      	b.n	800efc0 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ede2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ede4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edea:	8952      	ldrh	r2, [r2, #10]
 800edec:	fbb3 f3f2 	udiv	r3, r3, r2
 800edf0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800edf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d101      	bne.n	800edfc <find_volume+0x338>
 800edf8:	230d      	movs	r3, #13
 800edfa:	e0e1      	b.n	800efc0 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800edfc:	2303      	movs	r3, #3
 800edfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d802      	bhi.n	800ee12 <find_volume+0x34e>
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee14:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d802      	bhi.n	800ee22 <find_volume+0x35e>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	1c9a      	adds	r2, r3, #2
 800ee26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee28:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800ee2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee2e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ee32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee34:	441a      	add	r2, r3
 800ee36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee38:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ee3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee3e:	441a      	add	r2, r3
 800ee40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee42:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800ee44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	d11e      	bne.n	800ee8a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4e:	333c      	adds	r3, #60	@ 0x3c
 800ee50:	332a      	adds	r3, #42	@ 0x2a
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fd ff88 	bl	800cd68 <ld_word>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <find_volume+0x39e>
 800ee5e:	230d      	movs	r3, #13
 800ee60:	e0ae      	b.n	800efc0 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee64:	891b      	ldrh	r3, [r3, #8]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <find_volume+0x3aa>
 800ee6a:	230d      	movs	r3, #13
 800ee6c:	e0a8      	b.n	800efc0 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee70:	333c      	adds	r3, #60	@ 0x3c
 800ee72:	332c      	adds	r3, #44	@ 0x2c
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd ff8f 	bl	800cd98 <ld_dword>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7e:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee88:	e01f      	b.n	800eeca <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8c:	891b      	ldrh	r3, [r3, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <find_volume+0x3d2>
 800ee92:	230d      	movs	r3, #13
 800ee94:	e094      	b.n	800efc0 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ee96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee9c:	441a      	add	r2, r3
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea0:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eea2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d103      	bne.n	800eeb2 <find_volume+0x3ee>
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	e00a      	b.n	800eec8 <find_volume+0x404>
 800eeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb4:	6a1a      	ldr	r2, [r3, #32]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	4413      	add	r3, r2
 800eebc:	085a      	lsrs	r2, r3, #1
 800eebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	f003 0301 	and.w	r3, r3, #1
 800eec6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eec8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed0:	899b      	ldrh	r3, [r3, #12]
 800eed2:	4619      	mov	r1, r3
 800eed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eed6:	440b      	add	r3, r1
 800eed8:	3b01      	subs	r3, #1
 800eeda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eedc:	8989      	ldrh	r1, [r1, #12]
 800eede:	fbb3 f3f1 	udiv	r3, r3, r1
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d201      	bcs.n	800eeea <find_volume+0x426>
 800eee6:	230d      	movs	r3, #13
 800eee8:	e06a      	b.n	800efc0 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeec:	f04f 32ff 	mov.w	r2, #4294967295
 800eef0:	61da      	str	r2, [r3, #28]
 800eef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef4:	69da      	ldr	r2, [r3, #28]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800eefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefc:	2280      	movs	r2, #128	@ 0x80
 800eefe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d149      	bne.n	800ef9c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0a:	333c      	adds	r3, #60	@ 0x3c
 800ef0c:	3330      	adds	r3, #48	@ 0x30
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fd ff2a 	bl	800cd68 <ld_word>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d140      	bne.n	800ef9c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef22:	f7fe fa03 	bl	800d32c <move_window>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d137      	bne.n	800ef9c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800ef2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2e:	2200      	movs	r2, #0
 800ef30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef34:	333c      	adds	r3, #60	@ 0x3c
 800ef36:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fd ff14 	bl	800cd68 <ld_word>
 800ef40:	4603      	mov	r3, r0
 800ef42:	461a      	mov	r2, r3
 800ef44:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d127      	bne.n	800ef9c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4e:	333c      	adds	r3, #60	@ 0x3c
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd ff21 	bl	800cd98 <ld_dword>
 800ef56:	4603      	mov	r3, r0
 800ef58:	4a1b      	ldr	r2, [pc, #108]	@ (800efc8 <find_volume+0x504>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d11e      	bne.n	800ef9c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef60:	333c      	adds	r3, #60	@ 0x3c
 800ef62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fd ff16 	bl	800cd98 <ld_dword>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	4a17      	ldr	r2, [pc, #92]	@ (800efcc <find_volume+0x508>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d113      	bne.n	800ef9c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef76:	333c      	adds	r3, #60	@ 0x3c
 800ef78:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fd ff0b 	bl	800cd98 <ld_dword>
 800ef82:	4602      	mov	r2, r0
 800ef84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef86:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef8a:	333c      	adds	r3, #60	@ 0x3c
 800ef8c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fd ff01 	bl	800cd98 <ld_dword>
 800ef96:	4602      	mov	r2, r0
 800ef98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800efa2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800efa4:	4b0a      	ldr	r3, [pc, #40]	@ (800efd0 <find_volume+0x50c>)
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	3301      	adds	r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	4b08      	ldr	r3, [pc, #32]	@ (800efd0 <find_volume+0x50c>)
 800efae:	801a      	strh	r2, [r3, #0]
 800efb0:	4b07      	ldr	r3, [pc, #28]	@ (800efd0 <find_volume+0x50c>)
 800efb2:	881a      	ldrh	r2, [r3, #0]
 800efb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800efb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800efba:	f7fe f94f 	bl	800d25c <clear_lock>
#endif
	return FR_OK;
 800efbe:	2300      	movs	r3, #0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3758      	adds	r7, #88	@ 0x58
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	41615252 	.word	0x41615252
 800efcc:	61417272 	.word	0x61417272
 800efd0:	20002b88 	.word	0x20002b88

0800efd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800efde:	2309      	movs	r3, #9
 800efe0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d02e      	beq.n	800f046 <validate+0x72>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d02a      	beq.n	800f046 <validate+0x72>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d025      	beq.n	800f046 <validate+0x72>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	889a      	ldrh	r2, [r3, #4]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	88db      	ldrh	r3, [r3, #6]
 800f004:	429a      	cmp	r2, r3
 800f006:	d11e      	bne.n	800f046 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fd ffab 	bl	800cf68 <lock_fs>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d014      	beq.n	800f042 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd fe04 	bl	800cc2c <disk_status>
 800f024:	4603      	mov	r3, r0
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d102      	bne.n	800f034 <validate+0x60>
				res = FR_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
 800f032:	e008      	b.n	800f046 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2100      	movs	r1, #0
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fd ffaa 	bl	800cf94 <unlock_fs>
 800f040:	e001      	b.n	800f046 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f042:	230f      	movs	r3, #15
 800f044:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d102      	bne.n	800f052 <validate+0x7e>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	e000      	b.n	800f054 <validate+0x80>
 800f052:	2300      	movs	r3, #0
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	6013      	str	r3, [r2, #0]
	return res;
 800f058:	7bfb      	ldrb	r3, [r7, #15]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4613      	mov	r3, r2
 800f070:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f076:	f107 0310 	add.w	r3, r7, #16
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff fc88 	bl	800e990 <get_ldnumber>
 800f080:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	2b00      	cmp	r3, #0
 800f086:	da01      	bge.n	800f08c <f_mount+0x28>
 800f088:	230b      	movs	r3, #11
 800f08a:	e048      	b.n	800f11e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f08c:	4a26      	ldr	r2, [pc, #152]	@ (800f128 <f_mount+0xc4>)
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f094:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00f      	beq.n	800f0bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f09c:	69b8      	ldr	r0, [r7, #24]
 800f09e:	f7fe f8dd 	bl	800d25c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 f820 	bl	80100ec <ff_del_syncobj>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <f_mount+0x52>
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	e033      	b.n	800f11e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00f      	beq.n	800f0e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3314      	adds	r3, #20
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f000 ffea 	bl	80100ac <ff_cre_syncobj>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <f_mount+0x7e>
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e01d      	b.n	800f11e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	4910      	ldr	r1, [pc, #64]	@ (800f128 <f_mount+0xc4>)
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <f_mount+0x94>
 800f0f2:	79fb      	ldrb	r3, [r7, #7]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d001      	beq.n	800f0fc <f_mount+0x98>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	e010      	b.n	800f11e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0fc:	f107 010c 	add.w	r1, r7, #12
 800f100:	f107 0308 	add.w	r3, r7, #8
 800f104:	2200      	movs	r2, #0
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fcdc 	bl	800eac4 <find_volume>
 800f10c:	4603      	mov	r3, r0
 800f10e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	7dfa      	ldrb	r2, [r7, #23]
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f7fd ff3c 	bl	800cf94 <unlock_fs>
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20002b84 	.word	0x20002b84

0800f12c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f132:	af00      	add	r7, sp, #0
 800f134:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f138:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f13c:	6018      	str	r0, [r3, #0]
 800f13e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f142:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f146:	6019      	str	r1, [r3, #0]
 800f148:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f14c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f150:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f152:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f156:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <f_open+0x38>
 800f160:	2309      	movs	r3, #9
 800f162:	e2aa      	b.n	800f6ba <f_open+0x58e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f164:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f168:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f16c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f170:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f174:	7812      	ldrb	r2, [r2, #0]
 800f176:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f17a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f17c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f180:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800f18a:	f107 0308 	add.w	r3, r7, #8
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff fc98 	bl	800eac4 <find_volume>
 800f194:	4603      	mov	r3, r0
 800f196:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800f19a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f040 8276 	bne.w	800f690 <f_open+0x564>
		dj.obj.fs = fs;
 800f1a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f1a8:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800f1ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f1b0:	f107 0214 	add.w	r2, r7, #20
 800f1b4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f1ba:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff fb6c 	bl	800e8a4 <follow_path>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f1d2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d11c      	bne.n	800f214 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f1da:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800f1de:	b25b      	sxtb	r3, r3
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	da03      	bge.n	800f1ec <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f1e4:	2306      	movs	r3, #6
 800f1e6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f1ea:	e013      	b.n	800f214 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f1f0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	bf8c      	ite	hi
 800f1fa:	2301      	movhi	r3, #1
 800f1fc:	2300      	movls	r3, #0
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	461a      	mov	r2, r3
 800f202:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd fedf 	bl	800cfcc <chk_lock>
 800f20e:	4603      	mov	r3, r0
 800f210:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f214:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f218:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	f003 031c 	and.w	r3, r3, #28
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 80a7 	beq.w	800f376 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800f228:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d01f      	beq.n	800f270 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f230:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f234:	2b04      	cmp	r3, #4
 800f236:	d10e      	bne.n	800f256 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f238:	f7fd ff24 	bl	800d084 <enq_lock>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d006      	beq.n	800f250 <f_open+0x124>
 800f242:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff f87c 	bl	800e344 <dir_register>
 800f24c:	4603      	mov	r3, r0
 800f24e:	e000      	b.n	800f252 <f_open+0x126>
 800f250:	2312      	movs	r3, #18
 800f252:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f256:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f25a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f25e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f262:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f266:	7812      	ldrb	r2, [r2, #0]
 800f268:	f042 0208 	orr.w	r2, r2, #8
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	e015      	b.n	800f29c <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f270:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f274:	f003 0311 	and.w	r3, r3, #17
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <f_open+0x158>
					res = FR_DENIED;
 800f27c:	2307      	movs	r3, #7
 800f27e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f282:	e00b      	b.n	800f29c <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f284:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f288:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0304 	and.w	r3, r3, #4
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <f_open+0x170>
 800f296:	2308      	movs	r3, #8
 800f298:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f29c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f040 8088 	bne.w	800f3b6 <f_open+0x28a>
 800f2a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f2aa:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	f003 0308 	and.w	r3, r3, #8
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d07e      	beq.n	800f3b6 <f_open+0x28a>
				dw = GET_FATTIME();
 800f2b8:	f7fd fc5a 	bl	800cb70 <get_fattime>
 800f2bc:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f2c0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f2c4:	330e      	adds	r3, #14
 800f2c6:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fd fda2 	bl	800ce14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f2d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f2d4:	3316      	adds	r3, #22
 800f2d6:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fd fd9a 	bl	800ce14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2e0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f2e4:	330b      	adds	r3, #11
 800f2e6:	2220      	movs	r2, #32
 800f2e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2ea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f2ee:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fe fd9e 	bl	800de36 <ld_clust>
 800f2fa:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f302:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800f306:	2200      	movs	r2, #0
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fe fdb3 	bl	800de74 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f30e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f312:	331c      	adds	r3, #28
 800f314:	2100      	movs	r1, #0
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd fd7c 	bl	800ce14 <st_dword>
					fs->wflag = 1;
 800f31c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f320:	2201      	movs	r2, #1
 800f322:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f324:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d044      	beq.n	800f3b6 <f_open+0x28a>
						dw = fs->winsect;
 800f32c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f332:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f336:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f33a:	2200      	movs	r2, #0
 800f33c:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe fa9d 	bl	800d880 <remove_chain>
 800f346:	4603      	mov	r3, r0
 800f348:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800f34c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f350:	2b00      	cmp	r3, #0
 800f352:	d130      	bne.n	800f3b6 <f_open+0x28a>
							res = move_window(fs, dw);
 800f354:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f358:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd ffe5 	bl	800d32c <move_window>
 800f362:	4603      	mov	r3, r0
 800f364:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f368:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f36c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800f370:	3a01      	subs	r2, #1
 800f372:	619a      	str	r2, [r3, #24]
 800f374:	e01f      	b.n	800f3b6 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f376:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d11b      	bne.n	800f3b6 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f37e:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f382:	f003 0310 	and.w	r3, r3, #16
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <f_open+0x266>
					res = FR_NO_FILE;
 800f38a:	2304      	movs	r3, #4
 800f38c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f390:	e011      	b.n	800f3b6 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f392:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f396:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	f003 0302 	and.w	r3, r3, #2
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d008      	beq.n	800f3b6 <f_open+0x28a>
 800f3a4:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d002      	beq.n	800f3b6 <f_open+0x28a>
						res = FR_DENIED;
 800f3b0:	2307      	movs	r3, #7
 800f3b2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f3b6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d148      	bne.n	800f450 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f3be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3c2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	f003 0308 	and.w	r3, r3, #8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00b      	beq.n	800f3e8 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800f3d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3d4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f3d8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f3dc:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f3e0:	7812      	ldrb	r2, [r2, #0]
 800f3e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3e6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f3e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f3ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f3fa:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f3fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f402:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f40a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f40e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b01      	cmp	r3, #1
 800f416:	bf8c      	ite	hi
 800f418:	2301      	movhi	r3, #1
 800f41a:	2300      	movls	r3, #0
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	461a      	mov	r2, r3
 800f420:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f424:	4611      	mov	r1, r2
 800f426:	4618      	mov	r0, r3
 800f428:	f7fd fe4e 	bl	800d0c8 <inc_lock>
 800f42c:	4602      	mov	r2, r0
 800f42e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f432:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f43a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f43e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d102      	bne.n	800f450 <f_open+0x324>
 800f44a:	2302      	movs	r3, #2
 800f44c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f450:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 811b 	bne.w	800f690 <f_open+0x564>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f45a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f45e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f462:	4611      	mov	r1, r2
 800f464:	4618      	mov	r0, r3
 800f466:	f7fe fce6 	bl	800de36 <ld_clust>
 800f46a:	4602      	mov	r2, r0
 800f46c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f470:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f478:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f47c:	331c      	adds	r3, #28
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fd fc8a 	bl	800cd98 <ld_dword>
 800f484:	4602      	mov	r2, r0
 800f486:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f48a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f492:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f496:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2200      	movs	r2, #0
 800f49e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f4a0:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800f4a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f4b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f4b4:	88da      	ldrh	r2, [r3, #6]
 800f4b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4c6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f4d0:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f4d4:	7812      	ldrb	r2, [r2, #0]
 800f4d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4dc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f502:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f506:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	3330      	adds	r3, #48	@ 0x30
 800f50e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f512:	2100      	movs	r1, #0
 800f514:	4618      	mov	r0, r3
 800f516:	f7fd fcca 	bl	800ceae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f51a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f51e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	f003 0320 	and.w	r3, r3, #32
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 80b1 	beq.w	800f690 <f_open+0x564>
 800f52e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f532:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f000 80a8 	beq.w	800f690 <f_open+0x564>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f540:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f544:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	68da      	ldr	r2, [r3, #12]
 800f54c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f550:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f558:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f55c:	895b      	ldrh	r3, [r3, #10]
 800f55e:	461a      	mov	r2, r3
 800f560:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	fb02 f303 	mul.w	r3, r2, r3
 800f56a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f56e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f572:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f57e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f582:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800f58e:	e021      	b.n	800f5d4 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800f590:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f594:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fd ff81 	bl	800d4a6 <get_fat>
 800f5a4:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800f5a8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d802      	bhi.n	800f5b6 <f_open+0x48a>
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5b6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5be:	d102      	bne.n	800f5c6 <f_open+0x49a>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5c6:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f5ca:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800f5ce:	1ad3      	subs	r3, r2, r3
 800f5d0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800f5d4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d105      	bne.n	800f5e8 <f_open+0x4bc>
 800f5dc:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f5e0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d8d3      	bhi.n	800f590 <f_open+0x464>
				}
				fp->clust = clst;
 800f5e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5ec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800f5f6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f5f8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d147      	bne.n	800f690 <f_open+0x564>
 800f600:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f604:	899b      	ldrh	r3, [r3, #12]
 800f606:	461a      	mov	r2, r3
 800f608:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f60c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f610:	fb01 f202 	mul.w	r2, r1, r2
 800f614:	1a9b      	subs	r3, r3, r2
 800f616:	2b00      	cmp	r3, #0
 800f618:	d03a      	beq.n	800f690 <f_open+0x564>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f61a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f61e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd ff20 	bl	800d468 <clust2sect>
 800f628:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800f62c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800f630:	2b00      	cmp	r3, #0
 800f632:	d103      	bne.n	800f63c <f_open+0x510>
						res = FR_INT_ERR;
 800f634:	2302      	movs	r3, #2
 800f636:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f63a:	e029      	b.n	800f690 <f_open+0x564>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f63c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f640:	899b      	ldrh	r3, [r3, #12]
 800f642:	461a      	mov	r2, r3
 800f644:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f648:	fbb3 f2f2 	udiv	r2, r3, r2
 800f64c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800f650:	441a      	add	r2, r3
 800f652:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f656:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f65e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f662:	7858      	ldrb	r0, [r3, #1]
 800f664:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f668:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f672:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f676:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6a1a      	ldr	r2, [r3, #32]
 800f67e:	2301      	movs	r3, #1
 800f680:	f7fd fb14 	bl	800ccac <disk_read>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <f_open+0x564>
 800f68a:	2301      	movs	r3, #1
 800f68c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f690:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f694:	2b00      	cmp	r3, #0
 800f696:	d006      	beq.n	800f6a6 <f_open+0x57a>
 800f698:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f69c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f6a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f6aa:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fc6f 	bl	800cf94 <unlock_fs>
 800f6b6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08c      	sub	sp, #48	@ 0x30
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f107 0210 	add.w	r2, r7, #16
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fc75 	bl	800efd4 <validate>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f6f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d107      	bne.n	800f708 <f_write+0x44>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	7d5b      	ldrb	r3, [r3, #21]
 800f6fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f704:	2b00      	cmp	r3, #0
 800f706:	d009      	beq.n	800f71c <f_write+0x58>
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f70e:	4611      	mov	r1, r2
 800f710:	4618      	mov	r0, r3
 800f712:	f7fd fc3f 	bl	800cf94 <unlock_fs>
 800f716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f71a:	e192      	b.n	800fa42 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	7d1b      	ldrb	r3, [r3, #20]
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <f_write+0x72>
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2107      	movs	r1, #7
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fd fc31 	bl	800cf94 <unlock_fs>
 800f732:	2307      	movs	r3, #7
 800f734:	e185      	b.n	800fa42 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	699a      	ldr	r2, [r3, #24]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	441a      	add	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	699b      	ldr	r3, [r3, #24]
 800f742:	429a      	cmp	r2, r3
 800f744:	f080 816a 	bcs.w	800fa1c <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	43db      	mvns	r3, r3
 800f74e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f750:	e164      	b.n	800fa1c <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	699b      	ldr	r3, [r3, #24]
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	8992      	ldrh	r2, [r2, #12]
 800f75a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f75e:	fb01 f202 	mul.w	r2, r1, r2
 800f762:	1a9b      	subs	r3, r3, r2
 800f764:	2b00      	cmp	r3, #0
 800f766:	f040 810f 	bne.w	800f988 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	8992      	ldrh	r2, [r2, #12]
 800f772:	fbb3 f3f2 	udiv	r3, r3, r2
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	8952      	ldrh	r2, [r2, #10]
 800f77a:	3a01      	subs	r2, #1
 800f77c:	4013      	ands	r3, r2
 800f77e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d14d      	bne.n	800f822 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	699b      	ldr	r3, [r3, #24]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10c      	bne.n	800f7a8 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f796:	2b00      	cmp	r3, #0
 800f798:	d11a      	bne.n	800f7d0 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2100      	movs	r1, #0
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe f8d3 	bl	800d94a <create_chain>
 800f7a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f7a6:	e013      	b.n	800f7d0 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d007      	beq.n	800f7c0 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7fe f95f 	bl	800da7a <clmt_clust>
 800f7bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f7be:	e007      	b.n	800f7d0 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	69db      	ldr	r3, [r3, #28]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	f7fe f8be 	bl	800d94a <create_chain>
 800f7ce:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f000 8127 	beq.w	800fa26 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d109      	bne.n	800f7f2 <f_write+0x12e>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2202      	movs	r2, #2
 800f7e2:	755a      	strb	r2, [r3, #21]
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	2102      	movs	r1, #2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd fbd3 	bl	800cf94 <unlock_fs>
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	e127      	b.n	800fa42 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f8:	d109      	bne.n	800f80e <f_write+0x14a>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	755a      	strb	r2, [r3, #21]
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	2101      	movs	r1, #1
 800f804:	4618      	mov	r0, r3
 800f806:	f7fd fbc5 	bl	800cf94 <unlock_fs>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e119      	b.n	800fa42 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f812:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <f_write+0x15e>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f820:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	7d1b      	ldrb	r3, [r3, #20]
 800f826:	b25b      	sxtb	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	da1d      	bge.n	800f868 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	7858      	ldrb	r0, [r3, #1]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6a1a      	ldr	r2, [r3, #32]
 800f83a:	2301      	movs	r3, #1
 800f83c:	f7fd fa56 	bl	800ccec <disk_write>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d009      	beq.n	800f85a <f_write+0x196>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	755a      	strb	r2, [r3, #21]
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2101      	movs	r1, #1
 800f850:	4618      	mov	r0, r3
 800f852:	f7fd fb9f 	bl	800cf94 <unlock_fs>
 800f856:	2301      	movs	r3, #1
 800f858:	e0f3      	b.n	800fa42 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	7d1b      	ldrb	r3, [r3, #20]
 800f85e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f862:	b2da      	uxtb	r2, r3
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f868:	693a      	ldr	r2, [r7, #16]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	69db      	ldr	r3, [r3, #28]
 800f86e:	4619      	mov	r1, r3
 800f870:	4610      	mov	r0, r2
 800f872:	f7fd fdf9 	bl	800d468 <clust2sect>
 800f876:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <f_write+0x1ce>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2202      	movs	r2, #2
 800f882:	755a      	strb	r2, [r3, #21]
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	2102      	movs	r1, #2
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fd fb83 	bl	800cf94 <unlock_fs>
 800f88e:	2302      	movs	r3, #2
 800f890:	e0d7      	b.n	800fa42 <f_write+0x37e>
			sect += csect;
 800f892:	697a      	ldr	r2, [r7, #20]
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	4413      	add	r3, r2
 800f898:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	899b      	ldrh	r3, [r3, #12]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d048      	beq.n	800f940 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	6a3b      	ldr	r3, [r7, #32]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	8952      	ldrh	r2, [r2, #10]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d905      	bls.n	800f8c8 <f_write+0x204>
					cc = fs->csize - csect;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	895b      	ldrh	r3, [r3, #10]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	7858      	ldrb	r0, [r3, #1]
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	69f9      	ldr	r1, [r7, #28]
 800f8d2:	f7fd fa0b 	bl	800ccec <disk_write>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d009      	beq.n	800f8f0 <f_write+0x22c>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	755a      	strb	r2, [r3, #21]
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2101      	movs	r1, #1
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fd fb54 	bl	800cf94 <unlock_fs>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	e0a8      	b.n	800fa42 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6a1a      	ldr	r2, [r3, #32]
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	6a3a      	ldr	r2, [r7, #32]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d918      	bls.n	800f930 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6a1a      	ldr	r2, [r3, #32]
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	8992      	ldrh	r2, [r2, #12]
 800f910:	fb02 f303 	mul.w	r3, r2, r3
 800f914:	69fa      	ldr	r2, [r7, #28]
 800f916:	18d1      	adds	r1, r2, r3
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	899b      	ldrh	r3, [r3, #12]
 800f91c:	461a      	mov	r2, r3
 800f91e:	f7fd faa5 	bl	800ce6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	7d1b      	ldrb	r3, [r3, #20]
 800f926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	899b      	ldrh	r3, [r3, #12]
 800f934:	461a      	mov	r2, r3
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	fb02 f303 	mul.w	r3, r2, r3
 800f93c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f93e:	e050      	b.n	800f9e2 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6a1b      	ldr	r3, [r3, #32]
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	429a      	cmp	r2, r3
 800f948:	d01b      	beq.n	800f982 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f952:	429a      	cmp	r2, r3
 800f954:	d215      	bcs.n	800f982 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	7858      	ldrb	r0, [r3, #1]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f960:	2301      	movs	r3, #1
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	f7fd f9a2 	bl	800ccac <disk_read>
 800f968:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d009      	beq.n	800f982 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2201      	movs	r2, #1
 800f972:	755a      	strb	r2, [r3, #21]
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	2101      	movs	r1, #1
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fd fb0b 	bl	800cf94 <unlock_fs>
 800f97e:	2301      	movs	r3, #1
 800f980:	e05f      	b.n	800fa42 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	4618      	mov	r0, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	8992      	ldrh	r2, [r2, #12]
 800f996:	fbb3 f1f2 	udiv	r1, r3, r2
 800f99a:	fb01 f202 	mul.w	r2, r1, r2
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	1ac3      	subs	r3, r0, r3
 800f9a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f9a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d901      	bls.n	800f9b0 <f_write+0x2ec>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	8992      	ldrh	r2, [r2, #12]
 800f9be:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9c2:	fb00 f202 	mul.w	r2, r0, r2
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9cc:	69f9      	ldr	r1, [r7, #28]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fd fa4c 	bl	800ce6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	7d1b      	ldrb	r3, [r3, #20]
 800f9d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f9dc:	b2da      	uxtb	r2, r3
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e6:	4413      	add	r3, r2
 800f9e8:	61fb      	str	r3, [r7, #28]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	699a      	ldr	r2, [r3, #24]
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f0:	441a      	add	r2, r3
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	619a      	str	r2, [r3, #24]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	68da      	ldr	r2, [r3, #12]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	bf38      	it	cc
 800fa02:	461a      	movcc	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	60da      	str	r2, [r3, #12]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	441a      	add	r2, r3
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f47f ae97 	bne.w	800f752 <f_write+0x8e>
 800fa24:	e000      	b.n	800fa28 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
 800fa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2100      	movs	r1, #0
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fd faaa 	bl	800cf94 <unlock_fs>
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3730      	adds	r7, #48	@ 0x30
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f107 0208 	add.w	r2, r7, #8
 800fa58:	4611      	mov	r1, r2
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff faba 	bl	800efd4 <validate>
 800fa60:	4603      	mov	r3, r0
 800fa62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d16d      	bne.n	800fb46 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	7d1b      	ldrb	r3, [r3, #20]
 800fa6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d067      	beq.n	800fb46 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	7d1b      	ldrb	r3, [r3, #20]
 800fa7a:	b25b      	sxtb	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	da1a      	bge.n	800fab6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	7858      	ldrb	r0, [r3, #1]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1a      	ldr	r2, [r3, #32]
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f7fd f92c 	bl	800ccec <disk_write>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d006      	beq.n	800faa8 <f_sync+0x5e>
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd fa78 	bl	800cf94 <unlock_fs>
 800faa4:	2301      	movs	r3, #1
 800faa6:	e055      	b.n	800fb54 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	7d1b      	ldrb	r3, [r3, #20]
 800faac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fab6:	f7fd f85b 	bl	800cb70 <get_fattime>
 800faba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac2:	4619      	mov	r1, r3
 800fac4:	4610      	mov	r0, r2
 800fac6:	f7fd fc31 	bl	800d32c <move_window>
 800faca:	4603      	mov	r3, r0
 800facc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d138      	bne.n	800fb46 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	330b      	adds	r3, #11
 800fade:	781a      	ldrb	r2, [r3, #0]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	330b      	adds	r3, #11
 800fae4:	f042 0220 	orr.w	r2, r2, #32
 800fae8:	b2d2      	uxtb	r2, r2
 800faea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6818      	ldr	r0, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	461a      	mov	r2, r3
 800faf6:	68f9      	ldr	r1, [r7, #12]
 800faf8:	f7fe f9bc 	bl	800de74 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f103 021c 	add.w	r2, r3, #28
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	4619      	mov	r1, r3
 800fb08:	4610      	mov	r0, r2
 800fb0a:	f7fd f983 	bl	800ce14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3316      	adds	r3, #22
 800fb12:	6939      	ldr	r1, [r7, #16]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fd f97d 	bl	800ce14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	3312      	adds	r3, #18
 800fb1e:	2100      	movs	r1, #0
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd f95c 	bl	800cdde <st_word>
					fs->wflag = 1;
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fd fc2a 	bl	800d388 <sync_fs>
 800fb34:	4603      	mov	r3, r0
 800fb36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7d1b      	ldrb	r3, [r3, #20]
 800fb3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	7dfa      	ldrb	r2, [r7, #23]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fd fa21 	bl	800cf94 <unlock_fs>
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f7ff ff70 	bl	800fa4a <f_sync>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d11d      	bne.n	800fbb0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f107 0208 	add.w	r2, r7, #8
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff fa29 	bl	800efd4 <validate>
 800fb82:	4603      	mov	r3, r0
 800fb84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d111      	bne.n	800fbb0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fd fb27 	bl	800d1e4 <dec_lock>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	2100      	movs	r1, #0
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fd f9f2 	bl	800cf94 <unlock_fs>
#endif
		}
	}
	return res;
 800fbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b092      	sub	sp, #72	@ 0x48
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	60b9      	str	r1, [r7, #8]
 800fbc4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fbc6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fbca:	f107 030c 	add.w	r3, r7, #12
 800fbce:	2200      	movs	r2, #0
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fe ff77 	bl	800eac4 <find_volume>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800fbdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 8099 	bne.w	800fd18 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fbe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800fbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbee:	69da      	ldr	r2, [r3, #28]
 800fbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf2:	6a1b      	ldr	r3, [r3, #32]
 800fbf4:	3b02      	subs	r3, #2
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d804      	bhi.n	800fc04 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfc:	69da      	ldr	r2, [r3, #28]
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	e089      	b.n	800fd18 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d128      	bne.n	800fc62 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fc10:	2302      	movs	r3, #2
 800fc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc16:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fc18:	f107 0314 	add.w	r3, r7, #20
 800fc1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fd fc41 	bl	800d4a6 <get_fat>
 800fc24:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2c:	d103      	bne.n	800fc36 <f_getfree+0x7c>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fc34:	e063      	b.n	800fcfe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d103      	bne.n	800fc44 <f_getfree+0x8a>
 800fc3c:	2302      	movs	r3, #2
 800fc3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fc42:	e05c      	b.n	800fcfe <f_getfree+0x144>
					if (stat == 0) nfree++;
 800fc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d102      	bne.n	800fc50 <f_getfree+0x96>
 800fc4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800fc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc52:	3301      	adds	r3, #1
 800fc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d3db      	bcc.n	800fc18 <f_getfree+0x5e>
 800fc60:	e04d      	b.n	800fcfe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800fc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc64:	6a1b      	ldr	r3, [r3, #32]
 800fc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc72:	2300      	movs	r3, #0
 800fc74:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800fc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d113      	bne.n	800fca4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800fc7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc80:	1c5a      	adds	r2, r3, #1
 800fc82:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fc84:	4619      	mov	r1, r3
 800fc86:	f7fd fb51 	bl	800d32c <move_window>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800fc90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d131      	bne.n	800fcfc <f_getfree+0x142>
							p = fs->win;
 800fc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9a:	333c      	adds	r3, #60	@ 0x3c
 800fc9c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800fc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800fca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	d10f      	bne.n	800fccc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800fcac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcae:	f7fd f85b 	bl	800cd68 <ld_word>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <f_getfree+0x104>
 800fcb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcba:	3301      	adds	r3, #1
 800fcbc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc0:	3302      	adds	r3, #2
 800fcc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcc6:	3b02      	subs	r3, #2
 800fcc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcca:	e010      	b.n	800fcee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800fccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcce:	f7fd f863 	bl	800cd98 <ld_dword>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d102      	bne.n	800fce2 <f_getfree+0x128>
 800fcdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcde:	3301      	adds	r3, #1
 800fce0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800fce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce4:	3304      	adds	r3, #4
 800fce6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcea:	3b04      	subs	r3, #4
 800fcec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800fcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1bd      	bne.n	800fc76 <f_getfree+0xbc>
 800fcfa:	e000      	b.n	800fcfe <f_getfree+0x144>
							if (res != FR_OK) break;
 800fcfc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd02:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800fd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd08:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800fd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0c:	791a      	ldrb	r2, [r3, #4]
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	f042 0201 	orr.w	r2, r2, #1
 800fd14:	b2d2      	uxtb	r2, r2
 800fd16:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800fd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd f937 	bl	800cf94 <unlock_fs>
 800fd26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3748      	adds	r7, #72	@ 0x48
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b084      	sub	sp, #16
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fd3e:	78fb      	ldrb	r3, [r7, #3]
 800fd40:	2b0a      	cmp	r3, #10
 800fd42:	d103      	bne.n	800fd4c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fd44:	210d      	movs	r1, #13
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff fff3 	bl	800fd32 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	db25      	blt.n	800fda4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	1c5a      	adds	r2, r3, #1
 800fd5c:	60fa      	str	r2, [r7, #12]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	4413      	add	r3, r2
 800fd62:	78fa      	ldrb	r2, [r7, #3]
 800fd64:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2b3c      	cmp	r3, #60	@ 0x3c
 800fd6a:	dd12      	ble.n	800fd92 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6818      	ldr	r0, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f103 010c 	add.w	r1, r3, #12
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	f7ff fca2 	bl	800f6c4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d101      	bne.n	800fd8c <putc_bfd+0x5a>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	e001      	b.n	800fd90 <putc_bfd+0x5e>
 800fd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd90:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	609a      	str	r2, [r3, #8]
 800fda2:	e000      	b.n	800fda6 <putc_bfd+0x74>
	if (i < 0) return;
 800fda4:	bf00      	nop
}
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	db16      	blt.n	800fdea <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f103 010c 	add.w	r1, r3, #12
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	f107 030c 	add.w	r3, r7, #12
 800fdd0:	f7ff fc78 	bl	800f6c4 <f_write>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d107      	bne.n	800fdea <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d102      	bne.n	800fdea <putc_flush+0x3e>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	e001      	b.n	800fdee <putc_flush+0x42>
	return EOF;
 800fdea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800fdf6:	b480      	push	{r7}
 800fdf8:	b083      	sub	sp, #12
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	605a      	str	r2, [r3, #4]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685a      	ldr	r2, [r3, #4]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	609a      	str	r2, [r3, #8]
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b096      	sub	sp, #88	@ 0x58
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800fe2a:	f107 030c 	add.w	r3, r7, #12
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff ffe0 	bl	800fdf6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800fe36:	e009      	b.n	800fe4c <f_puts+0x2c>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	1c5a      	adds	r2, r3, #1
 800fe3c:	607a      	str	r2, [r7, #4]
 800fe3e:	781a      	ldrb	r2, [r3, #0]
 800fe40:	f107 030c 	add.w	r3, r7, #12
 800fe44:	4611      	mov	r1, r2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff ff73 	bl	800fd32 <putc_bfd>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1f1      	bne.n	800fe38 <f_puts+0x18>
	return putc_flush(&pb);
 800fe54:	f107 030c 	add.w	r3, r7, #12
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff ffa7 	bl	800fdac <putc_flush>
 800fe5e:	4603      	mov	r3, r0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3758      	adds	r7, #88	@ 0x58
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b087      	sub	sp, #28
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	4613      	mov	r3, r2
 800fe74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe76:	2301      	movs	r3, #1
 800fe78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fe7e:	4b1f      	ldr	r3, [pc, #124]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fe80:	7a5b      	ldrb	r3, [r3, #9]
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d131      	bne.n	800feec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe88:	4b1c      	ldr	r3, [pc, #112]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fe8a:	7a5b      	ldrb	r3, [r3, #9]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4b1a      	ldr	r3, [pc, #104]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fe92:	2100      	movs	r1, #0
 800fe94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fe96:	4b19      	ldr	r3, [pc, #100]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fe98:	7a5b      	ldrb	r3, [r3, #9]
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	4a17      	ldr	r2, [pc, #92]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4413      	add	r3, r2
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fea6:	4b15      	ldr	r3, [pc, #84]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fea8:	7a5b      	ldrb	r3, [r3, #9]
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	461a      	mov	r2, r3
 800feae:	4b13      	ldr	r3, [pc, #76]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800feb0:	4413      	add	r3, r2
 800feb2:	79fa      	ldrb	r2, [r7, #7]
 800feb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800feb6:	4b11      	ldr	r3, [pc, #68]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800feb8:	7a5b      	ldrb	r3, [r3, #9]
 800feba:	b2db      	uxtb	r3, r3
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	b2d1      	uxtb	r1, r2
 800fec0:	4a0e      	ldr	r2, [pc, #56]	@ (800fefc <FATFS_LinkDriverEx+0x94>)
 800fec2:	7251      	strb	r1, [r2, #9]
 800fec4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fec6:	7dbb      	ldrb	r3, [r7, #22]
 800fec8:	3330      	adds	r3, #48	@ 0x30
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	3301      	adds	r3, #1
 800fed4:	223a      	movs	r2, #58	@ 0x3a
 800fed6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	3302      	adds	r3, #2
 800fedc:	222f      	movs	r2, #47	@ 0x2f
 800fede:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	3303      	adds	r3, #3
 800fee4:	2200      	movs	r2, #0
 800fee6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800feec:	7dfb      	ldrb	r3, [r7, #23]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	371c      	adds	r7, #28
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	20002bac 	.word	0x20002bac

0800ff00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff ffaa 	bl	800fe68 <FATFS_LinkDriverEx>
 800ff14:	4603      	mov	r3, r0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
	...

0800ff20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	6039      	str	r1, [r7, #0]
 800ff2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ff2c:	88fb      	ldrh	r3, [r7, #6]
 800ff2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff30:	d802      	bhi.n	800ff38 <ff_convert+0x18>
		c = chr;
 800ff32:	88fb      	ldrh	r3, [r7, #6]
 800ff34:	81fb      	strh	r3, [r7, #14]
 800ff36:	e025      	b.n	800ff84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00b      	beq.n	800ff56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ff3e:	88fb      	ldrh	r3, [r7, #6]
 800ff40:	2bff      	cmp	r3, #255	@ 0xff
 800ff42:	d805      	bhi.n	800ff50 <ff_convert+0x30>
 800ff44:	88fb      	ldrh	r3, [r7, #6]
 800ff46:	3b80      	subs	r3, #128	@ 0x80
 800ff48:	4a12      	ldr	r2, [pc, #72]	@ (800ff94 <ff_convert+0x74>)
 800ff4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff4e:	e000      	b.n	800ff52 <ff_convert+0x32>
 800ff50:	2300      	movs	r3, #0
 800ff52:	81fb      	strh	r3, [r7, #14]
 800ff54:	e016      	b.n	800ff84 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ff56:	2300      	movs	r3, #0
 800ff58:	81fb      	strh	r3, [r7, #14]
 800ff5a:	e009      	b.n	800ff70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ff5c:	89fb      	ldrh	r3, [r7, #14]
 800ff5e:	4a0d      	ldr	r2, [pc, #52]	@ (800ff94 <ff_convert+0x74>)
 800ff60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff64:	88fa      	ldrh	r2, [r7, #6]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d006      	beq.n	800ff78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ff6a:	89fb      	ldrh	r3, [r7, #14]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	81fb      	strh	r3, [r7, #14]
 800ff70:	89fb      	ldrh	r3, [r7, #14]
 800ff72:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff74:	d9f2      	bls.n	800ff5c <ff_convert+0x3c>
 800ff76:	e000      	b.n	800ff7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ff78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ff7a:	89fb      	ldrh	r3, [r7, #14]
 800ff7c:	3380      	adds	r3, #128	@ 0x80
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ff84:	89fb      	ldrh	r3, [r7, #14]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	08015a4c 	.word	0x08015a4c

0800ff98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b087      	sub	sp, #28
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ffa2:	88fb      	ldrh	r3, [r7, #6]
 800ffa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffa8:	d201      	bcs.n	800ffae <ff_wtoupper+0x16>
 800ffaa:	4b3e      	ldr	r3, [pc, #248]	@ (80100a4 <ff_wtoupper+0x10c>)
 800ffac:	e000      	b.n	800ffb0 <ff_wtoupper+0x18>
 800ffae:	4b3e      	ldr	r3, [pc, #248]	@ (80100a8 <ff_wtoupper+0x110>)
 800ffb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	1c9a      	adds	r2, r3, #2
 800ffb6:	617a      	str	r2, [r7, #20]
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ffbc:	8a7b      	ldrh	r3, [r7, #18]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d068      	beq.n	8010094 <ff_wtoupper+0xfc>
 800ffc2:	88fa      	ldrh	r2, [r7, #6]
 800ffc4:	8a7b      	ldrh	r3, [r7, #18]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d364      	bcc.n	8010094 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	1c9a      	adds	r2, r3, #2
 800ffce:	617a      	str	r2, [r7, #20]
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	823b      	strh	r3, [r7, #16]
 800ffd4:	8a3b      	ldrh	r3, [r7, #16]
 800ffd6:	0a1b      	lsrs	r3, r3, #8
 800ffd8:	81fb      	strh	r3, [r7, #14]
 800ffda:	8a3b      	ldrh	r3, [r7, #16]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ffe0:	88fa      	ldrh	r2, [r7, #6]
 800ffe2:	8a79      	ldrh	r1, [r7, #18]
 800ffe4:	8a3b      	ldrh	r3, [r7, #16]
 800ffe6:	440b      	add	r3, r1
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	da49      	bge.n	8010080 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ffec:	89fb      	ldrh	r3, [r7, #14]
 800ffee:	2b08      	cmp	r3, #8
 800fff0:	d84f      	bhi.n	8010092 <ff_wtoupper+0xfa>
 800fff2:	a201      	add	r2, pc, #4	@ (adr r2, 800fff8 <ff_wtoupper+0x60>)
 800fff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff8:	0801001d 	.word	0x0801001d
 800fffc:	0801002f 	.word	0x0801002f
 8010000:	08010045 	.word	0x08010045
 8010004:	0801004d 	.word	0x0801004d
 8010008:	08010055 	.word	0x08010055
 801000c:	0801005d 	.word	0x0801005d
 8010010:	08010065 	.word	0x08010065
 8010014:	0801006d 	.word	0x0801006d
 8010018:	08010075 	.word	0x08010075
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801001c:	88fa      	ldrh	r2, [r7, #6]
 801001e:	8a7b      	ldrh	r3, [r7, #18]
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	697a      	ldr	r2, [r7, #20]
 8010026:	4413      	add	r3, r2
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	80fb      	strh	r3, [r7, #6]
 801002c:	e027      	b.n	801007e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801002e:	88fa      	ldrh	r2, [r7, #6]
 8010030:	8a7b      	ldrh	r3, [r7, #18]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	b29b      	uxth	r3, r3
 8010036:	f003 0301 	and.w	r3, r3, #1
 801003a:	b29b      	uxth	r3, r3
 801003c:	88fa      	ldrh	r2, [r7, #6]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	80fb      	strh	r3, [r7, #6]
 8010042:	e01c      	b.n	801007e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010044:	88fb      	ldrh	r3, [r7, #6]
 8010046:	3b10      	subs	r3, #16
 8010048:	80fb      	strh	r3, [r7, #6]
 801004a:	e018      	b.n	801007e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801004c:	88fb      	ldrh	r3, [r7, #6]
 801004e:	3b20      	subs	r3, #32
 8010050:	80fb      	strh	r3, [r7, #6]
 8010052:	e014      	b.n	801007e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010054:	88fb      	ldrh	r3, [r7, #6]
 8010056:	3b30      	subs	r3, #48	@ 0x30
 8010058:	80fb      	strh	r3, [r7, #6]
 801005a:	e010      	b.n	801007e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801005c:	88fb      	ldrh	r3, [r7, #6]
 801005e:	3b1a      	subs	r3, #26
 8010060:	80fb      	strh	r3, [r7, #6]
 8010062:	e00c      	b.n	801007e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010064:	88fb      	ldrh	r3, [r7, #6]
 8010066:	3308      	adds	r3, #8
 8010068:	80fb      	strh	r3, [r7, #6]
 801006a:	e008      	b.n	801007e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801006c:	88fb      	ldrh	r3, [r7, #6]
 801006e:	3b50      	subs	r3, #80	@ 0x50
 8010070:	80fb      	strh	r3, [r7, #6]
 8010072:	e004      	b.n	801007e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010074:	88fb      	ldrh	r3, [r7, #6]
 8010076:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801007a:	80fb      	strh	r3, [r7, #6]
 801007c:	bf00      	nop
			}
			break;
 801007e:	e008      	b.n	8010092 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010080:	89fb      	ldrh	r3, [r7, #14]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d195      	bne.n	800ffb2 <ff_wtoupper+0x1a>
 8010086:	8a3b      	ldrh	r3, [r7, #16]
 8010088:	005b      	lsls	r3, r3, #1
 801008a:	697a      	ldr	r2, [r7, #20]
 801008c:	4413      	add	r3, r2
 801008e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010090:	e78f      	b.n	800ffb2 <ff_wtoupper+0x1a>
			break;
 8010092:	bf00      	nop
	}

	return chr;
 8010094:	88fb      	ldrh	r3, [r7, #6]
}
 8010096:	4618      	mov	r0, r3
 8010098:	371c      	adds	r7, #28
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	08015b4c 	.word	0x08015b4c
 80100a8:	08015d40 	.word	0x08015d40

080100ac <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	6039      	str	r1, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80100b8:	2300      	movs	r3, #0
 80100ba:	60fb      	str	r3, [r7, #12]
 80100bc:	2300      	movs	r3, #0
 80100be:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80100c0:	f107 030c 	add.w	r3, r7, #12
 80100c4:	2101      	movs	r1, #1
 80100c6:	4618      	mov	r0, r3
 80100c8:	f000 f8cd 	bl	8010266 <osSemaphoreCreate>
 80100cc:	4602      	mov	r2, r0
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	bf14      	ite	ne
 80100da:	2301      	movne	r3, #1
 80100dc:	2300      	moveq	r3, #0
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	617b      	str	r3, [r7, #20]

    return ret;
 80100e2:	697b      	ldr	r3, [r7, #20]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f96d 	bl	80103d4 <osSemaphoreDelete>
#endif
    return 1;
 80100fa:	2301      	movs	r3, #1
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801010c:	2300      	movs	r3, #0
 801010e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010110:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 f8d9 	bl	80102cc <osSemaphoreWait>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010120:	2301      	movs	r3, #1
 8010122:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010124:	68fb      	ldr	r3, [r7, #12]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f916 	bl	8010368 <osSemaphoreRelease>
#endif
}
 801013c:	bf00      	nop
 801013e:	3708      	adds	r7, #8
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	4603      	mov	r3, r0
 801014c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801014e:	2300      	movs	r3, #0
 8010150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010156:	2b84      	cmp	r3, #132	@ 0x84
 8010158:	d005      	beq.n	8010166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801015a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	4413      	add	r3, r2
 8010162:	3303      	adds	r3, #3
 8010164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010166:	68fb      	ldr	r3, [r7, #12]
}
 8010168:	4618      	mov	r0, r3
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801017a:	f3ef 8305 	mrs	r3, IPSR
 801017e:	607b      	str	r3, [r7, #4]
  return(result);
 8010180:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010182:	2b00      	cmp	r3, #0
 8010184:	bf14      	ite	ne
 8010186:	2301      	movne	r3, #1
 8010188:	2300      	moveq	r3, #0
 801018a:	b2db      	uxtb	r3, r3
}
 801018c:	4618      	mov	r0, r3
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801019c:	f001 f9cc 	bl	8011538 <vTaskStartScheduler>
  
  return osOK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80101a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a8:	b089      	sub	sp, #36	@ 0x24
 80101aa:	af04      	add	r7, sp, #16
 80101ac:	6078      	str	r0, [r7, #4]
 80101ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d020      	beq.n	80101fa <osThreadCreate+0x54>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01c      	beq.n	80101fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685c      	ldr	r4, [r3, #4]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	691e      	ldr	r6, [r3, #16]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7ff ffb6 	bl	8010144 <makeFreeRtosPriority>
 80101d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	695b      	ldr	r3, [r3, #20]
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101e2:	9202      	str	r2, [sp, #8]
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	9100      	str	r1, [sp, #0]
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	4632      	mov	r2, r6
 80101ec:	4629      	mov	r1, r5
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 ffbc 	bl	801116c <xTaskCreateStatic>
 80101f4:	4603      	mov	r3, r0
 80101f6:	60fb      	str	r3, [r7, #12]
 80101f8:	e01c      	b.n	8010234 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	685c      	ldr	r4, [r3, #4]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010206:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff ff98 	bl	8010144 <makeFreeRtosPriority>
 8010214:	4602      	mov	r2, r0
 8010216:	f107 030c 	add.w	r3, r7, #12
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	9200      	str	r2, [sp, #0]
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	4632      	mov	r2, r6
 8010222:	4629      	mov	r1, r5
 8010224:	4620      	mov	r0, r4
 8010226:	f001 f801 	bl	801122c <xTaskCreate>
 801022a:	4603      	mov	r3, r0
 801022c:	2b01      	cmp	r3, #1
 801022e:	d001      	beq.n	8010234 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010230:	2300      	movs	r3, #0
 8010232:	e000      	b.n	8010236 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010234:	68fb      	ldr	r3, [r7, #12]
}
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801023e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b084      	sub	sp, #16
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d001      	beq.n	8010254 <osDelay+0x16>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	e000      	b.n	8010256 <osDelay+0x18>
 8010254:	2301      	movs	r3, #1
 8010256:	4618      	mov	r0, r3
 8010258:	f001 f938 	bl	80114cc <vTaskDelay>
  
  return osOK;
 801025c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010266:	b580      	push	{r7, lr}
 8010268:	b086      	sub	sp, #24
 801026a:	af02      	add	r7, sp, #8
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00f      	beq.n	8010298 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d10a      	bne.n	8010294 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	2203      	movs	r2, #3
 8010284:	9200      	str	r2, [sp, #0]
 8010286:	2200      	movs	r2, #0
 8010288:	2100      	movs	r1, #0
 801028a:	2001      	movs	r0, #1
 801028c:	f000 f9fc 	bl	8010688 <xQueueGenericCreateStatic>
 8010290:	4603      	mov	r3, r0
 8010292:	e016      	b.n	80102c2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	e014      	b.n	80102c2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	2b01      	cmp	r3, #1
 801029c:	d110      	bne.n	80102c0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801029e:	2203      	movs	r2, #3
 80102a0:	2100      	movs	r1, #0
 80102a2:	2001      	movs	r0, #1
 80102a4:	f000 fa6d 	bl	8010782 <xQueueGenericCreate>
 80102a8:	60f8      	str	r0, [r7, #12]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <osSemaphoreCreate+0x56>
 80102b0:	2300      	movs	r3, #0
 80102b2:	2200      	movs	r2, #0
 80102b4:	2100      	movs	r1, #0
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f000 fabe 	bl	8010838 <xQueueGenericSend>
      return sema;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	e000      	b.n	80102c2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80102c0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
	...

080102cc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80102d6:	2300      	movs	r3, #0
 80102d8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d101      	bne.n	80102e4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80102e0:	2380      	movs	r3, #128	@ 0x80
 80102e2:	e03a      	b.n	801035a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80102e4:	2300      	movs	r3, #0
 80102e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ee:	d103      	bne.n	80102f8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80102f0:	f04f 33ff 	mov.w	r3, #4294967295
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	e009      	b.n	801030c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d006      	beq.n	801030c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d101      	bne.n	801030c <osSemaphoreWait+0x40>
      ticks = 1;
 8010308:	2301      	movs	r3, #1
 801030a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801030c:	f7ff ff32 	bl	8010174 <inHandlerMode>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d017      	beq.n	8010346 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010316:	f107 0308 	add.w	r3, r7, #8
 801031a:	461a      	mov	r2, r3
 801031c:	2100      	movs	r1, #0
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fd2c 	bl	8010d7c <xQueueReceiveFromISR>
 8010324:	4603      	mov	r3, r0
 8010326:	2b01      	cmp	r3, #1
 8010328:	d001      	beq.n	801032e <osSemaphoreWait+0x62>
      return osErrorOS;
 801032a:	23ff      	movs	r3, #255	@ 0xff
 801032c:	e015      	b.n	801035a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d011      	beq.n	8010358 <osSemaphoreWait+0x8c>
 8010334:	4b0b      	ldr	r3, [pc, #44]	@ (8010364 <osSemaphoreWait+0x98>)
 8010336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801033a:	601a      	str	r2, [r3, #0]
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	e008      	b.n	8010358 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010346:	68f9      	ldr	r1, [r7, #12]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fc07 	bl	8010b5c <xQueueSemaphoreTake>
 801034e:	4603      	mov	r3, r0
 8010350:	2b01      	cmp	r3, #1
 8010352:	d001      	beq.n	8010358 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010354:	23ff      	movs	r3, #255	@ 0xff
 8010356:	e000      	b.n	801035a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3710      	adds	r7, #16
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	e000ed04 	.word	0xe000ed04

08010368 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010370:	2300      	movs	r3, #0
 8010372:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010374:	2300      	movs	r3, #0
 8010376:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010378:	f7ff fefc 	bl	8010174 <inHandlerMode>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d016      	beq.n	80103b0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010382:	f107 0308 	add.w	r3, r7, #8
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fb57 	bl	8010a3c <xQueueGiveFromISR>
 801038e:	4603      	mov	r3, r0
 8010390:	2b01      	cmp	r3, #1
 8010392:	d001      	beq.n	8010398 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010394:	23ff      	movs	r3, #255	@ 0xff
 8010396:	e017      	b.n	80103c8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d013      	beq.n	80103c6 <osSemaphoreRelease+0x5e>
 801039e:	4b0c      	ldr	r3, [pc, #48]	@ (80103d0 <osSemaphoreRelease+0x68>)
 80103a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	f3bf 8f6f 	isb	sy
 80103ae:	e00a      	b.n	80103c6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80103b0:	2300      	movs	r3, #0
 80103b2:	2200      	movs	r2, #0
 80103b4:	2100      	movs	r1, #0
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 fa3e 	bl	8010838 <xQueueGenericSend>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d001      	beq.n	80103c6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80103c2:	23ff      	movs	r3, #255	@ 0xff
 80103c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80103c6:	68fb      	ldr	r3, [r7, #12]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	e000ed04 	.word	0xe000ed04

080103d4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80103dc:	f7ff feca 	bl	8010174 <inHandlerMode>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d001      	beq.n	80103ea <osSemaphoreDelete+0x16>
    return osErrorISR;
 80103e6:	2382      	movs	r3, #130	@ 0x82
 80103e8:	e003      	b.n	80103f2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fd48 	bl	8010e80 <vQueueDelete>

  return osOK; 
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80103fa:	b590      	push	{r4, r7, lr}
 80103fc:	b085      	sub	sp, #20
 80103fe:	af02      	add	r7, sp, #8
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d011      	beq.n	8010430 <osMessageCreate+0x36>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00d      	beq.n	8010430 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6859      	ldr	r1, [r3, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	689a      	ldr	r2, [r3, #8]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	2400      	movs	r4, #0
 8010426:	9400      	str	r4, [sp, #0]
 8010428:	f000 f92e 	bl	8010688 <xQueueGenericCreateStatic>
 801042c:	4603      	mov	r3, r0
 801042e:	e008      	b.n	8010442 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6818      	ldr	r0, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	4619      	mov	r1, r3
 801043c:	f000 f9a1 	bl	8010782 <xQueueGenericCreate>
 8010440:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010442:	4618      	mov	r0, r3
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	bd90      	pop	{r4, r7, pc}

0801044a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801044a:	b480      	push	{r7}
 801044c:	b083      	sub	sp, #12
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f103 0208 	add.w	r2, r3, #8
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f04f 32ff 	mov.w	r2, #4294967295
 8010462:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f103 0208 	add.w	r2, r3, #8
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f103 0208 	add.w	r2, r3, #8
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801047e:	bf00      	nop
 8010480:	370c      	adds	r7, #12
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr

0801048a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801048a:	b480      	push	{r7}
 801048c:	b083      	sub	sp, #12
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	689a      	ldr	r2, [r3, #8]
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	1c5a      	adds	r2, r3, #1
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	601a      	str	r2, [r3, #0]
}
 80104e0:	bf00      	nop
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010502:	d103      	bne.n	801050c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	60fb      	str	r3, [r7, #12]
 801050a:	e00c      	b.n	8010526 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3308      	adds	r3, #8
 8010510:	60fb      	str	r3, [r7, #12]
 8010512:	e002      	b.n	801051a <vListInsert+0x2e>
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68ba      	ldr	r2, [r7, #8]
 8010522:	429a      	cmp	r2, r3
 8010524:	d2f6      	bcs.n	8010514 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	685a      	ldr	r2, [r3, #4]
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	601a      	str	r2, [r3, #0]
}
 8010552:	bf00      	nop
 8010554:	3714      	adds	r7, #20
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr

0801055e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801055e:	b480      	push	{r7}
 8010560:	b085      	sub	sp, #20
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	691b      	ldr	r3, [r3, #16]
 801056a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	6892      	ldr	r2, [r2, #8]
 8010574:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	6852      	ldr	r2, [r2, #4]
 801057e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	429a      	cmp	r2, r3
 8010588:	d103      	bne.n	8010592 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	689a      	ldr	r2, [r3, #8]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	1e5a      	subs	r2, r3, #1
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3714      	adds	r7, #20
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
	...

080105b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10b      	bne.n	80105e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80105da:	bf00      	nop
 80105dc:	bf00      	nop
 80105de:	e7fd      	b.n	80105dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80105e0:	f001 ff22 	bl	8012428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105ec:	68f9      	ldr	r1, [r7, #12]
 80105ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80105f0:	fb01 f303 	mul.w	r3, r1, r3
 80105f4:	441a      	add	r2, r3
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010610:	3b01      	subs	r3, #1
 8010612:	68f9      	ldr	r1, [r7, #12]
 8010614:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010616:	fb01 f303 	mul.w	r3, r1, r3
 801061a:	441a      	add	r2, r3
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	22ff      	movs	r2, #255	@ 0xff
 8010624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	22ff      	movs	r2, #255	@ 0xff
 801062c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d114      	bne.n	8010660 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d01a      	beq.n	8010674 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	3310      	adds	r3, #16
 8010642:	4618      	mov	r0, r3
 8010644:	f001 f9d2 	bl	80119ec <xTaskRemoveFromEventList>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d012      	beq.n	8010674 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801064e:	4b0d      	ldr	r3, [pc, #52]	@ (8010684 <xQueueGenericReset+0xd0>)
 8010650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	f3bf 8f6f 	isb	sy
 801065e:	e009      	b.n	8010674 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3310      	adds	r3, #16
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff fef0 	bl	801044a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	3324      	adds	r3, #36	@ 0x24
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff feeb 	bl	801044a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010674:	f001 ff0a 	bl	801248c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010678:	2301      	movs	r3, #1
}
 801067a:	4618      	mov	r0, r3
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	e000ed04 	.word	0xe000ed04

08010688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08e      	sub	sp, #56	@ 0x38
 801068c:	af02      	add	r7, sp, #8
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d10b      	bne.n	80106b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801069c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	e7fd      	b.n	80106b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d10b      	bne.n	80106d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80106ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106be:	f383 8811 	msr	BASEPRI, r3
 80106c2:	f3bf 8f6f 	isb	sy
 80106c6:	f3bf 8f4f 	dsb	sy
 80106ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80106cc:	bf00      	nop
 80106ce:	bf00      	nop
 80106d0:	e7fd      	b.n	80106ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <xQueueGenericCreateStatic+0x56>
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <xQueueGenericCreateStatic+0x5a>
 80106de:	2301      	movs	r3, #1
 80106e0:	e000      	b.n	80106e4 <xQueueGenericCreateStatic+0x5c>
 80106e2:	2300      	movs	r3, #0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10b      	bne.n	8010700 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80106e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ec:	f383 8811 	msr	BASEPRI, r3
 80106f0:	f3bf 8f6f 	isb	sy
 80106f4:	f3bf 8f4f 	dsb	sy
 80106f8:	623b      	str	r3, [r7, #32]
}
 80106fa:	bf00      	nop
 80106fc:	bf00      	nop
 80106fe:	e7fd      	b.n	80106fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d102      	bne.n	801070c <xQueueGenericCreateStatic+0x84>
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d101      	bne.n	8010710 <xQueueGenericCreateStatic+0x88>
 801070c:	2301      	movs	r3, #1
 801070e:	e000      	b.n	8010712 <xQueueGenericCreateStatic+0x8a>
 8010710:	2300      	movs	r3, #0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10b      	bne.n	801072e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	61fb      	str	r3, [r7, #28]
}
 8010728:	bf00      	nop
 801072a:	bf00      	nop
 801072c:	e7fd      	b.n	801072a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801072e:	2348      	movs	r3, #72	@ 0x48
 8010730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	2b48      	cmp	r3, #72	@ 0x48
 8010736:	d00b      	beq.n	8010750 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	61bb      	str	r3, [r7, #24]
}
 801074a:	bf00      	nop
 801074c:	bf00      	nop
 801074e:	e7fd      	b.n	801074c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010750:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00d      	beq.n	8010778 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075e:	2201      	movs	r2, #1
 8010760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010764:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	4613      	mov	r3, r2
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	68b9      	ldr	r1, [r7, #8]
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f000 f840 	bl	80107f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801077a:	4618      	mov	r0, r3
 801077c:	3730      	adds	r7, #48	@ 0x30
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010782:	b580      	push	{r7, lr}
 8010784:	b08a      	sub	sp, #40	@ 0x28
 8010786:	af02      	add	r7, sp, #8
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	4613      	mov	r3, r2
 801078e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10b      	bne.n	80107ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8010796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801079a:	f383 8811 	msr	BASEPRI, r3
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f3bf 8f4f 	dsb	sy
 80107a6:	613b      	str	r3, [r7, #16]
}
 80107a8:	bf00      	nop
 80107aa:	bf00      	nop
 80107ac:	e7fd      	b.n	80107aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	fb02 f303 	mul.w	r3, r2, r3
 80107b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	3348      	adds	r3, #72	@ 0x48
 80107bc:	4618      	mov	r0, r3
 80107be:	f001 ff55 	bl	801266c <pvPortMalloc>
 80107c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d011      	beq.n	80107ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	3348      	adds	r3, #72	@ 0x48
 80107d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107dc:	79fa      	ldrb	r2, [r7, #7]
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	4613      	mov	r3, r2
 80107e4:	697a      	ldr	r2, [r7, #20]
 80107e6:	68b9      	ldr	r1, [r7, #8]
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f000 f805 	bl	80107f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107ee:	69bb      	ldr	r3, [r7, #24]
	}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3720      	adds	r7, #32
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d103      	bne.n	8010814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	69ba      	ldr	r2, [r7, #24]
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	e002      	b.n	801081a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010826:	2101      	movs	r1, #1
 8010828:	69b8      	ldr	r0, [r7, #24]
 801082a:	f7ff fec3 	bl	80105b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801082e:	bf00      	nop
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
	...

08010838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08e      	sub	sp, #56	@ 0x38
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010846:	2300      	movs	r3, #0
 8010848:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10b      	bne.n	801086c <xQueueGenericSend+0x34>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010866:	bf00      	nop
 8010868:	bf00      	nop
 801086a:	e7fd      	b.n	8010868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d103      	bne.n	801087a <xQueueGenericSend+0x42>
 8010872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010876:	2b00      	cmp	r3, #0
 8010878:	d101      	bne.n	801087e <xQueueGenericSend+0x46>
 801087a:	2301      	movs	r3, #1
 801087c:	e000      	b.n	8010880 <xQueueGenericSend+0x48>
 801087e:	2300      	movs	r3, #0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d10b      	bne.n	801089c <xQueueGenericSend+0x64>
	__asm volatile
 8010884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010888:	f383 8811 	msr	BASEPRI, r3
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010896:	bf00      	nop
 8010898:	bf00      	nop
 801089a:	e7fd      	b.n	8010898 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2b02      	cmp	r3, #2
 80108a0:	d103      	bne.n	80108aa <xQueueGenericSend+0x72>
 80108a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d101      	bne.n	80108ae <xQueueGenericSend+0x76>
 80108aa:	2301      	movs	r3, #1
 80108ac:	e000      	b.n	80108b0 <xQueueGenericSend+0x78>
 80108ae:	2300      	movs	r3, #0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d10b      	bne.n	80108cc <xQueueGenericSend+0x94>
	__asm volatile
 80108b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	623b      	str	r3, [r7, #32]
}
 80108c6:	bf00      	nop
 80108c8:	bf00      	nop
 80108ca:	e7fd      	b.n	80108c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108cc:	f001 fa54 	bl	8011d78 <xTaskGetSchedulerState>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <xQueueGenericSend+0xa4>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <xQueueGenericSend+0xa8>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <xQueueGenericSend+0xaa>
 80108e0:	2300      	movs	r3, #0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10b      	bne.n	80108fe <xQueueGenericSend+0xc6>
	__asm volatile
 80108e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	61fb      	str	r3, [r7, #28]
}
 80108f8:	bf00      	nop
 80108fa:	bf00      	nop
 80108fc:	e7fd      	b.n	80108fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108fe:	f001 fd93 	bl	8012428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801090a:	429a      	cmp	r2, r3
 801090c:	d302      	bcc.n	8010914 <xQueueGenericSend+0xdc>
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d129      	bne.n	8010968 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	68b9      	ldr	r1, [r7, #8]
 8010918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801091a:	f000 faed 	bl	8010ef8 <prvCopyDataToQueue>
 801091e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010924:	2b00      	cmp	r3, #0
 8010926:	d010      	beq.n	801094a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092a:	3324      	adds	r3, #36	@ 0x24
 801092c:	4618      	mov	r0, r3
 801092e:	f001 f85d 	bl	80119ec <xTaskRemoveFromEventList>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d013      	beq.n	8010960 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010938:	4b3f      	ldr	r3, [pc, #252]	@ (8010a38 <xQueueGenericSend+0x200>)
 801093a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801093e:	601a      	str	r2, [r3, #0]
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	e00a      	b.n	8010960 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801094a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094c:	2b00      	cmp	r3, #0
 801094e:	d007      	beq.n	8010960 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010950:	4b39      	ldr	r3, [pc, #228]	@ (8010a38 <xQueueGenericSend+0x200>)
 8010952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010960:	f001 fd94 	bl	801248c <vPortExitCritical>
				return pdPASS;
 8010964:	2301      	movs	r3, #1
 8010966:	e063      	b.n	8010a30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d103      	bne.n	8010976 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801096e:	f001 fd8d 	bl	801248c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010972:	2300      	movs	r3, #0
 8010974:	e05c      	b.n	8010a30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010978:	2b00      	cmp	r3, #0
 801097a:	d106      	bne.n	801098a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801097c:	f107 0314 	add.w	r3, r7, #20
 8010980:	4618      	mov	r0, r3
 8010982:	f001 f897 	bl	8011ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010986:	2301      	movs	r3, #1
 8010988:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801098a:	f001 fd7f 	bl	801248c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801098e:	f000 fe3d 	bl	801160c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010992:	f001 fd49 	bl	8012428 <vPortEnterCritical>
 8010996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801099c:	b25b      	sxtb	r3, r3
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d103      	bne.n	80109ac <xQueueGenericSend+0x174>
 80109a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80109ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80109b2:	b25b      	sxtb	r3, r3
 80109b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b8:	d103      	bne.n	80109c2 <xQueueGenericSend+0x18a>
 80109ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80109c2:	f001 fd63 	bl	801248c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109c6:	1d3a      	adds	r2, r7, #4
 80109c8:	f107 0314 	add.w	r3, r7, #20
 80109cc:	4611      	mov	r1, r2
 80109ce:	4618      	mov	r0, r3
 80109d0:	f001 f886 	bl	8011ae0 <xTaskCheckForTimeOut>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d124      	bne.n	8010a24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80109da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109dc:	f000 fb84 	bl	80110e8 <prvIsQueueFull>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d018      	beq.n	8010a18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80109e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e8:	3310      	adds	r3, #16
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 ffd6 	bl	80119a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80109f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109f6:	f000 fb0f 	bl	8011018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80109fa:	f000 fe15 	bl	8011628 <xTaskResumeAll>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f47f af7c 	bne.w	80108fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010a06:	4b0c      	ldr	r3, [pc, #48]	@ (8010a38 <xQueueGenericSend+0x200>)
 8010a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a0c:	601a      	str	r2, [r3, #0]
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	f3bf 8f6f 	isb	sy
 8010a16:	e772      	b.n	80108fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a1a:	f000 fafd 	bl	8011018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a1e:	f000 fe03 	bl	8011628 <xTaskResumeAll>
 8010a22:	e76c      	b.n	80108fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a26:	f000 faf7 	bl	8011018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a2a:	f000 fdfd 	bl	8011628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3738      	adds	r7, #56	@ 0x38
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	e000ed04 	.word	0xe000ed04

08010a3c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b08e      	sub	sp, #56	@ 0x38
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10b      	bne.n	8010a68 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	623b      	str	r3, [r7, #32]
}
 8010a62:	bf00      	nop
 8010a64:	bf00      	nop
 8010a66:	e7fd      	b.n	8010a64 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00b      	beq.n	8010a88 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	61fb      	str	r3, [r7, #28]
}
 8010a82:	bf00      	nop
 8010a84:	bf00      	nop
 8010a86:	e7fd      	b.n	8010a84 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d103      	bne.n	8010a98 <xQueueGiveFromISR+0x5c>
 8010a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d101      	bne.n	8010a9c <xQueueGiveFromISR+0x60>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e000      	b.n	8010a9e <xQueueGiveFromISR+0x62>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10b      	bne.n	8010aba <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa6:	f383 8811 	msr	BASEPRI, r3
 8010aaa:	f3bf 8f6f 	isb	sy
 8010aae:	f3bf 8f4f 	dsb	sy
 8010ab2:	61bb      	str	r3, [r7, #24]
}
 8010ab4:	bf00      	nop
 8010ab6:	bf00      	nop
 8010ab8:	e7fd      	b.n	8010ab6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010aba:	f001 fd95 	bl	80125e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010abe:	f3ef 8211 	mrs	r2, BASEPRI
 8010ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac6:	f383 8811 	msr	BASEPRI, r3
 8010aca:	f3bf 8f6f 	isb	sy
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	617a      	str	r2, [r7, #20]
 8010ad4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ad6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ade:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d22b      	bcs.n	8010b42 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010af6:	1c5a      	adds	r2, r3, #1
 8010af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b04:	d112      	bne.n	8010b2c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d016      	beq.n	8010b3c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b10:	3324      	adds	r3, #36	@ 0x24
 8010b12:	4618      	mov	r0, r3
 8010b14:	f000 ff6a 	bl	80119ec <xTaskRemoveFromEventList>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00e      	beq.n	8010b3c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00b      	beq.n	8010b3c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	2201      	movs	r2, #1
 8010b28:	601a      	str	r2, [r3, #0]
 8010b2a:	e007      	b.n	8010b3c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b30:	3301      	adds	r3, #1
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	b25a      	sxtb	r2, r3
 8010b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b40:	e001      	b.n	8010b46 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010b42:	2300      	movs	r3, #0
 8010b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b48:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010b50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3738      	adds	r7, #56	@ 0x38
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08e      	sub	sp, #56	@ 0x38
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b66:	2300      	movs	r3, #0
 8010b68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10b      	bne.n	8010b90 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	623b      	str	r3, [r7, #32]
}
 8010b8a:	bf00      	nop
 8010b8c:	bf00      	nop
 8010b8e:	e7fd      	b.n	8010b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00b      	beq.n	8010bb0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b9c:	f383 8811 	msr	BASEPRI, r3
 8010ba0:	f3bf 8f6f 	isb	sy
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	61fb      	str	r3, [r7, #28]
}
 8010baa:	bf00      	nop
 8010bac:	bf00      	nop
 8010bae:	e7fd      	b.n	8010bac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010bb0:	f001 f8e2 	bl	8011d78 <xTaskGetSchedulerState>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d102      	bne.n	8010bc0 <xQueueSemaphoreTake+0x64>
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <xQueueSemaphoreTake+0x68>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e000      	b.n	8010bc6 <xQueueSemaphoreTake+0x6a>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d10b      	bne.n	8010be2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bce:	f383 8811 	msr	BASEPRI, r3
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	61bb      	str	r3, [r7, #24]
}
 8010bdc:	bf00      	nop
 8010bde:	bf00      	nop
 8010be0:	e7fd      	b.n	8010bde <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010be2:	f001 fc21 	bl	8012428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d024      	beq.n	8010c3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf4:	1e5a      	subs	r2, r3, #1
 8010bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d104      	bne.n	8010c0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010c02:	f001 fa65 	bl	80120d0 <pvTaskIncrementMutexHeldCount>
 8010c06:	4602      	mov	r2, r0
 8010c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0e:	691b      	ldr	r3, [r3, #16]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00f      	beq.n	8010c34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c16:	3310      	adds	r3, #16
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 fee7 	bl	80119ec <xTaskRemoveFromEventList>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d007      	beq.n	8010c34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010c24:	4b54      	ldr	r3, [pc, #336]	@ (8010d78 <xQueueSemaphoreTake+0x21c>)
 8010c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c2a:	601a      	str	r2, [r3, #0]
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010c34:	f001 fc2a 	bl	801248c <vPortExitCritical>
				return pdPASS;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e098      	b.n	8010d6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d112      	bne.n	8010c68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00b      	beq.n	8010c60 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c4c:	f383 8811 	msr	BASEPRI, r3
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	617b      	str	r3, [r7, #20]
}
 8010c5a:	bf00      	nop
 8010c5c:	bf00      	nop
 8010c5e:	e7fd      	b.n	8010c5c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010c60:	f001 fc14 	bl	801248c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010c64:	2300      	movs	r3, #0
 8010c66:	e082      	b.n	8010d6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d106      	bne.n	8010c7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c6e:	f107 030c 	add.w	r3, r7, #12
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 ff1e 	bl	8011ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c7c:	f001 fc06 	bl	801248c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c80:	f000 fcc4 	bl	801160c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c84:	f001 fbd0 	bl	8012428 <vPortEnterCritical>
 8010c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c8e:	b25b      	sxtb	r3, r3
 8010c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c94:	d103      	bne.n	8010c9e <xQueueSemaphoreTake+0x142>
 8010c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ca4:	b25b      	sxtb	r3, r3
 8010ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010caa:	d103      	bne.n	8010cb4 <xQueueSemaphoreTake+0x158>
 8010cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cb4:	f001 fbea 	bl	801248c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010cb8:	463a      	mov	r2, r7
 8010cba:	f107 030c 	add.w	r3, r7, #12
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f000 ff0d 	bl	8011ae0 <xTaskCheckForTimeOut>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d132      	bne.n	8010d32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cce:	f000 f9f5 	bl	80110bc <prvIsQueueEmpty>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d026      	beq.n	8010d26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d109      	bne.n	8010cf4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010ce0:	f001 fba2 	bl	8012428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f001 f863 	bl	8011db4 <xTaskPriorityInherit>
 8010cee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010cf0:	f001 fbcc 	bl	801248c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cf6:	3324      	adds	r3, #36	@ 0x24
 8010cf8:	683a      	ldr	r2, [r7, #0]
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f000 fe4f 	bl	80119a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010d02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d04:	f000 f988 	bl	8011018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d08:	f000 fc8e 	bl	8011628 <xTaskResumeAll>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f47f af67 	bne.w	8010be2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010d14:	4b18      	ldr	r3, [pc, #96]	@ (8010d78 <xQueueSemaphoreTake+0x21c>)
 8010d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d1a:	601a      	str	r2, [r3, #0]
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	f3bf 8f6f 	isb	sy
 8010d24:	e75d      	b.n	8010be2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010d26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d28:	f000 f976 	bl	8011018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d2c:	f000 fc7c 	bl	8011628 <xTaskResumeAll>
 8010d30:	e757      	b.n	8010be2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d34:	f000 f970 	bl	8011018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d38:	f000 fc76 	bl	8011628 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d3e:	f000 f9bd 	bl	80110bc <prvIsQueueEmpty>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f43f af4c 	beq.w	8010be2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00d      	beq.n	8010d6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010d50:	f001 fb6a 	bl	8012428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010d54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d56:	f000 f8b7 	bl	8010ec8 <prvGetDisinheritPriorityAfterTimeout>
 8010d5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010d62:	4618      	mov	r0, r3
 8010d64:	f001 f924 	bl	8011fb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010d68:	f001 fb90 	bl	801248c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3738      	adds	r7, #56	@ 0x38
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	e000ed04 	.word	0xe000ed04

08010d7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b08e      	sub	sp, #56	@ 0x38
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d10b      	bne.n	8010daa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d96:	f383 8811 	msr	BASEPRI, r3
 8010d9a:	f3bf 8f6f 	isb	sy
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	623b      	str	r3, [r7, #32]
}
 8010da4:	bf00      	nop
 8010da6:	bf00      	nop
 8010da8:	e7fd      	b.n	8010da6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d103      	bne.n	8010db8 <xQueueReceiveFromISR+0x3c>
 8010db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d101      	bne.n	8010dbc <xQueueReceiveFromISR+0x40>
 8010db8:	2301      	movs	r3, #1
 8010dba:	e000      	b.n	8010dbe <xQueueReceiveFromISR+0x42>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d10b      	bne.n	8010dda <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	61fb      	str	r3, [r7, #28]
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop
 8010dd8:	e7fd      	b.n	8010dd6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dda:	f001 fc05 	bl	80125e8 <vPortValidateInterruptPriority>
	__asm volatile
 8010dde:	f3ef 8211 	mrs	r2, BASEPRI
 8010de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de6:	f383 8811 	msr	BASEPRI, r3
 8010dea:	f3bf 8f6f 	isb	sy
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	61ba      	str	r2, [r7, #24]
 8010df4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010df6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d02f      	beq.n	8010e66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e10:	68b9      	ldr	r1, [r7, #8]
 8010e12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e14:	f000 f8da 	bl	8010fcc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e1a:	1e5a      	subs	r2, r3, #1
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e28:	d112      	bne.n	8010e50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d016      	beq.n	8010e60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e34:	3310      	adds	r3, #16
 8010e36:	4618      	mov	r0, r3
 8010e38:	f000 fdd8 	bl	80119ec <xTaskRemoveFromEventList>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00e      	beq.n	8010e60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d00b      	beq.n	8010e60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	e007      	b.n	8010e60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e54:	3301      	adds	r3, #1
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	b25a      	sxtb	r2, r3
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010e60:	2301      	movs	r3, #1
 8010e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e64:	e001      	b.n	8010e6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010e66:	2300      	movs	r3, #0
 8010e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f383 8811 	msr	BASEPRI, r3
}
 8010e74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3738      	adds	r7, #56	@ 0x38
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10b      	bne.n	8010eaa <vQueueDelete+0x2a>
	__asm volatile
 8010e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	60bb      	str	r3, [r7, #8]
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop
 8010ea8:	e7fd      	b.n	8010ea6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f000 f934 	bl	8011118 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d102      	bne.n	8010ec0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f001 fca4 	bl	8012808 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010ec0:	bf00      	nop
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d006      	beq.n	8010ee6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f1c3 0307 	rsb	r3, r3, #7
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e001      	b.n	8010eea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010eea:	68fb      	ldr	r3, [r7, #12]
	}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b086      	sub	sp, #24
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f04:	2300      	movs	r3, #0
 8010f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d10d      	bne.n	8010f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d14d      	bne.n	8010fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	689b      	ldr	r3, [r3, #8]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 ffbc 	bl	8011ea0 <xTaskPriorityDisinherit>
 8010f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	609a      	str	r2, [r3, #8]
 8010f30:	e043      	b.n	8010fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d119      	bne.n	8010f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	6858      	ldr	r0, [r3, #4]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f40:	461a      	mov	r2, r3
 8010f42:	68b9      	ldr	r1, [r7, #8]
 8010f44:	f002 fbe5 	bl	8013712 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	685a      	ldr	r2, [r3, #4]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f50:	441a      	add	r2, r3
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	685a      	ldr	r2, [r3, #4]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d32b      	bcc.n	8010fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	605a      	str	r2, [r3, #4]
 8010f6a:	e026      	b.n	8010fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68d8      	ldr	r0, [r3, #12]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f74:	461a      	mov	r2, r3
 8010f76:	68b9      	ldr	r1, [r7, #8]
 8010f78:	f002 fbcb 	bl	8013712 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	68da      	ldr	r2, [r3, #12]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f84:	425b      	negs	r3, r3
 8010f86:	441a      	add	r2, r3
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	68da      	ldr	r2, [r3, #12]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d207      	bcs.n	8010fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	689a      	ldr	r2, [r3, #8]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fa0:	425b      	negs	r3, r3
 8010fa2:	441a      	add	r2, r3
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	d105      	bne.n	8010fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010fc2:	697b      	ldr	r3, [r7, #20]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d018      	beq.n	8011010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68da      	ldr	r2, [r3, #12]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fe6:	441a      	add	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	68da      	ldr	r2, [r3, #12]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d303      	bcc.n	8011000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	68d9      	ldr	r1, [r3, #12]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011008:	461a      	mov	r2, r3
 801100a:	6838      	ldr	r0, [r7, #0]
 801100c:	f002 fb81 	bl	8013712 <memcpy>
	}
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011020:	f001 fa02 	bl	8012428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801102a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801102c:	e011      	b.n	8011052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	d012      	beq.n	801105c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	3324      	adds	r3, #36	@ 0x24
 801103a:	4618      	mov	r0, r3
 801103c:	f000 fcd6 	bl	80119ec <xTaskRemoveFromEventList>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011046:	f000 fdaf 	bl	8011ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801104a:	7bfb      	ldrb	r3, [r7, #15]
 801104c:	3b01      	subs	r3, #1
 801104e:	b2db      	uxtb	r3, r3
 8011050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011056:	2b00      	cmp	r3, #0
 8011058:	dce9      	bgt.n	801102e <prvUnlockQueue+0x16>
 801105a:	e000      	b.n	801105e <prvUnlockQueue+0x46>
					break;
 801105c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	22ff      	movs	r2, #255	@ 0xff
 8011062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011066:	f001 fa11 	bl	801248c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801106a:	f001 f9dd 	bl	8012428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011076:	e011      	b.n	801109c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d012      	beq.n	80110a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3310      	adds	r3, #16
 8011084:	4618      	mov	r0, r3
 8011086:	f000 fcb1 	bl	80119ec <xTaskRemoveFromEventList>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011090:	f000 fd8a 	bl	8011ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011094:	7bbb      	ldrb	r3, [r7, #14]
 8011096:	3b01      	subs	r3, #1
 8011098:	b2db      	uxtb	r3, r3
 801109a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801109c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	dce9      	bgt.n	8011078 <prvUnlockQueue+0x60>
 80110a4:	e000      	b.n	80110a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80110a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	22ff      	movs	r2, #255	@ 0xff
 80110ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80110b0:	f001 f9ec 	bl	801248c <vPortExitCritical>
}
 80110b4:	bf00      	nop
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110c4:	f001 f9b0 	bl	8012428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80110d0:	2301      	movs	r3, #1
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	e001      	b.n	80110da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80110d6:	2300      	movs	r3, #0
 80110d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80110da:	f001 f9d7 	bl	801248c <vPortExitCritical>

	return xReturn;
 80110de:	68fb      	ldr	r3, [r7, #12]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3710      	adds	r7, #16
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110f0:	f001 f99a 	bl	8012428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d102      	bne.n	8011106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011100:	2301      	movs	r3, #1
 8011102:	60fb      	str	r3, [r7, #12]
 8011104:	e001      	b.n	801110a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011106:	2300      	movs	r3, #0
 8011108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801110a:	f001 f9bf 	bl	801248c <vPortExitCritical>

	return xReturn;
 801110e:	68fb      	ldr	r3, [r7, #12]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3710      	adds	r7, #16
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011118:	b480      	push	{r7}
 801111a:	b085      	sub	sp, #20
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011120:	2300      	movs	r3, #0
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	e016      	b.n	8011154 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011126:	4a10      	ldr	r2, [pc, #64]	@ (8011168 <vQueueUnregisterQueue+0x50>)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	4413      	add	r3, r2
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d10b      	bne.n	801114e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011136:	4a0c      	ldr	r2, [pc, #48]	@ (8011168 <vQueueUnregisterQueue+0x50>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2100      	movs	r1, #0
 801113c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011140:	4a09      	ldr	r2, [pc, #36]	@ (8011168 <vQueueUnregisterQueue+0x50>)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	4413      	add	r3, r2
 8011148:	2200      	movs	r2, #0
 801114a:	605a      	str	r2, [r3, #4]
				break;
 801114c:	e006      	b.n	801115c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3301      	adds	r3, #1
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b07      	cmp	r3, #7
 8011158:	d9e5      	bls.n	8011126 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801115a:	bf00      	nop
 801115c:	bf00      	nop
 801115e:	3714      	adds	r7, #20
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr
 8011168:	20002bb8 	.word	0x20002bb8

0801116c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801116c:	b580      	push	{r7, lr}
 801116e:	b08e      	sub	sp, #56	@ 0x38
 8011170:	af04      	add	r7, sp, #16
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801117a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10b      	bne.n	8011198 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	623b      	str	r3, [r7, #32]
}
 8011192:	bf00      	nop
 8011194:	bf00      	nop
 8011196:	e7fd      	b.n	8011194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10b      	bne.n	80111b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	61fb      	str	r3, [r7, #28]
}
 80111b0:	bf00      	nop
 80111b2:	bf00      	nop
 80111b4:	e7fd      	b.n	80111b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80111b6:	23a0      	movs	r3, #160	@ 0xa0
 80111b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80111be:	d00b      	beq.n	80111d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80111c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111c4:	f383 8811 	msr	BASEPRI, r3
 80111c8:	f3bf 8f6f 	isb	sy
 80111cc:	f3bf 8f4f 	dsb	sy
 80111d0:	61bb      	str	r3, [r7, #24]
}
 80111d2:	bf00      	nop
 80111d4:	bf00      	nop
 80111d6:	e7fd      	b.n	80111d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80111d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d01e      	beq.n	801121e <xTaskCreateStatic+0xb2>
 80111e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d01b      	beq.n	801121e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80111f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f2:	2202      	movs	r2, #2
 80111f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80111f8:	2300      	movs	r3, #0
 80111fa:	9303      	str	r3, [sp, #12]
 80111fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fe:	9302      	str	r3, [sp, #8]
 8011200:	f107 0314 	add.w	r3, r7, #20
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	68b9      	ldr	r1, [r7, #8]
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f000 f851 	bl	80112b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011218:	f000 f8ee 	bl	80113f8 <prvAddNewTaskToReadyList>
 801121c:	e001      	b.n	8011222 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801121e:	2300      	movs	r3, #0
 8011220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011222:	697b      	ldr	r3, [r7, #20]
	}
 8011224:	4618      	mov	r0, r3
 8011226:	3728      	adds	r7, #40	@ 0x28
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801122c:	b580      	push	{r7, lr}
 801122e:	b08c      	sub	sp, #48	@ 0x30
 8011230:	af04      	add	r7, sp, #16
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	603b      	str	r3, [r7, #0]
 8011238:	4613      	mov	r3, r2
 801123a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801123c:	88fb      	ldrh	r3, [r7, #6]
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	4618      	mov	r0, r3
 8011242:	f001 fa13 	bl	801266c <pvPortMalloc>
 8011246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d00e      	beq.n	801126c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801124e:	20a0      	movs	r0, #160	@ 0xa0
 8011250:	f001 fa0c 	bl	801266c <pvPortMalloc>
 8011254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d003      	beq.n	8011264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	697a      	ldr	r2, [r7, #20]
 8011260:	631a      	str	r2, [r3, #48]	@ 0x30
 8011262:	e005      	b.n	8011270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011264:	6978      	ldr	r0, [r7, #20]
 8011266:	f001 facf 	bl	8012808 <vPortFree>
 801126a:	e001      	b.n	8011270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801126c:	2300      	movs	r3, #0
 801126e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d017      	beq.n	80112a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	2200      	movs	r2, #0
 801127a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801127e:	88fa      	ldrh	r2, [r7, #6]
 8011280:	2300      	movs	r3, #0
 8011282:	9303      	str	r3, [sp, #12]
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	9302      	str	r3, [sp, #8]
 8011288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128a:	9301      	str	r3, [sp, #4]
 801128c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	68b9      	ldr	r1, [r7, #8]
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f000 f80f 	bl	80112b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801129a:	69f8      	ldr	r0, [r7, #28]
 801129c:	f000 f8ac 	bl	80113f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80112a0:	2301      	movs	r3, #1
 80112a2:	61bb      	str	r3, [r7, #24]
 80112a4:	e002      	b.n	80112ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80112a6:	f04f 33ff 	mov.w	r3, #4294967295
 80112aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80112ac:	69bb      	ldr	r3, [r7, #24]
	}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3720      	adds	r7, #32
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
	...

080112b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b088      	sub	sp, #32
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
 80112c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80112c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80112d0:	3b01      	subs	r3, #1
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	4413      	add	r3, r2
 80112d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	f023 0307 	bic.w	r3, r3, #7
 80112de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	f003 0307 	and.w	r3, r3, #7
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00b      	beq.n	8011302 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	617b      	str	r3, [r7, #20]
}
 80112fc:	bf00      	nop
 80112fe:	bf00      	nop
 8011300:	e7fd      	b.n	80112fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d01f      	beq.n	8011348 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011308:	2300      	movs	r3, #0
 801130a:	61fb      	str	r3, [r7, #28]
 801130c:	e012      	b.n	8011334 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	4413      	add	r3, r2
 8011314:	7819      	ldrb	r1, [r3, #0]
 8011316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	4413      	add	r3, r2
 801131c:	3334      	adds	r3, #52	@ 0x34
 801131e:	460a      	mov	r2, r1
 8011320:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	4413      	add	r3, r2
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d006      	beq.n	801133c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	3301      	adds	r3, #1
 8011332:	61fb      	str	r3, [r7, #28]
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	2b0f      	cmp	r3, #15
 8011338:	d9e9      	bls.n	801130e <prvInitialiseNewTask+0x56>
 801133a:	e000      	b.n	801133e <prvInitialiseNewTask+0x86>
			{
				break;
 801133c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801133e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011340:	2200      	movs	r2, #0
 8011342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011346:	e003      	b.n	8011350 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801134a:	2200      	movs	r2, #0
 801134c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011352:	2b06      	cmp	r3, #6
 8011354:	d901      	bls.n	801135a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011356:	2306      	movs	r3, #6
 8011358:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801135a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801135e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011364:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011368:	2200      	movs	r2, #0
 801136a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136e:	3304      	adds	r3, #4
 8011370:	4618      	mov	r0, r3
 8011372:	f7ff f88a 	bl	801048a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011378:	3318      	adds	r3, #24
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff f885 	bl	801048a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011388:	f1c3 0207 	rsb	r2, r3, #7
 801138c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801138e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011394:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011398:	2200      	movs	r2, #0
 801139a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a0:	2200      	movs	r2, #0
 80113a2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80113a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a8:	334c      	adds	r3, #76	@ 0x4c
 80113aa:	224c      	movs	r2, #76	@ 0x4c
 80113ac:	2100      	movs	r1, #0
 80113ae:	4618      	mov	r0, r3
 80113b0:	f002 f8d9 	bl	8013566 <memset>
 80113b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b6:	4a0d      	ldr	r2, [pc, #52]	@ (80113ec <prvInitialiseNewTask+0x134>)
 80113b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80113ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113bc:	4a0c      	ldr	r2, [pc, #48]	@ (80113f0 <prvInitialiseNewTask+0x138>)
 80113be:	655a      	str	r2, [r3, #84]	@ 0x54
 80113c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c2:	4a0c      	ldr	r2, [pc, #48]	@ (80113f4 <prvInitialiseNewTask+0x13c>)
 80113c4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80113c6:	683a      	ldr	r2, [r7, #0]
 80113c8:	68f9      	ldr	r1, [r7, #12]
 80113ca:	69b8      	ldr	r0, [r7, #24]
 80113cc:	f000 fefa 	bl	80121c4 <pxPortInitialiseStack>
 80113d0:	4602      	mov	r2, r0
 80113d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d002      	beq.n	80113e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113e2:	bf00      	nop
 80113e4:	3720      	adds	r7, #32
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	2000694c 	.word	0x2000694c
 80113f0:	200069b4 	.word	0x200069b4
 80113f4:	20006a1c 	.word	0x20006a1c

080113f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011400:	f001 f812 	bl	8012428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011404:	4b2a      	ldr	r3, [pc, #168]	@ (80114b0 <prvAddNewTaskToReadyList+0xb8>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3301      	adds	r3, #1
 801140a:	4a29      	ldr	r2, [pc, #164]	@ (80114b0 <prvAddNewTaskToReadyList+0xb8>)
 801140c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801140e:	4b29      	ldr	r3, [pc, #164]	@ (80114b4 <prvAddNewTaskToReadyList+0xbc>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d109      	bne.n	801142a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011416:	4a27      	ldr	r2, [pc, #156]	@ (80114b4 <prvAddNewTaskToReadyList+0xbc>)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801141c:	4b24      	ldr	r3, [pc, #144]	@ (80114b0 <prvAddNewTaskToReadyList+0xb8>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d110      	bne.n	8011446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011424:	f000 fbe4 	bl	8011bf0 <prvInitialiseTaskLists>
 8011428:	e00d      	b.n	8011446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801142a:	4b23      	ldr	r3, [pc, #140]	@ (80114b8 <prvAddNewTaskToReadyList+0xc0>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d109      	bne.n	8011446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011432:	4b20      	ldr	r3, [pc, #128]	@ (80114b4 <prvAddNewTaskToReadyList+0xbc>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143c:	429a      	cmp	r2, r3
 801143e:	d802      	bhi.n	8011446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011440:	4a1c      	ldr	r2, [pc, #112]	@ (80114b4 <prvAddNewTaskToReadyList+0xbc>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011446:	4b1d      	ldr	r3, [pc, #116]	@ (80114bc <prvAddNewTaskToReadyList+0xc4>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3301      	adds	r3, #1
 801144c:	4a1b      	ldr	r2, [pc, #108]	@ (80114bc <prvAddNewTaskToReadyList+0xc4>)
 801144e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011454:	2201      	movs	r2, #1
 8011456:	409a      	lsls	r2, r3
 8011458:	4b19      	ldr	r3, [pc, #100]	@ (80114c0 <prvAddNewTaskToReadyList+0xc8>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4313      	orrs	r3, r2
 801145e:	4a18      	ldr	r2, [pc, #96]	@ (80114c0 <prvAddNewTaskToReadyList+0xc8>)
 8011460:	6013      	str	r3, [r2, #0]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011466:	4613      	mov	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	4a15      	ldr	r2, [pc, #84]	@ (80114c4 <prvAddNewTaskToReadyList+0xcc>)
 8011470:	441a      	add	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	3304      	adds	r3, #4
 8011476:	4619      	mov	r1, r3
 8011478:	4610      	mov	r0, r2
 801147a:	f7ff f813 	bl	80104a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801147e:	f001 f805 	bl	801248c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011482:	4b0d      	ldr	r3, [pc, #52]	@ (80114b8 <prvAddNewTaskToReadyList+0xc0>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00e      	beq.n	80114a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801148a:	4b0a      	ldr	r3, [pc, #40]	@ (80114b4 <prvAddNewTaskToReadyList+0xbc>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011494:	429a      	cmp	r2, r3
 8011496:	d207      	bcs.n	80114a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011498:	4b0b      	ldr	r3, [pc, #44]	@ (80114c8 <prvAddNewTaskToReadyList+0xd0>)
 801149a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801149e:	601a      	str	r2, [r3, #0]
 80114a0:	f3bf 8f4f 	dsb	sy
 80114a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	20002cf8 	.word	0x20002cf8
 80114b4:	20002bf8 	.word	0x20002bf8
 80114b8:	20002d04 	.word	0x20002d04
 80114bc:	20002d14 	.word	0x20002d14
 80114c0:	20002d00 	.word	0x20002d00
 80114c4:	20002bfc 	.word	0x20002bfc
 80114c8:	e000ed04 	.word	0xe000ed04

080114cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80114d4:	2300      	movs	r3, #0
 80114d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d018      	beq.n	8011510 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80114de:	4b14      	ldr	r3, [pc, #80]	@ (8011530 <vTaskDelay+0x64>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d00b      	beq.n	80114fe <vTaskDelay+0x32>
	__asm volatile
 80114e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ea:	f383 8811 	msr	BASEPRI, r3
 80114ee:	f3bf 8f6f 	isb	sy
 80114f2:	f3bf 8f4f 	dsb	sy
 80114f6:	60bb      	str	r3, [r7, #8]
}
 80114f8:	bf00      	nop
 80114fa:	bf00      	nop
 80114fc:	e7fd      	b.n	80114fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80114fe:	f000 f885 	bl	801160c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011502:	2100      	movs	r1, #0
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 fdf7 	bl	80120f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801150a:	f000 f88d 	bl	8011628 <xTaskResumeAll>
 801150e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d107      	bne.n	8011526 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011516:	4b07      	ldr	r3, [pc, #28]	@ (8011534 <vTaskDelay+0x68>)
 8011518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011526:	bf00      	nop
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	20002d20 	.word	0x20002d20
 8011534:	e000ed04 	.word	0xe000ed04

08011538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b08a      	sub	sp, #40	@ 0x28
 801153c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801153e:	2300      	movs	r3, #0
 8011540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011546:	463a      	mov	r2, r7
 8011548:	1d39      	adds	r1, r7, #4
 801154a:	f107 0308 	add.w	r3, r7, #8
 801154e:	4618      	mov	r0, r3
 8011550:	f7f0 fee4 	bl	800231c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011554:	6839      	ldr	r1, [r7, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	68ba      	ldr	r2, [r7, #8]
 801155a:	9202      	str	r2, [sp, #8]
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	2300      	movs	r3, #0
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	2300      	movs	r3, #0
 8011564:	460a      	mov	r2, r1
 8011566:	4921      	ldr	r1, [pc, #132]	@ (80115ec <vTaskStartScheduler+0xb4>)
 8011568:	4821      	ldr	r0, [pc, #132]	@ (80115f0 <vTaskStartScheduler+0xb8>)
 801156a:	f7ff fdff 	bl	801116c <xTaskCreateStatic>
 801156e:	4603      	mov	r3, r0
 8011570:	4a20      	ldr	r2, [pc, #128]	@ (80115f4 <vTaskStartScheduler+0xbc>)
 8011572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011574:	4b1f      	ldr	r3, [pc, #124]	@ (80115f4 <vTaskStartScheduler+0xbc>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801157c:	2301      	movs	r3, #1
 801157e:	617b      	str	r3, [r7, #20]
 8011580:	e001      	b.n	8011586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011582:	2300      	movs	r3, #0
 8011584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b01      	cmp	r3, #1
 801158a:	d11b      	bne.n	80115c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801158c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	613b      	str	r3, [r7, #16]
}
 801159e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80115a0:	4b15      	ldr	r3, [pc, #84]	@ (80115f8 <vTaskStartScheduler+0xc0>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	334c      	adds	r3, #76	@ 0x4c
 80115a6:	4a15      	ldr	r2, [pc, #84]	@ (80115fc <vTaskStartScheduler+0xc4>)
 80115a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115aa:	4b15      	ldr	r3, [pc, #84]	@ (8011600 <vTaskStartScheduler+0xc8>)
 80115ac:	f04f 32ff 	mov.w	r2, #4294967295
 80115b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80115b2:	4b14      	ldr	r3, [pc, #80]	@ (8011604 <vTaskStartScheduler+0xcc>)
 80115b4:	2201      	movs	r2, #1
 80115b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80115b8:	4b13      	ldr	r3, [pc, #76]	@ (8011608 <vTaskStartScheduler+0xd0>)
 80115ba:	2200      	movs	r2, #0
 80115bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80115be:	f000 fe8f 	bl	80122e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80115c2:	e00f      	b.n	80115e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ca:	d10b      	bne.n	80115e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80115cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d0:	f383 8811 	msr	BASEPRI, r3
 80115d4:	f3bf 8f6f 	isb	sy
 80115d8:	f3bf 8f4f 	dsb	sy
 80115dc:	60fb      	str	r3, [r7, #12]
}
 80115de:	bf00      	nop
 80115e0:	bf00      	nop
 80115e2:	e7fd      	b.n	80115e0 <vTaskStartScheduler+0xa8>
}
 80115e4:	bf00      	nop
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	08015994 	.word	0x08015994
 80115f0:	08011bc1 	.word	0x08011bc1
 80115f4:	20002d1c 	.word	0x20002d1c
 80115f8:	20002bf8 	.word	0x20002bf8
 80115fc:	20000034 	.word	0x20000034
 8011600:	20002d18 	.word	0x20002d18
 8011604:	20002d04 	.word	0x20002d04
 8011608:	20002cfc 	.word	0x20002cfc

0801160c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801160c:	b480      	push	{r7}
 801160e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011610:	4b04      	ldr	r3, [pc, #16]	@ (8011624 <vTaskSuspendAll+0x18>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	3301      	adds	r3, #1
 8011616:	4a03      	ldr	r2, [pc, #12]	@ (8011624 <vTaskSuspendAll+0x18>)
 8011618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801161a:	bf00      	nop
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr
 8011624:	20002d20 	.word	0x20002d20

08011628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011632:	2300      	movs	r3, #0
 8011634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011636:	4b42      	ldr	r3, [pc, #264]	@ (8011740 <xTaskResumeAll+0x118>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d10b      	bne.n	8011656 <xTaskResumeAll+0x2e>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	603b      	str	r3, [r7, #0]
}
 8011650:	bf00      	nop
 8011652:	bf00      	nop
 8011654:	e7fd      	b.n	8011652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011656:	f000 fee7 	bl	8012428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801165a:	4b39      	ldr	r3, [pc, #228]	@ (8011740 <xTaskResumeAll+0x118>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3b01      	subs	r3, #1
 8011660:	4a37      	ldr	r2, [pc, #220]	@ (8011740 <xTaskResumeAll+0x118>)
 8011662:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011664:	4b36      	ldr	r3, [pc, #216]	@ (8011740 <xTaskResumeAll+0x118>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d161      	bne.n	8011730 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801166c:	4b35      	ldr	r3, [pc, #212]	@ (8011744 <xTaskResumeAll+0x11c>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d05d      	beq.n	8011730 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011674:	e02e      	b.n	80116d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011676:	4b34      	ldr	r3, [pc, #208]	@ (8011748 <xTaskResumeAll+0x120>)
 8011678:	68db      	ldr	r3, [r3, #12]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	3318      	adds	r3, #24
 8011682:	4618      	mov	r0, r3
 8011684:	f7fe ff6b 	bl	801055e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	3304      	adds	r3, #4
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe ff66 	bl	801055e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011696:	2201      	movs	r2, #1
 8011698:	409a      	lsls	r2, r3
 801169a:	4b2c      	ldr	r3, [pc, #176]	@ (801174c <xTaskResumeAll+0x124>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4313      	orrs	r3, r2
 80116a0:	4a2a      	ldr	r2, [pc, #168]	@ (801174c <xTaskResumeAll+0x124>)
 80116a2:	6013      	str	r3, [r2, #0]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4a27      	ldr	r2, [pc, #156]	@ (8011750 <xTaskResumeAll+0x128>)
 80116b2:	441a      	add	r2, r3
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	3304      	adds	r3, #4
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fe fef2 	bl	80104a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116c4:	4b23      	ldr	r3, [pc, #140]	@ (8011754 <xTaskResumeAll+0x12c>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d302      	bcc.n	80116d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80116ce:	4b22      	ldr	r3, [pc, #136]	@ (8011758 <xTaskResumeAll+0x130>)
 80116d0:	2201      	movs	r2, #1
 80116d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116d4:	4b1c      	ldr	r3, [pc, #112]	@ (8011748 <xTaskResumeAll+0x120>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d1cc      	bne.n	8011676 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d001      	beq.n	80116e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80116e2:	f000 fb29 	bl	8011d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80116e6:	4b1d      	ldr	r3, [pc, #116]	@ (801175c <xTaskResumeAll+0x134>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d010      	beq.n	8011714 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80116f2:	f000 f837 	bl	8011764 <xTaskIncrementTick>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80116fc:	4b16      	ldr	r3, [pc, #88]	@ (8011758 <xTaskResumeAll+0x130>)
 80116fe:	2201      	movs	r2, #1
 8011700:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3b01      	subs	r3, #1
 8011706:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1f1      	bne.n	80116f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801170e:	4b13      	ldr	r3, [pc, #76]	@ (801175c <xTaskResumeAll+0x134>)
 8011710:	2200      	movs	r2, #0
 8011712:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011714:	4b10      	ldr	r3, [pc, #64]	@ (8011758 <xTaskResumeAll+0x130>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d009      	beq.n	8011730 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801171c:	2301      	movs	r3, #1
 801171e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011720:	4b0f      	ldr	r3, [pc, #60]	@ (8011760 <xTaskResumeAll+0x138>)
 8011722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011730:	f000 feac 	bl	801248c <vPortExitCritical>

	return xAlreadyYielded;
 8011734:	68bb      	ldr	r3, [r7, #8]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20002d20 	.word	0x20002d20
 8011744:	20002cf8 	.word	0x20002cf8
 8011748:	20002cb8 	.word	0x20002cb8
 801174c:	20002d00 	.word	0x20002d00
 8011750:	20002bfc 	.word	0x20002bfc
 8011754:	20002bf8 	.word	0x20002bf8
 8011758:	20002d0c 	.word	0x20002d0c
 801175c:	20002d08 	.word	0x20002d08
 8011760:	e000ed04 	.word	0xe000ed04

08011764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801176a:	2300      	movs	r3, #0
 801176c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801176e:	4b4f      	ldr	r3, [pc, #316]	@ (80118ac <xTaskIncrementTick+0x148>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	f040 808f 	bne.w	8011896 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011778:	4b4d      	ldr	r3, [pc, #308]	@ (80118b0 <xTaskIncrementTick+0x14c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3301      	adds	r3, #1
 801177e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011780:	4a4b      	ldr	r2, [pc, #300]	@ (80118b0 <xTaskIncrementTick+0x14c>)
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d121      	bne.n	80117d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801178c:	4b49      	ldr	r3, [pc, #292]	@ (80118b4 <xTaskIncrementTick+0x150>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8011796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	603b      	str	r3, [r7, #0]
}
 80117a8:	bf00      	nop
 80117aa:	bf00      	nop
 80117ac:	e7fd      	b.n	80117aa <xTaskIncrementTick+0x46>
 80117ae:	4b41      	ldr	r3, [pc, #260]	@ (80118b4 <xTaskIncrementTick+0x150>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	60fb      	str	r3, [r7, #12]
 80117b4:	4b40      	ldr	r3, [pc, #256]	@ (80118b8 <xTaskIncrementTick+0x154>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4a3e      	ldr	r2, [pc, #248]	@ (80118b4 <xTaskIncrementTick+0x150>)
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	4a3e      	ldr	r2, [pc, #248]	@ (80118b8 <xTaskIncrementTick+0x154>)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6013      	str	r3, [r2, #0]
 80117c2:	4b3e      	ldr	r3, [pc, #248]	@ (80118bc <xTaskIncrementTick+0x158>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	3301      	adds	r3, #1
 80117c8:	4a3c      	ldr	r2, [pc, #240]	@ (80118bc <xTaskIncrementTick+0x158>)
 80117ca:	6013      	str	r3, [r2, #0]
 80117cc:	f000 fab4 	bl	8011d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80117d0:	4b3b      	ldr	r3, [pc, #236]	@ (80118c0 <xTaskIncrementTick+0x15c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d348      	bcc.n	801186c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117da:	4b36      	ldr	r3, [pc, #216]	@ (80118b4 <xTaskIncrementTick+0x150>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d104      	bne.n	80117ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117e4:	4b36      	ldr	r3, [pc, #216]	@ (80118c0 <xTaskIncrementTick+0x15c>)
 80117e6:	f04f 32ff 	mov.w	r2, #4294967295
 80117ea:	601a      	str	r2, [r3, #0]
					break;
 80117ec:	e03e      	b.n	801186c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117ee:	4b31      	ldr	r3, [pc, #196]	@ (80118b4 <xTaskIncrementTick+0x150>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80117fe:	693a      	ldr	r2, [r7, #16]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	429a      	cmp	r2, r3
 8011804:	d203      	bcs.n	801180e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011806:	4a2e      	ldr	r2, [pc, #184]	@ (80118c0 <xTaskIncrementTick+0x15c>)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801180c:	e02e      	b.n	801186c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	3304      	adds	r3, #4
 8011812:	4618      	mov	r0, r3
 8011814:	f7fe fea3 	bl	801055e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801181c:	2b00      	cmp	r3, #0
 801181e:	d004      	beq.n	801182a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	3318      	adds	r3, #24
 8011824:	4618      	mov	r0, r3
 8011826:	f7fe fe9a 	bl	801055e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801182e:	2201      	movs	r2, #1
 8011830:	409a      	lsls	r2, r3
 8011832:	4b24      	ldr	r3, [pc, #144]	@ (80118c4 <xTaskIncrementTick+0x160>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	4313      	orrs	r3, r2
 8011838:	4a22      	ldr	r2, [pc, #136]	@ (80118c4 <xTaskIncrementTick+0x160>)
 801183a:	6013      	str	r3, [r2, #0]
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011840:	4613      	mov	r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4413      	add	r3, r2
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	4a1f      	ldr	r2, [pc, #124]	@ (80118c8 <xTaskIncrementTick+0x164>)
 801184a:	441a      	add	r2, r3
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	3304      	adds	r3, #4
 8011850:	4619      	mov	r1, r3
 8011852:	4610      	mov	r0, r2
 8011854:	f7fe fe26 	bl	80104a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801185c:	4b1b      	ldr	r3, [pc, #108]	@ (80118cc <xTaskIncrementTick+0x168>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011862:	429a      	cmp	r2, r3
 8011864:	d3b9      	bcc.n	80117da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011866:	2301      	movs	r3, #1
 8011868:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801186a:	e7b6      	b.n	80117da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801186c:	4b17      	ldr	r3, [pc, #92]	@ (80118cc <xTaskIncrementTick+0x168>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011872:	4915      	ldr	r1, [pc, #84]	@ (80118c8 <xTaskIncrementTick+0x164>)
 8011874:	4613      	mov	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	4413      	add	r3, r2
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	440b      	add	r3, r1
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b01      	cmp	r3, #1
 8011882:	d901      	bls.n	8011888 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011884:	2301      	movs	r3, #1
 8011886:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011888:	4b11      	ldr	r3, [pc, #68]	@ (80118d0 <xTaskIncrementTick+0x16c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d007      	beq.n	80118a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011890:	2301      	movs	r3, #1
 8011892:	617b      	str	r3, [r7, #20]
 8011894:	e004      	b.n	80118a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011896:	4b0f      	ldr	r3, [pc, #60]	@ (80118d4 <xTaskIncrementTick+0x170>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	3301      	adds	r3, #1
 801189c:	4a0d      	ldr	r2, [pc, #52]	@ (80118d4 <xTaskIncrementTick+0x170>)
 801189e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80118a0:	697b      	ldr	r3, [r7, #20]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3718      	adds	r7, #24
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	20002d20 	.word	0x20002d20
 80118b0:	20002cfc 	.word	0x20002cfc
 80118b4:	20002cb0 	.word	0x20002cb0
 80118b8:	20002cb4 	.word	0x20002cb4
 80118bc:	20002d10 	.word	0x20002d10
 80118c0:	20002d18 	.word	0x20002d18
 80118c4:	20002d00 	.word	0x20002d00
 80118c8:	20002bfc 	.word	0x20002bfc
 80118cc:	20002bf8 	.word	0x20002bf8
 80118d0:	20002d0c 	.word	0x20002d0c
 80118d4:	20002d08 	.word	0x20002d08

080118d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80118d8:	b480      	push	{r7}
 80118da:	b087      	sub	sp, #28
 80118dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80118de:	4b2a      	ldr	r3, [pc, #168]	@ (8011988 <vTaskSwitchContext+0xb0>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d003      	beq.n	80118ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80118e6:	4b29      	ldr	r3, [pc, #164]	@ (801198c <vTaskSwitchContext+0xb4>)
 80118e8:	2201      	movs	r2, #1
 80118ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80118ec:	e045      	b.n	801197a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80118ee:	4b27      	ldr	r3, [pc, #156]	@ (801198c <vTaskSwitchContext+0xb4>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118f4:	4b26      	ldr	r3, [pc, #152]	@ (8011990 <vTaskSwitchContext+0xb8>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	fab3 f383 	clz	r3, r3
 8011900:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011902:	7afb      	ldrb	r3, [r7, #11]
 8011904:	f1c3 031f 	rsb	r3, r3, #31
 8011908:	617b      	str	r3, [r7, #20]
 801190a:	4922      	ldr	r1, [pc, #136]	@ (8011994 <vTaskSwitchContext+0xbc>)
 801190c:	697a      	ldr	r2, [r7, #20]
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	440b      	add	r3, r1
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d10b      	bne.n	8011936 <vTaskSwitchContext+0x5e>
	__asm volatile
 801191e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	607b      	str	r3, [r7, #4]
}
 8011930:	bf00      	nop
 8011932:	bf00      	nop
 8011934:	e7fd      	b.n	8011932 <vTaskSwitchContext+0x5a>
 8011936:	697a      	ldr	r2, [r7, #20]
 8011938:	4613      	mov	r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	4413      	add	r3, r2
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	4a14      	ldr	r2, [pc, #80]	@ (8011994 <vTaskSwitchContext+0xbc>)
 8011942:	4413      	add	r3, r2
 8011944:	613b      	str	r3, [r7, #16]
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	605a      	str	r2, [r3, #4]
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	685a      	ldr	r2, [r3, #4]
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3308      	adds	r3, #8
 8011958:	429a      	cmp	r2, r3
 801195a:	d104      	bne.n	8011966 <vTaskSwitchContext+0x8e>
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	685a      	ldr	r2, [r3, #4]
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	605a      	str	r2, [r3, #4]
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	4a0a      	ldr	r2, [pc, #40]	@ (8011998 <vTaskSwitchContext+0xc0>)
 801196e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011970:	4b09      	ldr	r3, [pc, #36]	@ (8011998 <vTaskSwitchContext+0xc0>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	334c      	adds	r3, #76	@ 0x4c
 8011976:	4a09      	ldr	r2, [pc, #36]	@ (801199c <vTaskSwitchContext+0xc4>)
 8011978:	6013      	str	r3, [r2, #0]
}
 801197a:	bf00      	nop
 801197c:	371c      	adds	r7, #28
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	20002d20 	.word	0x20002d20
 801198c:	20002d0c 	.word	0x20002d0c
 8011990:	20002d00 	.word	0x20002d00
 8011994:	20002bfc 	.word	0x20002bfc
 8011998:	20002bf8 	.word	0x20002bf8
 801199c:	20000034 	.word	0x20000034

080119a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10b      	bne.n	80119c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	60fb      	str	r3, [r7, #12]
}
 80119c2:	bf00      	nop
 80119c4:	bf00      	nop
 80119c6:	e7fd      	b.n	80119c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119c8:	4b07      	ldr	r3, [pc, #28]	@ (80119e8 <vTaskPlaceOnEventList+0x48>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	3318      	adds	r3, #24
 80119ce:	4619      	mov	r1, r3
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7fe fd8b 	bl	80104ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80119d6:	2101      	movs	r1, #1
 80119d8:	6838      	ldr	r0, [r7, #0]
 80119da:	f000 fb8d 	bl	80120f8 <prvAddCurrentTaskToDelayedList>
}
 80119de:	bf00      	nop
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20002bf8 	.word	0x20002bf8

080119ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d10b      	bne.n	8011a1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a06:	f383 8811 	msr	BASEPRI, r3
 8011a0a:	f3bf 8f6f 	isb	sy
 8011a0e:	f3bf 8f4f 	dsb	sy
 8011a12:	60fb      	str	r3, [r7, #12]
}
 8011a14:	bf00      	nop
 8011a16:	bf00      	nop
 8011a18:	e7fd      	b.n	8011a16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	3318      	adds	r3, #24
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe fd9d 	bl	801055e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a24:	4b1d      	ldr	r3, [pc, #116]	@ (8011a9c <xTaskRemoveFromEventList+0xb0>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d11c      	bne.n	8011a66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	3304      	adds	r3, #4
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fd94 	bl	801055e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	409a      	lsls	r2, r3
 8011a3e:	4b18      	ldr	r3, [pc, #96]	@ (8011aa0 <xTaskRemoveFromEventList+0xb4>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4313      	orrs	r3, r2
 8011a44:	4a16      	ldr	r2, [pc, #88]	@ (8011aa0 <xTaskRemoveFromEventList+0xb4>)
 8011a46:	6013      	str	r3, [r2, #0]
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	4413      	add	r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	4a13      	ldr	r2, [pc, #76]	@ (8011aa4 <xTaskRemoveFromEventList+0xb8>)
 8011a56:	441a      	add	r2, r3
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	3304      	adds	r3, #4
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4610      	mov	r0, r2
 8011a60:	f7fe fd20 	bl	80104a4 <vListInsertEnd>
 8011a64:	e005      	b.n	8011a72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	3318      	adds	r3, #24
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	480e      	ldr	r0, [pc, #56]	@ (8011aa8 <xTaskRemoveFromEventList+0xbc>)
 8011a6e:	f7fe fd19 	bl	80104a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a76:	4b0d      	ldr	r3, [pc, #52]	@ (8011aac <xTaskRemoveFromEventList+0xc0>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d905      	bls.n	8011a8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a80:	2301      	movs	r3, #1
 8011a82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a84:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab0 <xTaskRemoveFromEventList+0xc4>)
 8011a86:	2201      	movs	r2, #1
 8011a88:	601a      	str	r2, [r3, #0]
 8011a8a:	e001      	b.n	8011a90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a90:	697b      	ldr	r3, [r7, #20]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20002d20 	.word	0x20002d20
 8011aa0:	20002d00 	.word	0x20002d00
 8011aa4:	20002bfc 	.word	0x20002bfc
 8011aa8:	20002cb8 	.word	0x20002cb8
 8011aac:	20002bf8 	.word	0x20002bf8
 8011ab0:	20002d0c 	.word	0x20002d0c

08011ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011abc:	4b06      	ldr	r3, [pc, #24]	@ (8011ad8 <vTaskInternalSetTimeOutState+0x24>)
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ac4:	4b05      	ldr	r3, [pc, #20]	@ (8011adc <vTaskInternalSetTimeOutState+0x28>)
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	605a      	str	r2, [r3, #4]
}
 8011acc:	bf00      	nop
 8011ace:	370c      	adds	r7, #12
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	20002d10 	.word	0x20002d10
 8011adc:	20002cfc 	.word	0x20002cfc

08011ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b088      	sub	sp, #32
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10b      	bne.n	8011b08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	613b      	str	r3, [r7, #16]
}
 8011b02:	bf00      	nop
 8011b04:	bf00      	nop
 8011b06:	e7fd      	b.n	8011b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d10b      	bne.n	8011b26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	60fb      	str	r3, [r7, #12]
}
 8011b20:	bf00      	nop
 8011b22:	bf00      	nop
 8011b24:	e7fd      	b.n	8011b22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011b26:	f000 fc7f 	bl	8012428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ba0 <xTaskCheckForTimeOut+0xc0>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	69ba      	ldr	r2, [r7, #24]
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b42:	d102      	bne.n	8011b4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b44:	2300      	movs	r3, #0
 8011b46:	61fb      	str	r3, [r7, #28]
 8011b48:	e023      	b.n	8011b92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	4b15      	ldr	r3, [pc, #84]	@ (8011ba4 <xTaskCheckForTimeOut+0xc4>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d007      	beq.n	8011b66 <xTaskCheckForTimeOut+0x86>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	69ba      	ldr	r2, [r7, #24]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d302      	bcc.n	8011b66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b60:	2301      	movs	r3, #1
 8011b62:	61fb      	str	r3, [r7, #28]
 8011b64:	e015      	b.n	8011b92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d20b      	bcs.n	8011b88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	1ad2      	subs	r2, r2, r3
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7ff ff99 	bl	8011ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b82:	2300      	movs	r3, #0
 8011b84:	61fb      	str	r3, [r7, #28]
 8011b86:	e004      	b.n	8011b92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b92:	f000 fc7b 	bl	801248c <vPortExitCritical>

	return xReturn;
 8011b96:	69fb      	ldr	r3, [r7, #28]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3720      	adds	r7, #32
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20002cfc 	.word	0x20002cfc
 8011ba4:	20002d10 	.word	0x20002d10

08011ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ba8:	b480      	push	{r7}
 8011baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011bac:	4b03      	ldr	r3, [pc, #12]	@ (8011bbc <vTaskMissedYield+0x14>)
 8011bae:	2201      	movs	r2, #1
 8011bb0:	601a      	str	r2, [r3, #0]
}
 8011bb2:	bf00      	nop
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	20002d0c 	.word	0x20002d0c

08011bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011bc8:	f000 f852 	bl	8011c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011bcc:	4b06      	ldr	r3, [pc, #24]	@ (8011be8 <prvIdleTask+0x28>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d9f9      	bls.n	8011bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011bd4:	4b05      	ldr	r3, [pc, #20]	@ (8011bec <prvIdleTask+0x2c>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011be4:	e7f0      	b.n	8011bc8 <prvIdleTask+0x8>
 8011be6:	bf00      	nop
 8011be8:	20002bfc 	.word	0x20002bfc
 8011bec:	e000ed04 	.word	0xe000ed04

08011bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	607b      	str	r3, [r7, #4]
 8011bfa:	e00c      	b.n	8011c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4a12      	ldr	r2, [pc, #72]	@ (8011c50 <prvInitialiseTaskLists+0x60>)
 8011c08:	4413      	add	r3, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe fc1d 	bl	801044a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	3301      	adds	r3, #1
 8011c14:	607b      	str	r3, [r7, #4]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2b06      	cmp	r3, #6
 8011c1a:	d9ef      	bls.n	8011bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c1c:	480d      	ldr	r0, [pc, #52]	@ (8011c54 <prvInitialiseTaskLists+0x64>)
 8011c1e:	f7fe fc14 	bl	801044a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c22:	480d      	ldr	r0, [pc, #52]	@ (8011c58 <prvInitialiseTaskLists+0x68>)
 8011c24:	f7fe fc11 	bl	801044a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c28:	480c      	ldr	r0, [pc, #48]	@ (8011c5c <prvInitialiseTaskLists+0x6c>)
 8011c2a:	f7fe fc0e 	bl	801044a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c2e:	480c      	ldr	r0, [pc, #48]	@ (8011c60 <prvInitialiseTaskLists+0x70>)
 8011c30:	f7fe fc0b 	bl	801044a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c34:	480b      	ldr	r0, [pc, #44]	@ (8011c64 <prvInitialiseTaskLists+0x74>)
 8011c36:	f7fe fc08 	bl	801044a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8011c68 <prvInitialiseTaskLists+0x78>)
 8011c3c:	4a05      	ldr	r2, [pc, #20]	@ (8011c54 <prvInitialiseTaskLists+0x64>)
 8011c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c40:	4b0a      	ldr	r3, [pc, #40]	@ (8011c6c <prvInitialiseTaskLists+0x7c>)
 8011c42:	4a05      	ldr	r2, [pc, #20]	@ (8011c58 <prvInitialiseTaskLists+0x68>)
 8011c44:	601a      	str	r2, [r3, #0]
}
 8011c46:	bf00      	nop
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	20002bfc 	.word	0x20002bfc
 8011c54:	20002c88 	.word	0x20002c88
 8011c58:	20002c9c 	.word	0x20002c9c
 8011c5c:	20002cb8 	.word	0x20002cb8
 8011c60:	20002ccc 	.word	0x20002ccc
 8011c64:	20002ce4 	.word	0x20002ce4
 8011c68:	20002cb0 	.word	0x20002cb0
 8011c6c:	20002cb4 	.word	0x20002cb4

08011c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c76:	e019      	b.n	8011cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011c78:	f000 fbd6 	bl	8012428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c7c:	4b10      	ldr	r3, [pc, #64]	@ (8011cc0 <prvCheckTasksWaitingTermination+0x50>)
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	3304      	adds	r3, #4
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fe fc68 	bl	801055e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc4 <prvCheckTasksWaitingTermination+0x54>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	4a0b      	ldr	r2, [pc, #44]	@ (8011cc4 <prvCheckTasksWaitingTermination+0x54>)
 8011c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c98:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011ca2:	f000 fbf3 	bl	801248c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 f810 	bl	8011ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011cac:	4b06      	ldr	r3, [pc, #24]	@ (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e1      	bne.n	8011c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011cb4:	bf00      	nop
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20002ccc 	.word	0x20002ccc
 8011cc4:	20002cf8 	.word	0x20002cf8
 8011cc8:	20002ce0 	.word	0x20002ce0

08011ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	334c      	adds	r3, #76	@ 0x4c
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f001 fc61 	bl	80135a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d108      	bne.n	8011cfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 fd8b 	bl	8012808 <vPortFree>
				vPortFree( pxTCB );
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fd88 	bl	8012808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011cf8:	e019      	b.n	8011d2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d103      	bne.n	8011d0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f000 fd7f 	bl	8012808 <vPortFree>
	}
 8011d0a:	e010      	b.n	8011d2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d00b      	beq.n	8011d2e <prvDeleteTCB+0x62>
	__asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	60fb      	str	r3, [r7, #12]
}
 8011d28:	bf00      	nop
 8011d2a:	bf00      	nop
 8011d2c:	e7fd      	b.n	8011d2a <prvDeleteTCB+0x5e>
	}
 8011d2e:	bf00      	nop
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
	...

08011d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011d70 <prvResetNextTaskUnblockTime+0x38>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d104      	bne.n	8011d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d48:	4b0a      	ldr	r3, [pc, #40]	@ (8011d74 <prvResetNextTaskUnblockTime+0x3c>)
 8011d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d50:	e008      	b.n	8011d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d52:	4b07      	ldr	r3, [pc, #28]	@ (8011d70 <prvResetNextTaskUnblockTime+0x38>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	4a04      	ldr	r2, [pc, #16]	@ (8011d74 <prvResetNextTaskUnblockTime+0x3c>)
 8011d62:	6013      	str	r3, [r2, #0]
}
 8011d64:	bf00      	nop
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr
 8011d70:	20002cb0 	.word	0x20002cb0
 8011d74:	20002d18 	.word	0x20002d18

08011d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8011dac <xTaskGetSchedulerState+0x34>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011d86:	2301      	movs	r3, #1
 8011d88:	607b      	str	r3, [r7, #4]
 8011d8a:	e008      	b.n	8011d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d8c:	4b08      	ldr	r3, [pc, #32]	@ (8011db0 <xTaskGetSchedulerState+0x38>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d102      	bne.n	8011d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011d94:	2302      	movs	r3, #2
 8011d96:	607b      	str	r3, [r7, #4]
 8011d98:	e001      	b.n	8011d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011d9e:	687b      	ldr	r3, [r7, #4]
	}
 8011da0:	4618      	mov	r0, r3
 8011da2:	370c      	adds	r7, #12
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr
 8011dac:	20002d04 	.word	0x20002d04
 8011db0:	20002d20 	.word	0x20002d20

08011db4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d05e      	beq.n	8011e88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dce:	4b31      	ldr	r3, [pc, #196]	@ (8011e94 <xTaskPriorityInherit+0xe0>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d24e      	bcs.n	8011e76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	699b      	ldr	r3, [r3, #24]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	db06      	blt.n	8011dee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011de0:	4b2c      	ldr	r3, [pc, #176]	@ (8011e94 <xTaskPriorityInherit+0xe0>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011de6:	f1c3 0207 	rsb	r2, r3, #7
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	6959      	ldr	r1, [r3, #20]
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011df6:	4613      	mov	r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	4413      	add	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4a26      	ldr	r2, [pc, #152]	@ (8011e98 <xTaskPriorityInherit+0xe4>)
 8011e00:	4413      	add	r3, r2
 8011e02:	4299      	cmp	r1, r3
 8011e04:	d12f      	bne.n	8011e66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7fe fba7 	bl	801055e <uxListRemove>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d10a      	bne.n	8011e2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e20:	43da      	mvns	r2, r3
 8011e22:	4b1e      	ldr	r3, [pc, #120]	@ (8011e9c <xTaskPriorityInherit+0xe8>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4013      	ands	r3, r2
 8011e28:	4a1c      	ldr	r2, [pc, #112]	@ (8011e9c <xTaskPriorityInherit+0xe8>)
 8011e2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e2c:	4b19      	ldr	r3, [pc, #100]	@ (8011e94 <xTaskPriorityInherit+0xe0>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	409a      	lsls	r2, r3
 8011e3e:	4b17      	ldr	r3, [pc, #92]	@ (8011e9c <xTaskPriorityInherit+0xe8>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4313      	orrs	r3, r2
 8011e44:	4a15      	ldr	r2, [pc, #84]	@ (8011e9c <xTaskPriorityInherit+0xe8>)
 8011e46:	6013      	str	r3, [r2, #0]
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	4413      	add	r3, r2
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	4a10      	ldr	r2, [pc, #64]	@ (8011e98 <xTaskPriorityInherit+0xe4>)
 8011e56:	441a      	add	r2, r3
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	3304      	adds	r3, #4
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	4610      	mov	r0, r2
 8011e60:	f7fe fb20 	bl	80104a4 <vListInsertEnd>
 8011e64:	e004      	b.n	8011e70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e66:	4b0b      	ldr	r3, [pc, #44]	@ (8011e94 <xTaskPriorityInherit+0xe0>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011e70:	2301      	movs	r3, #1
 8011e72:	60fb      	str	r3, [r7, #12]
 8011e74:	e008      	b.n	8011e88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e7a:	4b06      	ldr	r3, [pc, #24]	@ (8011e94 <xTaskPriorityInherit+0xe0>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d201      	bcs.n	8011e88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011e84:	2301      	movs	r3, #1
 8011e86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e88:	68fb      	ldr	r3, [r7, #12]
	}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	20002bf8 	.word	0x20002bf8
 8011e98:	20002bfc 	.word	0x20002bfc
 8011e9c:	20002d00 	.word	0x20002d00

08011ea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b086      	sub	sp, #24
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011eac:	2300      	movs	r3, #0
 8011eae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d070      	beq.n	8011f98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8011fa4 <xTaskPriorityDisinherit+0x104>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	693a      	ldr	r2, [r7, #16]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d00b      	beq.n	8011ed8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ec4:	f383 8811 	msr	BASEPRI, r3
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	f3bf 8f4f 	dsb	sy
 8011ed0:	60fb      	str	r3, [r7, #12]
}
 8011ed2:	bf00      	nop
 8011ed4:	bf00      	nop
 8011ed6:	e7fd      	b.n	8011ed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d10b      	bne.n	8011ef8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	60bb      	str	r3, [r7, #8]
}
 8011ef2:	bf00      	nop
 8011ef4:	bf00      	nop
 8011ef6:	e7fd      	b.n	8011ef4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011efc:	1e5a      	subs	r2, r3, #1
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d044      	beq.n	8011f98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d140      	bne.n	8011f98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	3304      	adds	r3, #4
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fb1f 	bl	801055e <uxListRemove>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d115      	bne.n	8011f52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f2a:	491f      	ldr	r1, [pc, #124]	@ (8011fa8 <xTaskPriorityDisinherit+0x108>)
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	4413      	add	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	440b      	add	r3, r1
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10a      	bne.n	8011f52 <xTaskPriorityDisinherit+0xb2>
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f40:	2201      	movs	r2, #1
 8011f42:	fa02 f303 	lsl.w	r3, r2, r3
 8011f46:	43da      	mvns	r2, r3
 8011f48:	4b18      	ldr	r3, [pc, #96]	@ (8011fac <xTaskPriorityDisinherit+0x10c>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4013      	ands	r3, r2
 8011f4e:	4a17      	ldr	r2, [pc, #92]	@ (8011fac <xTaskPriorityDisinherit+0x10c>)
 8011f50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f5e:	f1c3 0207 	rsb	r2, r3, #7
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	409a      	lsls	r2, r3
 8011f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011fac <xTaskPriorityDisinherit+0x10c>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4313      	orrs	r3, r2
 8011f74:	4a0d      	ldr	r2, [pc, #52]	@ (8011fac <xTaskPriorityDisinherit+0x10c>)
 8011f76:	6013      	str	r3, [r2, #0]
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	4413      	add	r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4a08      	ldr	r2, [pc, #32]	@ (8011fa8 <xTaskPriorityDisinherit+0x108>)
 8011f86:	441a      	add	r2, r3
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4610      	mov	r0, r2
 8011f90:	f7fe fa88 	bl	80104a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f94:	2301      	movs	r3, #1
 8011f96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f98:	697b      	ldr	r3, [r7, #20]
	}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3718      	adds	r7, #24
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20002bf8 	.word	0x20002bf8
 8011fa8:	20002bfc 	.word	0x20002bfc
 8011fac:	20002d00 	.word	0x20002d00

08011fb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b088      	sub	sp, #32
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d079      	beq.n	80120bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d10b      	bne.n	8011fe8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fd4:	f383 8811 	msr	BASEPRI, r3
 8011fd8:	f3bf 8f6f 	isb	sy
 8011fdc:	f3bf 8f4f 	dsb	sy
 8011fe0:	60fb      	str	r3, [r7, #12]
}
 8011fe2:	bf00      	nop
 8011fe4:	bf00      	nop
 8011fe6:	e7fd      	b.n	8011fe4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fec:	683a      	ldr	r2, [r7, #0]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d902      	bls.n	8011ff8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	61fb      	str	r3, [r7, #28]
 8011ff6:	e002      	b.n	8011ffe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ffc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012002:	69fa      	ldr	r2, [r7, #28]
 8012004:	429a      	cmp	r2, r3
 8012006:	d059      	beq.n	80120bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801200c:	697a      	ldr	r2, [r7, #20]
 801200e:	429a      	cmp	r2, r3
 8012010:	d154      	bne.n	80120bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012012:	4b2c      	ldr	r3, [pc, #176]	@ (80120c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	69ba      	ldr	r2, [r7, #24]
 8012018:	429a      	cmp	r2, r3
 801201a:	d10b      	bne.n	8012034 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801201c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	60bb      	str	r3, [r7, #8]
}
 801202e:	bf00      	nop
 8012030:	bf00      	nop
 8012032:	e7fd      	b.n	8012030 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012034:	69bb      	ldr	r3, [r7, #24]
 8012036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012038:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	69fa      	ldr	r2, [r7, #28]
 801203e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	2b00      	cmp	r3, #0
 8012046:	db04      	blt.n	8012052 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	f1c3 0207 	rsb	r2, r3, #7
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	6959      	ldr	r1, [r3, #20]
 8012056:	693a      	ldr	r2, [r7, #16]
 8012058:	4613      	mov	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	4a19      	ldr	r2, [pc, #100]	@ (80120c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012062:	4413      	add	r3, r2
 8012064:	4299      	cmp	r1, r3
 8012066:	d129      	bne.n	80120bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012068:	69bb      	ldr	r3, [r7, #24]
 801206a:	3304      	adds	r3, #4
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe fa76 	bl	801055e <uxListRemove>
 8012072:	4603      	mov	r3, r0
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10a      	bne.n	801208e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207c:	2201      	movs	r2, #1
 801207e:	fa02 f303 	lsl.w	r3, r2, r3
 8012082:	43da      	mvns	r2, r3
 8012084:	4b11      	ldr	r3, [pc, #68]	@ (80120cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4013      	ands	r3, r2
 801208a:	4a10      	ldr	r2, [pc, #64]	@ (80120cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801208c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012092:	2201      	movs	r2, #1
 8012094:	409a      	lsls	r2, r3
 8012096:	4b0d      	ldr	r3, [pc, #52]	@ (80120cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4313      	orrs	r3, r2
 801209c:	4a0b      	ldr	r2, [pc, #44]	@ (80120cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120a4:	4613      	mov	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	4a06      	ldr	r2, [pc, #24]	@ (80120c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80120ae:	441a      	add	r2, r3
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	3304      	adds	r3, #4
 80120b4:	4619      	mov	r1, r3
 80120b6:	4610      	mov	r0, r2
 80120b8:	f7fe f9f4 	bl	80104a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120bc:	bf00      	nop
 80120be:	3720      	adds	r7, #32
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	20002bf8 	.word	0x20002bf8
 80120c8:	20002bfc 	.word	0x20002bfc
 80120cc:	20002d00 	.word	0x20002d00

080120d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80120d0:	b480      	push	{r7}
 80120d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80120d4:	4b07      	ldr	r3, [pc, #28]	@ (80120f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80120dc:	4b05      	ldr	r3, [pc, #20]	@ (80120f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80120e2:	3201      	adds	r2, #1
 80120e4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80120e6:	4b03      	ldr	r3, [pc, #12]	@ (80120f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120e8:	681b      	ldr	r3, [r3, #0]
	}
 80120ea:	4618      	mov	r0, r3
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	20002bf8 	.word	0x20002bf8

080120f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012102:	4b29      	ldr	r3, [pc, #164]	@ (80121a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012108:	4b28      	ldr	r3, [pc, #160]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	3304      	adds	r3, #4
 801210e:	4618      	mov	r0, r3
 8012110:	f7fe fa25 	bl	801055e <uxListRemove>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10b      	bne.n	8012132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801211a:	4b24      	ldr	r3, [pc, #144]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012120:	2201      	movs	r2, #1
 8012122:	fa02 f303 	lsl.w	r3, r2, r3
 8012126:	43da      	mvns	r2, r3
 8012128:	4b21      	ldr	r3, [pc, #132]	@ (80121b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4013      	ands	r3, r2
 801212e:	4a20      	ldr	r2, [pc, #128]	@ (80121b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012138:	d10a      	bne.n	8012150 <prvAddCurrentTaskToDelayedList+0x58>
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d007      	beq.n	8012150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012140:	4b1a      	ldr	r3, [pc, #104]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	3304      	adds	r3, #4
 8012146:	4619      	mov	r1, r3
 8012148:	481a      	ldr	r0, [pc, #104]	@ (80121b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801214a:	f7fe f9ab 	bl	80104a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801214e:	e026      	b.n	801219e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4413      	add	r3, r2
 8012156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012158:	4b14      	ldr	r3, [pc, #80]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	429a      	cmp	r2, r3
 8012166:	d209      	bcs.n	801217c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012168:	4b13      	ldr	r3, [pc, #76]	@ (80121b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	4b0f      	ldr	r3, [pc, #60]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	3304      	adds	r3, #4
 8012172:	4619      	mov	r1, r3
 8012174:	4610      	mov	r0, r2
 8012176:	f7fe f9b9 	bl	80104ec <vListInsert>
}
 801217a:	e010      	b.n	801219e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801217c:	4b0f      	ldr	r3, [pc, #60]	@ (80121bc <prvAddCurrentTaskToDelayedList+0xc4>)
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	4b0a      	ldr	r3, [pc, #40]	@ (80121ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	3304      	adds	r3, #4
 8012186:	4619      	mov	r1, r3
 8012188:	4610      	mov	r0, r2
 801218a:	f7fe f9af 	bl	80104ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801218e:	4b0c      	ldr	r3, [pc, #48]	@ (80121c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	429a      	cmp	r2, r3
 8012196:	d202      	bcs.n	801219e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012198:	4a09      	ldr	r2, [pc, #36]	@ (80121c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	6013      	str	r3, [r2, #0]
}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20002cfc 	.word	0x20002cfc
 80121ac:	20002bf8 	.word	0x20002bf8
 80121b0:	20002d00 	.word	0x20002d00
 80121b4:	20002ce4 	.word	0x20002ce4
 80121b8:	20002cb4 	.word	0x20002cb4
 80121bc:	20002cb0 	.word	0x20002cb0
 80121c0:	20002d18 	.word	0x20002d18

080121c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	3b04      	subs	r3, #4
 80121d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80121dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	3b04      	subs	r3, #4
 80121e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	f023 0201 	bic.w	r2, r3, #1
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	3b04      	subs	r3, #4
 80121f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121f4:	4a0c      	ldr	r2, [pc, #48]	@ (8012228 <pxPortInitialiseStack+0x64>)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3b14      	subs	r3, #20
 80121fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	3b04      	subs	r3, #4
 801220a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f06f 0202 	mvn.w	r2, #2
 8012212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	3b20      	subs	r3, #32
 8012218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801221a:	68fb      	ldr	r3, [r7, #12]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	0801222d 	.word	0x0801222d

0801222c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801222c:	b480      	push	{r7}
 801222e:	b085      	sub	sp, #20
 8012230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012232:	2300      	movs	r3, #0
 8012234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012236:	4b13      	ldr	r3, [pc, #76]	@ (8012284 <prvTaskExitError+0x58>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801223e:	d00b      	beq.n	8012258 <prvTaskExitError+0x2c>
	__asm volatile
 8012240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012244:	f383 8811 	msr	BASEPRI, r3
 8012248:	f3bf 8f6f 	isb	sy
 801224c:	f3bf 8f4f 	dsb	sy
 8012250:	60fb      	str	r3, [r7, #12]
}
 8012252:	bf00      	nop
 8012254:	bf00      	nop
 8012256:	e7fd      	b.n	8012254 <prvTaskExitError+0x28>
	__asm volatile
 8012258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801225c:	f383 8811 	msr	BASEPRI, r3
 8012260:	f3bf 8f6f 	isb	sy
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	60bb      	str	r3, [r7, #8]
}
 801226a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801226c:	bf00      	nop
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d0fc      	beq.n	801226e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012274:	bf00      	nop
 8012276:	bf00      	nop
 8012278:	3714      	adds	r7, #20
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	20000024 	.word	0x20000024
	...

08012290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012290:	4b07      	ldr	r3, [pc, #28]	@ (80122b0 <pxCurrentTCBConst2>)
 8012292:	6819      	ldr	r1, [r3, #0]
 8012294:	6808      	ldr	r0, [r1, #0]
 8012296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801229a:	f380 8809 	msr	PSP, r0
 801229e:	f3bf 8f6f 	isb	sy
 80122a2:	f04f 0000 	mov.w	r0, #0
 80122a6:	f380 8811 	msr	BASEPRI, r0
 80122aa:	4770      	bx	lr
 80122ac:	f3af 8000 	nop.w

080122b0 <pxCurrentTCBConst2>:
 80122b0:	20002bf8 	.word	0x20002bf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80122b4:	bf00      	nop
 80122b6:	bf00      	nop

080122b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80122b8:	4808      	ldr	r0, [pc, #32]	@ (80122dc <prvPortStartFirstTask+0x24>)
 80122ba:	6800      	ldr	r0, [r0, #0]
 80122bc:	6800      	ldr	r0, [r0, #0]
 80122be:	f380 8808 	msr	MSP, r0
 80122c2:	f04f 0000 	mov.w	r0, #0
 80122c6:	f380 8814 	msr	CONTROL, r0
 80122ca:	b662      	cpsie	i
 80122cc:	b661      	cpsie	f
 80122ce:	f3bf 8f4f 	dsb	sy
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	df00      	svc	0
 80122d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122da:	bf00      	nop
 80122dc:	e000ed08 	.word	0xe000ed08

080122e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b086      	sub	sp, #24
 80122e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122e6:	4b47      	ldr	r3, [pc, #284]	@ (8012404 <xPortStartScheduler+0x124>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4a47      	ldr	r2, [pc, #284]	@ (8012408 <xPortStartScheduler+0x128>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d10b      	bne.n	8012308 <xPortStartScheduler+0x28>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	613b      	str	r3, [r7, #16]
}
 8012302:	bf00      	nop
 8012304:	bf00      	nop
 8012306:	e7fd      	b.n	8012304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012308:	4b3e      	ldr	r3, [pc, #248]	@ (8012404 <xPortStartScheduler+0x124>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4a3f      	ldr	r2, [pc, #252]	@ (801240c <xPortStartScheduler+0x12c>)
 801230e:	4293      	cmp	r3, r2
 8012310:	d10b      	bne.n	801232a <xPortStartScheduler+0x4a>
	__asm volatile
 8012312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012316:	f383 8811 	msr	BASEPRI, r3
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	f3bf 8f4f 	dsb	sy
 8012322:	60fb      	str	r3, [r7, #12]
}
 8012324:	bf00      	nop
 8012326:	bf00      	nop
 8012328:	e7fd      	b.n	8012326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801232a:	4b39      	ldr	r3, [pc, #228]	@ (8012410 <xPortStartScheduler+0x130>)
 801232c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	b2db      	uxtb	r3, r3
 8012334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	22ff      	movs	r2, #255	@ 0xff
 801233a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	b2db      	uxtb	r3, r3
 8012342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012344:	78fb      	ldrb	r3, [r7, #3]
 8012346:	b2db      	uxtb	r3, r3
 8012348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801234c:	b2da      	uxtb	r2, r3
 801234e:	4b31      	ldr	r3, [pc, #196]	@ (8012414 <xPortStartScheduler+0x134>)
 8012350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012352:	4b31      	ldr	r3, [pc, #196]	@ (8012418 <xPortStartScheduler+0x138>)
 8012354:	2207      	movs	r2, #7
 8012356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012358:	e009      	b.n	801236e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801235a:	4b2f      	ldr	r3, [pc, #188]	@ (8012418 <xPortStartScheduler+0x138>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	3b01      	subs	r3, #1
 8012360:	4a2d      	ldr	r2, [pc, #180]	@ (8012418 <xPortStartScheduler+0x138>)
 8012362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	b2db      	uxtb	r3, r3
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	b2db      	uxtb	r3, r3
 801236c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801236e:	78fb      	ldrb	r3, [r7, #3]
 8012370:	b2db      	uxtb	r3, r3
 8012372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012376:	2b80      	cmp	r3, #128	@ 0x80
 8012378:	d0ef      	beq.n	801235a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801237a:	4b27      	ldr	r3, [pc, #156]	@ (8012418 <xPortStartScheduler+0x138>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f1c3 0307 	rsb	r3, r3, #7
 8012382:	2b04      	cmp	r3, #4
 8012384:	d00b      	beq.n	801239e <xPortStartScheduler+0xbe>
	__asm volatile
 8012386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801238a:	f383 8811 	msr	BASEPRI, r3
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f3bf 8f4f 	dsb	sy
 8012396:	60bb      	str	r3, [r7, #8]
}
 8012398:	bf00      	nop
 801239a:	bf00      	nop
 801239c:	e7fd      	b.n	801239a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801239e:	4b1e      	ldr	r3, [pc, #120]	@ (8012418 <xPortStartScheduler+0x138>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	021b      	lsls	r3, r3, #8
 80123a4:	4a1c      	ldr	r2, [pc, #112]	@ (8012418 <xPortStartScheduler+0x138>)
 80123a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80123a8:	4b1b      	ldr	r3, [pc, #108]	@ (8012418 <xPortStartScheduler+0x138>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80123b0:	4a19      	ldr	r2, [pc, #100]	@ (8012418 <xPortStartScheduler+0x138>)
 80123b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80123bc:	4b17      	ldr	r3, [pc, #92]	@ (801241c <xPortStartScheduler+0x13c>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a16      	ldr	r2, [pc, #88]	@ (801241c <xPortStartScheduler+0x13c>)
 80123c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80123c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80123c8:	4b14      	ldr	r3, [pc, #80]	@ (801241c <xPortStartScheduler+0x13c>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	4a13      	ldr	r2, [pc, #76]	@ (801241c <xPortStartScheduler+0x13c>)
 80123ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80123d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80123d4:	f000 f8da 	bl	801258c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80123d8:	4b11      	ldr	r3, [pc, #68]	@ (8012420 <xPortStartScheduler+0x140>)
 80123da:	2200      	movs	r2, #0
 80123dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80123de:	f000 f8f9 	bl	80125d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123e2:	4b10      	ldr	r3, [pc, #64]	@ (8012424 <xPortStartScheduler+0x144>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4a0f      	ldr	r2, [pc, #60]	@ (8012424 <xPortStartScheduler+0x144>)
 80123e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80123ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123ee:	f7ff ff63 	bl	80122b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123f2:	f7ff fa71 	bl	80118d8 <vTaskSwitchContext>
	prvTaskExitError();
 80123f6:	f7ff ff19 	bl	801222c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	e000ed00 	.word	0xe000ed00
 8012408:	410fc271 	.word	0x410fc271
 801240c:	410fc270 	.word	0x410fc270
 8012410:	e000e400 	.word	0xe000e400
 8012414:	20002d24 	.word	0x20002d24
 8012418:	20002d28 	.word	0x20002d28
 801241c:	e000ed20 	.word	0xe000ed20
 8012420:	20000024 	.word	0x20000024
 8012424:	e000ef34 	.word	0xe000ef34

08012428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	607b      	str	r3, [r7, #4]
}
 8012440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012442:	4b10      	ldr	r3, [pc, #64]	@ (8012484 <vPortEnterCritical+0x5c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	3301      	adds	r3, #1
 8012448:	4a0e      	ldr	r2, [pc, #56]	@ (8012484 <vPortEnterCritical+0x5c>)
 801244a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801244c:	4b0d      	ldr	r3, [pc, #52]	@ (8012484 <vPortEnterCritical+0x5c>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d110      	bne.n	8012476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012454:	4b0c      	ldr	r3, [pc, #48]	@ (8012488 <vPortEnterCritical+0x60>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	b2db      	uxtb	r3, r3
 801245a:	2b00      	cmp	r3, #0
 801245c:	d00b      	beq.n	8012476 <vPortEnterCritical+0x4e>
	__asm volatile
 801245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012462:	f383 8811 	msr	BASEPRI, r3
 8012466:	f3bf 8f6f 	isb	sy
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	603b      	str	r3, [r7, #0]
}
 8012470:	bf00      	nop
 8012472:	bf00      	nop
 8012474:	e7fd      	b.n	8012472 <vPortEnterCritical+0x4a>
	}
}
 8012476:	bf00      	nop
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	20000024 	.word	0x20000024
 8012488:	e000ed04 	.word	0xe000ed04

0801248c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012492:	4b12      	ldr	r3, [pc, #72]	@ (80124dc <vPortExitCritical+0x50>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d10b      	bne.n	80124b2 <vPortExitCritical+0x26>
	__asm volatile
 801249a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801249e:	f383 8811 	msr	BASEPRI, r3
 80124a2:	f3bf 8f6f 	isb	sy
 80124a6:	f3bf 8f4f 	dsb	sy
 80124aa:	607b      	str	r3, [r7, #4]
}
 80124ac:	bf00      	nop
 80124ae:	bf00      	nop
 80124b0:	e7fd      	b.n	80124ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80124b2:	4b0a      	ldr	r3, [pc, #40]	@ (80124dc <vPortExitCritical+0x50>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	3b01      	subs	r3, #1
 80124b8:	4a08      	ldr	r2, [pc, #32]	@ (80124dc <vPortExitCritical+0x50>)
 80124ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80124bc:	4b07      	ldr	r3, [pc, #28]	@ (80124dc <vPortExitCritical+0x50>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d105      	bne.n	80124d0 <vPortExitCritical+0x44>
 80124c4:	2300      	movs	r3, #0
 80124c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	f383 8811 	msr	BASEPRI, r3
}
 80124ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr
 80124dc:	20000024 	.word	0x20000024

080124e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124e0:	f3ef 8009 	mrs	r0, PSP
 80124e4:	f3bf 8f6f 	isb	sy
 80124e8:	4b15      	ldr	r3, [pc, #84]	@ (8012540 <pxCurrentTCBConst>)
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	f01e 0f10 	tst.w	lr, #16
 80124f0:	bf08      	it	eq
 80124f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fa:	6010      	str	r0, [r2, #0]
 80124fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012504:	f380 8811 	msr	BASEPRI, r0
 8012508:	f3bf 8f4f 	dsb	sy
 801250c:	f3bf 8f6f 	isb	sy
 8012510:	f7ff f9e2 	bl	80118d8 <vTaskSwitchContext>
 8012514:	f04f 0000 	mov.w	r0, #0
 8012518:	f380 8811 	msr	BASEPRI, r0
 801251c:	bc09      	pop	{r0, r3}
 801251e:	6819      	ldr	r1, [r3, #0]
 8012520:	6808      	ldr	r0, [r1, #0]
 8012522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012526:	f01e 0f10 	tst.w	lr, #16
 801252a:	bf08      	it	eq
 801252c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012530:	f380 8809 	msr	PSP, r0
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	4770      	bx	lr
 801253a:	bf00      	nop
 801253c:	f3af 8000 	nop.w

08012540 <pxCurrentTCBConst>:
 8012540:	20002bf8 	.word	0x20002bf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012544:	bf00      	nop
 8012546:	bf00      	nop

08012548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
	__asm volatile
 801254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012552:	f383 8811 	msr	BASEPRI, r3
 8012556:	f3bf 8f6f 	isb	sy
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	607b      	str	r3, [r7, #4]
}
 8012560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012562:	f7ff f8ff 	bl	8011764 <xTaskIncrementTick>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d003      	beq.n	8012574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801256c:	4b06      	ldr	r3, [pc, #24]	@ (8012588 <SysTick_Handler+0x40>)
 801256e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	2300      	movs	r3, #0
 8012576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	f383 8811 	msr	BASEPRI, r3
}
 801257e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	e000ed04 	.word	0xe000ed04

0801258c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801258c:	b480      	push	{r7}
 801258e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012590:	4b0b      	ldr	r3, [pc, #44]	@ (80125c0 <vPortSetupTimerInterrupt+0x34>)
 8012592:	2200      	movs	r2, #0
 8012594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012596:	4b0b      	ldr	r3, [pc, #44]	@ (80125c4 <vPortSetupTimerInterrupt+0x38>)
 8012598:	2200      	movs	r2, #0
 801259a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801259c:	4b0a      	ldr	r3, [pc, #40]	@ (80125c8 <vPortSetupTimerInterrupt+0x3c>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a0a      	ldr	r2, [pc, #40]	@ (80125cc <vPortSetupTimerInterrupt+0x40>)
 80125a2:	fba2 2303 	umull	r2, r3, r2, r3
 80125a6:	099b      	lsrs	r3, r3, #6
 80125a8:	4a09      	ldr	r2, [pc, #36]	@ (80125d0 <vPortSetupTimerInterrupt+0x44>)
 80125aa:	3b01      	subs	r3, #1
 80125ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80125ae:	4b04      	ldr	r3, [pc, #16]	@ (80125c0 <vPortSetupTimerInterrupt+0x34>)
 80125b0:	2207      	movs	r2, #7
 80125b2:	601a      	str	r2, [r3, #0]
}
 80125b4:	bf00      	nop
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr
 80125be:	bf00      	nop
 80125c0:	e000e010 	.word	0xe000e010
 80125c4:	e000e018 	.word	0xe000e018
 80125c8:	20000004 	.word	0x20000004
 80125cc:	10624dd3 	.word	0x10624dd3
 80125d0:	e000e014 	.word	0xe000e014

080125d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80125d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80125e4 <vPortEnableVFP+0x10>
 80125d8:	6801      	ldr	r1, [r0, #0]
 80125da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80125de:	6001      	str	r1, [r0, #0]
 80125e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80125e2:	bf00      	nop
 80125e4:	e000ed88 	.word	0xe000ed88

080125e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125e8:	b480      	push	{r7}
 80125ea:	b085      	sub	sp, #20
 80125ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125ee:	f3ef 8305 	mrs	r3, IPSR
 80125f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b0f      	cmp	r3, #15
 80125f8:	d915      	bls.n	8012626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125fa:	4a18      	ldr	r2, [pc, #96]	@ (801265c <vPortValidateInterruptPriority+0x74>)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	4413      	add	r3, r2
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012604:	4b16      	ldr	r3, [pc, #88]	@ (8012660 <vPortValidateInterruptPriority+0x78>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	7afa      	ldrb	r2, [r7, #11]
 801260a:	429a      	cmp	r2, r3
 801260c:	d20b      	bcs.n	8012626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	607b      	str	r3, [r7, #4]
}
 8012620:	bf00      	nop
 8012622:	bf00      	nop
 8012624:	e7fd      	b.n	8012622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012626:	4b0f      	ldr	r3, [pc, #60]	@ (8012664 <vPortValidateInterruptPriority+0x7c>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801262e:	4b0e      	ldr	r3, [pc, #56]	@ (8012668 <vPortValidateInterruptPriority+0x80>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	429a      	cmp	r2, r3
 8012634:	d90b      	bls.n	801264e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263a:	f383 8811 	msr	BASEPRI, r3
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	603b      	str	r3, [r7, #0]
}
 8012648:	bf00      	nop
 801264a:	bf00      	nop
 801264c:	e7fd      	b.n	801264a <vPortValidateInterruptPriority+0x62>
	}
 801264e:	bf00      	nop
 8012650:	3714      	adds	r7, #20
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop
 801265c:	e000e3f0 	.word	0xe000e3f0
 8012660:	20002d24 	.word	0x20002d24
 8012664:	e000ed0c 	.word	0xe000ed0c
 8012668:	20002d28 	.word	0x20002d28

0801266c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b08a      	sub	sp, #40	@ 0x28
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012674:	2300      	movs	r3, #0
 8012676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012678:	f7fe ffc8 	bl	801160c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801267c:	4b5c      	ldr	r3, [pc, #368]	@ (80127f0 <pvPortMalloc+0x184>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d101      	bne.n	8012688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012684:	f000 f924 	bl	80128d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012688:	4b5a      	ldr	r3, [pc, #360]	@ (80127f4 <pvPortMalloc+0x188>)
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4013      	ands	r3, r2
 8012690:	2b00      	cmp	r3, #0
 8012692:	f040 8095 	bne.w	80127c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d01e      	beq.n	80126da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801269c:	2208      	movs	r2, #8
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4413      	add	r3, r2
 80126a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f003 0307 	and.w	r3, r3, #7
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d015      	beq.n	80126da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f023 0307 	bic.w	r3, r3, #7
 80126b4:	3308      	adds	r3, #8
 80126b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f003 0307 	and.w	r3, r3, #7
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d00b      	beq.n	80126da <pvPortMalloc+0x6e>
	__asm volatile
 80126c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c6:	f383 8811 	msr	BASEPRI, r3
 80126ca:	f3bf 8f6f 	isb	sy
 80126ce:	f3bf 8f4f 	dsb	sy
 80126d2:	617b      	str	r3, [r7, #20]
}
 80126d4:	bf00      	nop
 80126d6:	bf00      	nop
 80126d8:	e7fd      	b.n	80126d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d06f      	beq.n	80127c0 <pvPortMalloc+0x154>
 80126e0:	4b45      	ldr	r3, [pc, #276]	@ (80127f8 <pvPortMalloc+0x18c>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d86a      	bhi.n	80127c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126ea:	4b44      	ldr	r3, [pc, #272]	@ (80127fc <pvPortMalloc+0x190>)
 80126ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126ee:	4b43      	ldr	r3, [pc, #268]	@ (80127fc <pvPortMalloc+0x190>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126f4:	e004      	b.n	8012700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	429a      	cmp	r2, r3
 8012708:	d903      	bls.n	8012712 <pvPortMalloc+0xa6>
 801270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d1f1      	bne.n	80126f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012712:	4b37      	ldr	r3, [pc, #220]	@ (80127f0 <pvPortMalloc+0x184>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012718:	429a      	cmp	r2, r3
 801271a:	d051      	beq.n	80127c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2208      	movs	r2, #8
 8012722:	4413      	add	r3, r2
 8012724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012730:	685a      	ldr	r2, [r3, #4]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	1ad2      	subs	r2, r2, r3
 8012736:	2308      	movs	r3, #8
 8012738:	005b      	lsls	r3, r3, #1
 801273a:	429a      	cmp	r2, r3
 801273c:	d920      	bls.n	8012780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801273e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4413      	add	r3, r2
 8012744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	f003 0307 	and.w	r3, r3, #7
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00b      	beq.n	8012768 <pvPortMalloc+0xfc>
	__asm volatile
 8012750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	613b      	str	r3, [r7, #16]
}
 8012762:	bf00      	nop
 8012764:	bf00      	nop
 8012766:	e7fd      	b.n	8012764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	1ad2      	subs	r2, r2, r3
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801277a:	69b8      	ldr	r0, [r7, #24]
 801277c:	f000 f90a 	bl	8012994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012780:	4b1d      	ldr	r3, [pc, #116]	@ (80127f8 <pvPortMalloc+0x18c>)
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	1ad3      	subs	r3, r2, r3
 801278a:	4a1b      	ldr	r2, [pc, #108]	@ (80127f8 <pvPortMalloc+0x18c>)
 801278c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801278e:	4b1a      	ldr	r3, [pc, #104]	@ (80127f8 <pvPortMalloc+0x18c>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	4b1b      	ldr	r3, [pc, #108]	@ (8012800 <pvPortMalloc+0x194>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	429a      	cmp	r2, r3
 8012798:	d203      	bcs.n	80127a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801279a:	4b17      	ldr	r3, [pc, #92]	@ (80127f8 <pvPortMalloc+0x18c>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4a18      	ldr	r2, [pc, #96]	@ (8012800 <pvPortMalloc+0x194>)
 80127a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80127a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	4b13      	ldr	r3, [pc, #76]	@ (80127f4 <pvPortMalloc+0x188>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	431a      	orrs	r2, r3
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80127b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b2:	2200      	movs	r2, #0
 80127b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80127b6:	4b13      	ldr	r3, [pc, #76]	@ (8012804 <pvPortMalloc+0x198>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	3301      	adds	r3, #1
 80127bc:	4a11      	ldr	r2, [pc, #68]	@ (8012804 <pvPortMalloc+0x198>)
 80127be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80127c0:	f7fe ff32 	bl	8011628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	f003 0307 	and.w	r3, r3, #7
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00b      	beq.n	80127e6 <pvPortMalloc+0x17a>
	__asm volatile
 80127ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	60fb      	str	r3, [r7, #12]
}
 80127e0:	bf00      	nop
 80127e2:	bf00      	nop
 80127e4:	e7fd      	b.n	80127e2 <pvPortMalloc+0x176>
	return pvReturn;
 80127e6:	69fb      	ldr	r3, [r7, #28]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3728      	adds	r7, #40	@ 0x28
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	20006934 	.word	0x20006934
 80127f4:	20006948 	.word	0x20006948
 80127f8:	20006938 	.word	0x20006938
 80127fc:	2000692c 	.word	0x2000692c
 8012800:	2000693c 	.word	0x2000693c
 8012804:	20006940 	.word	0x20006940

08012808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d04f      	beq.n	80128ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801281a:	2308      	movs	r3, #8
 801281c:	425b      	negs	r3, r3
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	4413      	add	r3, r2
 8012822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	685a      	ldr	r2, [r3, #4]
 801282c:	4b25      	ldr	r3, [pc, #148]	@ (80128c4 <vPortFree+0xbc>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4013      	ands	r3, r2
 8012832:	2b00      	cmp	r3, #0
 8012834:	d10b      	bne.n	801284e <vPortFree+0x46>
	__asm volatile
 8012836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801283a:	f383 8811 	msr	BASEPRI, r3
 801283e:	f3bf 8f6f 	isb	sy
 8012842:	f3bf 8f4f 	dsb	sy
 8012846:	60fb      	str	r3, [r7, #12]
}
 8012848:	bf00      	nop
 801284a:	bf00      	nop
 801284c:	e7fd      	b.n	801284a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00b      	beq.n	801286e <vPortFree+0x66>
	__asm volatile
 8012856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801285a:	f383 8811 	msr	BASEPRI, r3
 801285e:	f3bf 8f6f 	isb	sy
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	60bb      	str	r3, [r7, #8]
}
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	e7fd      	b.n	801286a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	4b14      	ldr	r3, [pc, #80]	@ (80128c4 <vPortFree+0xbc>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4013      	ands	r3, r2
 8012878:	2b00      	cmp	r3, #0
 801287a:	d01e      	beq.n	80128ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d11a      	bne.n	80128ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	685a      	ldr	r2, [r3, #4]
 8012888:	4b0e      	ldr	r3, [pc, #56]	@ (80128c4 <vPortFree+0xbc>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	43db      	mvns	r3, r3
 801288e:	401a      	ands	r2, r3
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012894:	f7fe feba 	bl	801160c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	685a      	ldr	r2, [r3, #4]
 801289c:	4b0a      	ldr	r3, [pc, #40]	@ (80128c8 <vPortFree+0xc0>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4413      	add	r3, r2
 80128a2:	4a09      	ldr	r2, [pc, #36]	@ (80128c8 <vPortFree+0xc0>)
 80128a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80128a6:	6938      	ldr	r0, [r7, #16]
 80128a8:	f000 f874 	bl	8012994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80128ac:	4b07      	ldr	r3, [pc, #28]	@ (80128cc <vPortFree+0xc4>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	3301      	adds	r3, #1
 80128b2:	4a06      	ldr	r2, [pc, #24]	@ (80128cc <vPortFree+0xc4>)
 80128b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80128b6:	f7fe feb7 	bl	8011628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80128ba:	bf00      	nop
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	20006948 	.word	0x20006948
 80128c8:	20006938 	.word	0x20006938
 80128cc:	20006944 	.word	0x20006944

080128d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80128d0:	b480      	push	{r7}
 80128d2:	b085      	sub	sp, #20
 80128d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80128d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80128da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80128dc:	4b27      	ldr	r3, [pc, #156]	@ (801297c <prvHeapInit+0xac>)
 80128de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f003 0307 	and.w	r3, r3, #7
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00c      	beq.n	8012904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3307      	adds	r3, #7
 80128ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f023 0307 	bic.w	r3, r3, #7
 80128f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	1ad3      	subs	r3, r2, r3
 80128fe:	4a1f      	ldr	r2, [pc, #124]	@ (801297c <prvHeapInit+0xac>)
 8012900:	4413      	add	r3, r2
 8012902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012908:	4a1d      	ldr	r2, [pc, #116]	@ (8012980 <prvHeapInit+0xb0>)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801290e:	4b1c      	ldr	r3, [pc, #112]	@ (8012980 <prvHeapInit+0xb0>)
 8012910:	2200      	movs	r2, #0
 8012912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	4413      	add	r3, r2
 801291a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801291c:	2208      	movs	r2, #8
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	1a9b      	subs	r3, r3, r2
 8012922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f023 0307 	bic.w	r3, r3, #7
 801292a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	4a15      	ldr	r2, [pc, #84]	@ (8012984 <prvHeapInit+0xb4>)
 8012930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012932:	4b14      	ldr	r3, [pc, #80]	@ (8012984 <prvHeapInit+0xb4>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2200      	movs	r2, #0
 8012938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801293a:	4b12      	ldr	r3, [pc, #72]	@ (8012984 <prvHeapInit+0xb4>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2200      	movs	r2, #0
 8012940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	1ad2      	subs	r2, r2, r3
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012950:	4b0c      	ldr	r3, [pc, #48]	@ (8012984 <prvHeapInit+0xb4>)
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4a0a      	ldr	r2, [pc, #40]	@ (8012988 <prvHeapInit+0xb8>)
 801295e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	4a09      	ldr	r2, [pc, #36]	@ (801298c <prvHeapInit+0xbc>)
 8012966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012968:	4b09      	ldr	r3, [pc, #36]	@ (8012990 <prvHeapInit+0xc0>)
 801296a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801296e:	601a      	str	r2, [r3, #0]
}
 8012970:	bf00      	nop
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	20002d2c 	.word	0x20002d2c
 8012980:	2000692c 	.word	0x2000692c
 8012984:	20006934 	.word	0x20006934
 8012988:	2000693c 	.word	0x2000693c
 801298c:	20006938 	.word	0x20006938
 8012990:	20006948 	.word	0x20006948

08012994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012994:	b480      	push	{r7}
 8012996:	b085      	sub	sp, #20
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801299c:	4b28      	ldr	r3, [pc, #160]	@ (8012a40 <prvInsertBlockIntoFreeList+0xac>)
 801299e:	60fb      	str	r3, [r7, #12]
 80129a0:	e002      	b.n	80129a8 <prvInsertBlockIntoFreeList+0x14>
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	60fb      	str	r3, [r7, #12]
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d8f7      	bhi.n	80129a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	4413      	add	r3, r2
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d108      	bne.n	80129d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	685a      	ldr	r2, [r3, #4]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	441a      	add	r2, r3
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	68ba      	ldr	r2, [r7, #8]
 80129e0:	441a      	add	r2, r3
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d118      	bne.n	8012a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	4b15      	ldr	r3, [pc, #84]	@ (8012a44 <prvInsertBlockIntoFreeList+0xb0>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d00d      	beq.n	8012a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	441a      	add	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	e008      	b.n	8012a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012a12:	4b0c      	ldr	r3, [pc, #48]	@ (8012a44 <prvInsertBlockIntoFreeList+0xb0>)
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	601a      	str	r2, [r3, #0]
 8012a1a:	e003      	b.n	8012a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d002      	beq.n	8012a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a32:	bf00      	nop
 8012a34:	3714      	adds	r7, #20
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	2000692c 	.word	0x2000692c
 8012a44:	20006934 	.word	0x20006934

08012a48 <__cvt>:
 8012a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a4c:	ec57 6b10 	vmov	r6, r7, d0
 8012a50:	2f00      	cmp	r7, #0
 8012a52:	460c      	mov	r4, r1
 8012a54:	4619      	mov	r1, r3
 8012a56:	463b      	mov	r3, r7
 8012a58:	bfbb      	ittet	lt
 8012a5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012a5e:	461f      	movlt	r7, r3
 8012a60:	2300      	movge	r3, #0
 8012a62:	232d      	movlt	r3, #45	@ 0x2d
 8012a64:	700b      	strb	r3, [r1, #0]
 8012a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012a6c:	4691      	mov	r9, r2
 8012a6e:	f023 0820 	bic.w	r8, r3, #32
 8012a72:	bfbc      	itt	lt
 8012a74:	4632      	movlt	r2, r6
 8012a76:	4616      	movlt	r6, r2
 8012a78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012a7c:	d005      	beq.n	8012a8a <__cvt+0x42>
 8012a7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012a82:	d100      	bne.n	8012a86 <__cvt+0x3e>
 8012a84:	3401      	adds	r4, #1
 8012a86:	2102      	movs	r1, #2
 8012a88:	e000      	b.n	8012a8c <__cvt+0x44>
 8012a8a:	2103      	movs	r1, #3
 8012a8c:	ab03      	add	r3, sp, #12
 8012a8e:	9301      	str	r3, [sp, #4]
 8012a90:	ab02      	add	r3, sp, #8
 8012a92:	9300      	str	r3, [sp, #0]
 8012a94:	ec47 6b10 	vmov	d0, r6, r7
 8012a98:	4653      	mov	r3, sl
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	f000 fed0 	bl	8013840 <_dtoa_r>
 8012aa0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	d119      	bne.n	8012adc <__cvt+0x94>
 8012aa8:	f019 0f01 	tst.w	r9, #1
 8012aac:	d00e      	beq.n	8012acc <__cvt+0x84>
 8012aae:	eb00 0904 	add.w	r9, r0, r4
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	4639      	mov	r1, r7
 8012aba:	f7ee f825 	bl	8000b08 <__aeabi_dcmpeq>
 8012abe:	b108      	cbz	r0, 8012ac4 <__cvt+0x7c>
 8012ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ac4:	2230      	movs	r2, #48	@ 0x30
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	454b      	cmp	r3, r9
 8012aca:	d31e      	bcc.n	8012b0a <__cvt+0xc2>
 8012acc:	9b03      	ldr	r3, [sp, #12]
 8012ace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ad0:	1b5b      	subs	r3, r3, r5
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	6013      	str	r3, [r2, #0]
 8012ad6:	b004      	add	sp, #16
 8012ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012adc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012ae0:	eb00 0904 	add.w	r9, r0, r4
 8012ae4:	d1e5      	bne.n	8012ab2 <__cvt+0x6a>
 8012ae6:	7803      	ldrb	r3, [r0, #0]
 8012ae8:	2b30      	cmp	r3, #48	@ 0x30
 8012aea:	d10a      	bne.n	8012b02 <__cvt+0xba>
 8012aec:	2200      	movs	r2, #0
 8012aee:	2300      	movs	r3, #0
 8012af0:	4630      	mov	r0, r6
 8012af2:	4639      	mov	r1, r7
 8012af4:	f7ee f808 	bl	8000b08 <__aeabi_dcmpeq>
 8012af8:	b918      	cbnz	r0, 8012b02 <__cvt+0xba>
 8012afa:	f1c4 0401 	rsb	r4, r4, #1
 8012afe:	f8ca 4000 	str.w	r4, [sl]
 8012b02:	f8da 3000 	ldr.w	r3, [sl]
 8012b06:	4499      	add	r9, r3
 8012b08:	e7d3      	b.n	8012ab2 <__cvt+0x6a>
 8012b0a:	1c59      	adds	r1, r3, #1
 8012b0c:	9103      	str	r1, [sp, #12]
 8012b0e:	701a      	strb	r2, [r3, #0]
 8012b10:	e7d9      	b.n	8012ac6 <__cvt+0x7e>

08012b12 <__exponent>:
 8012b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b14:	2900      	cmp	r1, #0
 8012b16:	bfba      	itte	lt
 8012b18:	4249      	neglt	r1, r1
 8012b1a:	232d      	movlt	r3, #45	@ 0x2d
 8012b1c:	232b      	movge	r3, #43	@ 0x2b
 8012b1e:	2909      	cmp	r1, #9
 8012b20:	7002      	strb	r2, [r0, #0]
 8012b22:	7043      	strb	r3, [r0, #1]
 8012b24:	dd29      	ble.n	8012b7a <__exponent+0x68>
 8012b26:	f10d 0307 	add.w	r3, sp, #7
 8012b2a:	461d      	mov	r5, r3
 8012b2c:	270a      	movs	r7, #10
 8012b2e:	461a      	mov	r2, r3
 8012b30:	fbb1 f6f7 	udiv	r6, r1, r7
 8012b34:	fb07 1416 	mls	r4, r7, r6, r1
 8012b38:	3430      	adds	r4, #48	@ 0x30
 8012b3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012b3e:	460c      	mov	r4, r1
 8012b40:	2c63      	cmp	r4, #99	@ 0x63
 8012b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b46:	4631      	mov	r1, r6
 8012b48:	dcf1      	bgt.n	8012b2e <__exponent+0x1c>
 8012b4a:	3130      	adds	r1, #48	@ 0x30
 8012b4c:	1e94      	subs	r4, r2, #2
 8012b4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012b52:	1c41      	adds	r1, r0, #1
 8012b54:	4623      	mov	r3, r4
 8012b56:	42ab      	cmp	r3, r5
 8012b58:	d30a      	bcc.n	8012b70 <__exponent+0x5e>
 8012b5a:	f10d 0309 	add.w	r3, sp, #9
 8012b5e:	1a9b      	subs	r3, r3, r2
 8012b60:	42ac      	cmp	r4, r5
 8012b62:	bf88      	it	hi
 8012b64:	2300      	movhi	r3, #0
 8012b66:	3302      	adds	r3, #2
 8012b68:	4403      	add	r3, r0
 8012b6a:	1a18      	subs	r0, r3, r0
 8012b6c:	b003      	add	sp, #12
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012b74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012b78:	e7ed      	b.n	8012b56 <__exponent+0x44>
 8012b7a:	2330      	movs	r3, #48	@ 0x30
 8012b7c:	3130      	adds	r1, #48	@ 0x30
 8012b7e:	7083      	strb	r3, [r0, #2]
 8012b80:	70c1      	strb	r1, [r0, #3]
 8012b82:	1d03      	adds	r3, r0, #4
 8012b84:	e7f1      	b.n	8012b6a <__exponent+0x58>
	...

08012b88 <_printf_float>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	b08d      	sub	sp, #52	@ 0x34
 8012b8e:	460c      	mov	r4, r1
 8012b90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012b94:	4616      	mov	r6, r2
 8012b96:	461f      	mov	r7, r3
 8012b98:	4605      	mov	r5, r0
 8012b9a:	f000 fced 	bl	8013578 <_localeconv_r>
 8012b9e:	6803      	ldr	r3, [r0, #0]
 8012ba0:	9304      	str	r3, [sp, #16]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7ed fb84 	bl	80002b0 <strlen>
 8012ba8:	2300      	movs	r3, #0
 8012baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bac:	f8d8 3000 	ldr.w	r3, [r8]
 8012bb0:	9005      	str	r0, [sp, #20]
 8012bb2:	3307      	adds	r3, #7
 8012bb4:	f023 0307 	bic.w	r3, r3, #7
 8012bb8:	f103 0208 	add.w	r2, r3, #8
 8012bbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8012bc4:	f8c8 2000 	str.w	r2, [r8]
 8012bc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012bd0:	9307      	str	r3, [sp, #28]
 8012bd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012bd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bde:	4b9c      	ldr	r3, [pc, #624]	@ (8012e50 <_printf_float+0x2c8>)
 8012be0:	f04f 32ff 	mov.w	r2, #4294967295
 8012be4:	f7ed ffc2 	bl	8000b6c <__aeabi_dcmpun>
 8012be8:	bb70      	cbnz	r0, 8012c48 <_printf_float+0xc0>
 8012bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bee:	4b98      	ldr	r3, [pc, #608]	@ (8012e50 <_printf_float+0x2c8>)
 8012bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf4:	f7ed ff9c 	bl	8000b30 <__aeabi_dcmple>
 8012bf8:	bb30      	cbnz	r0, 8012c48 <_printf_float+0xc0>
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	4640      	mov	r0, r8
 8012c00:	4649      	mov	r1, r9
 8012c02:	f7ed ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8012c06:	b110      	cbz	r0, 8012c0e <_printf_float+0x86>
 8012c08:	232d      	movs	r3, #45	@ 0x2d
 8012c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c0e:	4a91      	ldr	r2, [pc, #580]	@ (8012e54 <_printf_float+0x2cc>)
 8012c10:	4b91      	ldr	r3, [pc, #580]	@ (8012e58 <_printf_float+0x2d0>)
 8012c12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012c16:	bf94      	ite	ls
 8012c18:	4690      	movls	r8, r2
 8012c1a:	4698      	movhi	r8, r3
 8012c1c:	2303      	movs	r3, #3
 8012c1e:	6123      	str	r3, [r4, #16]
 8012c20:	f02b 0304 	bic.w	r3, fp, #4
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	f04f 0900 	mov.w	r9, #0
 8012c2a:	9700      	str	r7, [sp, #0]
 8012c2c:	4633      	mov	r3, r6
 8012c2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012c30:	4621      	mov	r1, r4
 8012c32:	4628      	mov	r0, r5
 8012c34:	f000 f9d2 	bl	8012fdc <_printf_common>
 8012c38:	3001      	adds	r0, #1
 8012c3a:	f040 808d 	bne.w	8012d58 <_printf_float+0x1d0>
 8012c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c42:	b00d      	add	sp, #52	@ 0x34
 8012c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c48:	4642      	mov	r2, r8
 8012c4a:	464b      	mov	r3, r9
 8012c4c:	4640      	mov	r0, r8
 8012c4e:	4649      	mov	r1, r9
 8012c50:	f7ed ff8c 	bl	8000b6c <__aeabi_dcmpun>
 8012c54:	b140      	cbz	r0, 8012c68 <_printf_float+0xe0>
 8012c56:	464b      	mov	r3, r9
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	bfbc      	itt	lt
 8012c5c:	232d      	movlt	r3, #45	@ 0x2d
 8012c5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012c62:	4a7e      	ldr	r2, [pc, #504]	@ (8012e5c <_printf_float+0x2d4>)
 8012c64:	4b7e      	ldr	r3, [pc, #504]	@ (8012e60 <_printf_float+0x2d8>)
 8012c66:	e7d4      	b.n	8012c12 <_printf_float+0x8a>
 8012c68:	6863      	ldr	r3, [r4, #4]
 8012c6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012c6e:	9206      	str	r2, [sp, #24]
 8012c70:	1c5a      	adds	r2, r3, #1
 8012c72:	d13b      	bne.n	8012cec <_printf_float+0x164>
 8012c74:	2306      	movs	r3, #6
 8012c76:	6063      	str	r3, [r4, #4]
 8012c78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	6022      	str	r2, [r4, #0]
 8012c80:	9303      	str	r3, [sp, #12]
 8012c82:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012c88:	ab09      	add	r3, sp, #36	@ 0x24
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	6861      	ldr	r1, [r4, #4]
 8012c8e:	ec49 8b10 	vmov	d0, r8, r9
 8012c92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012c96:	4628      	mov	r0, r5
 8012c98:	f7ff fed6 	bl	8012a48 <__cvt>
 8012c9c:	9b06      	ldr	r3, [sp, #24]
 8012c9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ca0:	2b47      	cmp	r3, #71	@ 0x47
 8012ca2:	4680      	mov	r8, r0
 8012ca4:	d129      	bne.n	8012cfa <_printf_float+0x172>
 8012ca6:	1cc8      	adds	r0, r1, #3
 8012ca8:	db02      	blt.n	8012cb0 <_printf_float+0x128>
 8012caa:	6863      	ldr	r3, [r4, #4]
 8012cac:	4299      	cmp	r1, r3
 8012cae:	dd41      	ble.n	8012d34 <_printf_float+0x1ac>
 8012cb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8012cb4:	fa5f fa8a 	uxtb.w	sl, sl
 8012cb8:	3901      	subs	r1, #1
 8012cba:	4652      	mov	r2, sl
 8012cbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012cc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8012cc2:	f7ff ff26 	bl	8012b12 <__exponent>
 8012cc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cc8:	1813      	adds	r3, r2, r0
 8012cca:	2a01      	cmp	r2, #1
 8012ccc:	4681      	mov	r9, r0
 8012cce:	6123      	str	r3, [r4, #16]
 8012cd0:	dc02      	bgt.n	8012cd8 <_printf_float+0x150>
 8012cd2:	6822      	ldr	r2, [r4, #0]
 8012cd4:	07d2      	lsls	r2, r2, #31
 8012cd6:	d501      	bpl.n	8012cdc <_printf_float+0x154>
 8012cd8:	3301      	adds	r3, #1
 8012cda:	6123      	str	r3, [r4, #16]
 8012cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d0a2      	beq.n	8012c2a <_printf_float+0xa2>
 8012ce4:	232d      	movs	r3, #45	@ 0x2d
 8012ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cea:	e79e      	b.n	8012c2a <_printf_float+0xa2>
 8012cec:	9a06      	ldr	r2, [sp, #24]
 8012cee:	2a47      	cmp	r2, #71	@ 0x47
 8012cf0:	d1c2      	bne.n	8012c78 <_printf_float+0xf0>
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1c0      	bne.n	8012c78 <_printf_float+0xf0>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e7bd      	b.n	8012c76 <_printf_float+0xee>
 8012cfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012cfe:	d9db      	bls.n	8012cb8 <_printf_float+0x130>
 8012d00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012d04:	d118      	bne.n	8012d38 <_printf_float+0x1b0>
 8012d06:	2900      	cmp	r1, #0
 8012d08:	6863      	ldr	r3, [r4, #4]
 8012d0a:	dd0b      	ble.n	8012d24 <_printf_float+0x19c>
 8012d0c:	6121      	str	r1, [r4, #16]
 8012d0e:	b913      	cbnz	r3, 8012d16 <_printf_float+0x18e>
 8012d10:	6822      	ldr	r2, [r4, #0]
 8012d12:	07d0      	lsls	r0, r2, #31
 8012d14:	d502      	bpl.n	8012d1c <_printf_float+0x194>
 8012d16:	3301      	adds	r3, #1
 8012d18:	440b      	add	r3, r1
 8012d1a:	6123      	str	r3, [r4, #16]
 8012d1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012d1e:	f04f 0900 	mov.w	r9, #0
 8012d22:	e7db      	b.n	8012cdc <_printf_float+0x154>
 8012d24:	b913      	cbnz	r3, 8012d2c <_printf_float+0x1a4>
 8012d26:	6822      	ldr	r2, [r4, #0]
 8012d28:	07d2      	lsls	r2, r2, #31
 8012d2a:	d501      	bpl.n	8012d30 <_printf_float+0x1a8>
 8012d2c:	3302      	adds	r3, #2
 8012d2e:	e7f4      	b.n	8012d1a <_printf_float+0x192>
 8012d30:	2301      	movs	r3, #1
 8012d32:	e7f2      	b.n	8012d1a <_printf_float+0x192>
 8012d34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d3a:	4299      	cmp	r1, r3
 8012d3c:	db05      	blt.n	8012d4a <_printf_float+0x1c2>
 8012d3e:	6823      	ldr	r3, [r4, #0]
 8012d40:	6121      	str	r1, [r4, #16]
 8012d42:	07d8      	lsls	r0, r3, #31
 8012d44:	d5ea      	bpl.n	8012d1c <_printf_float+0x194>
 8012d46:	1c4b      	adds	r3, r1, #1
 8012d48:	e7e7      	b.n	8012d1a <_printf_float+0x192>
 8012d4a:	2900      	cmp	r1, #0
 8012d4c:	bfd4      	ite	le
 8012d4e:	f1c1 0202 	rsble	r2, r1, #2
 8012d52:	2201      	movgt	r2, #1
 8012d54:	4413      	add	r3, r2
 8012d56:	e7e0      	b.n	8012d1a <_printf_float+0x192>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	055a      	lsls	r2, r3, #21
 8012d5c:	d407      	bmi.n	8012d6e <_printf_float+0x1e6>
 8012d5e:	6923      	ldr	r3, [r4, #16]
 8012d60:	4642      	mov	r2, r8
 8012d62:	4631      	mov	r1, r6
 8012d64:	4628      	mov	r0, r5
 8012d66:	47b8      	blx	r7
 8012d68:	3001      	adds	r0, #1
 8012d6a:	d12b      	bne.n	8012dc4 <_printf_float+0x23c>
 8012d6c:	e767      	b.n	8012c3e <_printf_float+0xb6>
 8012d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d72:	f240 80dd 	bls.w	8012f30 <_printf_float+0x3a8>
 8012d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	f7ed fec3 	bl	8000b08 <__aeabi_dcmpeq>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d033      	beq.n	8012dee <_printf_float+0x266>
 8012d86:	4a37      	ldr	r2, [pc, #220]	@ (8012e64 <_printf_float+0x2dc>)
 8012d88:	2301      	movs	r3, #1
 8012d8a:	4631      	mov	r1, r6
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	47b8      	blx	r7
 8012d90:	3001      	adds	r0, #1
 8012d92:	f43f af54 	beq.w	8012c3e <_printf_float+0xb6>
 8012d96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012d9a:	4543      	cmp	r3, r8
 8012d9c:	db02      	blt.n	8012da4 <_printf_float+0x21c>
 8012d9e:	6823      	ldr	r3, [r4, #0]
 8012da0:	07d8      	lsls	r0, r3, #31
 8012da2:	d50f      	bpl.n	8012dc4 <_printf_float+0x23c>
 8012da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012da8:	4631      	mov	r1, r6
 8012daa:	4628      	mov	r0, r5
 8012dac:	47b8      	blx	r7
 8012dae:	3001      	adds	r0, #1
 8012db0:	f43f af45 	beq.w	8012c3e <_printf_float+0xb6>
 8012db4:	f04f 0900 	mov.w	r9, #0
 8012db8:	f108 38ff 	add.w	r8, r8, #4294967295
 8012dbc:	f104 0a1a 	add.w	sl, r4, #26
 8012dc0:	45c8      	cmp	r8, r9
 8012dc2:	dc09      	bgt.n	8012dd8 <_printf_float+0x250>
 8012dc4:	6823      	ldr	r3, [r4, #0]
 8012dc6:	079b      	lsls	r3, r3, #30
 8012dc8:	f100 8103 	bmi.w	8012fd2 <_printf_float+0x44a>
 8012dcc:	68e0      	ldr	r0, [r4, #12]
 8012dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012dd0:	4298      	cmp	r0, r3
 8012dd2:	bfb8      	it	lt
 8012dd4:	4618      	movlt	r0, r3
 8012dd6:	e734      	b.n	8012c42 <_printf_float+0xba>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	4652      	mov	r2, sl
 8012ddc:	4631      	mov	r1, r6
 8012dde:	4628      	mov	r0, r5
 8012de0:	47b8      	blx	r7
 8012de2:	3001      	adds	r0, #1
 8012de4:	f43f af2b 	beq.w	8012c3e <_printf_float+0xb6>
 8012de8:	f109 0901 	add.w	r9, r9, #1
 8012dec:	e7e8      	b.n	8012dc0 <_printf_float+0x238>
 8012dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	dc39      	bgt.n	8012e68 <_printf_float+0x2e0>
 8012df4:	4a1b      	ldr	r2, [pc, #108]	@ (8012e64 <_printf_float+0x2dc>)
 8012df6:	2301      	movs	r3, #1
 8012df8:	4631      	mov	r1, r6
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	47b8      	blx	r7
 8012dfe:	3001      	adds	r0, #1
 8012e00:	f43f af1d 	beq.w	8012c3e <_printf_float+0xb6>
 8012e04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012e08:	ea59 0303 	orrs.w	r3, r9, r3
 8012e0c:	d102      	bne.n	8012e14 <_printf_float+0x28c>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	07d9      	lsls	r1, r3, #31
 8012e12:	d5d7      	bpl.n	8012dc4 <_printf_float+0x23c>
 8012e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e18:	4631      	mov	r1, r6
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	47b8      	blx	r7
 8012e1e:	3001      	adds	r0, #1
 8012e20:	f43f af0d 	beq.w	8012c3e <_printf_float+0xb6>
 8012e24:	f04f 0a00 	mov.w	sl, #0
 8012e28:	f104 0b1a 	add.w	fp, r4, #26
 8012e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e2e:	425b      	negs	r3, r3
 8012e30:	4553      	cmp	r3, sl
 8012e32:	dc01      	bgt.n	8012e38 <_printf_float+0x2b0>
 8012e34:	464b      	mov	r3, r9
 8012e36:	e793      	b.n	8012d60 <_printf_float+0x1d8>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	465a      	mov	r2, fp
 8012e3c:	4631      	mov	r1, r6
 8012e3e:	4628      	mov	r0, r5
 8012e40:	47b8      	blx	r7
 8012e42:	3001      	adds	r0, #1
 8012e44:	f43f aefb 	beq.w	8012c3e <_printf_float+0xb6>
 8012e48:	f10a 0a01 	add.w	sl, sl, #1
 8012e4c:	e7ee      	b.n	8012e2c <_printf_float+0x2a4>
 8012e4e:	bf00      	nop
 8012e50:	7fefffff 	.word	0x7fefffff
 8012e54:	08015dfc 	.word	0x08015dfc
 8012e58:	08015e00 	.word	0x08015e00
 8012e5c:	08015e04 	.word	0x08015e04
 8012e60:	08015e08 	.word	0x08015e08
 8012e64:	08015e0c 	.word	0x08015e0c
 8012e68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e6e:	4553      	cmp	r3, sl
 8012e70:	bfa8      	it	ge
 8012e72:	4653      	movge	r3, sl
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	4699      	mov	r9, r3
 8012e78:	dc36      	bgt.n	8012ee8 <_printf_float+0x360>
 8012e7a:	f04f 0b00 	mov.w	fp, #0
 8012e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e82:	f104 021a 	add.w	r2, r4, #26
 8012e86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e88:	9306      	str	r3, [sp, #24]
 8012e8a:	eba3 0309 	sub.w	r3, r3, r9
 8012e8e:	455b      	cmp	r3, fp
 8012e90:	dc31      	bgt.n	8012ef6 <_printf_float+0x36e>
 8012e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e94:	459a      	cmp	sl, r3
 8012e96:	dc3a      	bgt.n	8012f0e <_printf_float+0x386>
 8012e98:	6823      	ldr	r3, [r4, #0]
 8012e9a:	07da      	lsls	r2, r3, #31
 8012e9c:	d437      	bmi.n	8012f0e <_printf_float+0x386>
 8012e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ea0:	ebaa 0903 	sub.w	r9, sl, r3
 8012ea4:	9b06      	ldr	r3, [sp, #24]
 8012ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8012eaa:	4599      	cmp	r9, r3
 8012eac:	bfa8      	it	ge
 8012eae:	4699      	movge	r9, r3
 8012eb0:	f1b9 0f00 	cmp.w	r9, #0
 8012eb4:	dc33      	bgt.n	8012f1e <_printf_float+0x396>
 8012eb6:	f04f 0800 	mov.w	r8, #0
 8012eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ebe:	f104 0b1a 	add.w	fp, r4, #26
 8012ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec4:	ebaa 0303 	sub.w	r3, sl, r3
 8012ec8:	eba3 0309 	sub.w	r3, r3, r9
 8012ecc:	4543      	cmp	r3, r8
 8012ece:	f77f af79 	ble.w	8012dc4 <_printf_float+0x23c>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	465a      	mov	r2, fp
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4628      	mov	r0, r5
 8012eda:	47b8      	blx	r7
 8012edc:	3001      	adds	r0, #1
 8012ede:	f43f aeae 	beq.w	8012c3e <_printf_float+0xb6>
 8012ee2:	f108 0801 	add.w	r8, r8, #1
 8012ee6:	e7ec      	b.n	8012ec2 <_printf_float+0x33a>
 8012ee8:	4642      	mov	r2, r8
 8012eea:	4631      	mov	r1, r6
 8012eec:	4628      	mov	r0, r5
 8012eee:	47b8      	blx	r7
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d1c2      	bne.n	8012e7a <_printf_float+0x2f2>
 8012ef4:	e6a3      	b.n	8012c3e <_printf_float+0xb6>
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	4631      	mov	r1, r6
 8012efa:	4628      	mov	r0, r5
 8012efc:	9206      	str	r2, [sp, #24]
 8012efe:	47b8      	blx	r7
 8012f00:	3001      	adds	r0, #1
 8012f02:	f43f ae9c 	beq.w	8012c3e <_printf_float+0xb6>
 8012f06:	9a06      	ldr	r2, [sp, #24]
 8012f08:	f10b 0b01 	add.w	fp, fp, #1
 8012f0c:	e7bb      	b.n	8012e86 <_printf_float+0x2fe>
 8012f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f12:	4631      	mov	r1, r6
 8012f14:	4628      	mov	r0, r5
 8012f16:	47b8      	blx	r7
 8012f18:	3001      	adds	r0, #1
 8012f1a:	d1c0      	bne.n	8012e9e <_printf_float+0x316>
 8012f1c:	e68f      	b.n	8012c3e <_printf_float+0xb6>
 8012f1e:	9a06      	ldr	r2, [sp, #24]
 8012f20:	464b      	mov	r3, r9
 8012f22:	4442      	add	r2, r8
 8012f24:	4631      	mov	r1, r6
 8012f26:	4628      	mov	r0, r5
 8012f28:	47b8      	blx	r7
 8012f2a:	3001      	adds	r0, #1
 8012f2c:	d1c3      	bne.n	8012eb6 <_printf_float+0x32e>
 8012f2e:	e686      	b.n	8012c3e <_printf_float+0xb6>
 8012f30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f34:	f1ba 0f01 	cmp.w	sl, #1
 8012f38:	dc01      	bgt.n	8012f3e <_printf_float+0x3b6>
 8012f3a:	07db      	lsls	r3, r3, #31
 8012f3c:	d536      	bpl.n	8012fac <_printf_float+0x424>
 8012f3e:	2301      	movs	r3, #1
 8012f40:	4642      	mov	r2, r8
 8012f42:	4631      	mov	r1, r6
 8012f44:	4628      	mov	r0, r5
 8012f46:	47b8      	blx	r7
 8012f48:	3001      	adds	r0, #1
 8012f4a:	f43f ae78 	beq.w	8012c3e <_printf_float+0xb6>
 8012f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f52:	4631      	mov	r1, r6
 8012f54:	4628      	mov	r0, r5
 8012f56:	47b8      	blx	r7
 8012f58:	3001      	adds	r0, #1
 8012f5a:	f43f ae70 	beq.w	8012c3e <_printf_float+0xb6>
 8012f5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012f62:	2200      	movs	r2, #0
 8012f64:	2300      	movs	r3, #0
 8012f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f6a:	f7ed fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8012f6e:	b9c0      	cbnz	r0, 8012fa2 <_printf_float+0x41a>
 8012f70:	4653      	mov	r3, sl
 8012f72:	f108 0201 	add.w	r2, r8, #1
 8012f76:	4631      	mov	r1, r6
 8012f78:	4628      	mov	r0, r5
 8012f7a:	47b8      	blx	r7
 8012f7c:	3001      	adds	r0, #1
 8012f7e:	d10c      	bne.n	8012f9a <_printf_float+0x412>
 8012f80:	e65d      	b.n	8012c3e <_printf_float+0xb6>
 8012f82:	2301      	movs	r3, #1
 8012f84:	465a      	mov	r2, fp
 8012f86:	4631      	mov	r1, r6
 8012f88:	4628      	mov	r0, r5
 8012f8a:	47b8      	blx	r7
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	f43f ae56 	beq.w	8012c3e <_printf_float+0xb6>
 8012f92:	f108 0801 	add.w	r8, r8, #1
 8012f96:	45d0      	cmp	r8, sl
 8012f98:	dbf3      	blt.n	8012f82 <_printf_float+0x3fa>
 8012f9a:	464b      	mov	r3, r9
 8012f9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012fa0:	e6df      	b.n	8012d62 <_printf_float+0x1da>
 8012fa2:	f04f 0800 	mov.w	r8, #0
 8012fa6:	f104 0b1a 	add.w	fp, r4, #26
 8012faa:	e7f4      	b.n	8012f96 <_printf_float+0x40e>
 8012fac:	2301      	movs	r3, #1
 8012fae:	4642      	mov	r2, r8
 8012fb0:	e7e1      	b.n	8012f76 <_printf_float+0x3ee>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	464a      	mov	r2, r9
 8012fb6:	4631      	mov	r1, r6
 8012fb8:	4628      	mov	r0, r5
 8012fba:	47b8      	blx	r7
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	f43f ae3e 	beq.w	8012c3e <_printf_float+0xb6>
 8012fc2:	f108 0801 	add.w	r8, r8, #1
 8012fc6:	68e3      	ldr	r3, [r4, #12]
 8012fc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012fca:	1a5b      	subs	r3, r3, r1
 8012fcc:	4543      	cmp	r3, r8
 8012fce:	dcf0      	bgt.n	8012fb2 <_printf_float+0x42a>
 8012fd0:	e6fc      	b.n	8012dcc <_printf_float+0x244>
 8012fd2:	f04f 0800 	mov.w	r8, #0
 8012fd6:	f104 0919 	add.w	r9, r4, #25
 8012fda:	e7f4      	b.n	8012fc6 <_printf_float+0x43e>

08012fdc <_printf_common>:
 8012fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe0:	4616      	mov	r6, r2
 8012fe2:	4698      	mov	r8, r3
 8012fe4:	688a      	ldr	r2, [r1, #8]
 8012fe6:	690b      	ldr	r3, [r1, #16]
 8012fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fec:	4293      	cmp	r3, r2
 8012fee:	bfb8      	it	lt
 8012ff0:	4613      	movlt	r3, r2
 8012ff2:	6033      	str	r3, [r6, #0]
 8012ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ff8:	4607      	mov	r7, r0
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	b10a      	cbz	r2, 8013002 <_printf_common+0x26>
 8012ffe:	3301      	adds	r3, #1
 8013000:	6033      	str	r3, [r6, #0]
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	0699      	lsls	r1, r3, #26
 8013006:	bf42      	ittt	mi
 8013008:	6833      	ldrmi	r3, [r6, #0]
 801300a:	3302      	addmi	r3, #2
 801300c:	6033      	strmi	r3, [r6, #0]
 801300e:	6825      	ldr	r5, [r4, #0]
 8013010:	f015 0506 	ands.w	r5, r5, #6
 8013014:	d106      	bne.n	8013024 <_printf_common+0x48>
 8013016:	f104 0a19 	add.w	sl, r4, #25
 801301a:	68e3      	ldr	r3, [r4, #12]
 801301c:	6832      	ldr	r2, [r6, #0]
 801301e:	1a9b      	subs	r3, r3, r2
 8013020:	42ab      	cmp	r3, r5
 8013022:	dc26      	bgt.n	8013072 <_printf_common+0x96>
 8013024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013028:	6822      	ldr	r2, [r4, #0]
 801302a:	3b00      	subs	r3, #0
 801302c:	bf18      	it	ne
 801302e:	2301      	movne	r3, #1
 8013030:	0692      	lsls	r2, r2, #26
 8013032:	d42b      	bmi.n	801308c <_printf_common+0xb0>
 8013034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013038:	4641      	mov	r1, r8
 801303a:	4638      	mov	r0, r7
 801303c:	47c8      	blx	r9
 801303e:	3001      	adds	r0, #1
 8013040:	d01e      	beq.n	8013080 <_printf_common+0xa4>
 8013042:	6823      	ldr	r3, [r4, #0]
 8013044:	6922      	ldr	r2, [r4, #16]
 8013046:	f003 0306 	and.w	r3, r3, #6
 801304a:	2b04      	cmp	r3, #4
 801304c:	bf02      	ittt	eq
 801304e:	68e5      	ldreq	r5, [r4, #12]
 8013050:	6833      	ldreq	r3, [r6, #0]
 8013052:	1aed      	subeq	r5, r5, r3
 8013054:	68a3      	ldr	r3, [r4, #8]
 8013056:	bf0c      	ite	eq
 8013058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801305c:	2500      	movne	r5, #0
 801305e:	4293      	cmp	r3, r2
 8013060:	bfc4      	itt	gt
 8013062:	1a9b      	subgt	r3, r3, r2
 8013064:	18ed      	addgt	r5, r5, r3
 8013066:	2600      	movs	r6, #0
 8013068:	341a      	adds	r4, #26
 801306a:	42b5      	cmp	r5, r6
 801306c:	d11a      	bne.n	80130a4 <_printf_common+0xc8>
 801306e:	2000      	movs	r0, #0
 8013070:	e008      	b.n	8013084 <_printf_common+0xa8>
 8013072:	2301      	movs	r3, #1
 8013074:	4652      	mov	r2, sl
 8013076:	4641      	mov	r1, r8
 8013078:	4638      	mov	r0, r7
 801307a:	47c8      	blx	r9
 801307c:	3001      	adds	r0, #1
 801307e:	d103      	bne.n	8013088 <_printf_common+0xac>
 8013080:	f04f 30ff 	mov.w	r0, #4294967295
 8013084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013088:	3501      	adds	r5, #1
 801308a:	e7c6      	b.n	801301a <_printf_common+0x3e>
 801308c:	18e1      	adds	r1, r4, r3
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	2030      	movs	r0, #48	@ 0x30
 8013092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013096:	4422      	add	r2, r4
 8013098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801309c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80130a0:	3302      	adds	r3, #2
 80130a2:	e7c7      	b.n	8013034 <_printf_common+0x58>
 80130a4:	2301      	movs	r3, #1
 80130a6:	4622      	mov	r2, r4
 80130a8:	4641      	mov	r1, r8
 80130aa:	4638      	mov	r0, r7
 80130ac:	47c8      	blx	r9
 80130ae:	3001      	adds	r0, #1
 80130b0:	d0e6      	beq.n	8013080 <_printf_common+0xa4>
 80130b2:	3601      	adds	r6, #1
 80130b4:	e7d9      	b.n	801306a <_printf_common+0x8e>
	...

080130b8 <_printf_i>:
 80130b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130bc:	7e0f      	ldrb	r7, [r1, #24]
 80130be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80130c0:	2f78      	cmp	r7, #120	@ 0x78
 80130c2:	4691      	mov	r9, r2
 80130c4:	4680      	mov	r8, r0
 80130c6:	460c      	mov	r4, r1
 80130c8:	469a      	mov	sl, r3
 80130ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80130ce:	d807      	bhi.n	80130e0 <_printf_i+0x28>
 80130d0:	2f62      	cmp	r7, #98	@ 0x62
 80130d2:	d80a      	bhi.n	80130ea <_printf_i+0x32>
 80130d4:	2f00      	cmp	r7, #0
 80130d6:	f000 80d2 	beq.w	801327e <_printf_i+0x1c6>
 80130da:	2f58      	cmp	r7, #88	@ 0x58
 80130dc:	f000 80b9 	beq.w	8013252 <_printf_i+0x19a>
 80130e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80130e8:	e03a      	b.n	8013160 <_printf_i+0xa8>
 80130ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80130ee:	2b15      	cmp	r3, #21
 80130f0:	d8f6      	bhi.n	80130e0 <_printf_i+0x28>
 80130f2:	a101      	add	r1, pc, #4	@ (adr r1, 80130f8 <_printf_i+0x40>)
 80130f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80130f8:	08013151 	.word	0x08013151
 80130fc:	08013165 	.word	0x08013165
 8013100:	080130e1 	.word	0x080130e1
 8013104:	080130e1 	.word	0x080130e1
 8013108:	080130e1 	.word	0x080130e1
 801310c:	080130e1 	.word	0x080130e1
 8013110:	08013165 	.word	0x08013165
 8013114:	080130e1 	.word	0x080130e1
 8013118:	080130e1 	.word	0x080130e1
 801311c:	080130e1 	.word	0x080130e1
 8013120:	080130e1 	.word	0x080130e1
 8013124:	08013265 	.word	0x08013265
 8013128:	0801318f 	.word	0x0801318f
 801312c:	0801321f 	.word	0x0801321f
 8013130:	080130e1 	.word	0x080130e1
 8013134:	080130e1 	.word	0x080130e1
 8013138:	08013287 	.word	0x08013287
 801313c:	080130e1 	.word	0x080130e1
 8013140:	0801318f 	.word	0x0801318f
 8013144:	080130e1 	.word	0x080130e1
 8013148:	080130e1 	.word	0x080130e1
 801314c:	08013227 	.word	0x08013227
 8013150:	6833      	ldr	r3, [r6, #0]
 8013152:	1d1a      	adds	r2, r3, #4
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	6032      	str	r2, [r6, #0]
 8013158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801315c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013160:	2301      	movs	r3, #1
 8013162:	e09d      	b.n	80132a0 <_printf_i+0x1e8>
 8013164:	6833      	ldr	r3, [r6, #0]
 8013166:	6820      	ldr	r0, [r4, #0]
 8013168:	1d19      	adds	r1, r3, #4
 801316a:	6031      	str	r1, [r6, #0]
 801316c:	0606      	lsls	r6, r0, #24
 801316e:	d501      	bpl.n	8013174 <_printf_i+0xbc>
 8013170:	681d      	ldr	r5, [r3, #0]
 8013172:	e003      	b.n	801317c <_printf_i+0xc4>
 8013174:	0645      	lsls	r5, r0, #25
 8013176:	d5fb      	bpl.n	8013170 <_printf_i+0xb8>
 8013178:	f9b3 5000 	ldrsh.w	r5, [r3]
 801317c:	2d00      	cmp	r5, #0
 801317e:	da03      	bge.n	8013188 <_printf_i+0xd0>
 8013180:	232d      	movs	r3, #45	@ 0x2d
 8013182:	426d      	negs	r5, r5
 8013184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013188:	4859      	ldr	r0, [pc, #356]	@ (80132f0 <_printf_i+0x238>)
 801318a:	230a      	movs	r3, #10
 801318c:	e011      	b.n	80131b2 <_printf_i+0xfa>
 801318e:	6821      	ldr	r1, [r4, #0]
 8013190:	6833      	ldr	r3, [r6, #0]
 8013192:	0608      	lsls	r0, r1, #24
 8013194:	f853 5b04 	ldr.w	r5, [r3], #4
 8013198:	d402      	bmi.n	80131a0 <_printf_i+0xe8>
 801319a:	0649      	lsls	r1, r1, #25
 801319c:	bf48      	it	mi
 801319e:	b2ad      	uxthmi	r5, r5
 80131a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80131a2:	4853      	ldr	r0, [pc, #332]	@ (80132f0 <_printf_i+0x238>)
 80131a4:	6033      	str	r3, [r6, #0]
 80131a6:	bf14      	ite	ne
 80131a8:	230a      	movne	r3, #10
 80131aa:	2308      	moveq	r3, #8
 80131ac:	2100      	movs	r1, #0
 80131ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80131b2:	6866      	ldr	r6, [r4, #4]
 80131b4:	60a6      	str	r6, [r4, #8]
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	bfa2      	ittt	ge
 80131ba:	6821      	ldrge	r1, [r4, #0]
 80131bc:	f021 0104 	bicge.w	r1, r1, #4
 80131c0:	6021      	strge	r1, [r4, #0]
 80131c2:	b90d      	cbnz	r5, 80131c8 <_printf_i+0x110>
 80131c4:	2e00      	cmp	r6, #0
 80131c6:	d04b      	beq.n	8013260 <_printf_i+0x1a8>
 80131c8:	4616      	mov	r6, r2
 80131ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80131ce:	fb03 5711 	mls	r7, r3, r1, r5
 80131d2:	5dc7      	ldrb	r7, [r0, r7]
 80131d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80131d8:	462f      	mov	r7, r5
 80131da:	42bb      	cmp	r3, r7
 80131dc:	460d      	mov	r5, r1
 80131de:	d9f4      	bls.n	80131ca <_printf_i+0x112>
 80131e0:	2b08      	cmp	r3, #8
 80131e2:	d10b      	bne.n	80131fc <_printf_i+0x144>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	07df      	lsls	r7, r3, #31
 80131e8:	d508      	bpl.n	80131fc <_printf_i+0x144>
 80131ea:	6923      	ldr	r3, [r4, #16]
 80131ec:	6861      	ldr	r1, [r4, #4]
 80131ee:	4299      	cmp	r1, r3
 80131f0:	bfde      	ittt	le
 80131f2:	2330      	movle	r3, #48	@ 0x30
 80131f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80131f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80131fc:	1b92      	subs	r2, r2, r6
 80131fe:	6122      	str	r2, [r4, #16]
 8013200:	f8cd a000 	str.w	sl, [sp]
 8013204:	464b      	mov	r3, r9
 8013206:	aa03      	add	r2, sp, #12
 8013208:	4621      	mov	r1, r4
 801320a:	4640      	mov	r0, r8
 801320c:	f7ff fee6 	bl	8012fdc <_printf_common>
 8013210:	3001      	adds	r0, #1
 8013212:	d14a      	bne.n	80132aa <_printf_i+0x1f2>
 8013214:	f04f 30ff 	mov.w	r0, #4294967295
 8013218:	b004      	add	sp, #16
 801321a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801321e:	6823      	ldr	r3, [r4, #0]
 8013220:	f043 0320 	orr.w	r3, r3, #32
 8013224:	6023      	str	r3, [r4, #0]
 8013226:	4833      	ldr	r0, [pc, #204]	@ (80132f4 <_printf_i+0x23c>)
 8013228:	2778      	movs	r7, #120	@ 0x78
 801322a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801322e:	6823      	ldr	r3, [r4, #0]
 8013230:	6831      	ldr	r1, [r6, #0]
 8013232:	061f      	lsls	r7, r3, #24
 8013234:	f851 5b04 	ldr.w	r5, [r1], #4
 8013238:	d402      	bmi.n	8013240 <_printf_i+0x188>
 801323a:	065f      	lsls	r7, r3, #25
 801323c:	bf48      	it	mi
 801323e:	b2ad      	uxthmi	r5, r5
 8013240:	6031      	str	r1, [r6, #0]
 8013242:	07d9      	lsls	r1, r3, #31
 8013244:	bf44      	itt	mi
 8013246:	f043 0320 	orrmi.w	r3, r3, #32
 801324a:	6023      	strmi	r3, [r4, #0]
 801324c:	b11d      	cbz	r5, 8013256 <_printf_i+0x19e>
 801324e:	2310      	movs	r3, #16
 8013250:	e7ac      	b.n	80131ac <_printf_i+0xf4>
 8013252:	4827      	ldr	r0, [pc, #156]	@ (80132f0 <_printf_i+0x238>)
 8013254:	e7e9      	b.n	801322a <_printf_i+0x172>
 8013256:	6823      	ldr	r3, [r4, #0]
 8013258:	f023 0320 	bic.w	r3, r3, #32
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	e7f6      	b.n	801324e <_printf_i+0x196>
 8013260:	4616      	mov	r6, r2
 8013262:	e7bd      	b.n	80131e0 <_printf_i+0x128>
 8013264:	6833      	ldr	r3, [r6, #0]
 8013266:	6825      	ldr	r5, [r4, #0]
 8013268:	6961      	ldr	r1, [r4, #20]
 801326a:	1d18      	adds	r0, r3, #4
 801326c:	6030      	str	r0, [r6, #0]
 801326e:	062e      	lsls	r6, r5, #24
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	d501      	bpl.n	8013278 <_printf_i+0x1c0>
 8013274:	6019      	str	r1, [r3, #0]
 8013276:	e002      	b.n	801327e <_printf_i+0x1c6>
 8013278:	0668      	lsls	r0, r5, #25
 801327a:	d5fb      	bpl.n	8013274 <_printf_i+0x1bc>
 801327c:	8019      	strh	r1, [r3, #0]
 801327e:	2300      	movs	r3, #0
 8013280:	6123      	str	r3, [r4, #16]
 8013282:	4616      	mov	r6, r2
 8013284:	e7bc      	b.n	8013200 <_printf_i+0x148>
 8013286:	6833      	ldr	r3, [r6, #0]
 8013288:	1d1a      	adds	r2, r3, #4
 801328a:	6032      	str	r2, [r6, #0]
 801328c:	681e      	ldr	r6, [r3, #0]
 801328e:	6862      	ldr	r2, [r4, #4]
 8013290:	2100      	movs	r1, #0
 8013292:	4630      	mov	r0, r6
 8013294:	f7ec ffbc 	bl	8000210 <memchr>
 8013298:	b108      	cbz	r0, 801329e <_printf_i+0x1e6>
 801329a:	1b80      	subs	r0, r0, r6
 801329c:	6060      	str	r0, [r4, #4]
 801329e:	6863      	ldr	r3, [r4, #4]
 80132a0:	6123      	str	r3, [r4, #16]
 80132a2:	2300      	movs	r3, #0
 80132a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80132a8:	e7aa      	b.n	8013200 <_printf_i+0x148>
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	4632      	mov	r2, r6
 80132ae:	4649      	mov	r1, r9
 80132b0:	4640      	mov	r0, r8
 80132b2:	47d0      	blx	sl
 80132b4:	3001      	adds	r0, #1
 80132b6:	d0ad      	beq.n	8013214 <_printf_i+0x15c>
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	079b      	lsls	r3, r3, #30
 80132bc:	d413      	bmi.n	80132e6 <_printf_i+0x22e>
 80132be:	68e0      	ldr	r0, [r4, #12]
 80132c0:	9b03      	ldr	r3, [sp, #12]
 80132c2:	4298      	cmp	r0, r3
 80132c4:	bfb8      	it	lt
 80132c6:	4618      	movlt	r0, r3
 80132c8:	e7a6      	b.n	8013218 <_printf_i+0x160>
 80132ca:	2301      	movs	r3, #1
 80132cc:	4632      	mov	r2, r6
 80132ce:	4649      	mov	r1, r9
 80132d0:	4640      	mov	r0, r8
 80132d2:	47d0      	blx	sl
 80132d4:	3001      	adds	r0, #1
 80132d6:	d09d      	beq.n	8013214 <_printf_i+0x15c>
 80132d8:	3501      	adds	r5, #1
 80132da:	68e3      	ldr	r3, [r4, #12]
 80132dc:	9903      	ldr	r1, [sp, #12]
 80132de:	1a5b      	subs	r3, r3, r1
 80132e0:	42ab      	cmp	r3, r5
 80132e2:	dcf2      	bgt.n	80132ca <_printf_i+0x212>
 80132e4:	e7eb      	b.n	80132be <_printf_i+0x206>
 80132e6:	2500      	movs	r5, #0
 80132e8:	f104 0619 	add.w	r6, r4, #25
 80132ec:	e7f5      	b.n	80132da <_printf_i+0x222>
 80132ee:	bf00      	nop
 80132f0:	08015e0e 	.word	0x08015e0e
 80132f4:	08015e1f 	.word	0x08015e1f

080132f8 <std>:
 80132f8:	2300      	movs	r3, #0
 80132fa:	b510      	push	{r4, lr}
 80132fc:	4604      	mov	r4, r0
 80132fe:	e9c0 3300 	strd	r3, r3, [r0]
 8013302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013306:	6083      	str	r3, [r0, #8]
 8013308:	8181      	strh	r1, [r0, #12]
 801330a:	6643      	str	r3, [r0, #100]	@ 0x64
 801330c:	81c2      	strh	r2, [r0, #14]
 801330e:	6183      	str	r3, [r0, #24]
 8013310:	4619      	mov	r1, r3
 8013312:	2208      	movs	r2, #8
 8013314:	305c      	adds	r0, #92	@ 0x5c
 8013316:	f000 f926 	bl	8013566 <memset>
 801331a:	4b0d      	ldr	r3, [pc, #52]	@ (8013350 <std+0x58>)
 801331c:	6263      	str	r3, [r4, #36]	@ 0x24
 801331e:	4b0d      	ldr	r3, [pc, #52]	@ (8013354 <std+0x5c>)
 8013320:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013322:	4b0d      	ldr	r3, [pc, #52]	@ (8013358 <std+0x60>)
 8013324:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013326:	4b0d      	ldr	r3, [pc, #52]	@ (801335c <std+0x64>)
 8013328:	6323      	str	r3, [r4, #48]	@ 0x30
 801332a:	4b0d      	ldr	r3, [pc, #52]	@ (8013360 <std+0x68>)
 801332c:	6224      	str	r4, [r4, #32]
 801332e:	429c      	cmp	r4, r3
 8013330:	d006      	beq.n	8013340 <std+0x48>
 8013332:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013336:	4294      	cmp	r4, r2
 8013338:	d002      	beq.n	8013340 <std+0x48>
 801333a:	33d0      	adds	r3, #208	@ 0xd0
 801333c:	429c      	cmp	r4, r3
 801333e:	d105      	bne.n	801334c <std+0x54>
 8013340:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013348:	f000 b9e0 	b.w	801370c <__retarget_lock_init_recursive>
 801334c:	bd10      	pop	{r4, pc}
 801334e:	bf00      	nop
 8013350:	080134e1 	.word	0x080134e1
 8013354:	08013503 	.word	0x08013503
 8013358:	0801353b 	.word	0x0801353b
 801335c:	0801355f 	.word	0x0801355f
 8013360:	2000694c 	.word	0x2000694c

08013364 <stdio_exit_handler>:
 8013364:	4a02      	ldr	r2, [pc, #8]	@ (8013370 <stdio_exit_handler+0xc>)
 8013366:	4903      	ldr	r1, [pc, #12]	@ (8013374 <stdio_exit_handler+0x10>)
 8013368:	4803      	ldr	r0, [pc, #12]	@ (8013378 <stdio_exit_handler+0x14>)
 801336a:	f000 b869 	b.w	8013440 <_fwalk_sglue>
 801336e:	bf00      	nop
 8013370:	20000028 	.word	0x20000028
 8013374:	08015309 	.word	0x08015309
 8013378:	20000038 	.word	0x20000038

0801337c <cleanup_stdio>:
 801337c:	6841      	ldr	r1, [r0, #4]
 801337e:	4b0c      	ldr	r3, [pc, #48]	@ (80133b0 <cleanup_stdio+0x34>)
 8013380:	4299      	cmp	r1, r3
 8013382:	b510      	push	{r4, lr}
 8013384:	4604      	mov	r4, r0
 8013386:	d001      	beq.n	801338c <cleanup_stdio+0x10>
 8013388:	f001 ffbe 	bl	8015308 <_fflush_r>
 801338c:	68a1      	ldr	r1, [r4, #8]
 801338e:	4b09      	ldr	r3, [pc, #36]	@ (80133b4 <cleanup_stdio+0x38>)
 8013390:	4299      	cmp	r1, r3
 8013392:	d002      	beq.n	801339a <cleanup_stdio+0x1e>
 8013394:	4620      	mov	r0, r4
 8013396:	f001 ffb7 	bl	8015308 <_fflush_r>
 801339a:	68e1      	ldr	r1, [r4, #12]
 801339c:	4b06      	ldr	r3, [pc, #24]	@ (80133b8 <cleanup_stdio+0x3c>)
 801339e:	4299      	cmp	r1, r3
 80133a0:	d004      	beq.n	80133ac <cleanup_stdio+0x30>
 80133a2:	4620      	mov	r0, r4
 80133a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a8:	f001 bfae 	b.w	8015308 <_fflush_r>
 80133ac:	bd10      	pop	{r4, pc}
 80133ae:	bf00      	nop
 80133b0:	2000694c 	.word	0x2000694c
 80133b4:	200069b4 	.word	0x200069b4
 80133b8:	20006a1c 	.word	0x20006a1c

080133bc <global_stdio_init.part.0>:
 80133bc:	b510      	push	{r4, lr}
 80133be:	4b0b      	ldr	r3, [pc, #44]	@ (80133ec <global_stdio_init.part.0+0x30>)
 80133c0:	4c0b      	ldr	r4, [pc, #44]	@ (80133f0 <global_stdio_init.part.0+0x34>)
 80133c2:	4a0c      	ldr	r2, [pc, #48]	@ (80133f4 <global_stdio_init.part.0+0x38>)
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	4620      	mov	r0, r4
 80133c8:	2200      	movs	r2, #0
 80133ca:	2104      	movs	r1, #4
 80133cc:	f7ff ff94 	bl	80132f8 <std>
 80133d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80133d4:	2201      	movs	r2, #1
 80133d6:	2109      	movs	r1, #9
 80133d8:	f7ff ff8e 	bl	80132f8 <std>
 80133dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80133e0:	2202      	movs	r2, #2
 80133e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133e6:	2112      	movs	r1, #18
 80133e8:	f7ff bf86 	b.w	80132f8 <std>
 80133ec:	20006a84 	.word	0x20006a84
 80133f0:	2000694c 	.word	0x2000694c
 80133f4:	08013365 	.word	0x08013365

080133f8 <__sfp_lock_acquire>:
 80133f8:	4801      	ldr	r0, [pc, #4]	@ (8013400 <__sfp_lock_acquire+0x8>)
 80133fa:	f000 b988 	b.w	801370e <__retarget_lock_acquire_recursive>
 80133fe:	bf00      	nop
 8013400:	20006a8d 	.word	0x20006a8d

08013404 <__sfp_lock_release>:
 8013404:	4801      	ldr	r0, [pc, #4]	@ (801340c <__sfp_lock_release+0x8>)
 8013406:	f000 b983 	b.w	8013710 <__retarget_lock_release_recursive>
 801340a:	bf00      	nop
 801340c:	20006a8d 	.word	0x20006a8d

08013410 <__sinit>:
 8013410:	b510      	push	{r4, lr}
 8013412:	4604      	mov	r4, r0
 8013414:	f7ff fff0 	bl	80133f8 <__sfp_lock_acquire>
 8013418:	6a23      	ldr	r3, [r4, #32]
 801341a:	b11b      	cbz	r3, 8013424 <__sinit+0x14>
 801341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013420:	f7ff bff0 	b.w	8013404 <__sfp_lock_release>
 8013424:	4b04      	ldr	r3, [pc, #16]	@ (8013438 <__sinit+0x28>)
 8013426:	6223      	str	r3, [r4, #32]
 8013428:	4b04      	ldr	r3, [pc, #16]	@ (801343c <__sinit+0x2c>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d1f5      	bne.n	801341c <__sinit+0xc>
 8013430:	f7ff ffc4 	bl	80133bc <global_stdio_init.part.0>
 8013434:	e7f2      	b.n	801341c <__sinit+0xc>
 8013436:	bf00      	nop
 8013438:	0801337d 	.word	0x0801337d
 801343c:	20006a84 	.word	0x20006a84

08013440 <_fwalk_sglue>:
 8013440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013444:	4607      	mov	r7, r0
 8013446:	4688      	mov	r8, r1
 8013448:	4614      	mov	r4, r2
 801344a:	2600      	movs	r6, #0
 801344c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013450:	f1b9 0901 	subs.w	r9, r9, #1
 8013454:	d505      	bpl.n	8013462 <_fwalk_sglue+0x22>
 8013456:	6824      	ldr	r4, [r4, #0]
 8013458:	2c00      	cmp	r4, #0
 801345a:	d1f7      	bne.n	801344c <_fwalk_sglue+0xc>
 801345c:	4630      	mov	r0, r6
 801345e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013462:	89ab      	ldrh	r3, [r5, #12]
 8013464:	2b01      	cmp	r3, #1
 8013466:	d907      	bls.n	8013478 <_fwalk_sglue+0x38>
 8013468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801346c:	3301      	adds	r3, #1
 801346e:	d003      	beq.n	8013478 <_fwalk_sglue+0x38>
 8013470:	4629      	mov	r1, r5
 8013472:	4638      	mov	r0, r7
 8013474:	47c0      	blx	r8
 8013476:	4306      	orrs	r6, r0
 8013478:	3568      	adds	r5, #104	@ 0x68
 801347a:	e7e9      	b.n	8013450 <_fwalk_sglue+0x10>

0801347c <iprintf>:
 801347c:	b40f      	push	{r0, r1, r2, r3}
 801347e:	b507      	push	{r0, r1, r2, lr}
 8013480:	4906      	ldr	r1, [pc, #24]	@ (801349c <iprintf+0x20>)
 8013482:	ab04      	add	r3, sp, #16
 8013484:	6808      	ldr	r0, [r1, #0]
 8013486:	f853 2b04 	ldr.w	r2, [r3], #4
 801348a:	6881      	ldr	r1, [r0, #8]
 801348c:	9301      	str	r3, [sp, #4]
 801348e:	f001 fd9f 	bl	8014fd0 <_vfiprintf_r>
 8013492:	b003      	add	sp, #12
 8013494:	f85d eb04 	ldr.w	lr, [sp], #4
 8013498:	b004      	add	sp, #16
 801349a:	4770      	bx	lr
 801349c:	20000034 	.word	0x20000034

080134a0 <siprintf>:
 80134a0:	b40e      	push	{r1, r2, r3}
 80134a2:	b500      	push	{lr}
 80134a4:	b09c      	sub	sp, #112	@ 0x70
 80134a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80134a8:	9002      	str	r0, [sp, #8]
 80134aa:	9006      	str	r0, [sp, #24]
 80134ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80134b0:	4809      	ldr	r0, [pc, #36]	@ (80134d8 <siprintf+0x38>)
 80134b2:	9107      	str	r1, [sp, #28]
 80134b4:	9104      	str	r1, [sp, #16]
 80134b6:	4909      	ldr	r1, [pc, #36]	@ (80134dc <siprintf+0x3c>)
 80134b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80134bc:	9105      	str	r1, [sp, #20]
 80134be:	6800      	ldr	r0, [r0, #0]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	a902      	add	r1, sp, #8
 80134c4:	f001 fc5e 	bl	8014d84 <_svfiprintf_r>
 80134c8:	9b02      	ldr	r3, [sp, #8]
 80134ca:	2200      	movs	r2, #0
 80134cc:	701a      	strb	r2, [r3, #0]
 80134ce:	b01c      	add	sp, #112	@ 0x70
 80134d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134d4:	b003      	add	sp, #12
 80134d6:	4770      	bx	lr
 80134d8:	20000034 	.word	0x20000034
 80134dc:	ffff0208 	.word	0xffff0208

080134e0 <__sread>:
 80134e0:	b510      	push	{r4, lr}
 80134e2:	460c      	mov	r4, r1
 80134e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e8:	f000 f8c2 	bl	8013670 <_read_r>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	bfab      	itete	ge
 80134f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80134f2:	89a3      	ldrhlt	r3, [r4, #12]
 80134f4:	181b      	addge	r3, r3, r0
 80134f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80134fa:	bfac      	ite	ge
 80134fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80134fe:	81a3      	strhlt	r3, [r4, #12]
 8013500:	bd10      	pop	{r4, pc}

08013502 <__swrite>:
 8013502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013506:	461f      	mov	r7, r3
 8013508:	898b      	ldrh	r3, [r1, #12]
 801350a:	05db      	lsls	r3, r3, #23
 801350c:	4605      	mov	r5, r0
 801350e:	460c      	mov	r4, r1
 8013510:	4616      	mov	r6, r2
 8013512:	d505      	bpl.n	8013520 <__swrite+0x1e>
 8013514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013518:	2302      	movs	r3, #2
 801351a:	2200      	movs	r2, #0
 801351c:	f000 f896 	bl	801364c <_lseek_r>
 8013520:	89a3      	ldrh	r3, [r4, #12]
 8013522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801352a:	81a3      	strh	r3, [r4, #12]
 801352c:	4632      	mov	r2, r6
 801352e:	463b      	mov	r3, r7
 8013530:	4628      	mov	r0, r5
 8013532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013536:	f000 b8ad 	b.w	8013694 <_write_r>

0801353a <__sseek>:
 801353a:	b510      	push	{r4, lr}
 801353c:	460c      	mov	r4, r1
 801353e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013542:	f000 f883 	bl	801364c <_lseek_r>
 8013546:	1c43      	adds	r3, r0, #1
 8013548:	89a3      	ldrh	r3, [r4, #12]
 801354a:	bf15      	itete	ne
 801354c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801354e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013556:	81a3      	strheq	r3, [r4, #12]
 8013558:	bf18      	it	ne
 801355a:	81a3      	strhne	r3, [r4, #12]
 801355c:	bd10      	pop	{r4, pc}

0801355e <__sclose>:
 801355e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013562:	f000 b80d 	b.w	8013580 <_close_r>

08013566 <memset>:
 8013566:	4402      	add	r2, r0
 8013568:	4603      	mov	r3, r0
 801356a:	4293      	cmp	r3, r2
 801356c:	d100      	bne.n	8013570 <memset+0xa>
 801356e:	4770      	bx	lr
 8013570:	f803 1b01 	strb.w	r1, [r3], #1
 8013574:	e7f9      	b.n	801356a <memset+0x4>
	...

08013578 <_localeconv_r>:
 8013578:	4800      	ldr	r0, [pc, #0]	@ (801357c <_localeconv_r+0x4>)
 801357a:	4770      	bx	lr
 801357c:	20000174 	.word	0x20000174

08013580 <_close_r>:
 8013580:	b538      	push	{r3, r4, r5, lr}
 8013582:	4d06      	ldr	r5, [pc, #24]	@ (801359c <_close_r+0x1c>)
 8013584:	2300      	movs	r3, #0
 8013586:	4604      	mov	r4, r0
 8013588:	4608      	mov	r0, r1
 801358a:	602b      	str	r3, [r5, #0]
 801358c:	f7f0 fe02 	bl	8004194 <_close>
 8013590:	1c43      	adds	r3, r0, #1
 8013592:	d102      	bne.n	801359a <_close_r+0x1a>
 8013594:	682b      	ldr	r3, [r5, #0]
 8013596:	b103      	cbz	r3, 801359a <_close_r+0x1a>
 8013598:	6023      	str	r3, [r4, #0]
 801359a:	bd38      	pop	{r3, r4, r5, pc}
 801359c:	20006a88 	.word	0x20006a88

080135a0 <_reclaim_reent>:
 80135a0:	4b29      	ldr	r3, [pc, #164]	@ (8013648 <_reclaim_reent+0xa8>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4283      	cmp	r3, r0
 80135a6:	b570      	push	{r4, r5, r6, lr}
 80135a8:	4604      	mov	r4, r0
 80135aa:	d04b      	beq.n	8013644 <_reclaim_reent+0xa4>
 80135ac:	69c3      	ldr	r3, [r0, #28]
 80135ae:	b1ab      	cbz	r3, 80135dc <_reclaim_reent+0x3c>
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	b16b      	cbz	r3, 80135d0 <_reclaim_reent+0x30>
 80135b4:	2500      	movs	r5, #0
 80135b6:	69e3      	ldr	r3, [r4, #28]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	5959      	ldr	r1, [r3, r5]
 80135bc:	2900      	cmp	r1, #0
 80135be:	d13b      	bne.n	8013638 <_reclaim_reent+0x98>
 80135c0:	3504      	adds	r5, #4
 80135c2:	2d80      	cmp	r5, #128	@ 0x80
 80135c4:	d1f7      	bne.n	80135b6 <_reclaim_reent+0x16>
 80135c6:	69e3      	ldr	r3, [r4, #28]
 80135c8:	4620      	mov	r0, r4
 80135ca:	68d9      	ldr	r1, [r3, #12]
 80135cc:	f000 fefc 	bl	80143c8 <_free_r>
 80135d0:	69e3      	ldr	r3, [r4, #28]
 80135d2:	6819      	ldr	r1, [r3, #0]
 80135d4:	b111      	cbz	r1, 80135dc <_reclaim_reent+0x3c>
 80135d6:	4620      	mov	r0, r4
 80135d8:	f000 fef6 	bl	80143c8 <_free_r>
 80135dc:	6961      	ldr	r1, [r4, #20]
 80135de:	b111      	cbz	r1, 80135e6 <_reclaim_reent+0x46>
 80135e0:	4620      	mov	r0, r4
 80135e2:	f000 fef1 	bl	80143c8 <_free_r>
 80135e6:	69e1      	ldr	r1, [r4, #28]
 80135e8:	b111      	cbz	r1, 80135f0 <_reclaim_reent+0x50>
 80135ea:	4620      	mov	r0, r4
 80135ec:	f000 feec 	bl	80143c8 <_free_r>
 80135f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80135f2:	b111      	cbz	r1, 80135fa <_reclaim_reent+0x5a>
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 fee7 	bl	80143c8 <_free_r>
 80135fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135fc:	b111      	cbz	r1, 8013604 <_reclaim_reent+0x64>
 80135fe:	4620      	mov	r0, r4
 8013600:	f000 fee2 	bl	80143c8 <_free_r>
 8013604:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013606:	b111      	cbz	r1, 801360e <_reclaim_reent+0x6e>
 8013608:	4620      	mov	r0, r4
 801360a:	f000 fedd 	bl	80143c8 <_free_r>
 801360e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013610:	b111      	cbz	r1, 8013618 <_reclaim_reent+0x78>
 8013612:	4620      	mov	r0, r4
 8013614:	f000 fed8 	bl	80143c8 <_free_r>
 8013618:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801361a:	b111      	cbz	r1, 8013622 <_reclaim_reent+0x82>
 801361c:	4620      	mov	r0, r4
 801361e:	f000 fed3 	bl	80143c8 <_free_r>
 8013622:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013624:	b111      	cbz	r1, 801362c <_reclaim_reent+0x8c>
 8013626:	4620      	mov	r0, r4
 8013628:	f000 fece 	bl	80143c8 <_free_r>
 801362c:	6a23      	ldr	r3, [r4, #32]
 801362e:	b14b      	cbz	r3, 8013644 <_reclaim_reent+0xa4>
 8013630:	4620      	mov	r0, r4
 8013632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013636:	4718      	bx	r3
 8013638:	680e      	ldr	r6, [r1, #0]
 801363a:	4620      	mov	r0, r4
 801363c:	f000 fec4 	bl	80143c8 <_free_r>
 8013640:	4631      	mov	r1, r6
 8013642:	e7bb      	b.n	80135bc <_reclaim_reent+0x1c>
 8013644:	bd70      	pop	{r4, r5, r6, pc}
 8013646:	bf00      	nop
 8013648:	20000034 	.word	0x20000034

0801364c <_lseek_r>:
 801364c:	b538      	push	{r3, r4, r5, lr}
 801364e:	4d07      	ldr	r5, [pc, #28]	@ (801366c <_lseek_r+0x20>)
 8013650:	4604      	mov	r4, r0
 8013652:	4608      	mov	r0, r1
 8013654:	4611      	mov	r1, r2
 8013656:	2200      	movs	r2, #0
 8013658:	602a      	str	r2, [r5, #0]
 801365a:	461a      	mov	r2, r3
 801365c:	f7f0 fdc1 	bl	80041e2 <_lseek>
 8013660:	1c43      	adds	r3, r0, #1
 8013662:	d102      	bne.n	801366a <_lseek_r+0x1e>
 8013664:	682b      	ldr	r3, [r5, #0]
 8013666:	b103      	cbz	r3, 801366a <_lseek_r+0x1e>
 8013668:	6023      	str	r3, [r4, #0]
 801366a:	bd38      	pop	{r3, r4, r5, pc}
 801366c:	20006a88 	.word	0x20006a88

08013670 <_read_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4d07      	ldr	r5, [pc, #28]	@ (8013690 <_read_r+0x20>)
 8013674:	4604      	mov	r4, r0
 8013676:	4608      	mov	r0, r1
 8013678:	4611      	mov	r1, r2
 801367a:	2200      	movs	r2, #0
 801367c:	602a      	str	r2, [r5, #0]
 801367e:	461a      	mov	r2, r3
 8013680:	f7f0 fd6b 	bl	800415a <_read>
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	d102      	bne.n	801368e <_read_r+0x1e>
 8013688:	682b      	ldr	r3, [r5, #0]
 801368a:	b103      	cbz	r3, 801368e <_read_r+0x1e>
 801368c:	6023      	str	r3, [r4, #0]
 801368e:	bd38      	pop	{r3, r4, r5, pc}
 8013690:	20006a88 	.word	0x20006a88

08013694 <_write_r>:
 8013694:	b538      	push	{r3, r4, r5, lr}
 8013696:	4d07      	ldr	r5, [pc, #28]	@ (80136b4 <_write_r+0x20>)
 8013698:	4604      	mov	r4, r0
 801369a:	4608      	mov	r0, r1
 801369c:	4611      	mov	r1, r2
 801369e:	2200      	movs	r2, #0
 80136a0:	602a      	str	r2, [r5, #0]
 80136a2:	461a      	mov	r2, r3
 80136a4:	f7ee ff5e 	bl	8002564 <_write>
 80136a8:	1c43      	adds	r3, r0, #1
 80136aa:	d102      	bne.n	80136b2 <_write_r+0x1e>
 80136ac:	682b      	ldr	r3, [r5, #0]
 80136ae:	b103      	cbz	r3, 80136b2 <_write_r+0x1e>
 80136b0:	6023      	str	r3, [r4, #0]
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	20006a88 	.word	0x20006a88

080136b8 <__errno>:
 80136b8:	4b01      	ldr	r3, [pc, #4]	@ (80136c0 <__errno+0x8>)
 80136ba:	6818      	ldr	r0, [r3, #0]
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop
 80136c0:	20000034 	.word	0x20000034

080136c4 <__libc_init_array>:
 80136c4:	b570      	push	{r4, r5, r6, lr}
 80136c6:	4d0d      	ldr	r5, [pc, #52]	@ (80136fc <__libc_init_array+0x38>)
 80136c8:	4c0d      	ldr	r4, [pc, #52]	@ (8013700 <__libc_init_array+0x3c>)
 80136ca:	1b64      	subs	r4, r4, r5
 80136cc:	10a4      	asrs	r4, r4, #2
 80136ce:	2600      	movs	r6, #0
 80136d0:	42a6      	cmp	r6, r4
 80136d2:	d109      	bne.n	80136e8 <__libc_init_array+0x24>
 80136d4:	4d0b      	ldr	r5, [pc, #44]	@ (8013704 <__libc_init_array+0x40>)
 80136d6:	4c0c      	ldr	r4, [pc, #48]	@ (8013708 <__libc_init_array+0x44>)
 80136d8:	f002 f866 	bl	80157a8 <_init>
 80136dc:	1b64      	subs	r4, r4, r5
 80136de:	10a4      	asrs	r4, r4, #2
 80136e0:	2600      	movs	r6, #0
 80136e2:	42a6      	cmp	r6, r4
 80136e4:	d105      	bne.n	80136f2 <__libc_init_array+0x2e>
 80136e6:	bd70      	pop	{r4, r5, r6, pc}
 80136e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80136ec:	4798      	blx	r3
 80136ee:	3601      	adds	r6, #1
 80136f0:	e7ee      	b.n	80136d0 <__libc_init_array+0xc>
 80136f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80136f6:	4798      	blx	r3
 80136f8:	3601      	adds	r6, #1
 80136fa:	e7f2      	b.n	80136e2 <__libc_init_array+0x1e>
 80136fc:	08016178 	.word	0x08016178
 8013700:	08016178 	.word	0x08016178
 8013704:	08016178 	.word	0x08016178
 8013708:	0801617c 	.word	0x0801617c

0801370c <__retarget_lock_init_recursive>:
 801370c:	4770      	bx	lr

0801370e <__retarget_lock_acquire_recursive>:
 801370e:	4770      	bx	lr

08013710 <__retarget_lock_release_recursive>:
 8013710:	4770      	bx	lr

08013712 <memcpy>:
 8013712:	440a      	add	r2, r1
 8013714:	4291      	cmp	r1, r2
 8013716:	f100 33ff 	add.w	r3, r0, #4294967295
 801371a:	d100      	bne.n	801371e <memcpy+0xc>
 801371c:	4770      	bx	lr
 801371e:	b510      	push	{r4, lr}
 8013720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013728:	4291      	cmp	r1, r2
 801372a:	d1f9      	bne.n	8013720 <memcpy+0xe>
 801372c:	bd10      	pop	{r4, pc}

0801372e <quorem>:
 801372e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013732:	6903      	ldr	r3, [r0, #16]
 8013734:	690c      	ldr	r4, [r1, #16]
 8013736:	42a3      	cmp	r3, r4
 8013738:	4607      	mov	r7, r0
 801373a:	db7e      	blt.n	801383a <quorem+0x10c>
 801373c:	3c01      	subs	r4, #1
 801373e:	f101 0814 	add.w	r8, r1, #20
 8013742:	00a3      	lsls	r3, r4, #2
 8013744:	f100 0514 	add.w	r5, r0, #20
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801374e:	9301      	str	r3, [sp, #4]
 8013750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013758:	3301      	adds	r3, #1
 801375a:	429a      	cmp	r2, r3
 801375c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013760:	fbb2 f6f3 	udiv	r6, r2, r3
 8013764:	d32e      	bcc.n	80137c4 <quorem+0x96>
 8013766:	f04f 0a00 	mov.w	sl, #0
 801376a:	46c4      	mov	ip, r8
 801376c:	46ae      	mov	lr, r5
 801376e:	46d3      	mov	fp, sl
 8013770:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013774:	b298      	uxth	r0, r3
 8013776:	fb06 a000 	mla	r0, r6, r0, sl
 801377a:	0c02      	lsrs	r2, r0, #16
 801377c:	0c1b      	lsrs	r3, r3, #16
 801377e:	fb06 2303 	mla	r3, r6, r3, r2
 8013782:	f8de 2000 	ldr.w	r2, [lr]
 8013786:	b280      	uxth	r0, r0
 8013788:	b292      	uxth	r2, r2
 801378a:	1a12      	subs	r2, r2, r0
 801378c:	445a      	add	r2, fp
 801378e:	f8de 0000 	ldr.w	r0, [lr]
 8013792:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013796:	b29b      	uxth	r3, r3
 8013798:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801379c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80137a0:	b292      	uxth	r2, r2
 80137a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80137a6:	45e1      	cmp	r9, ip
 80137a8:	f84e 2b04 	str.w	r2, [lr], #4
 80137ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80137b0:	d2de      	bcs.n	8013770 <quorem+0x42>
 80137b2:	9b00      	ldr	r3, [sp, #0]
 80137b4:	58eb      	ldr	r3, [r5, r3]
 80137b6:	b92b      	cbnz	r3, 80137c4 <quorem+0x96>
 80137b8:	9b01      	ldr	r3, [sp, #4]
 80137ba:	3b04      	subs	r3, #4
 80137bc:	429d      	cmp	r5, r3
 80137be:	461a      	mov	r2, r3
 80137c0:	d32f      	bcc.n	8013822 <quorem+0xf4>
 80137c2:	613c      	str	r4, [r7, #16]
 80137c4:	4638      	mov	r0, r7
 80137c6:	f001 f979 	bl	8014abc <__mcmp>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	db25      	blt.n	801381a <quorem+0xec>
 80137ce:	4629      	mov	r1, r5
 80137d0:	2000      	movs	r0, #0
 80137d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80137d6:	f8d1 c000 	ldr.w	ip, [r1]
 80137da:	fa1f fe82 	uxth.w	lr, r2
 80137de:	fa1f f38c 	uxth.w	r3, ip
 80137e2:	eba3 030e 	sub.w	r3, r3, lr
 80137e6:	4403      	add	r3, r0
 80137e8:	0c12      	lsrs	r2, r2, #16
 80137ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80137ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137f8:	45c1      	cmp	r9, r8
 80137fa:	f841 3b04 	str.w	r3, [r1], #4
 80137fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013802:	d2e6      	bcs.n	80137d2 <quorem+0xa4>
 8013804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801380c:	b922      	cbnz	r2, 8013818 <quorem+0xea>
 801380e:	3b04      	subs	r3, #4
 8013810:	429d      	cmp	r5, r3
 8013812:	461a      	mov	r2, r3
 8013814:	d30b      	bcc.n	801382e <quorem+0x100>
 8013816:	613c      	str	r4, [r7, #16]
 8013818:	3601      	adds	r6, #1
 801381a:	4630      	mov	r0, r6
 801381c:	b003      	add	sp, #12
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	6812      	ldr	r2, [r2, #0]
 8013824:	3b04      	subs	r3, #4
 8013826:	2a00      	cmp	r2, #0
 8013828:	d1cb      	bne.n	80137c2 <quorem+0x94>
 801382a:	3c01      	subs	r4, #1
 801382c:	e7c6      	b.n	80137bc <quorem+0x8e>
 801382e:	6812      	ldr	r2, [r2, #0]
 8013830:	3b04      	subs	r3, #4
 8013832:	2a00      	cmp	r2, #0
 8013834:	d1ef      	bne.n	8013816 <quorem+0xe8>
 8013836:	3c01      	subs	r4, #1
 8013838:	e7ea      	b.n	8013810 <quorem+0xe2>
 801383a:	2000      	movs	r0, #0
 801383c:	e7ee      	b.n	801381c <quorem+0xee>
	...

08013840 <_dtoa_r>:
 8013840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013844:	69c7      	ldr	r7, [r0, #28]
 8013846:	b099      	sub	sp, #100	@ 0x64
 8013848:	ed8d 0b02 	vstr	d0, [sp, #8]
 801384c:	ec55 4b10 	vmov	r4, r5, d0
 8013850:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013852:	9109      	str	r1, [sp, #36]	@ 0x24
 8013854:	4683      	mov	fp, r0
 8013856:	920e      	str	r2, [sp, #56]	@ 0x38
 8013858:	9313      	str	r3, [sp, #76]	@ 0x4c
 801385a:	b97f      	cbnz	r7, 801387c <_dtoa_r+0x3c>
 801385c:	2010      	movs	r0, #16
 801385e:	f000 fdfd 	bl	801445c <malloc>
 8013862:	4602      	mov	r2, r0
 8013864:	f8cb 001c 	str.w	r0, [fp, #28]
 8013868:	b920      	cbnz	r0, 8013874 <_dtoa_r+0x34>
 801386a:	4ba7      	ldr	r3, [pc, #668]	@ (8013b08 <_dtoa_r+0x2c8>)
 801386c:	21ef      	movs	r1, #239	@ 0xef
 801386e:	48a7      	ldr	r0, [pc, #668]	@ (8013b0c <_dtoa_r+0x2cc>)
 8013870:	f001 fe30 	bl	80154d4 <__assert_func>
 8013874:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013878:	6007      	str	r7, [r0, #0]
 801387a:	60c7      	str	r7, [r0, #12]
 801387c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013880:	6819      	ldr	r1, [r3, #0]
 8013882:	b159      	cbz	r1, 801389c <_dtoa_r+0x5c>
 8013884:	685a      	ldr	r2, [r3, #4]
 8013886:	604a      	str	r2, [r1, #4]
 8013888:	2301      	movs	r3, #1
 801388a:	4093      	lsls	r3, r2
 801388c:	608b      	str	r3, [r1, #8]
 801388e:	4658      	mov	r0, fp
 8013890:	f000 feda 	bl	8014648 <_Bfree>
 8013894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013898:	2200      	movs	r2, #0
 801389a:	601a      	str	r2, [r3, #0]
 801389c:	1e2b      	subs	r3, r5, #0
 801389e:	bfb9      	ittee	lt
 80138a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80138a4:	9303      	strlt	r3, [sp, #12]
 80138a6:	2300      	movge	r3, #0
 80138a8:	6033      	strge	r3, [r6, #0]
 80138aa:	9f03      	ldr	r7, [sp, #12]
 80138ac:	4b98      	ldr	r3, [pc, #608]	@ (8013b10 <_dtoa_r+0x2d0>)
 80138ae:	bfbc      	itt	lt
 80138b0:	2201      	movlt	r2, #1
 80138b2:	6032      	strlt	r2, [r6, #0]
 80138b4:	43bb      	bics	r3, r7
 80138b6:	d112      	bne.n	80138de <_dtoa_r+0x9e>
 80138b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80138ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80138be:	6013      	str	r3, [r2, #0]
 80138c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80138c4:	4323      	orrs	r3, r4
 80138c6:	f000 854d 	beq.w	8014364 <_dtoa_r+0xb24>
 80138ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013b24 <_dtoa_r+0x2e4>
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 854f 	beq.w	8014374 <_dtoa_r+0xb34>
 80138d6:	f10a 0303 	add.w	r3, sl, #3
 80138da:	f000 bd49 	b.w	8014370 <_dtoa_r+0xb30>
 80138de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138e2:	2200      	movs	r2, #0
 80138e4:	ec51 0b17 	vmov	r0, r1, d7
 80138e8:	2300      	movs	r3, #0
 80138ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80138ee:	f7ed f90b 	bl	8000b08 <__aeabi_dcmpeq>
 80138f2:	4680      	mov	r8, r0
 80138f4:	b158      	cbz	r0, 801390e <_dtoa_r+0xce>
 80138f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80138f8:	2301      	movs	r3, #1
 80138fa:	6013      	str	r3, [r2, #0]
 80138fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138fe:	b113      	cbz	r3, 8013906 <_dtoa_r+0xc6>
 8013900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013902:	4b84      	ldr	r3, [pc, #528]	@ (8013b14 <_dtoa_r+0x2d4>)
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013b28 <_dtoa_r+0x2e8>
 801390a:	f000 bd33 	b.w	8014374 <_dtoa_r+0xb34>
 801390e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013912:	aa16      	add	r2, sp, #88	@ 0x58
 8013914:	a917      	add	r1, sp, #92	@ 0x5c
 8013916:	4658      	mov	r0, fp
 8013918:	f001 f980 	bl	8014c1c <__d2b>
 801391c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013920:	4681      	mov	r9, r0
 8013922:	2e00      	cmp	r6, #0
 8013924:	d077      	beq.n	8013a16 <_dtoa_r+0x1d6>
 8013926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013928:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801392c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013934:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013938:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801393c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013940:	4619      	mov	r1, r3
 8013942:	2200      	movs	r2, #0
 8013944:	4b74      	ldr	r3, [pc, #464]	@ (8013b18 <_dtoa_r+0x2d8>)
 8013946:	f7ec fcbf 	bl	80002c8 <__aeabi_dsub>
 801394a:	a369      	add	r3, pc, #420	@ (adr r3, 8013af0 <_dtoa_r+0x2b0>)
 801394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013950:	f7ec fe72 	bl	8000638 <__aeabi_dmul>
 8013954:	a368      	add	r3, pc, #416	@ (adr r3, 8013af8 <_dtoa_r+0x2b8>)
 8013956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395a:	f7ec fcb7 	bl	80002cc <__adddf3>
 801395e:	4604      	mov	r4, r0
 8013960:	4630      	mov	r0, r6
 8013962:	460d      	mov	r5, r1
 8013964:	f7ec fdfe 	bl	8000564 <__aeabi_i2d>
 8013968:	a365      	add	r3, pc, #404	@ (adr r3, 8013b00 <_dtoa_r+0x2c0>)
 801396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396e:	f7ec fe63 	bl	8000638 <__aeabi_dmul>
 8013972:	4602      	mov	r2, r0
 8013974:	460b      	mov	r3, r1
 8013976:	4620      	mov	r0, r4
 8013978:	4629      	mov	r1, r5
 801397a:	f7ec fca7 	bl	80002cc <__adddf3>
 801397e:	4604      	mov	r4, r0
 8013980:	460d      	mov	r5, r1
 8013982:	f7ed f909 	bl	8000b98 <__aeabi_d2iz>
 8013986:	2200      	movs	r2, #0
 8013988:	4607      	mov	r7, r0
 801398a:	2300      	movs	r3, #0
 801398c:	4620      	mov	r0, r4
 801398e:	4629      	mov	r1, r5
 8013990:	f7ed f8c4 	bl	8000b1c <__aeabi_dcmplt>
 8013994:	b140      	cbz	r0, 80139a8 <_dtoa_r+0x168>
 8013996:	4638      	mov	r0, r7
 8013998:	f7ec fde4 	bl	8000564 <__aeabi_i2d>
 801399c:	4622      	mov	r2, r4
 801399e:	462b      	mov	r3, r5
 80139a0:	f7ed f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 80139a4:	b900      	cbnz	r0, 80139a8 <_dtoa_r+0x168>
 80139a6:	3f01      	subs	r7, #1
 80139a8:	2f16      	cmp	r7, #22
 80139aa:	d851      	bhi.n	8013a50 <_dtoa_r+0x210>
 80139ac:	4b5b      	ldr	r3, [pc, #364]	@ (8013b1c <_dtoa_r+0x2dc>)
 80139ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139ba:	f7ed f8af 	bl	8000b1c <__aeabi_dcmplt>
 80139be:	2800      	cmp	r0, #0
 80139c0:	d048      	beq.n	8013a54 <_dtoa_r+0x214>
 80139c2:	3f01      	subs	r7, #1
 80139c4:	2300      	movs	r3, #0
 80139c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80139c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80139ca:	1b9b      	subs	r3, r3, r6
 80139cc:	1e5a      	subs	r2, r3, #1
 80139ce:	bf44      	itt	mi
 80139d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80139d4:	2300      	movmi	r3, #0
 80139d6:	9208      	str	r2, [sp, #32]
 80139d8:	bf54      	ite	pl
 80139da:	f04f 0800 	movpl.w	r8, #0
 80139de:	9308      	strmi	r3, [sp, #32]
 80139e0:	2f00      	cmp	r7, #0
 80139e2:	db39      	blt.n	8013a58 <_dtoa_r+0x218>
 80139e4:	9b08      	ldr	r3, [sp, #32]
 80139e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80139e8:	443b      	add	r3, r7
 80139ea:	9308      	str	r3, [sp, #32]
 80139ec:	2300      	movs	r3, #0
 80139ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80139f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139f2:	2b09      	cmp	r3, #9
 80139f4:	d864      	bhi.n	8013ac0 <_dtoa_r+0x280>
 80139f6:	2b05      	cmp	r3, #5
 80139f8:	bfc4      	itt	gt
 80139fa:	3b04      	subgt	r3, #4
 80139fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80139fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a00:	f1a3 0302 	sub.w	r3, r3, #2
 8013a04:	bfcc      	ite	gt
 8013a06:	2400      	movgt	r4, #0
 8013a08:	2401      	movle	r4, #1
 8013a0a:	2b03      	cmp	r3, #3
 8013a0c:	d863      	bhi.n	8013ad6 <_dtoa_r+0x296>
 8013a0e:	e8df f003 	tbb	[pc, r3]
 8013a12:	372a      	.short	0x372a
 8013a14:	5535      	.short	0x5535
 8013a16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013a1a:	441e      	add	r6, r3
 8013a1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013a20:	2b20      	cmp	r3, #32
 8013a22:	bfc1      	itttt	gt
 8013a24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013a28:	409f      	lslgt	r7, r3
 8013a2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013a2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013a32:	bfd6      	itet	le
 8013a34:	f1c3 0320 	rsble	r3, r3, #32
 8013a38:	ea47 0003 	orrgt.w	r0, r7, r3
 8013a3c:	fa04 f003 	lslle.w	r0, r4, r3
 8013a40:	f7ec fd80 	bl	8000544 <__aeabi_ui2d>
 8013a44:	2201      	movs	r2, #1
 8013a46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013a4a:	3e01      	subs	r6, #1
 8013a4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8013a4e:	e777      	b.n	8013940 <_dtoa_r+0x100>
 8013a50:	2301      	movs	r3, #1
 8013a52:	e7b8      	b.n	80139c6 <_dtoa_r+0x186>
 8013a54:	9012      	str	r0, [sp, #72]	@ 0x48
 8013a56:	e7b7      	b.n	80139c8 <_dtoa_r+0x188>
 8013a58:	427b      	negs	r3, r7
 8013a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	eba8 0807 	sub.w	r8, r8, r7
 8013a62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a64:	e7c4      	b.n	80139f0 <_dtoa_r+0x1b0>
 8013a66:	2300      	movs	r3, #0
 8013a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	dc35      	bgt.n	8013adc <_dtoa_r+0x29c>
 8013a70:	2301      	movs	r3, #1
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	9307      	str	r3, [sp, #28]
 8013a76:	461a      	mov	r2, r3
 8013a78:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a7a:	e00b      	b.n	8013a94 <_dtoa_r+0x254>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	e7f3      	b.n	8013a68 <_dtoa_r+0x228>
 8013a80:	2300      	movs	r3, #0
 8013a82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a86:	18fb      	adds	r3, r7, r3
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	9307      	str	r3, [sp, #28]
 8013a90:	bfb8      	it	lt
 8013a92:	2301      	movlt	r3, #1
 8013a94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013a98:	2100      	movs	r1, #0
 8013a9a:	2204      	movs	r2, #4
 8013a9c:	f102 0514 	add.w	r5, r2, #20
 8013aa0:	429d      	cmp	r5, r3
 8013aa2:	d91f      	bls.n	8013ae4 <_dtoa_r+0x2a4>
 8013aa4:	6041      	str	r1, [r0, #4]
 8013aa6:	4658      	mov	r0, fp
 8013aa8:	f000 fd8e 	bl	80145c8 <_Balloc>
 8013aac:	4682      	mov	sl, r0
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d13c      	bne.n	8013b2c <_dtoa_r+0x2ec>
 8013ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8013b20 <_dtoa_r+0x2e0>)
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	f240 11af 	movw	r1, #431	@ 0x1af
 8013aba:	e6d8      	b.n	801386e <_dtoa_r+0x2e>
 8013abc:	2301      	movs	r3, #1
 8013abe:	e7e0      	b.n	8013a82 <_dtoa_r+0x242>
 8013ac0:	2401      	movs	r4, #1
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ac6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	9307      	str	r3, [sp, #28]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2312      	movs	r3, #18
 8013ad4:	e7d0      	b.n	8013a78 <_dtoa_r+0x238>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ada:	e7f5      	b.n	8013ac8 <_dtoa_r+0x288>
 8013adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	9307      	str	r3, [sp, #28]
 8013ae2:	e7d7      	b.n	8013a94 <_dtoa_r+0x254>
 8013ae4:	3101      	adds	r1, #1
 8013ae6:	0052      	lsls	r2, r2, #1
 8013ae8:	e7d8      	b.n	8013a9c <_dtoa_r+0x25c>
 8013aea:	bf00      	nop
 8013aec:	f3af 8000 	nop.w
 8013af0:	636f4361 	.word	0x636f4361
 8013af4:	3fd287a7 	.word	0x3fd287a7
 8013af8:	8b60c8b3 	.word	0x8b60c8b3
 8013afc:	3fc68a28 	.word	0x3fc68a28
 8013b00:	509f79fb 	.word	0x509f79fb
 8013b04:	3fd34413 	.word	0x3fd34413
 8013b08:	08015e3d 	.word	0x08015e3d
 8013b0c:	08015e54 	.word	0x08015e54
 8013b10:	7ff00000 	.word	0x7ff00000
 8013b14:	08015e0d 	.word	0x08015e0d
 8013b18:	3ff80000 	.word	0x3ff80000
 8013b1c:	08015f50 	.word	0x08015f50
 8013b20:	08015eac 	.word	0x08015eac
 8013b24:	08015e39 	.word	0x08015e39
 8013b28:	08015e0c 	.word	0x08015e0c
 8013b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013b30:	6018      	str	r0, [r3, #0]
 8013b32:	9b07      	ldr	r3, [sp, #28]
 8013b34:	2b0e      	cmp	r3, #14
 8013b36:	f200 80a4 	bhi.w	8013c82 <_dtoa_r+0x442>
 8013b3a:	2c00      	cmp	r4, #0
 8013b3c:	f000 80a1 	beq.w	8013c82 <_dtoa_r+0x442>
 8013b40:	2f00      	cmp	r7, #0
 8013b42:	dd33      	ble.n	8013bac <_dtoa_r+0x36c>
 8013b44:	4bad      	ldr	r3, [pc, #692]	@ (8013dfc <_dtoa_r+0x5bc>)
 8013b46:	f007 020f 	and.w	r2, r7, #15
 8013b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b4e:	ed93 7b00 	vldr	d7, [r3]
 8013b52:	05f8      	lsls	r0, r7, #23
 8013b54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013b58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013b5c:	d516      	bpl.n	8013b8c <_dtoa_r+0x34c>
 8013b5e:	4ba8      	ldr	r3, [pc, #672]	@ (8013e00 <_dtoa_r+0x5c0>)
 8013b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b68:	f7ec fe90 	bl	800088c <__aeabi_ddiv>
 8013b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b70:	f004 040f 	and.w	r4, r4, #15
 8013b74:	2603      	movs	r6, #3
 8013b76:	4da2      	ldr	r5, [pc, #648]	@ (8013e00 <_dtoa_r+0x5c0>)
 8013b78:	b954      	cbnz	r4, 8013b90 <_dtoa_r+0x350>
 8013b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b82:	f7ec fe83 	bl	800088c <__aeabi_ddiv>
 8013b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b8a:	e028      	b.n	8013bde <_dtoa_r+0x39e>
 8013b8c:	2602      	movs	r6, #2
 8013b8e:	e7f2      	b.n	8013b76 <_dtoa_r+0x336>
 8013b90:	07e1      	lsls	r1, r4, #31
 8013b92:	d508      	bpl.n	8013ba6 <_dtoa_r+0x366>
 8013b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b9c:	f7ec fd4c 	bl	8000638 <__aeabi_dmul>
 8013ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ba4:	3601      	adds	r6, #1
 8013ba6:	1064      	asrs	r4, r4, #1
 8013ba8:	3508      	adds	r5, #8
 8013baa:	e7e5      	b.n	8013b78 <_dtoa_r+0x338>
 8013bac:	f000 80d2 	beq.w	8013d54 <_dtoa_r+0x514>
 8013bb0:	427c      	negs	r4, r7
 8013bb2:	4b92      	ldr	r3, [pc, #584]	@ (8013dfc <_dtoa_r+0x5bc>)
 8013bb4:	4d92      	ldr	r5, [pc, #584]	@ (8013e00 <_dtoa_r+0x5c0>)
 8013bb6:	f004 020f 	and.w	r2, r4, #15
 8013bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013bc6:	f7ec fd37 	bl	8000638 <__aeabi_dmul>
 8013bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bce:	1124      	asrs	r4, r4, #4
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	2602      	movs	r6, #2
 8013bd4:	2c00      	cmp	r4, #0
 8013bd6:	f040 80b2 	bne.w	8013d3e <_dtoa_r+0x4fe>
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d1d3      	bne.n	8013b86 <_dtoa_r+0x346>
 8013bde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013be0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f000 80b7 	beq.w	8013d58 <_dtoa_r+0x518>
 8013bea:	4b86      	ldr	r3, [pc, #536]	@ (8013e04 <_dtoa_r+0x5c4>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	4620      	mov	r0, r4
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	f7ec ff93 	bl	8000b1c <__aeabi_dcmplt>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	f000 80ae 	beq.w	8013d58 <_dtoa_r+0x518>
 8013bfc:	9b07      	ldr	r3, [sp, #28]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	f000 80aa 	beq.w	8013d58 <_dtoa_r+0x518>
 8013c04:	9b00      	ldr	r3, [sp, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	dd37      	ble.n	8013c7a <_dtoa_r+0x43a>
 8013c0a:	1e7b      	subs	r3, r7, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	4620      	mov	r0, r4
 8013c10:	4b7d      	ldr	r3, [pc, #500]	@ (8013e08 <_dtoa_r+0x5c8>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	4629      	mov	r1, r5
 8013c16:	f7ec fd0f 	bl	8000638 <__aeabi_dmul>
 8013c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c1e:	9c00      	ldr	r4, [sp, #0]
 8013c20:	3601      	adds	r6, #1
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ec fc9e 	bl	8000564 <__aeabi_i2d>
 8013c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c2c:	f7ec fd04 	bl	8000638 <__aeabi_dmul>
 8013c30:	4b76      	ldr	r3, [pc, #472]	@ (8013e0c <_dtoa_r+0x5cc>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	f7ec fb4a 	bl	80002cc <__adddf3>
 8013c38:	4605      	mov	r5, r0
 8013c3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013c3e:	2c00      	cmp	r4, #0
 8013c40:	f040 808d 	bne.w	8013d5e <_dtoa_r+0x51e>
 8013c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c48:	4b71      	ldr	r3, [pc, #452]	@ (8013e10 <_dtoa_r+0x5d0>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f7ec fb3c 	bl	80002c8 <__aeabi_dsub>
 8013c50:	4602      	mov	r2, r0
 8013c52:	460b      	mov	r3, r1
 8013c54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c58:	462a      	mov	r2, r5
 8013c5a:	4633      	mov	r3, r6
 8013c5c:	f7ec ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 8013c60:	2800      	cmp	r0, #0
 8013c62:	f040 828b 	bne.w	801417c <_dtoa_r+0x93c>
 8013c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c6a:	462a      	mov	r2, r5
 8013c6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013c70:	f7ec ff54 	bl	8000b1c <__aeabi_dcmplt>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	f040 8128 	bne.w	8013eca <_dtoa_r+0x68a>
 8013c7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013c7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013c82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f2c0 815a 	blt.w	8013f3e <_dtoa_r+0x6fe>
 8013c8a:	2f0e      	cmp	r7, #14
 8013c8c:	f300 8157 	bgt.w	8013f3e <_dtoa_r+0x6fe>
 8013c90:	4b5a      	ldr	r3, [pc, #360]	@ (8013dfc <_dtoa_r+0x5bc>)
 8013c92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c96:	ed93 7b00 	vldr	d7, [r3]
 8013c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	ed8d 7b00 	vstr	d7, [sp]
 8013ca2:	da03      	bge.n	8013cac <_dtoa_r+0x46c>
 8013ca4:	9b07      	ldr	r3, [sp, #28]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	f340 8101 	ble.w	8013eae <_dtoa_r+0x66e>
 8013cac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013cb0:	4656      	mov	r6, sl
 8013cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	4629      	mov	r1, r5
 8013cba:	f7ec fde7 	bl	800088c <__aeabi_ddiv>
 8013cbe:	f7ec ff6b 	bl	8000b98 <__aeabi_d2iz>
 8013cc2:	4680      	mov	r8, r0
 8013cc4:	f7ec fc4e 	bl	8000564 <__aeabi_i2d>
 8013cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ccc:	f7ec fcb4 	bl	8000638 <__aeabi_dmul>
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	460b      	mov	r3, r1
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013cdc:	f7ec faf4 	bl	80002c8 <__aeabi_dsub>
 8013ce0:	f806 4b01 	strb.w	r4, [r6], #1
 8013ce4:	9d07      	ldr	r5, [sp, #28]
 8013ce6:	eba6 040a 	sub.w	r4, r6, sl
 8013cea:	42a5      	cmp	r5, r4
 8013cec:	4602      	mov	r2, r0
 8013cee:	460b      	mov	r3, r1
 8013cf0:	f040 8117 	bne.w	8013f22 <_dtoa_r+0x6e2>
 8013cf4:	f7ec faea 	bl	80002cc <__adddf3>
 8013cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	460d      	mov	r5, r1
 8013d00:	f7ec ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 8013d04:	2800      	cmp	r0, #0
 8013d06:	f040 80f9 	bne.w	8013efc <_dtoa_r+0x6bc>
 8013d0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d0e:	4620      	mov	r0, r4
 8013d10:	4629      	mov	r1, r5
 8013d12:	f7ec fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8013d16:	b118      	cbz	r0, 8013d20 <_dtoa_r+0x4e0>
 8013d18:	f018 0f01 	tst.w	r8, #1
 8013d1c:	f040 80ee 	bne.w	8013efc <_dtoa_r+0x6bc>
 8013d20:	4649      	mov	r1, r9
 8013d22:	4658      	mov	r0, fp
 8013d24:	f000 fc90 	bl	8014648 <_Bfree>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	7033      	strb	r3, [r6, #0]
 8013d2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013d2e:	3701      	adds	r7, #1
 8013d30:	601f      	str	r7, [r3, #0]
 8013d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f000 831d 	beq.w	8014374 <_dtoa_r+0xb34>
 8013d3a:	601e      	str	r6, [r3, #0]
 8013d3c:	e31a      	b.n	8014374 <_dtoa_r+0xb34>
 8013d3e:	07e2      	lsls	r2, r4, #31
 8013d40:	d505      	bpl.n	8013d4e <_dtoa_r+0x50e>
 8013d42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d46:	f7ec fc77 	bl	8000638 <__aeabi_dmul>
 8013d4a:	3601      	adds	r6, #1
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	1064      	asrs	r4, r4, #1
 8013d50:	3508      	adds	r5, #8
 8013d52:	e73f      	b.n	8013bd4 <_dtoa_r+0x394>
 8013d54:	2602      	movs	r6, #2
 8013d56:	e742      	b.n	8013bde <_dtoa_r+0x39e>
 8013d58:	9c07      	ldr	r4, [sp, #28]
 8013d5a:	9704      	str	r7, [sp, #16]
 8013d5c:	e761      	b.n	8013c22 <_dtoa_r+0x3e2>
 8013d5e:	4b27      	ldr	r3, [pc, #156]	@ (8013dfc <_dtoa_r+0x5bc>)
 8013d60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d6a:	4454      	add	r4, sl
 8013d6c:	2900      	cmp	r1, #0
 8013d6e:	d053      	beq.n	8013e18 <_dtoa_r+0x5d8>
 8013d70:	4928      	ldr	r1, [pc, #160]	@ (8013e14 <_dtoa_r+0x5d4>)
 8013d72:	2000      	movs	r0, #0
 8013d74:	f7ec fd8a 	bl	800088c <__aeabi_ddiv>
 8013d78:	4633      	mov	r3, r6
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	f7ec faa4 	bl	80002c8 <__aeabi_dsub>
 8013d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013d84:	4656      	mov	r6, sl
 8013d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d8a:	f7ec ff05 	bl	8000b98 <__aeabi_d2iz>
 8013d8e:	4605      	mov	r5, r0
 8013d90:	f7ec fbe8 	bl	8000564 <__aeabi_i2d>
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d9c:	f7ec fa94 	bl	80002c8 <__aeabi_dsub>
 8013da0:	3530      	adds	r5, #48	@ 0x30
 8013da2:	4602      	mov	r2, r0
 8013da4:	460b      	mov	r3, r1
 8013da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013daa:	f806 5b01 	strb.w	r5, [r6], #1
 8013dae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013db2:	f7ec feb3 	bl	8000b1c <__aeabi_dcmplt>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d171      	bne.n	8013e9e <_dtoa_r+0x65e>
 8013dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013dbe:	4911      	ldr	r1, [pc, #68]	@ (8013e04 <_dtoa_r+0x5c4>)
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	f7ec fa81 	bl	80002c8 <__aeabi_dsub>
 8013dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013dca:	f7ec fea7 	bl	8000b1c <__aeabi_dcmplt>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f040 8095 	bne.w	8013efe <_dtoa_r+0x6be>
 8013dd4:	42a6      	cmp	r6, r4
 8013dd6:	f43f af50 	beq.w	8013c7a <_dtoa_r+0x43a>
 8013dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013dde:	4b0a      	ldr	r3, [pc, #40]	@ (8013e08 <_dtoa_r+0x5c8>)
 8013de0:	2200      	movs	r2, #0
 8013de2:	f7ec fc29 	bl	8000638 <__aeabi_dmul>
 8013de6:	4b08      	ldr	r3, [pc, #32]	@ (8013e08 <_dtoa_r+0x5c8>)
 8013de8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013dec:	2200      	movs	r2, #0
 8013dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df2:	f7ec fc21 	bl	8000638 <__aeabi_dmul>
 8013df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dfa:	e7c4      	b.n	8013d86 <_dtoa_r+0x546>
 8013dfc:	08015f50 	.word	0x08015f50
 8013e00:	08015f28 	.word	0x08015f28
 8013e04:	3ff00000 	.word	0x3ff00000
 8013e08:	40240000 	.word	0x40240000
 8013e0c:	401c0000 	.word	0x401c0000
 8013e10:	40140000 	.word	0x40140000
 8013e14:	3fe00000 	.word	0x3fe00000
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f7ec fc0c 	bl	8000638 <__aeabi_dmul>
 8013e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013e24:	9415      	str	r4, [sp, #84]	@ 0x54
 8013e26:	4656      	mov	r6, sl
 8013e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e2c:	f7ec feb4 	bl	8000b98 <__aeabi_d2iz>
 8013e30:	4605      	mov	r5, r0
 8013e32:	f7ec fb97 	bl	8000564 <__aeabi_i2d>
 8013e36:	4602      	mov	r2, r0
 8013e38:	460b      	mov	r3, r1
 8013e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e3e:	f7ec fa43 	bl	80002c8 <__aeabi_dsub>
 8013e42:	3530      	adds	r5, #48	@ 0x30
 8013e44:	f806 5b01 	strb.w	r5, [r6], #1
 8013e48:	4602      	mov	r2, r0
 8013e4a:	460b      	mov	r3, r1
 8013e4c:	42a6      	cmp	r6, r4
 8013e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e52:	f04f 0200 	mov.w	r2, #0
 8013e56:	d124      	bne.n	8013ea2 <_dtoa_r+0x662>
 8013e58:	4bac      	ldr	r3, [pc, #688]	@ (801410c <_dtoa_r+0x8cc>)
 8013e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013e5e:	f7ec fa35 	bl	80002cc <__adddf3>
 8013e62:	4602      	mov	r2, r0
 8013e64:	460b      	mov	r3, r1
 8013e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e6a:	f7ec fe75 	bl	8000b58 <__aeabi_dcmpgt>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d145      	bne.n	8013efe <_dtoa_r+0x6be>
 8013e72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e76:	49a5      	ldr	r1, [pc, #660]	@ (801410c <_dtoa_r+0x8cc>)
 8013e78:	2000      	movs	r0, #0
 8013e7a:	f7ec fa25 	bl	80002c8 <__aeabi_dsub>
 8013e7e:	4602      	mov	r2, r0
 8013e80:	460b      	mov	r3, r1
 8013e82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e86:	f7ec fe49 	bl	8000b1c <__aeabi_dcmplt>
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	f43f aef5 	beq.w	8013c7a <_dtoa_r+0x43a>
 8013e90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013e92:	1e73      	subs	r3, r6, #1
 8013e94:	9315      	str	r3, [sp, #84]	@ 0x54
 8013e96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e9a:	2b30      	cmp	r3, #48	@ 0x30
 8013e9c:	d0f8      	beq.n	8013e90 <_dtoa_r+0x650>
 8013e9e:	9f04      	ldr	r7, [sp, #16]
 8013ea0:	e73e      	b.n	8013d20 <_dtoa_r+0x4e0>
 8013ea2:	4b9b      	ldr	r3, [pc, #620]	@ (8014110 <_dtoa_r+0x8d0>)
 8013ea4:	f7ec fbc8 	bl	8000638 <__aeabi_dmul>
 8013ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eac:	e7bc      	b.n	8013e28 <_dtoa_r+0x5e8>
 8013eae:	d10c      	bne.n	8013eca <_dtoa_r+0x68a>
 8013eb0:	4b98      	ldr	r3, [pc, #608]	@ (8014114 <_dtoa_r+0x8d4>)
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013eb8:	f7ec fbbe 	bl	8000638 <__aeabi_dmul>
 8013ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ec0:	f7ec fe40 	bl	8000b44 <__aeabi_dcmpge>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	f000 8157 	beq.w	8014178 <_dtoa_r+0x938>
 8013eca:	2400      	movs	r4, #0
 8013ecc:	4625      	mov	r5, r4
 8013ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ed0:	43db      	mvns	r3, r3
 8013ed2:	9304      	str	r3, [sp, #16]
 8013ed4:	4656      	mov	r6, sl
 8013ed6:	2700      	movs	r7, #0
 8013ed8:	4621      	mov	r1, r4
 8013eda:	4658      	mov	r0, fp
 8013edc:	f000 fbb4 	bl	8014648 <_Bfree>
 8013ee0:	2d00      	cmp	r5, #0
 8013ee2:	d0dc      	beq.n	8013e9e <_dtoa_r+0x65e>
 8013ee4:	b12f      	cbz	r7, 8013ef2 <_dtoa_r+0x6b2>
 8013ee6:	42af      	cmp	r7, r5
 8013ee8:	d003      	beq.n	8013ef2 <_dtoa_r+0x6b2>
 8013eea:	4639      	mov	r1, r7
 8013eec:	4658      	mov	r0, fp
 8013eee:	f000 fbab 	bl	8014648 <_Bfree>
 8013ef2:	4629      	mov	r1, r5
 8013ef4:	4658      	mov	r0, fp
 8013ef6:	f000 fba7 	bl	8014648 <_Bfree>
 8013efa:	e7d0      	b.n	8013e9e <_dtoa_r+0x65e>
 8013efc:	9704      	str	r7, [sp, #16]
 8013efe:	4633      	mov	r3, r6
 8013f00:	461e      	mov	r6, r3
 8013f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f06:	2a39      	cmp	r2, #57	@ 0x39
 8013f08:	d107      	bne.n	8013f1a <_dtoa_r+0x6da>
 8013f0a:	459a      	cmp	sl, r3
 8013f0c:	d1f8      	bne.n	8013f00 <_dtoa_r+0x6c0>
 8013f0e:	9a04      	ldr	r2, [sp, #16]
 8013f10:	3201      	adds	r2, #1
 8013f12:	9204      	str	r2, [sp, #16]
 8013f14:	2230      	movs	r2, #48	@ 0x30
 8013f16:	f88a 2000 	strb.w	r2, [sl]
 8013f1a:	781a      	ldrb	r2, [r3, #0]
 8013f1c:	3201      	adds	r2, #1
 8013f1e:	701a      	strb	r2, [r3, #0]
 8013f20:	e7bd      	b.n	8013e9e <_dtoa_r+0x65e>
 8013f22:	4b7b      	ldr	r3, [pc, #492]	@ (8014110 <_dtoa_r+0x8d0>)
 8013f24:	2200      	movs	r2, #0
 8013f26:	f7ec fb87 	bl	8000638 <__aeabi_dmul>
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	4604      	mov	r4, r0
 8013f30:	460d      	mov	r5, r1
 8013f32:	f7ec fde9 	bl	8000b08 <__aeabi_dcmpeq>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	f43f aebb 	beq.w	8013cb2 <_dtoa_r+0x472>
 8013f3c:	e6f0      	b.n	8013d20 <_dtoa_r+0x4e0>
 8013f3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f40:	2a00      	cmp	r2, #0
 8013f42:	f000 80db 	beq.w	80140fc <_dtoa_r+0x8bc>
 8013f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f48:	2a01      	cmp	r2, #1
 8013f4a:	f300 80bf 	bgt.w	80140cc <_dtoa_r+0x88c>
 8013f4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013f50:	2a00      	cmp	r2, #0
 8013f52:	f000 80b7 	beq.w	80140c4 <_dtoa_r+0x884>
 8013f56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013f5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013f5c:	4646      	mov	r6, r8
 8013f5e:	9a08      	ldr	r2, [sp, #32]
 8013f60:	2101      	movs	r1, #1
 8013f62:	441a      	add	r2, r3
 8013f64:	4658      	mov	r0, fp
 8013f66:	4498      	add	r8, r3
 8013f68:	9208      	str	r2, [sp, #32]
 8013f6a:	f000 fc21 	bl	80147b0 <__i2b>
 8013f6e:	4605      	mov	r5, r0
 8013f70:	b15e      	cbz	r6, 8013f8a <_dtoa_r+0x74a>
 8013f72:	9b08      	ldr	r3, [sp, #32]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	dd08      	ble.n	8013f8a <_dtoa_r+0x74a>
 8013f78:	42b3      	cmp	r3, r6
 8013f7a:	9a08      	ldr	r2, [sp, #32]
 8013f7c:	bfa8      	it	ge
 8013f7e:	4633      	movge	r3, r6
 8013f80:	eba8 0803 	sub.w	r8, r8, r3
 8013f84:	1af6      	subs	r6, r6, r3
 8013f86:	1ad3      	subs	r3, r2, r3
 8013f88:	9308      	str	r3, [sp, #32]
 8013f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f8c:	b1f3      	cbz	r3, 8013fcc <_dtoa_r+0x78c>
 8013f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f000 80b7 	beq.w	8014104 <_dtoa_r+0x8c4>
 8013f96:	b18c      	cbz	r4, 8013fbc <_dtoa_r+0x77c>
 8013f98:	4629      	mov	r1, r5
 8013f9a:	4622      	mov	r2, r4
 8013f9c:	4658      	mov	r0, fp
 8013f9e:	f000 fcc7 	bl	8014930 <__pow5mult>
 8013fa2:	464a      	mov	r2, r9
 8013fa4:	4601      	mov	r1, r0
 8013fa6:	4605      	mov	r5, r0
 8013fa8:	4658      	mov	r0, fp
 8013faa:	f000 fc17 	bl	80147dc <__multiply>
 8013fae:	4649      	mov	r1, r9
 8013fb0:	9004      	str	r0, [sp, #16]
 8013fb2:	4658      	mov	r0, fp
 8013fb4:	f000 fb48 	bl	8014648 <_Bfree>
 8013fb8:	9b04      	ldr	r3, [sp, #16]
 8013fba:	4699      	mov	r9, r3
 8013fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013fbe:	1b1a      	subs	r2, r3, r4
 8013fc0:	d004      	beq.n	8013fcc <_dtoa_r+0x78c>
 8013fc2:	4649      	mov	r1, r9
 8013fc4:	4658      	mov	r0, fp
 8013fc6:	f000 fcb3 	bl	8014930 <__pow5mult>
 8013fca:	4681      	mov	r9, r0
 8013fcc:	2101      	movs	r1, #1
 8013fce:	4658      	mov	r0, fp
 8013fd0:	f000 fbee 	bl	80147b0 <__i2b>
 8013fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fd6:	4604      	mov	r4, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f000 81cf 	beq.w	801437c <_dtoa_r+0xb3c>
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4601      	mov	r1, r0
 8013fe2:	4658      	mov	r0, fp
 8013fe4:	f000 fca4 	bl	8014930 <__pow5mult>
 8013fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	4604      	mov	r4, r0
 8013fee:	f300 8095 	bgt.w	801411c <_dtoa_r+0x8dc>
 8013ff2:	9b02      	ldr	r3, [sp, #8]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f040 8087 	bne.w	8014108 <_dtoa_r+0x8c8>
 8013ffa:	9b03      	ldr	r3, [sp, #12]
 8013ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014000:	2b00      	cmp	r3, #0
 8014002:	f040 8089 	bne.w	8014118 <_dtoa_r+0x8d8>
 8014006:	9b03      	ldr	r3, [sp, #12]
 8014008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801400c:	0d1b      	lsrs	r3, r3, #20
 801400e:	051b      	lsls	r3, r3, #20
 8014010:	b12b      	cbz	r3, 801401e <_dtoa_r+0x7de>
 8014012:	9b08      	ldr	r3, [sp, #32]
 8014014:	3301      	adds	r3, #1
 8014016:	9308      	str	r3, [sp, #32]
 8014018:	f108 0801 	add.w	r8, r8, #1
 801401c:	2301      	movs	r3, #1
 801401e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014022:	2b00      	cmp	r3, #0
 8014024:	f000 81b0 	beq.w	8014388 <_dtoa_r+0xb48>
 8014028:	6923      	ldr	r3, [r4, #16]
 801402a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801402e:	6918      	ldr	r0, [r3, #16]
 8014030:	f000 fb72 	bl	8014718 <__hi0bits>
 8014034:	f1c0 0020 	rsb	r0, r0, #32
 8014038:	9b08      	ldr	r3, [sp, #32]
 801403a:	4418      	add	r0, r3
 801403c:	f010 001f 	ands.w	r0, r0, #31
 8014040:	d077      	beq.n	8014132 <_dtoa_r+0x8f2>
 8014042:	f1c0 0320 	rsb	r3, r0, #32
 8014046:	2b04      	cmp	r3, #4
 8014048:	dd6b      	ble.n	8014122 <_dtoa_r+0x8e2>
 801404a:	9b08      	ldr	r3, [sp, #32]
 801404c:	f1c0 001c 	rsb	r0, r0, #28
 8014050:	4403      	add	r3, r0
 8014052:	4480      	add	r8, r0
 8014054:	4406      	add	r6, r0
 8014056:	9308      	str	r3, [sp, #32]
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	dd05      	ble.n	801406a <_dtoa_r+0x82a>
 801405e:	4649      	mov	r1, r9
 8014060:	4642      	mov	r2, r8
 8014062:	4658      	mov	r0, fp
 8014064:	f000 fcbe 	bl	80149e4 <__lshift>
 8014068:	4681      	mov	r9, r0
 801406a:	9b08      	ldr	r3, [sp, #32]
 801406c:	2b00      	cmp	r3, #0
 801406e:	dd05      	ble.n	801407c <_dtoa_r+0x83c>
 8014070:	4621      	mov	r1, r4
 8014072:	461a      	mov	r2, r3
 8014074:	4658      	mov	r0, fp
 8014076:	f000 fcb5 	bl	80149e4 <__lshift>
 801407a:	4604      	mov	r4, r0
 801407c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801407e:	2b00      	cmp	r3, #0
 8014080:	d059      	beq.n	8014136 <_dtoa_r+0x8f6>
 8014082:	4621      	mov	r1, r4
 8014084:	4648      	mov	r0, r9
 8014086:	f000 fd19 	bl	8014abc <__mcmp>
 801408a:	2800      	cmp	r0, #0
 801408c:	da53      	bge.n	8014136 <_dtoa_r+0x8f6>
 801408e:	1e7b      	subs	r3, r7, #1
 8014090:	9304      	str	r3, [sp, #16]
 8014092:	4649      	mov	r1, r9
 8014094:	2300      	movs	r3, #0
 8014096:	220a      	movs	r2, #10
 8014098:	4658      	mov	r0, fp
 801409a:	f000 faf7 	bl	801468c <__multadd>
 801409e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140a0:	4681      	mov	r9, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f000 8172 	beq.w	801438c <_dtoa_r+0xb4c>
 80140a8:	2300      	movs	r3, #0
 80140aa:	4629      	mov	r1, r5
 80140ac:	220a      	movs	r2, #10
 80140ae:	4658      	mov	r0, fp
 80140b0:	f000 faec 	bl	801468c <__multadd>
 80140b4:	9b00      	ldr	r3, [sp, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	4605      	mov	r5, r0
 80140ba:	dc67      	bgt.n	801418c <_dtoa_r+0x94c>
 80140bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140be:	2b02      	cmp	r3, #2
 80140c0:	dc41      	bgt.n	8014146 <_dtoa_r+0x906>
 80140c2:	e063      	b.n	801418c <_dtoa_r+0x94c>
 80140c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80140c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80140ca:	e746      	b.n	8013f5a <_dtoa_r+0x71a>
 80140cc:	9b07      	ldr	r3, [sp, #28]
 80140ce:	1e5c      	subs	r4, r3, #1
 80140d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140d2:	42a3      	cmp	r3, r4
 80140d4:	bfbf      	itttt	lt
 80140d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80140d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80140da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80140dc:	1ae3      	sublt	r3, r4, r3
 80140de:	bfb4      	ite	lt
 80140e0:	18d2      	addlt	r2, r2, r3
 80140e2:	1b1c      	subge	r4, r3, r4
 80140e4:	9b07      	ldr	r3, [sp, #28]
 80140e6:	bfbc      	itt	lt
 80140e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80140ea:	2400      	movlt	r4, #0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	bfb5      	itete	lt
 80140f0:	eba8 0603 	sublt.w	r6, r8, r3
 80140f4:	9b07      	ldrge	r3, [sp, #28]
 80140f6:	2300      	movlt	r3, #0
 80140f8:	4646      	movge	r6, r8
 80140fa:	e730      	b.n	8013f5e <_dtoa_r+0x71e>
 80140fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80140fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014100:	4646      	mov	r6, r8
 8014102:	e735      	b.n	8013f70 <_dtoa_r+0x730>
 8014104:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014106:	e75c      	b.n	8013fc2 <_dtoa_r+0x782>
 8014108:	2300      	movs	r3, #0
 801410a:	e788      	b.n	801401e <_dtoa_r+0x7de>
 801410c:	3fe00000 	.word	0x3fe00000
 8014110:	40240000 	.word	0x40240000
 8014114:	40140000 	.word	0x40140000
 8014118:	9b02      	ldr	r3, [sp, #8]
 801411a:	e780      	b.n	801401e <_dtoa_r+0x7de>
 801411c:	2300      	movs	r3, #0
 801411e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014120:	e782      	b.n	8014028 <_dtoa_r+0x7e8>
 8014122:	d099      	beq.n	8014058 <_dtoa_r+0x818>
 8014124:	9a08      	ldr	r2, [sp, #32]
 8014126:	331c      	adds	r3, #28
 8014128:	441a      	add	r2, r3
 801412a:	4498      	add	r8, r3
 801412c:	441e      	add	r6, r3
 801412e:	9208      	str	r2, [sp, #32]
 8014130:	e792      	b.n	8014058 <_dtoa_r+0x818>
 8014132:	4603      	mov	r3, r0
 8014134:	e7f6      	b.n	8014124 <_dtoa_r+0x8e4>
 8014136:	9b07      	ldr	r3, [sp, #28]
 8014138:	9704      	str	r7, [sp, #16]
 801413a:	2b00      	cmp	r3, #0
 801413c:	dc20      	bgt.n	8014180 <_dtoa_r+0x940>
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014142:	2b02      	cmp	r3, #2
 8014144:	dd1e      	ble.n	8014184 <_dtoa_r+0x944>
 8014146:	9b00      	ldr	r3, [sp, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	f47f aec0 	bne.w	8013ece <_dtoa_r+0x68e>
 801414e:	4621      	mov	r1, r4
 8014150:	2205      	movs	r2, #5
 8014152:	4658      	mov	r0, fp
 8014154:	f000 fa9a 	bl	801468c <__multadd>
 8014158:	4601      	mov	r1, r0
 801415a:	4604      	mov	r4, r0
 801415c:	4648      	mov	r0, r9
 801415e:	f000 fcad 	bl	8014abc <__mcmp>
 8014162:	2800      	cmp	r0, #0
 8014164:	f77f aeb3 	ble.w	8013ece <_dtoa_r+0x68e>
 8014168:	4656      	mov	r6, sl
 801416a:	2331      	movs	r3, #49	@ 0x31
 801416c:	f806 3b01 	strb.w	r3, [r6], #1
 8014170:	9b04      	ldr	r3, [sp, #16]
 8014172:	3301      	adds	r3, #1
 8014174:	9304      	str	r3, [sp, #16]
 8014176:	e6ae      	b.n	8013ed6 <_dtoa_r+0x696>
 8014178:	9c07      	ldr	r4, [sp, #28]
 801417a:	9704      	str	r7, [sp, #16]
 801417c:	4625      	mov	r5, r4
 801417e:	e7f3      	b.n	8014168 <_dtoa_r+0x928>
 8014180:	9b07      	ldr	r3, [sp, #28]
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 8104 	beq.w	8014394 <_dtoa_r+0xb54>
 801418c:	2e00      	cmp	r6, #0
 801418e:	dd05      	ble.n	801419c <_dtoa_r+0x95c>
 8014190:	4629      	mov	r1, r5
 8014192:	4632      	mov	r2, r6
 8014194:	4658      	mov	r0, fp
 8014196:	f000 fc25 	bl	80149e4 <__lshift>
 801419a:	4605      	mov	r5, r0
 801419c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d05a      	beq.n	8014258 <_dtoa_r+0xa18>
 80141a2:	6869      	ldr	r1, [r5, #4]
 80141a4:	4658      	mov	r0, fp
 80141a6:	f000 fa0f 	bl	80145c8 <_Balloc>
 80141aa:	4606      	mov	r6, r0
 80141ac:	b928      	cbnz	r0, 80141ba <_dtoa_r+0x97a>
 80141ae:	4b84      	ldr	r3, [pc, #528]	@ (80143c0 <_dtoa_r+0xb80>)
 80141b0:	4602      	mov	r2, r0
 80141b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80141b6:	f7ff bb5a 	b.w	801386e <_dtoa_r+0x2e>
 80141ba:	692a      	ldr	r2, [r5, #16]
 80141bc:	3202      	adds	r2, #2
 80141be:	0092      	lsls	r2, r2, #2
 80141c0:	f105 010c 	add.w	r1, r5, #12
 80141c4:	300c      	adds	r0, #12
 80141c6:	f7ff faa4 	bl	8013712 <memcpy>
 80141ca:	2201      	movs	r2, #1
 80141cc:	4631      	mov	r1, r6
 80141ce:	4658      	mov	r0, fp
 80141d0:	f000 fc08 	bl	80149e4 <__lshift>
 80141d4:	f10a 0301 	add.w	r3, sl, #1
 80141d8:	9307      	str	r3, [sp, #28]
 80141da:	9b00      	ldr	r3, [sp, #0]
 80141dc:	4453      	add	r3, sl
 80141de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80141e0:	9b02      	ldr	r3, [sp, #8]
 80141e2:	f003 0301 	and.w	r3, r3, #1
 80141e6:	462f      	mov	r7, r5
 80141e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80141ea:	4605      	mov	r5, r0
 80141ec:	9b07      	ldr	r3, [sp, #28]
 80141ee:	4621      	mov	r1, r4
 80141f0:	3b01      	subs	r3, #1
 80141f2:	4648      	mov	r0, r9
 80141f4:	9300      	str	r3, [sp, #0]
 80141f6:	f7ff fa9a 	bl	801372e <quorem>
 80141fa:	4639      	mov	r1, r7
 80141fc:	9002      	str	r0, [sp, #8]
 80141fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014202:	4648      	mov	r0, r9
 8014204:	f000 fc5a 	bl	8014abc <__mcmp>
 8014208:	462a      	mov	r2, r5
 801420a:	9008      	str	r0, [sp, #32]
 801420c:	4621      	mov	r1, r4
 801420e:	4658      	mov	r0, fp
 8014210:	f000 fc70 	bl	8014af4 <__mdiff>
 8014214:	68c2      	ldr	r2, [r0, #12]
 8014216:	4606      	mov	r6, r0
 8014218:	bb02      	cbnz	r2, 801425c <_dtoa_r+0xa1c>
 801421a:	4601      	mov	r1, r0
 801421c:	4648      	mov	r0, r9
 801421e:	f000 fc4d 	bl	8014abc <__mcmp>
 8014222:	4602      	mov	r2, r0
 8014224:	4631      	mov	r1, r6
 8014226:	4658      	mov	r0, fp
 8014228:	920e      	str	r2, [sp, #56]	@ 0x38
 801422a:	f000 fa0d 	bl	8014648 <_Bfree>
 801422e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014230:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014232:	9e07      	ldr	r6, [sp, #28]
 8014234:	ea43 0102 	orr.w	r1, r3, r2
 8014238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801423a:	4319      	orrs	r1, r3
 801423c:	d110      	bne.n	8014260 <_dtoa_r+0xa20>
 801423e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014242:	d029      	beq.n	8014298 <_dtoa_r+0xa58>
 8014244:	9b08      	ldr	r3, [sp, #32]
 8014246:	2b00      	cmp	r3, #0
 8014248:	dd02      	ble.n	8014250 <_dtoa_r+0xa10>
 801424a:	9b02      	ldr	r3, [sp, #8]
 801424c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014250:	9b00      	ldr	r3, [sp, #0]
 8014252:	f883 8000 	strb.w	r8, [r3]
 8014256:	e63f      	b.n	8013ed8 <_dtoa_r+0x698>
 8014258:	4628      	mov	r0, r5
 801425a:	e7bb      	b.n	80141d4 <_dtoa_r+0x994>
 801425c:	2201      	movs	r2, #1
 801425e:	e7e1      	b.n	8014224 <_dtoa_r+0x9e4>
 8014260:	9b08      	ldr	r3, [sp, #32]
 8014262:	2b00      	cmp	r3, #0
 8014264:	db04      	blt.n	8014270 <_dtoa_r+0xa30>
 8014266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014268:	430b      	orrs	r3, r1
 801426a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801426c:	430b      	orrs	r3, r1
 801426e:	d120      	bne.n	80142b2 <_dtoa_r+0xa72>
 8014270:	2a00      	cmp	r2, #0
 8014272:	dded      	ble.n	8014250 <_dtoa_r+0xa10>
 8014274:	4649      	mov	r1, r9
 8014276:	2201      	movs	r2, #1
 8014278:	4658      	mov	r0, fp
 801427a:	f000 fbb3 	bl	80149e4 <__lshift>
 801427e:	4621      	mov	r1, r4
 8014280:	4681      	mov	r9, r0
 8014282:	f000 fc1b 	bl	8014abc <__mcmp>
 8014286:	2800      	cmp	r0, #0
 8014288:	dc03      	bgt.n	8014292 <_dtoa_r+0xa52>
 801428a:	d1e1      	bne.n	8014250 <_dtoa_r+0xa10>
 801428c:	f018 0f01 	tst.w	r8, #1
 8014290:	d0de      	beq.n	8014250 <_dtoa_r+0xa10>
 8014292:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014296:	d1d8      	bne.n	801424a <_dtoa_r+0xa0a>
 8014298:	9a00      	ldr	r2, [sp, #0]
 801429a:	2339      	movs	r3, #57	@ 0x39
 801429c:	7013      	strb	r3, [r2, #0]
 801429e:	4633      	mov	r3, r6
 80142a0:	461e      	mov	r6, r3
 80142a2:	3b01      	subs	r3, #1
 80142a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80142a8:	2a39      	cmp	r2, #57	@ 0x39
 80142aa:	d052      	beq.n	8014352 <_dtoa_r+0xb12>
 80142ac:	3201      	adds	r2, #1
 80142ae:	701a      	strb	r2, [r3, #0]
 80142b0:	e612      	b.n	8013ed8 <_dtoa_r+0x698>
 80142b2:	2a00      	cmp	r2, #0
 80142b4:	dd07      	ble.n	80142c6 <_dtoa_r+0xa86>
 80142b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80142ba:	d0ed      	beq.n	8014298 <_dtoa_r+0xa58>
 80142bc:	9a00      	ldr	r2, [sp, #0]
 80142be:	f108 0301 	add.w	r3, r8, #1
 80142c2:	7013      	strb	r3, [r2, #0]
 80142c4:	e608      	b.n	8013ed8 <_dtoa_r+0x698>
 80142c6:	9b07      	ldr	r3, [sp, #28]
 80142c8:	9a07      	ldr	r2, [sp, #28]
 80142ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80142ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142d0:	4293      	cmp	r3, r2
 80142d2:	d028      	beq.n	8014326 <_dtoa_r+0xae6>
 80142d4:	4649      	mov	r1, r9
 80142d6:	2300      	movs	r3, #0
 80142d8:	220a      	movs	r2, #10
 80142da:	4658      	mov	r0, fp
 80142dc:	f000 f9d6 	bl	801468c <__multadd>
 80142e0:	42af      	cmp	r7, r5
 80142e2:	4681      	mov	r9, r0
 80142e4:	f04f 0300 	mov.w	r3, #0
 80142e8:	f04f 020a 	mov.w	r2, #10
 80142ec:	4639      	mov	r1, r7
 80142ee:	4658      	mov	r0, fp
 80142f0:	d107      	bne.n	8014302 <_dtoa_r+0xac2>
 80142f2:	f000 f9cb 	bl	801468c <__multadd>
 80142f6:	4607      	mov	r7, r0
 80142f8:	4605      	mov	r5, r0
 80142fa:	9b07      	ldr	r3, [sp, #28]
 80142fc:	3301      	adds	r3, #1
 80142fe:	9307      	str	r3, [sp, #28]
 8014300:	e774      	b.n	80141ec <_dtoa_r+0x9ac>
 8014302:	f000 f9c3 	bl	801468c <__multadd>
 8014306:	4629      	mov	r1, r5
 8014308:	4607      	mov	r7, r0
 801430a:	2300      	movs	r3, #0
 801430c:	220a      	movs	r2, #10
 801430e:	4658      	mov	r0, fp
 8014310:	f000 f9bc 	bl	801468c <__multadd>
 8014314:	4605      	mov	r5, r0
 8014316:	e7f0      	b.n	80142fa <_dtoa_r+0xaba>
 8014318:	9b00      	ldr	r3, [sp, #0]
 801431a:	2b00      	cmp	r3, #0
 801431c:	bfcc      	ite	gt
 801431e:	461e      	movgt	r6, r3
 8014320:	2601      	movle	r6, #1
 8014322:	4456      	add	r6, sl
 8014324:	2700      	movs	r7, #0
 8014326:	4649      	mov	r1, r9
 8014328:	2201      	movs	r2, #1
 801432a:	4658      	mov	r0, fp
 801432c:	f000 fb5a 	bl	80149e4 <__lshift>
 8014330:	4621      	mov	r1, r4
 8014332:	4681      	mov	r9, r0
 8014334:	f000 fbc2 	bl	8014abc <__mcmp>
 8014338:	2800      	cmp	r0, #0
 801433a:	dcb0      	bgt.n	801429e <_dtoa_r+0xa5e>
 801433c:	d102      	bne.n	8014344 <_dtoa_r+0xb04>
 801433e:	f018 0f01 	tst.w	r8, #1
 8014342:	d1ac      	bne.n	801429e <_dtoa_r+0xa5e>
 8014344:	4633      	mov	r3, r6
 8014346:	461e      	mov	r6, r3
 8014348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801434c:	2a30      	cmp	r2, #48	@ 0x30
 801434e:	d0fa      	beq.n	8014346 <_dtoa_r+0xb06>
 8014350:	e5c2      	b.n	8013ed8 <_dtoa_r+0x698>
 8014352:	459a      	cmp	sl, r3
 8014354:	d1a4      	bne.n	80142a0 <_dtoa_r+0xa60>
 8014356:	9b04      	ldr	r3, [sp, #16]
 8014358:	3301      	adds	r3, #1
 801435a:	9304      	str	r3, [sp, #16]
 801435c:	2331      	movs	r3, #49	@ 0x31
 801435e:	f88a 3000 	strb.w	r3, [sl]
 8014362:	e5b9      	b.n	8013ed8 <_dtoa_r+0x698>
 8014364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014366:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80143c4 <_dtoa_r+0xb84>
 801436a:	b11b      	cbz	r3, 8014374 <_dtoa_r+0xb34>
 801436c:	f10a 0308 	add.w	r3, sl, #8
 8014370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014372:	6013      	str	r3, [r2, #0]
 8014374:	4650      	mov	r0, sl
 8014376:	b019      	add	sp, #100	@ 0x64
 8014378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801437e:	2b01      	cmp	r3, #1
 8014380:	f77f ae37 	ble.w	8013ff2 <_dtoa_r+0x7b2>
 8014384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014386:	930a      	str	r3, [sp, #40]	@ 0x28
 8014388:	2001      	movs	r0, #1
 801438a:	e655      	b.n	8014038 <_dtoa_r+0x7f8>
 801438c:	9b00      	ldr	r3, [sp, #0]
 801438e:	2b00      	cmp	r3, #0
 8014390:	f77f aed6 	ble.w	8014140 <_dtoa_r+0x900>
 8014394:	4656      	mov	r6, sl
 8014396:	4621      	mov	r1, r4
 8014398:	4648      	mov	r0, r9
 801439a:	f7ff f9c8 	bl	801372e <quorem>
 801439e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80143a2:	f806 8b01 	strb.w	r8, [r6], #1
 80143a6:	9b00      	ldr	r3, [sp, #0]
 80143a8:	eba6 020a 	sub.w	r2, r6, sl
 80143ac:	4293      	cmp	r3, r2
 80143ae:	ddb3      	ble.n	8014318 <_dtoa_r+0xad8>
 80143b0:	4649      	mov	r1, r9
 80143b2:	2300      	movs	r3, #0
 80143b4:	220a      	movs	r2, #10
 80143b6:	4658      	mov	r0, fp
 80143b8:	f000 f968 	bl	801468c <__multadd>
 80143bc:	4681      	mov	r9, r0
 80143be:	e7ea      	b.n	8014396 <_dtoa_r+0xb56>
 80143c0:	08015eac 	.word	0x08015eac
 80143c4:	08015e30 	.word	0x08015e30

080143c8 <_free_r>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	4605      	mov	r5, r0
 80143cc:	2900      	cmp	r1, #0
 80143ce:	d041      	beq.n	8014454 <_free_r+0x8c>
 80143d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143d4:	1f0c      	subs	r4, r1, #4
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	bfb8      	it	lt
 80143da:	18e4      	addlt	r4, r4, r3
 80143dc:	f000 f8e8 	bl	80145b0 <__malloc_lock>
 80143e0:	4a1d      	ldr	r2, [pc, #116]	@ (8014458 <_free_r+0x90>)
 80143e2:	6813      	ldr	r3, [r2, #0]
 80143e4:	b933      	cbnz	r3, 80143f4 <_free_r+0x2c>
 80143e6:	6063      	str	r3, [r4, #4]
 80143e8:	6014      	str	r4, [r2, #0]
 80143ea:	4628      	mov	r0, r5
 80143ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143f0:	f000 b8e4 	b.w	80145bc <__malloc_unlock>
 80143f4:	42a3      	cmp	r3, r4
 80143f6:	d908      	bls.n	801440a <_free_r+0x42>
 80143f8:	6820      	ldr	r0, [r4, #0]
 80143fa:	1821      	adds	r1, r4, r0
 80143fc:	428b      	cmp	r3, r1
 80143fe:	bf01      	itttt	eq
 8014400:	6819      	ldreq	r1, [r3, #0]
 8014402:	685b      	ldreq	r3, [r3, #4]
 8014404:	1809      	addeq	r1, r1, r0
 8014406:	6021      	streq	r1, [r4, #0]
 8014408:	e7ed      	b.n	80143e6 <_free_r+0x1e>
 801440a:	461a      	mov	r2, r3
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	b10b      	cbz	r3, 8014414 <_free_r+0x4c>
 8014410:	42a3      	cmp	r3, r4
 8014412:	d9fa      	bls.n	801440a <_free_r+0x42>
 8014414:	6811      	ldr	r1, [r2, #0]
 8014416:	1850      	adds	r0, r2, r1
 8014418:	42a0      	cmp	r0, r4
 801441a:	d10b      	bne.n	8014434 <_free_r+0x6c>
 801441c:	6820      	ldr	r0, [r4, #0]
 801441e:	4401      	add	r1, r0
 8014420:	1850      	adds	r0, r2, r1
 8014422:	4283      	cmp	r3, r0
 8014424:	6011      	str	r1, [r2, #0]
 8014426:	d1e0      	bne.n	80143ea <_free_r+0x22>
 8014428:	6818      	ldr	r0, [r3, #0]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	6053      	str	r3, [r2, #4]
 801442e:	4408      	add	r0, r1
 8014430:	6010      	str	r0, [r2, #0]
 8014432:	e7da      	b.n	80143ea <_free_r+0x22>
 8014434:	d902      	bls.n	801443c <_free_r+0x74>
 8014436:	230c      	movs	r3, #12
 8014438:	602b      	str	r3, [r5, #0]
 801443a:	e7d6      	b.n	80143ea <_free_r+0x22>
 801443c:	6820      	ldr	r0, [r4, #0]
 801443e:	1821      	adds	r1, r4, r0
 8014440:	428b      	cmp	r3, r1
 8014442:	bf04      	itt	eq
 8014444:	6819      	ldreq	r1, [r3, #0]
 8014446:	685b      	ldreq	r3, [r3, #4]
 8014448:	6063      	str	r3, [r4, #4]
 801444a:	bf04      	itt	eq
 801444c:	1809      	addeq	r1, r1, r0
 801444e:	6021      	streq	r1, [r4, #0]
 8014450:	6054      	str	r4, [r2, #4]
 8014452:	e7ca      	b.n	80143ea <_free_r+0x22>
 8014454:	bd38      	pop	{r3, r4, r5, pc}
 8014456:	bf00      	nop
 8014458:	20006a94 	.word	0x20006a94

0801445c <malloc>:
 801445c:	4b02      	ldr	r3, [pc, #8]	@ (8014468 <malloc+0xc>)
 801445e:	4601      	mov	r1, r0
 8014460:	6818      	ldr	r0, [r3, #0]
 8014462:	f000 b825 	b.w	80144b0 <_malloc_r>
 8014466:	bf00      	nop
 8014468:	20000034 	.word	0x20000034

0801446c <sbrk_aligned>:
 801446c:	b570      	push	{r4, r5, r6, lr}
 801446e:	4e0f      	ldr	r6, [pc, #60]	@ (80144ac <sbrk_aligned+0x40>)
 8014470:	460c      	mov	r4, r1
 8014472:	6831      	ldr	r1, [r6, #0]
 8014474:	4605      	mov	r5, r0
 8014476:	b911      	cbnz	r1, 801447e <sbrk_aligned+0x12>
 8014478:	f001 f81c 	bl	80154b4 <_sbrk_r>
 801447c:	6030      	str	r0, [r6, #0]
 801447e:	4621      	mov	r1, r4
 8014480:	4628      	mov	r0, r5
 8014482:	f001 f817 	bl	80154b4 <_sbrk_r>
 8014486:	1c43      	adds	r3, r0, #1
 8014488:	d103      	bne.n	8014492 <sbrk_aligned+0x26>
 801448a:	f04f 34ff 	mov.w	r4, #4294967295
 801448e:	4620      	mov	r0, r4
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	1cc4      	adds	r4, r0, #3
 8014494:	f024 0403 	bic.w	r4, r4, #3
 8014498:	42a0      	cmp	r0, r4
 801449a:	d0f8      	beq.n	801448e <sbrk_aligned+0x22>
 801449c:	1a21      	subs	r1, r4, r0
 801449e:	4628      	mov	r0, r5
 80144a0:	f001 f808 	bl	80154b4 <_sbrk_r>
 80144a4:	3001      	adds	r0, #1
 80144a6:	d1f2      	bne.n	801448e <sbrk_aligned+0x22>
 80144a8:	e7ef      	b.n	801448a <sbrk_aligned+0x1e>
 80144aa:	bf00      	nop
 80144ac:	20006a90 	.word	0x20006a90

080144b0 <_malloc_r>:
 80144b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144b4:	1ccd      	adds	r5, r1, #3
 80144b6:	f025 0503 	bic.w	r5, r5, #3
 80144ba:	3508      	adds	r5, #8
 80144bc:	2d0c      	cmp	r5, #12
 80144be:	bf38      	it	cc
 80144c0:	250c      	movcc	r5, #12
 80144c2:	2d00      	cmp	r5, #0
 80144c4:	4606      	mov	r6, r0
 80144c6:	db01      	blt.n	80144cc <_malloc_r+0x1c>
 80144c8:	42a9      	cmp	r1, r5
 80144ca:	d904      	bls.n	80144d6 <_malloc_r+0x26>
 80144cc:	230c      	movs	r3, #12
 80144ce:	6033      	str	r3, [r6, #0]
 80144d0:	2000      	movs	r0, #0
 80144d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80145ac <_malloc_r+0xfc>
 80144da:	f000 f869 	bl	80145b0 <__malloc_lock>
 80144de:	f8d8 3000 	ldr.w	r3, [r8]
 80144e2:	461c      	mov	r4, r3
 80144e4:	bb44      	cbnz	r4, 8014538 <_malloc_r+0x88>
 80144e6:	4629      	mov	r1, r5
 80144e8:	4630      	mov	r0, r6
 80144ea:	f7ff ffbf 	bl	801446c <sbrk_aligned>
 80144ee:	1c43      	adds	r3, r0, #1
 80144f0:	4604      	mov	r4, r0
 80144f2:	d158      	bne.n	80145a6 <_malloc_r+0xf6>
 80144f4:	f8d8 4000 	ldr.w	r4, [r8]
 80144f8:	4627      	mov	r7, r4
 80144fa:	2f00      	cmp	r7, #0
 80144fc:	d143      	bne.n	8014586 <_malloc_r+0xd6>
 80144fe:	2c00      	cmp	r4, #0
 8014500:	d04b      	beq.n	801459a <_malloc_r+0xea>
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	4639      	mov	r1, r7
 8014506:	4630      	mov	r0, r6
 8014508:	eb04 0903 	add.w	r9, r4, r3
 801450c:	f000 ffd2 	bl	80154b4 <_sbrk_r>
 8014510:	4581      	cmp	r9, r0
 8014512:	d142      	bne.n	801459a <_malloc_r+0xea>
 8014514:	6821      	ldr	r1, [r4, #0]
 8014516:	1a6d      	subs	r5, r5, r1
 8014518:	4629      	mov	r1, r5
 801451a:	4630      	mov	r0, r6
 801451c:	f7ff ffa6 	bl	801446c <sbrk_aligned>
 8014520:	3001      	adds	r0, #1
 8014522:	d03a      	beq.n	801459a <_malloc_r+0xea>
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	442b      	add	r3, r5
 8014528:	6023      	str	r3, [r4, #0]
 801452a:	f8d8 3000 	ldr.w	r3, [r8]
 801452e:	685a      	ldr	r2, [r3, #4]
 8014530:	bb62      	cbnz	r2, 801458c <_malloc_r+0xdc>
 8014532:	f8c8 7000 	str.w	r7, [r8]
 8014536:	e00f      	b.n	8014558 <_malloc_r+0xa8>
 8014538:	6822      	ldr	r2, [r4, #0]
 801453a:	1b52      	subs	r2, r2, r5
 801453c:	d420      	bmi.n	8014580 <_malloc_r+0xd0>
 801453e:	2a0b      	cmp	r2, #11
 8014540:	d917      	bls.n	8014572 <_malloc_r+0xc2>
 8014542:	1961      	adds	r1, r4, r5
 8014544:	42a3      	cmp	r3, r4
 8014546:	6025      	str	r5, [r4, #0]
 8014548:	bf18      	it	ne
 801454a:	6059      	strne	r1, [r3, #4]
 801454c:	6863      	ldr	r3, [r4, #4]
 801454e:	bf08      	it	eq
 8014550:	f8c8 1000 	streq.w	r1, [r8]
 8014554:	5162      	str	r2, [r4, r5]
 8014556:	604b      	str	r3, [r1, #4]
 8014558:	4630      	mov	r0, r6
 801455a:	f000 f82f 	bl	80145bc <__malloc_unlock>
 801455e:	f104 000b 	add.w	r0, r4, #11
 8014562:	1d23      	adds	r3, r4, #4
 8014564:	f020 0007 	bic.w	r0, r0, #7
 8014568:	1ac2      	subs	r2, r0, r3
 801456a:	bf1c      	itt	ne
 801456c:	1a1b      	subne	r3, r3, r0
 801456e:	50a3      	strne	r3, [r4, r2]
 8014570:	e7af      	b.n	80144d2 <_malloc_r+0x22>
 8014572:	6862      	ldr	r2, [r4, #4]
 8014574:	42a3      	cmp	r3, r4
 8014576:	bf0c      	ite	eq
 8014578:	f8c8 2000 	streq.w	r2, [r8]
 801457c:	605a      	strne	r2, [r3, #4]
 801457e:	e7eb      	b.n	8014558 <_malloc_r+0xa8>
 8014580:	4623      	mov	r3, r4
 8014582:	6864      	ldr	r4, [r4, #4]
 8014584:	e7ae      	b.n	80144e4 <_malloc_r+0x34>
 8014586:	463c      	mov	r4, r7
 8014588:	687f      	ldr	r7, [r7, #4]
 801458a:	e7b6      	b.n	80144fa <_malloc_r+0x4a>
 801458c:	461a      	mov	r2, r3
 801458e:	685b      	ldr	r3, [r3, #4]
 8014590:	42a3      	cmp	r3, r4
 8014592:	d1fb      	bne.n	801458c <_malloc_r+0xdc>
 8014594:	2300      	movs	r3, #0
 8014596:	6053      	str	r3, [r2, #4]
 8014598:	e7de      	b.n	8014558 <_malloc_r+0xa8>
 801459a:	230c      	movs	r3, #12
 801459c:	6033      	str	r3, [r6, #0]
 801459e:	4630      	mov	r0, r6
 80145a0:	f000 f80c 	bl	80145bc <__malloc_unlock>
 80145a4:	e794      	b.n	80144d0 <_malloc_r+0x20>
 80145a6:	6005      	str	r5, [r0, #0]
 80145a8:	e7d6      	b.n	8014558 <_malloc_r+0xa8>
 80145aa:	bf00      	nop
 80145ac:	20006a94 	.word	0x20006a94

080145b0 <__malloc_lock>:
 80145b0:	4801      	ldr	r0, [pc, #4]	@ (80145b8 <__malloc_lock+0x8>)
 80145b2:	f7ff b8ac 	b.w	801370e <__retarget_lock_acquire_recursive>
 80145b6:	bf00      	nop
 80145b8:	20006a8c 	.word	0x20006a8c

080145bc <__malloc_unlock>:
 80145bc:	4801      	ldr	r0, [pc, #4]	@ (80145c4 <__malloc_unlock+0x8>)
 80145be:	f7ff b8a7 	b.w	8013710 <__retarget_lock_release_recursive>
 80145c2:	bf00      	nop
 80145c4:	20006a8c 	.word	0x20006a8c

080145c8 <_Balloc>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	69c6      	ldr	r6, [r0, #28]
 80145cc:	4604      	mov	r4, r0
 80145ce:	460d      	mov	r5, r1
 80145d0:	b976      	cbnz	r6, 80145f0 <_Balloc+0x28>
 80145d2:	2010      	movs	r0, #16
 80145d4:	f7ff ff42 	bl	801445c <malloc>
 80145d8:	4602      	mov	r2, r0
 80145da:	61e0      	str	r0, [r4, #28]
 80145dc:	b920      	cbnz	r0, 80145e8 <_Balloc+0x20>
 80145de:	4b18      	ldr	r3, [pc, #96]	@ (8014640 <_Balloc+0x78>)
 80145e0:	4818      	ldr	r0, [pc, #96]	@ (8014644 <_Balloc+0x7c>)
 80145e2:	216b      	movs	r1, #107	@ 0x6b
 80145e4:	f000 ff76 	bl	80154d4 <__assert_func>
 80145e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145ec:	6006      	str	r6, [r0, #0]
 80145ee:	60c6      	str	r6, [r0, #12]
 80145f0:	69e6      	ldr	r6, [r4, #28]
 80145f2:	68f3      	ldr	r3, [r6, #12]
 80145f4:	b183      	cbz	r3, 8014618 <_Balloc+0x50>
 80145f6:	69e3      	ldr	r3, [r4, #28]
 80145f8:	68db      	ldr	r3, [r3, #12]
 80145fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80145fe:	b9b8      	cbnz	r0, 8014630 <_Balloc+0x68>
 8014600:	2101      	movs	r1, #1
 8014602:	fa01 f605 	lsl.w	r6, r1, r5
 8014606:	1d72      	adds	r2, r6, #5
 8014608:	0092      	lsls	r2, r2, #2
 801460a:	4620      	mov	r0, r4
 801460c:	f000 ff80 	bl	8015510 <_calloc_r>
 8014610:	b160      	cbz	r0, 801462c <_Balloc+0x64>
 8014612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014616:	e00e      	b.n	8014636 <_Balloc+0x6e>
 8014618:	2221      	movs	r2, #33	@ 0x21
 801461a:	2104      	movs	r1, #4
 801461c:	4620      	mov	r0, r4
 801461e:	f000 ff77 	bl	8015510 <_calloc_r>
 8014622:	69e3      	ldr	r3, [r4, #28]
 8014624:	60f0      	str	r0, [r6, #12]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d1e4      	bne.n	80145f6 <_Balloc+0x2e>
 801462c:	2000      	movs	r0, #0
 801462e:	bd70      	pop	{r4, r5, r6, pc}
 8014630:	6802      	ldr	r2, [r0, #0]
 8014632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014636:	2300      	movs	r3, #0
 8014638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801463c:	e7f7      	b.n	801462e <_Balloc+0x66>
 801463e:	bf00      	nop
 8014640:	08015e3d 	.word	0x08015e3d
 8014644:	08015ebd 	.word	0x08015ebd

08014648 <_Bfree>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	69c6      	ldr	r6, [r0, #28]
 801464c:	4605      	mov	r5, r0
 801464e:	460c      	mov	r4, r1
 8014650:	b976      	cbnz	r6, 8014670 <_Bfree+0x28>
 8014652:	2010      	movs	r0, #16
 8014654:	f7ff ff02 	bl	801445c <malloc>
 8014658:	4602      	mov	r2, r0
 801465a:	61e8      	str	r0, [r5, #28]
 801465c:	b920      	cbnz	r0, 8014668 <_Bfree+0x20>
 801465e:	4b09      	ldr	r3, [pc, #36]	@ (8014684 <_Bfree+0x3c>)
 8014660:	4809      	ldr	r0, [pc, #36]	@ (8014688 <_Bfree+0x40>)
 8014662:	218f      	movs	r1, #143	@ 0x8f
 8014664:	f000 ff36 	bl	80154d4 <__assert_func>
 8014668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801466c:	6006      	str	r6, [r0, #0]
 801466e:	60c6      	str	r6, [r0, #12]
 8014670:	b13c      	cbz	r4, 8014682 <_Bfree+0x3a>
 8014672:	69eb      	ldr	r3, [r5, #28]
 8014674:	6862      	ldr	r2, [r4, #4]
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801467c:	6021      	str	r1, [r4, #0]
 801467e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014682:	bd70      	pop	{r4, r5, r6, pc}
 8014684:	08015e3d 	.word	0x08015e3d
 8014688:	08015ebd 	.word	0x08015ebd

0801468c <__multadd>:
 801468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014690:	690d      	ldr	r5, [r1, #16]
 8014692:	4607      	mov	r7, r0
 8014694:	460c      	mov	r4, r1
 8014696:	461e      	mov	r6, r3
 8014698:	f101 0c14 	add.w	ip, r1, #20
 801469c:	2000      	movs	r0, #0
 801469e:	f8dc 3000 	ldr.w	r3, [ip]
 80146a2:	b299      	uxth	r1, r3
 80146a4:	fb02 6101 	mla	r1, r2, r1, r6
 80146a8:	0c1e      	lsrs	r6, r3, #16
 80146aa:	0c0b      	lsrs	r3, r1, #16
 80146ac:	fb02 3306 	mla	r3, r2, r6, r3
 80146b0:	b289      	uxth	r1, r1
 80146b2:	3001      	adds	r0, #1
 80146b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80146b8:	4285      	cmp	r5, r0
 80146ba:	f84c 1b04 	str.w	r1, [ip], #4
 80146be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80146c2:	dcec      	bgt.n	801469e <__multadd+0x12>
 80146c4:	b30e      	cbz	r6, 801470a <__multadd+0x7e>
 80146c6:	68a3      	ldr	r3, [r4, #8]
 80146c8:	42ab      	cmp	r3, r5
 80146ca:	dc19      	bgt.n	8014700 <__multadd+0x74>
 80146cc:	6861      	ldr	r1, [r4, #4]
 80146ce:	4638      	mov	r0, r7
 80146d0:	3101      	adds	r1, #1
 80146d2:	f7ff ff79 	bl	80145c8 <_Balloc>
 80146d6:	4680      	mov	r8, r0
 80146d8:	b928      	cbnz	r0, 80146e6 <__multadd+0x5a>
 80146da:	4602      	mov	r2, r0
 80146dc:	4b0c      	ldr	r3, [pc, #48]	@ (8014710 <__multadd+0x84>)
 80146de:	480d      	ldr	r0, [pc, #52]	@ (8014714 <__multadd+0x88>)
 80146e0:	21ba      	movs	r1, #186	@ 0xba
 80146e2:	f000 fef7 	bl	80154d4 <__assert_func>
 80146e6:	6922      	ldr	r2, [r4, #16]
 80146e8:	3202      	adds	r2, #2
 80146ea:	f104 010c 	add.w	r1, r4, #12
 80146ee:	0092      	lsls	r2, r2, #2
 80146f0:	300c      	adds	r0, #12
 80146f2:	f7ff f80e 	bl	8013712 <memcpy>
 80146f6:	4621      	mov	r1, r4
 80146f8:	4638      	mov	r0, r7
 80146fa:	f7ff ffa5 	bl	8014648 <_Bfree>
 80146fe:	4644      	mov	r4, r8
 8014700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014704:	3501      	adds	r5, #1
 8014706:	615e      	str	r6, [r3, #20]
 8014708:	6125      	str	r5, [r4, #16]
 801470a:	4620      	mov	r0, r4
 801470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014710:	08015eac 	.word	0x08015eac
 8014714:	08015ebd 	.word	0x08015ebd

08014718 <__hi0bits>:
 8014718:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801471c:	4603      	mov	r3, r0
 801471e:	bf36      	itet	cc
 8014720:	0403      	lslcc	r3, r0, #16
 8014722:	2000      	movcs	r0, #0
 8014724:	2010      	movcc	r0, #16
 8014726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801472a:	bf3c      	itt	cc
 801472c:	021b      	lslcc	r3, r3, #8
 801472e:	3008      	addcc	r0, #8
 8014730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014734:	bf3c      	itt	cc
 8014736:	011b      	lslcc	r3, r3, #4
 8014738:	3004      	addcc	r0, #4
 801473a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801473e:	bf3c      	itt	cc
 8014740:	009b      	lslcc	r3, r3, #2
 8014742:	3002      	addcc	r0, #2
 8014744:	2b00      	cmp	r3, #0
 8014746:	db05      	blt.n	8014754 <__hi0bits+0x3c>
 8014748:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801474c:	f100 0001 	add.w	r0, r0, #1
 8014750:	bf08      	it	eq
 8014752:	2020      	moveq	r0, #32
 8014754:	4770      	bx	lr

08014756 <__lo0bits>:
 8014756:	6803      	ldr	r3, [r0, #0]
 8014758:	4602      	mov	r2, r0
 801475a:	f013 0007 	ands.w	r0, r3, #7
 801475e:	d00b      	beq.n	8014778 <__lo0bits+0x22>
 8014760:	07d9      	lsls	r1, r3, #31
 8014762:	d421      	bmi.n	80147a8 <__lo0bits+0x52>
 8014764:	0798      	lsls	r0, r3, #30
 8014766:	bf49      	itett	mi
 8014768:	085b      	lsrmi	r3, r3, #1
 801476a:	089b      	lsrpl	r3, r3, #2
 801476c:	2001      	movmi	r0, #1
 801476e:	6013      	strmi	r3, [r2, #0]
 8014770:	bf5c      	itt	pl
 8014772:	6013      	strpl	r3, [r2, #0]
 8014774:	2002      	movpl	r0, #2
 8014776:	4770      	bx	lr
 8014778:	b299      	uxth	r1, r3
 801477a:	b909      	cbnz	r1, 8014780 <__lo0bits+0x2a>
 801477c:	0c1b      	lsrs	r3, r3, #16
 801477e:	2010      	movs	r0, #16
 8014780:	b2d9      	uxtb	r1, r3
 8014782:	b909      	cbnz	r1, 8014788 <__lo0bits+0x32>
 8014784:	3008      	adds	r0, #8
 8014786:	0a1b      	lsrs	r3, r3, #8
 8014788:	0719      	lsls	r1, r3, #28
 801478a:	bf04      	itt	eq
 801478c:	091b      	lsreq	r3, r3, #4
 801478e:	3004      	addeq	r0, #4
 8014790:	0799      	lsls	r1, r3, #30
 8014792:	bf04      	itt	eq
 8014794:	089b      	lsreq	r3, r3, #2
 8014796:	3002      	addeq	r0, #2
 8014798:	07d9      	lsls	r1, r3, #31
 801479a:	d403      	bmi.n	80147a4 <__lo0bits+0x4e>
 801479c:	085b      	lsrs	r3, r3, #1
 801479e:	f100 0001 	add.w	r0, r0, #1
 80147a2:	d003      	beq.n	80147ac <__lo0bits+0x56>
 80147a4:	6013      	str	r3, [r2, #0]
 80147a6:	4770      	bx	lr
 80147a8:	2000      	movs	r0, #0
 80147aa:	4770      	bx	lr
 80147ac:	2020      	movs	r0, #32
 80147ae:	4770      	bx	lr

080147b0 <__i2b>:
 80147b0:	b510      	push	{r4, lr}
 80147b2:	460c      	mov	r4, r1
 80147b4:	2101      	movs	r1, #1
 80147b6:	f7ff ff07 	bl	80145c8 <_Balloc>
 80147ba:	4602      	mov	r2, r0
 80147bc:	b928      	cbnz	r0, 80147ca <__i2b+0x1a>
 80147be:	4b05      	ldr	r3, [pc, #20]	@ (80147d4 <__i2b+0x24>)
 80147c0:	4805      	ldr	r0, [pc, #20]	@ (80147d8 <__i2b+0x28>)
 80147c2:	f240 1145 	movw	r1, #325	@ 0x145
 80147c6:	f000 fe85 	bl	80154d4 <__assert_func>
 80147ca:	2301      	movs	r3, #1
 80147cc:	6144      	str	r4, [r0, #20]
 80147ce:	6103      	str	r3, [r0, #16]
 80147d0:	bd10      	pop	{r4, pc}
 80147d2:	bf00      	nop
 80147d4:	08015eac 	.word	0x08015eac
 80147d8:	08015ebd 	.word	0x08015ebd

080147dc <__multiply>:
 80147dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e0:	4614      	mov	r4, r2
 80147e2:	690a      	ldr	r2, [r1, #16]
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	bfa8      	it	ge
 80147ea:	4623      	movge	r3, r4
 80147ec:	460f      	mov	r7, r1
 80147ee:	bfa4      	itt	ge
 80147f0:	460c      	movge	r4, r1
 80147f2:	461f      	movge	r7, r3
 80147f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80147f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80147fc:	68a3      	ldr	r3, [r4, #8]
 80147fe:	6861      	ldr	r1, [r4, #4]
 8014800:	eb0a 0609 	add.w	r6, sl, r9
 8014804:	42b3      	cmp	r3, r6
 8014806:	b085      	sub	sp, #20
 8014808:	bfb8      	it	lt
 801480a:	3101      	addlt	r1, #1
 801480c:	f7ff fedc 	bl	80145c8 <_Balloc>
 8014810:	b930      	cbnz	r0, 8014820 <__multiply+0x44>
 8014812:	4602      	mov	r2, r0
 8014814:	4b44      	ldr	r3, [pc, #272]	@ (8014928 <__multiply+0x14c>)
 8014816:	4845      	ldr	r0, [pc, #276]	@ (801492c <__multiply+0x150>)
 8014818:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801481c:	f000 fe5a 	bl	80154d4 <__assert_func>
 8014820:	f100 0514 	add.w	r5, r0, #20
 8014824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014828:	462b      	mov	r3, r5
 801482a:	2200      	movs	r2, #0
 801482c:	4543      	cmp	r3, r8
 801482e:	d321      	bcc.n	8014874 <__multiply+0x98>
 8014830:	f107 0114 	add.w	r1, r7, #20
 8014834:	f104 0214 	add.w	r2, r4, #20
 8014838:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801483c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014840:	9302      	str	r3, [sp, #8]
 8014842:	1b13      	subs	r3, r2, r4
 8014844:	3b15      	subs	r3, #21
 8014846:	f023 0303 	bic.w	r3, r3, #3
 801484a:	3304      	adds	r3, #4
 801484c:	f104 0715 	add.w	r7, r4, #21
 8014850:	42ba      	cmp	r2, r7
 8014852:	bf38      	it	cc
 8014854:	2304      	movcc	r3, #4
 8014856:	9301      	str	r3, [sp, #4]
 8014858:	9b02      	ldr	r3, [sp, #8]
 801485a:	9103      	str	r1, [sp, #12]
 801485c:	428b      	cmp	r3, r1
 801485e:	d80c      	bhi.n	801487a <__multiply+0x9e>
 8014860:	2e00      	cmp	r6, #0
 8014862:	dd03      	ble.n	801486c <__multiply+0x90>
 8014864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014868:	2b00      	cmp	r3, #0
 801486a:	d05b      	beq.n	8014924 <__multiply+0x148>
 801486c:	6106      	str	r6, [r0, #16]
 801486e:	b005      	add	sp, #20
 8014870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014874:	f843 2b04 	str.w	r2, [r3], #4
 8014878:	e7d8      	b.n	801482c <__multiply+0x50>
 801487a:	f8b1 a000 	ldrh.w	sl, [r1]
 801487e:	f1ba 0f00 	cmp.w	sl, #0
 8014882:	d024      	beq.n	80148ce <__multiply+0xf2>
 8014884:	f104 0e14 	add.w	lr, r4, #20
 8014888:	46a9      	mov	r9, r5
 801488a:	f04f 0c00 	mov.w	ip, #0
 801488e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014892:	f8d9 3000 	ldr.w	r3, [r9]
 8014896:	fa1f fb87 	uxth.w	fp, r7
 801489a:	b29b      	uxth	r3, r3
 801489c:	fb0a 330b 	mla	r3, sl, fp, r3
 80148a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80148a4:	f8d9 7000 	ldr.w	r7, [r9]
 80148a8:	4463      	add	r3, ip
 80148aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80148ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80148b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80148bc:	4572      	cmp	r2, lr
 80148be:	f849 3b04 	str.w	r3, [r9], #4
 80148c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80148c6:	d8e2      	bhi.n	801488e <__multiply+0xb2>
 80148c8:	9b01      	ldr	r3, [sp, #4]
 80148ca:	f845 c003 	str.w	ip, [r5, r3]
 80148ce:	9b03      	ldr	r3, [sp, #12]
 80148d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80148d4:	3104      	adds	r1, #4
 80148d6:	f1b9 0f00 	cmp.w	r9, #0
 80148da:	d021      	beq.n	8014920 <__multiply+0x144>
 80148dc:	682b      	ldr	r3, [r5, #0]
 80148de:	f104 0c14 	add.w	ip, r4, #20
 80148e2:	46ae      	mov	lr, r5
 80148e4:	f04f 0a00 	mov.w	sl, #0
 80148e8:	f8bc b000 	ldrh.w	fp, [ip]
 80148ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80148f0:	fb09 770b 	mla	r7, r9, fp, r7
 80148f4:	4457      	add	r7, sl
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80148fc:	f84e 3b04 	str.w	r3, [lr], #4
 8014900:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014904:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014908:	f8be 3000 	ldrh.w	r3, [lr]
 801490c:	fb09 330a 	mla	r3, r9, sl, r3
 8014910:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014914:	4562      	cmp	r2, ip
 8014916:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801491a:	d8e5      	bhi.n	80148e8 <__multiply+0x10c>
 801491c:	9f01      	ldr	r7, [sp, #4]
 801491e:	51eb      	str	r3, [r5, r7]
 8014920:	3504      	adds	r5, #4
 8014922:	e799      	b.n	8014858 <__multiply+0x7c>
 8014924:	3e01      	subs	r6, #1
 8014926:	e79b      	b.n	8014860 <__multiply+0x84>
 8014928:	08015eac 	.word	0x08015eac
 801492c:	08015ebd 	.word	0x08015ebd

08014930 <__pow5mult>:
 8014930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014934:	4615      	mov	r5, r2
 8014936:	f012 0203 	ands.w	r2, r2, #3
 801493a:	4607      	mov	r7, r0
 801493c:	460e      	mov	r6, r1
 801493e:	d007      	beq.n	8014950 <__pow5mult+0x20>
 8014940:	4c25      	ldr	r4, [pc, #148]	@ (80149d8 <__pow5mult+0xa8>)
 8014942:	3a01      	subs	r2, #1
 8014944:	2300      	movs	r3, #0
 8014946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801494a:	f7ff fe9f 	bl	801468c <__multadd>
 801494e:	4606      	mov	r6, r0
 8014950:	10ad      	asrs	r5, r5, #2
 8014952:	d03d      	beq.n	80149d0 <__pow5mult+0xa0>
 8014954:	69fc      	ldr	r4, [r7, #28]
 8014956:	b97c      	cbnz	r4, 8014978 <__pow5mult+0x48>
 8014958:	2010      	movs	r0, #16
 801495a:	f7ff fd7f 	bl	801445c <malloc>
 801495e:	4602      	mov	r2, r0
 8014960:	61f8      	str	r0, [r7, #28]
 8014962:	b928      	cbnz	r0, 8014970 <__pow5mult+0x40>
 8014964:	4b1d      	ldr	r3, [pc, #116]	@ (80149dc <__pow5mult+0xac>)
 8014966:	481e      	ldr	r0, [pc, #120]	@ (80149e0 <__pow5mult+0xb0>)
 8014968:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801496c:	f000 fdb2 	bl	80154d4 <__assert_func>
 8014970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014974:	6004      	str	r4, [r0, #0]
 8014976:	60c4      	str	r4, [r0, #12]
 8014978:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801497c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014980:	b94c      	cbnz	r4, 8014996 <__pow5mult+0x66>
 8014982:	f240 2171 	movw	r1, #625	@ 0x271
 8014986:	4638      	mov	r0, r7
 8014988:	f7ff ff12 	bl	80147b0 <__i2b>
 801498c:	2300      	movs	r3, #0
 801498e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014992:	4604      	mov	r4, r0
 8014994:	6003      	str	r3, [r0, #0]
 8014996:	f04f 0900 	mov.w	r9, #0
 801499a:	07eb      	lsls	r3, r5, #31
 801499c:	d50a      	bpl.n	80149b4 <__pow5mult+0x84>
 801499e:	4631      	mov	r1, r6
 80149a0:	4622      	mov	r2, r4
 80149a2:	4638      	mov	r0, r7
 80149a4:	f7ff ff1a 	bl	80147dc <__multiply>
 80149a8:	4631      	mov	r1, r6
 80149aa:	4680      	mov	r8, r0
 80149ac:	4638      	mov	r0, r7
 80149ae:	f7ff fe4b 	bl	8014648 <_Bfree>
 80149b2:	4646      	mov	r6, r8
 80149b4:	106d      	asrs	r5, r5, #1
 80149b6:	d00b      	beq.n	80149d0 <__pow5mult+0xa0>
 80149b8:	6820      	ldr	r0, [r4, #0]
 80149ba:	b938      	cbnz	r0, 80149cc <__pow5mult+0x9c>
 80149bc:	4622      	mov	r2, r4
 80149be:	4621      	mov	r1, r4
 80149c0:	4638      	mov	r0, r7
 80149c2:	f7ff ff0b 	bl	80147dc <__multiply>
 80149c6:	6020      	str	r0, [r4, #0]
 80149c8:	f8c0 9000 	str.w	r9, [r0]
 80149cc:	4604      	mov	r4, r0
 80149ce:	e7e4      	b.n	801499a <__pow5mult+0x6a>
 80149d0:	4630      	mov	r0, r6
 80149d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149d6:	bf00      	nop
 80149d8:	08015f18 	.word	0x08015f18
 80149dc:	08015e3d 	.word	0x08015e3d
 80149e0:	08015ebd 	.word	0x08015ebd

080149e4 <__lshift>:
 80149e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e8:	460c      	mov	r4, r1
 80149ea:	6849      	ldr	r1, [r1, #4]
 80149ec:	6923      	ldr	r3, [r4, #16]
 80149ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80149f2:	68a3      	ldr	r3, [r4, #8]
 80149f4:	4607      	mov	r7, r0
 80149f6:	4691      	mov	r9, r2
 80149f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80149fc:	f108 0601 	add.w	r6, r8, #1
 8014a00:	42b3      	cmp	r3, r6
 8014a02:	db0b      	blt.n	8014a1c <__lshift+0x38>
 8014a04:	4638      	mov	r0, r7
 8014a06:	f7ff fddf 	bl	80145c8 <_Balloc>
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	b948      	cbnz	r0, 8014a22 <__lshift+0x3e>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	4b28      	ldr	r3, [pc, #160]	@ (8014ab4 <__lshift+0xd0>)
 8014a12:	4829      	ldr	r0, [pc, #164]	@ (8014ab8 <__lshift+0xd4>)
 8014a14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014a18:	f000 fd5c 	bl	80154d4 <__assert_func>
 8014a1c:	3101      	adds	r1, #1
 8014a1e:	005b      	lsls	r3, r3, #1
 8014a20:	e7ee      	b.n	8014a00 <__lshift+0x1c>
 8014a22:	2300      	movs	r3, #0
 8014a24:	f100 0114 	add.w	r1, r0, #20
 8014a28:	f100 0210 	add.w	r2, r0, #16
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	4553      	cmp	r3, sl
 8014a30:	db33      	blt.n	8014a9a <__lshift+0xb6>
 8014a32:	6920      	ldr	r0, [r4, #16]
 8014a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a38:	f104 0314 	add.w	r3, r4, #20
 8014a3c:	f019 091f 	ands.w	r9, r9, #31
 8014a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014a48:	d02b      	beq.n	8014aa2 <__lshift+0xbe>
 8014a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8014a4e:	468a      	mov	sl, r1
 8014a50:	2200      	movs	r2, #0
 8014a52:	6818      	ldr	r0, [r3, #0]
 8014a54:	fa00 f009 	lsl.w	r0, r0, r9
 8014a58:	4310      	orrs	r0, r2
 8014a5a:	f84a 0b04 	str.w	r0, [sl], #4
 8014a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a62:	459c      	cmp	ip, r3
 8014a64:	fa22 f20e 	lsr.w	r2, r2, lr
 8014a68:	d8f3      	bhi.n	8014a52 <__lshift+0x6e>
 8014a6a:	ebac 0304 	sub.w	r3, ip, r4
 8014a6e:	3b15      	subs	r3, #21
 8014a70:	f023 0303 	bic.w	r3, r3, #3
 8014a74:	3304      	adds	r3, #4
 8014a76:	f104 0015 	add.w	r0, r4, #21
 8014a7a:	4584      	cmp	ip, r0
 8014a7c:	bf38      	it	cc
 8014a7e:	2304      	movcc	r3, #4
 8014a80:	50ca      	str	r2, [r1, r3]
 8014a82:	b10a      	cbz	r2, 8014a88 <__lshift+0xa4>
 8014a84:	f108 0602 	add.w	r6, r8, #2
 8014a88:	3e01      	subs	r6, #1
 8014a8a:	4638      	mov	r0, r7
 8014a8c:	612e      	str	r6, [r5, #16]
 8014a8e:	4621      	mov	r1, r4
 8014a90:	f7ff fdda 	bl	8014648 <_Bfree>
 8014a94:	4628      	mov	r0, r5
 8014a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	e7c5      	b.n	8014a2e <__lshift+0x4a>
 8014aa2:	3904      	subs	r1, #4
 8014aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014aac:	459c      	cmp	ip, r3
 8014aae:	d8f9      	bhi.n	8014aa4 <__lshift+0xc0>
 8014ab0:	e7ea      	b.n	8014a88 <__lshift+0xa4>
 8014ab2:	bf00      	nop
 8014ab4:	08015eac 	.word	0x08015eac
 8014ab8:	08015ebd 	.word	0x08015ebd

08014abc <__mcmp>:
 8014abc:	690a      	ldr	r2, [r1, #16]
 8014abe:	4603      	mov	r3, r0
 8014ac0:	6900      	ldr	r0, [r0, #16]
 8014ac2:	1a80      	subs	r0, r0, r2
 8014ac4:	b530      	push	{r4, r5, lr}
 8014ac6:	d10e      	bne.n	8014ae6 <__mcmp+0x2a>
 8014ac8:	3314      	adds	r3, #20
 8014aca:	3114      	adds	r1, #20
 8014acc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014ad0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ad4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014ad8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014adc:	4295      	cmp	r5, r2
 8014ade:	d003      	beq.n	8014ae8 <__mcmp+0x2c>
 8014ae0:	d205      	bcs.n	8014aee <__mcmp+0x32>
 8014ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae6:	bd30      	pop	{r4, r5, pc}
 8014ae8:	42a3      	cmp	r3, r4
 8014aea:	d3f3      	bcc.n	8014ad4 <__mcmp+0x18>
 8014aec:	e7fb      	b.n	8014ae6 <__mcmp+0x2a>
 8014aee:	2001      	movs	r0, #1
 8014af0:	e7f9      	b.n	8014ae6 <__mcmp+0x2a>
	...

08014af4 <__mdiff>:
 8014af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af8:	4689      	mov	r9, r1
 8014afa:	4606      	mov	r6, r0
 8014afc:	4611      	mov	r1, r2
 8014afe:	4648      	mov	r0, r9
 8014b00:	4614      	mov	r4, r2
 8014b02:	f7ff ffdb 	bl	8014abc <__mcmp>
 8014b06:	1e05      	subs	r5, r0, #0
 8014b08:	d112      	bne.n	8014b30 <__mdiff+0x3c>
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f7ff fd5b 	bl	80145c8 <_Balloc>
 8014b12:	4602      	mov	r2, r0
 8014b14:	b928      	cbnz	r0, 8014b22 <__mdiff+0x2e>
 8014b16:	4b3f      	ldr	r3, [pc, #252]	@ (8014c14 <__mdiff+0x120>)
 8014b18:	f240 2137 	movw	r1, #567	@ 0x237
 8014b1c:	483e      	ldr	r0, [pc, #248]	@ (8014c18 <__mdiff+0x124>)
 8014b1e:	f000 fcd9 	bl	80154d4 <__assert_func>
 8014b22:	2301      	movs	r3, #1
 8014b24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b28:	4610      	mov	r0, r2
 8014b2a:	b003      	add	sp, #12
 8014b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b30:	bfbc      	itt	lt
 8014b32:	464b      	movlt	r3, r9
 8014b34:	46a1      	movlt	r9, r4
 8014b36:	4630      	mov	r0, r6
 8014b38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014b3c:	bfba      	itte	lt
 8014b3e:	461c      	movlt	r4, r3
 8014b40:	2501      	movlt	r5, #1
 8014b42:	2500      	movge	r5, #0
 8014b44:	f7ff fd40 	bl	80145c8 <_Balloc>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	b918      	cbnz	r0, 8014b54 <__mdiff+0x60>
 8014b4c:	4b31      	ldr	r3, [pc, #196]	@ (8014c14 <__mdiff+0x120>)
 8014b4e:	f240 2145 	movw	r1, #581	@ 0x245
 8014b52:	e7e3      	b.n	8014b1c <__mdiff+0x28>
 8014b54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014b58:	6926      	ldr	r6, [r4, #16]
 8014b5a:	60c5      	str	r5, [r0, #12]
 8014b5c:	f109 0310 	add.w	r3, r9, #16
 8014b60:	f109 0514 	add.w	r5, r9, #20
 8014b64:	f104 0e14 	add.w	lr, r4, #20
 8014b68:	f100 0b14 	add.w	fp, r0, #20
 8014b6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014b70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014b74:	9301      	str	r3, [sp, #4]
 8014b76:	46d9      	mov	r9, fp
 8014b78:	f04f 0c00 	mov.w	ip, #0
 8014b7c:	9b01      	ldr	r3, [sp, #4]
 8014b7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014b82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	fa1f f38a 	uxth.w	r3, sl
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	b283      	uxth	r3, r0
 8014b90:	1acb      	subs	r3, r1, r3
 8014b92:	0c00      	lsrs	r0, r0, #16
 8014b94:	4463      	add	r3, ip
 8014b96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014b9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014ba4:	4576      	cmp	r6, lr
 8014ba6:	f849 3b04 	str.w	r3, [r9], #4
 8014baa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014bae:	d8e5      	bhi.n	8014b7c <__mdiff+0x88>
 8014bb0:	1b33      	subs	r3, r6, r4
 8014bb2:	3b15      	subs	r3, #21
 8014bb4:	f023 0303 	bic.w	r3, r3, #3
 8014bb8:	3415      	adds	r4, #21
 8014bba:	3304      	adds	r3, #4
 8014bbc:	42a6      	cmp	r6, r4
 8014bbe:	bf38      	it	cc
 8014bc0:	2304      	movcc	r3, #4
 8014bc2:	441d      	add	r5, r3
 8014bc4:	445b      	add	r3, fp
 8014bc6:	461e      	mov	r6, r3
 8014bc8:	462c      	mov	r4, r5
 8014bca:	4544      	cmp	r4, r8
 8014bcc:	d30e      	bcc.n	8014bec <__mdiff+0xf8>
 8014bce:	f108 0103 	add.w	r1, r8, #3
 8014bd2:	1b49      	subs	r1, r1, r5
 8014bd4:	f021 0103 	bic.w	r1, r1, #3
 8014bd8:	3d03      	subs	r5, #3
 8014bda:	45a8      	cmp	r8, r5
 8014bdc:	bf38      	it	cc
 8014bde:	2100      	movcc	r1, #0
 8014be0:	440b      	add	r3, r1
 8014be2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014be6:	b191      	cbz	r1, 8014c0e <__mdiff+0x11a>
 8014be8:	6117      	str	r7, [r2, #16]
 8014bea:	e79d      	b.n	8014b28 <__mdiff+0x34>
 8014bec:	f854 1b04 	ldr.w	r1, [r4], #4
 8014bf0:	46e6      	mov	lr, ip
 8014bf2:	0c08      	lsrs	r0, r1, #16
 8014bf4:	fa1c fc81 	uxtah	ip, ip, r1
 8014bf8:	4471      	add	r1, lr
 8014bfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014bfe:	b289      	uxth	r1, r1
 8014c00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014c04:	f846 1b04 	str.w	r1, [r6], #4
 8014c08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014c0c:	e7dd      	b.n	8014bca <__mdiff+0xd6>
 8014c0e:	3f01      	subs	r7, #1
 8014c10:	e7e7      	b.n	8014be2 <__mdiff+0xee>
 8014c12:	bf00      	nop
 8014c14:	08015eac 	.word	0x08015eac
 8014c18:	08015ebd 	.word	0x08015ebd

08014c1c <__d2b>:
 8014c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c20:	460f      	mov	r7, r1
 8014c22:	2101      	movs	r1, #1
 8014c24:	ec59 8b10 	vmov	r8, r9, d0
 8014c28:	4616      	mov	r6, r2
 8014c2a:	f7ff fccd 	bl	80145c8 <_Balloc>
 8014c2e:	4604      	mov	r4, r0
 8014c30:	b930      	cbnz	r0, 8014c40 <__d2b+0x24>
 8014c32:	4602      	mov	r2, r0
 8014c34:	4b23      	ldr	r3, [pc, #140]	@ (8014cc4 <__d2b+0xa8>)
 8014c36:	4824      	ldr	r0, [pc, #144]	@ (8014cc8 <__d2b+0xac>)
 8014c38:	f240 310f 	movw	r1, #783	@ 0x30f
 8014c3c:	f000 fc4a 	bl	80154d4 <__assert_func>
 8014c40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c48:	b10d      	cbz	r5, 8014c4e <__d2b+0x32>
 8014c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014c4e:	9301      	str	r3, [sp, #4]
 8014c50:	f1b8 0300 	subs.w	r3, r8, #0
 8014c54:	d023      	beq.n	8014c9e <__d2b+0x82>
 8014c56:	4668      	mov	r0, sp
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	f7ff fd7c 	bl	8014756 <__lo0bits>
 8014c5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014c62:	b1d0      	cbz	r0, 8014c9a <__d2b+0x7e>
 8014c64:	f1c0 0320 	rsb	r3, r0, #32
 8014c68:	fa02 f303 	lsl.w	r3, r2, r3
 8014c6c:	430b      	orrs	r3, r1
 8014c6e:	40c2      	lsrs	r2, r0
 8014c70:	6163      	str	r3, [r4, #20]
 8014c72:	9201      	str	r2, [sp, #4]
 8014c74:	9b01      	ldr	r3, [sp, #4]
 8014c76:	61a3      	str	r3, [r4, #24]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	bf0c      	ite	eq
 8014c7c:	2201      	moveq	r2, #1
 8014c7e:	2202      	movne	r2, #2
 8014c80:	6122      	str	r2, [r4, #16]
 8014c82:	b1a5      	cbz	r5, 8014cae <__d2b+0x92>
 8014c84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014c88:	4405      	add	r5, r0
 8014c8a:	603d      	str	r5, [r7, #0]
 8014c8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014c90:	6030      	str	r0, [r6, #0]
 8014c92:	4620      	mov	r0, r4
 8014c94:	b003      	add	sp, #12
 8014c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c9a:	6161      	str	r1, [r4, #20]
 8014c9c:	e7ea      	b.n	8014c74 <__d2b+0x58>
 8014c9e:	a801      	add	r0, sp, #4
 8014ca0:	f7ff fd59 	bl	8014756 <__lo0bits>
 8014ca4:	9b01      	ldr	r3, [sp, #4]
 8014ca6:	6163      	str	r3, [r4, #20]
 8014ca8:	3020      	adds	r0, #32
 8014caa:	2201      	movs	r2, #1
 8014cac:	e7e8      	b.n	8014c80 <__d2b+0x64>
 8014cae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014cb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014cb6:	6038      	str	r0, [r7, #0]
 8014cb8:	6918      	ldr	r0, [r3, #16]
 8014cba:	f7ff fd2d 	bl	8014718 <__hi0bits>
 8014cbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014cc2:	e7e5      	b.n	8014c90 <__d2b+0x74>
 8014cc4:	08015eac 	.word	0x08015eac
 8014cc8:	08015ebd 	.word	0x08015ebd

08014ccc <__ssputs_r>:
 8014ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd0:	688e      	ldr	r6, [r1, #8]
 8014cd2:	461f      	mov	r7, r3
 8014cd4:	42be      	cmp	r6, r7
 8014cd6:	680b      	ldr	r3, [r1, #0]
 8014cd8:	4682      	mov	sl, r0
 8014cda:	460c      	mov	r4, r1
 8014cdc:	4690      	mov	r8, r2
 8014cde:	d82d      	bhi.n	8014d3c <__ssputs_r+0x70>
 8014ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014ce8:	d026      	beq.n	8014d38 <__ssputs_r+0x6c>
 8014cea:	6965      	ldr	r5, [r4, #20]
 8014cec:	6909      	ldr	r1, [r1, #16]
 8014cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014cf2:	eba3 0901 	sub.w	r9, r3, r1
 8014cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014cfa:	1c7b      	adds	r3, r7, #1
 8014cfc:	444b      	add	r3, r9
 8014cfe:	106d      	asrs	r5, r5, #1
 8014d00:	429d      	cmp	r5, r3
 8014d02:	bf38      	it	cc
 8014d04:	461d      	movcc	r5, r3
 8014d06:	0553      	lsls	r3, r2, #21
 8014d08:	d527      	bpl.n	8014d5a <__ssputs_r+0x8e>
 8014d0a:	4629      	mov	r1, r5
 8014d0c:	f7ff fbd0 	bl	80144b0 <_malloc_r>
 8014d10:	4606      	mov	r6, r0
 8014d12:	b360      	cbz	r0, 8014d6e <__ssputs_r+0xa2>
 8014d14:	6921      	ldr	r1, [r4, #16]
 8014d16:	464a      	mov	r2, r9
 8014d18:	f7fe fcfb 	bl	8013712 <memcpy>
 8014d1c:	89a3      	ldrh	r3, [r4, #12]
 8014d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d26:	81a3      	strh	r3, [r4, #12]
 8014d28:	6126      	str	r6, [r4, #16]
 8014d2a:	6165      	str	r5, [r4, #20]
 8014d2c:	444e      	add	r6, r9
 8014d2e:	eba5 0509 	sub.w	r5, r5, r9
 8014d32:	6026      	str	r6, [r4, #0]
 8014d34:	60a5      	str	r5, [r4, #8]
 8014d36:	463e      	mov	r6, r7
 8014d38:	42be      	cmp	r6, r7
 8014d3a:	d900      	bls.n	8014d3e <__ssputs_r+0x72>
 8014d3c:	463e      	mov	r6, r7
 8014d3e:	6820      	ldr	r0, [r4, #0]
 8014d40:	4632      	mov	r2, r6
 8014d42:	4641      	mov	r1, r8
 8014d44:	f000 fb9c 	bl	8015480 <memmove>
 8014d48:	68a3      	ldr	r3, [r4, #8]
 8014d4a:	1b9b      	subs	r3, r3, r6
 8014d4c:	60a3      	str	r3, [r4, #8]
 8014d4e:	6823      	ldr	r3, [r4, #0]
 8014d50:	4433      	add	r3, r6
 8014d52:	6023      	str	r3, [r4, #0]
 8014d54:	2000      	movs	r0, #0
 8014d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d5a:	462a      	mov	r2, r5
 8014d5c:	f000 fbfe 	bl	801555c <_realloc_r>
 8014d60:	4606      	mov	r6, r0
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d1e0      	bne.n	8014d28 <__ssputs_r+0x5c>
 8014d66:	6921      	ldr	r1, [r4, #16]
 8014d68:	4650      	mov	r0, sl
 8014d6a:	f7ff fb2d 	bl	80143c8 <_free_r>
 8014d6e:	230c      	movs	r3, #12
 8014d70:	f8ca 3000 	str.w	r3, [sl]
 8014d74:	89a3      	ldrh	r3, [r4, #12]
 8014d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d7a:	81a3      	strh	r3, [r4, #12]
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d80:	e7e9      	b.n	8014d56 <__ssputs_r+0x8a>
	...

08014d84 <_svfiprintf_r>:
 8014d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d88:	4698      	mov	r8, r3
 8014d8a:	898b      	ldrh	r3, [r1, #12]
 8014d8c:	061b      	lsls	r3, r3, #24
 8014d8e:	b09d      	sub	sp, #116	@ 0x74
 8014d90:	4607      	mov	r7, r0
 8014d92:	460d      	mov	r5, r1
 8014d94:	4614      	mov	r4, r2
 8014d96:	d510      	bpl.n	8014dba <_svfiprintf_r+0x36>
 8014d98:	690b      	ldr	r3, [r1, #16]
 8014d9a:	b973      	cbnz	r3, 8014dba <_svfiprintf_r+0x36>
 8014d9c:	2140      	movs	r1, #64	@ 0x40
 8014d9e:	f7ff fb87 	bl	80144b0 <_malloc_r>
 8014da2:	6028      	str	r0, [r5, #0]
 8014da4:	6128      	str	r0, [r5, #16]
 8014da6:	b930      	cbnz	r0, 8014db6 <_svfiprintf_r+0x32>
 8014da8:	230c      	movs	r3, #12
 8014daa:	603b      	str	r3, [r7, #0]
 8014dac:	f04f 30ff 	mov.w	r0, #4294967295
 8014db0:	b01d      	add	sp, #116	@ 0x74
 8014db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db6:	2340      	movs	r3, #64	@ 0x40
 8014db8:	616b      	str	r3, [r5, #20]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dbe:	2320      	movs	r3, #32
 8014dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dc8:	2330      	movs	r3, #48	@ 0x30
 8014dca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014f68 <_svfiprintf_r+0x1e4>
 8014dce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dd2:	f04f 0901 	mov.w	r9, #1
 8014dd6:	4623      	mov	r3, r4
 8014dd8:	469a      	mov	sl, r3
 8014dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dde:	b10a      	cbz	r2, 8014de4 <_svfiprintf_r+0x60>
 8014de0:	2a25      	cmp	r2, #37	@ 0x25
 8014de2:	d1f9      	bne.n	8014dd8 <_svfiprintf_r+0x54>
 8014de4:	ebba 0b04 	subs.w	fp, sl, r4
 8014de8:	d00b      	beq.n	8014e02 <_svfiprintf_r+0x7e>
 8014dea:	465b      	mov	r3, fp
 8014dec:	4622      	mov	r2, r4
 8014dee:	4629      	mov	r1, r5
 8014df0:	4638      	mov	r0, r7
 8014df2:	f7ff ff6b 	bl	8014ccc <__ssputs_r>
 8014df6:	3001      	adds	r0, #1
 8014df8:	f000 80a7 	beq.w	8014f4a <_svfiprintf_r+0x1c6>
 8014dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014dfe:	445a      	add	r2, fp
 8014e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e02:	f89a 3000 	ldrb.w	r3, [sl]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f000 809f 	beq.w	8014f4a <_svfiprintf_r+0x1c6>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e16:	f10a 0a01 	add.w	sl, sl, #1
 8014e1a:	9304      	str	r3, [sp, #16]
 8014e1c:	9307      	str	r3, [sp, #28]
 8014e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e24:	4654      	mov	r4, sl
 8014e26:	2205      	movs	r2, #5
 8014e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e2c:	484e      	ldr	r0, [pc, #312]	@ (8014f68 <_svfiprintf_r+0x1e4>)
 8014e2e:	f7eb f9ef 	bl	8000210 <memchr>
 8014e32:	9a04      	ldr	r2, [sp, #16]
 8014e34:	b9d8      	cbnz	r0, 8014e6e <_svfiprintf_r+0xea>
 8014e36:	06d0      	lsls	r0, r2, #27
 8014e38:	bf44      	itt	mi
 8014e3a:	2320      	movmi	r3, #32
 8014e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e40:	0711      	lsls	r1, r2, #28
 8014e42:	bf44      	itt	mi
 8014e44:	232b      	movmi	r3, #43	@ 0x2b
 8014e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e50:	d015      	beq.n	8014e7e <_svfiprintf_r+0xfa>
 8014e52:	9a07      	ldr	r2, [sp, #28]
 8014e54:	4654      	mov	r4, sl
 8014e56:	2000      	movs	r0, #0
 8014e58:	f04f 0c0a 	mov.w	ip, #10
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e62:	3b30      	subs	r3, #48	@ 0x30
 8014e64:	2b09      	cmp	r3, #9
 8014e66:	d94b      	bls.n	8014f00 <_svfiprintf_r+0x17c>
 8014e68:	b1b0      	cbz	r0, 8014e98 <_svfiprintf_r+0x114>
 8014e6a:	9207      	str	r2, [sp, #28]
 8014e6c:	e014      	b.n	8014e98 <_svfiprintf_r+0x114>
 8014e6e:	eba0 0308 	sub.w	r3, r0, r8
 8014e72:	fa09 f303 	lsl.w	r3, r9, r3
 8014e76:	4313      	orrs	r3, r2
 8014e78:	9304      	str	r3, [sp, #16]
 8014e7a:	46a2      	mov	sl, r4
 8014e7c:	e7d2      	b.n	8014e24 <_svfiprintf_r+0xa0>
 8014e7e:	9b03      	ldr	r3, [sp, #12]
 8014e80:	1d19      	adds	r1, r3, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	9103      	str	r1, [sp, #12]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	bfbb      	ittet	lt
 8014e8a:	425b      	neglt	r3, r3
 8014e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8014e90:	9307      	strge	r3, [sp, #28]
 8014e92:	9307      	strlt	r3, [sp, #28]
 8014e94:	bfb8      	it	lt
 8014e96:	9204      	strlt	r2, [sp, #16]
 8014e98:	7823      	ldrb	r3, [r4, #0]
 8014e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e9c:	d10a      	bne.n	8014eb4 <_svfiprintf_r+0x130>
 8014e9e:	7863      	ldrb	r3, [r4, #1]
 8014ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ea2:	d132      	bne.n	8014f0a <_svfiprintf_r+0x186>
 8014ea4:	9b03      	ldr	r3, [sp, #12]
 8014ea6:	1d1a      	adds	r2, r3, #4
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	9203      	str	r2, [sp, #12]
 8014eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eb0:	3402      	adds	r4, #2
 8014eb2:	9305      	str	r3, [sp, #20]
 8014eb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014f78 <_svfiprintf_r+0x1f4>
 8014eb8:	7821      	ldrb	r1, [r4, #0]
 8014eba:	2203      	movs	r2, #3
 8014ebc:	4650      	mov	r0, sl
 8014ebe:	f7eb f9a7 	bl	8000210 <memchr>
 8014ec2:	b138      	cbz	r0, 8014ed4 <_svfiprintf_r+0x150>
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	eba0 000a 	sub.w	r0, r0, sl
 8014eca:	2240      	movs	r2, #64	@ 0x40
 8014ecc:	4082      	lsls	r2, r0
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	3401      	adds	r4, #1
 8014ed2:	9304      	str	r3, [sp, #16]
 8014ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed8:	4824      	ldr	r0, [pc, #144]	@ (8014f6c <_svfiprintf_r+0x1e8>)
 8014eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ede:	2206      	movs	r2, #6
 8014ee0:	f7eb f996 	bl	8000210 <memchr>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d036      	beq.n	8014f56 <_svfiprintf_r+0x1d2>
 8014ee8:	4b21      	ldr	r3, [pc, #132]	@ (8014f70 <_svfiprintf_r+0x1ec>)
 8014eea:	bb1b      	cbnz	r3, 8014f34 <_svfiprintf_r+0x1b0>
 8014eec:	9b03      	ldr	r3, [sp, #12]
 8014eee:	3307      	adds	r3, #7
 8014ef0:	f023 0307 	bic.w	r3, r3, #7
 8014ef4:	3308      	adds	r3, #8
 8014ef6:	9303      	str	r3, [sp, #12]
 8014ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014efa:	4433      	add	r3, r6
 8014efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014efe:	e76a      	b.n	8014dd6 <_svfiprintf_r+0x52>
 8014f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f04:	460c      	mov	r4, r1
 8014f06:	2001      	movs	r0, #1
 8014f08:	e7a8      	b.n	8014e5c <_svfiprintf_r+0xd8>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	3401      	adds	r4, #1
 8014f0e:	9305      	str	r3, [sp, #20]
 8014f10:	4619      	mov	r1, r3
 8014f12:	f04f 0c0a 	mov.w	ip, #10
 8014f16:	4620      	mov	r0, r4
 8014f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f1c:	3a30      	subs	r2, #48	@ 0x30
 8014f1e:	2a09      	cmp	r2, #9
 8014f20:	d903      	bls.n	8014f2a <_svfiprintf_r+0x1a6>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d0c6      	beq.n	8014eb4 <_svfiprintf_r+0x130>
 8014f26:	9105      	str	r1, [sp, #20]
 8014f28:	e7c4      	b.n	8014eb4 <_svfiprintf_r+0x130>
 8014f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f2e:	4604      	mov	r4, r0
 8014f30:	2301      	movs	r3, #1
 8014f32:	e7f0      	b.n	8014f16 <_svfiprintf_r+0x192>
 8014f34:	ab03      	add	r3, sp, #12
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	462a      	mov	r2, r5
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <_svfiprintf_r+0x1f0>)
 8014f3c:	a904      	add	r1, sp, #16
 8014f3e:	4638      	mov	r0, r7
 8014f40:	f7fd fe22 	bl	8012b88 <_printf_float>
 8014f44:	1c42      	adds	r2, r0, #1
 8014f46:	4606      	mov	r6, r0
 8014f48:	d1d6      	bne.n	8014ef8 <_svfiprintf_r+0x174>
 8014f4a:	89ab      	ldrh	r3, [r5, #12]
 8014f4c:	065b      	lsls	r3, r3, #25
 8014f4e:	f53f af2d 	bmi.w	8014dac <_svfiprintf_r+0x28>
 8014f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f54:	e72c      	b.n	8014db0 <_svfiprintf_r+0x2c>
 8014f56:	ab03      	add	r3, sp, #12
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	462a      	mov	r2, r5
 8014f5c:	4b05      	ldr	r3, [pc, #20]	@ (8014f74 <_svfiprintf_r+0x1f0>)
 8014f5e:	a904      	add	r1, sp, #16
 8014f60:	4638      	mov	r0, r7
 8014f62:	f7fe f8a9 	bl	80130b8 <_printf_i>
 8014f66:	e7ed      	b.n	8014f44 <_svfiprintf_r+0x1c0>
 8014f68:	08016018 	.word	0x08016018
 8014f6c:	08016022 	.word	0x08016022
 8014f70:	08012b89 	.word	0x08012b89
 8014f74:	08014ccd 	.word	0x08014ccd
 8014f78:	0801601e 	.word	0x0801601e

08014f7c <__sfputc_r>:
 8014f7c:	6893      	ldr	r3, [r2, #8]
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	b410      	push	{r4}
 8014f84:	6093      	str	r3, [r2, #8]
 8014f86:	da08      	bge.n	8014f9a <__sfputc_r+0x1e>
 8014f88:	6994      	ldr	r4, [r2, #24]
 8014f8a:	42a3      	cmp	r3, r4
 8014f8c:	db01      	blt.n	8014f92 <__sfputc_r+0x16>
 8014f8e:	290a      	cmp	r1, #10
 8014f90:	d103      	bne.n	8014f9a <__sfputc_r+0x1e>
 8014f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f96:	f000 b9df 	b.w	8015358 <__swbuf_r>
 8014f9a:	6813      	ldr	r3, [r2, #0]
 8014f9c:	1c58      	adds	r0, r3, #1
 8014f9e:	6010      	str	r0, [r2, #0]
 8014fa0:	7019      	strb	r1, [r3, #0]
 8014fa2:	4608      	mov	r0, r1
 8014fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <__sfputs_r>:
 8014faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fac:	4606      	mov	r6, r0
 8014fae:	460f      	mov	r7, r1
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	18d5      	adds	r5, r2, r3
 8014fb4:	42ac      	cmp	r4, r5
 8014fb6:	d101      	bne.n	8014fbc <__sfputs_r+0x12>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	e007      	b.n	8014fcc <__sfputs_r+0x22>
 8014fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fc0:	463a      	mov	r2, r7
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f7ff ffda 	bl	8014f7c <__sfputc_r>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d1f3      	bne.n	8014fb4 <__sfputs_r+0xa>
 8014fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fd0 <_vfiprintf_r>:
 8014fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	460d      	mov	r5, r1
 8014fd6:	b09d      	sub	sp, #116	@ 0x74
 8014fd8:	4614      	mov	r4, r2
 8014fda:	4698      	mov	r8, r3
 8014fdc:	4606      	mov	r6, r0
 8014fde:	b118      	cbz	r0, 8014fe8 <_vfiprintf_r+0x18>
 8014fe0:	6a03      	ldr	r3, [r0, #32]
 8014fe2:	b90b      	cbnz	r3, 8014fe8 <_vfiprintf_r+0x18>
 8014fe4:	f7fe fa14 	bl	8013410 <__sinit>
 8014fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014fea:	07d9      	lsls	r1, r3, #31
 8014fec:	d405      	bmi.n	8014ffa <_vfiprintf_r+0x2a>
 8014fee:	89ab      	ldrh	r3, [r5, #12]
 8014ff0:	059a      	lsls	r2, r3, #22
 8014ff2:	d402      	bmi.n	8014ffa <_vfiprintf_r+0x2a>
 8014ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ff6:	f7fe fb8a 	bl	801370e <__retarget_lock_acquire_recursive>
 8014ffa:	89ab      	ldrh	r3, [r5, #12]
 8014ffc:	071b      	lsls	r3, r3, #28
 8014ffe:	d501      	bpl.n	8015004 <_vfiprintf_r+0x34>
 8015000:	692b      	ldr	r3, [r5, #16]
 8015002:	b99b      	cbnz	r3, 801502c <_vfiprintf_r+0x5c>
 8015004:	4629      	mov	r1, r5
 8015006:	4630      	mov	r0, r6
 8015008:	f000 f9e4 	bl	80153d4 <__swsetup_r>
 801500c:	b170      	cbz	r0, 801502c <_vfiprintf_r+0x5c>
 801500e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015010:	07dc      	lsls	r4, r3, #31
 8015012:	d504      	bpl.n	801501e <_vfiprintf_r+0x4e>
 8015014:	f04f 30ff 	mov.w	r0, #4294967295
 8015018:	b01d      	add	sp, #116	@ 0x74
 801501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801501e:	89ab      	ldrh	r3, [r5, #12]
 8015020:	0598      	lsls	r0, r3, #22
 8015022:	d4f7      	bmi.n	8015014 <_vfiprintf_r+0x44>
 8015024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015026:	f7fe fb73 	bl	8013710 <__retarget_lock_release_recursive>
 801502a:	e7f3      	b.n	8015014 <_vfiprintf_r+0x44>
 801502c:	2300      	movs	r3, #0
 801502e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015030:	2320      	movs	r3, #32
 8015032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015036:	f8cd 800c 	str.w	r8, [sp, #12]
 801503a:	2330      	movs	r3, #48	@ 0x30
 801503c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80151ec <_vfiprintf_r+0x21c>
 8015040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015044:	f04f 0901 	mov.w	r9, #1
 8015048:	4623      	mov	r3, r4
 801504a:	469a      	mov	sl, r3
 801504c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015050:	b10a      	cbz	r2, 8015056 <_vfiprintf_r+0x86>
 8015052:	2a25      	cmp	r2, #37	@ 0x25
 8015054:	d1f9      	bne.n	801504a <_vfiprintf_r+0x7a>
 8015056:	ebba 0b04 	subs.w	fp, sl, r4
 801505a:	d00b      	beq.n	8015074 <_vfiprintf_r+0xa4>
 801505c:	465b      	mov	r3, fp
 801505e:	4622      	mov	r2, r4
 8015060:	4629      	mov	r1, r5
 8015062:	4630      	mov	r0, r6
 8015064:	f7ff ffa1 	bl	8014faa <__sfputs_r>
 8015068:	3001      	adds	r0, #1
 801506a:	f000 80a7 	beq.w	80151bc <_vfiprintf_r+0x1ec>
 801506e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015070:	445a      	add	r2, fp
 8015072:	9209      	str	r2, [sp, #36]	@ 0x24
 8015074:	f89a 3000 	ldrb.w	r3, [sl]
 8015078:	2b00      	cmp	r3, #0
 801507a:	f000 809f 	beq.w	80151bc <_vfiprintf_r+0x1ec>
 801507e:	2300      	movs	r3, #0
 8015080:	f04f 32ff 	mov.w	r2, #4294967295
 8015084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015088:	f10a 0a01 	add.w	sl, sl, #1
 801508c:	9304      	str	r3, [sp, #16]
 801508e:	9307      	str	r3, [sp, #28]
 8015090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015094:	931a      	str	r3, [sp, #104]	@ 0x68
 8015096:	4654      	mov	r4, sl
 8015098:	2205      	movs	r2, #5
 801509a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801509e:	4853      	ldr	r0, [pc, #332]	@ (80151ec <_vfiprintf_r+0x21c>)
 80150a0:	f7eb f8b6 	bl	8000210 <memchr>
 80150a4:	9a04      	ldr	r2, [sp, #16]
 80150a6:	b9d8      	cbnz	r0, 80150e0 <_vfiprintf_r+0x110>
 80150a8:	06d1      	lsls	r1, r2, #27
 80150aa:	bf44      	itt	mi
 80150ac:	2320      	movmi	r3, #32
 80150ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150b2:	0713      	lsls	r3, r2, #28
 80150b4:	bf44      	itt	mi
 80150b6:	232b      	movmi	r3, #43	@ 0x2b
 80150b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150bc:	f89a 3000 	ldrb.w	r3, [sl]
 80150c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80150c2:	d015      	beq.n	80150f0 <_vfiprintf_r+0x120>
 80150c4:	9a07      	ldr	r2, [sp, #28]
 80150c6:	4654      	mov	r4, sl
 80150c8:	2000      	movs	r0, #0
 80150ca:	f04f 0c0a 	mov.w	ip, #10
 80150ce:	4621      	mov	r1, r4
 80150d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150d4:	3b30      	subs	r3, #48	@ 0x30
 80150d6:	2b09      	cmp	r3, #9
 80150d8:	d94b      	bls.n	8015172 <_vfiprintf_r+0x1a2>
 80150da:	b1b0      	cbz	r0, 801510a <_vfiprintf_r+0x13a>
 80150dc:	9207      	str	r2, [sp, #28]
 80150de:	e014      	b.n	801510a <_vfiprintf_r+0x13a>
 80150e0:	eba0 0308 	sub.w	r3, r0, r8
 80150e4:	fa09 f303 	lsl.w	r3, r9, r3
 80150e8:	4313      	orrs	r3, r2
 80150ea:	9304      	str	r3, [sp, #16]
 80150ec:	46a2      	mov	sl, r4
 80150ee:	e7d2      	b.n	8015096 <_vfiprintf_r+0xc6>
 80150f0:	9b03      	ldr	r3, [sp, #12]
 80150f2:	1d19      	adds	r1, r3, #4
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	9103      	str	r1, [sp, #12]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	bfbb      	ittet	lt
 80150fc:	425b      	neglt	r3, r3
 80150fe:	f042 0202 	orrlt.w	r2, r2, #2
 8015102:	9307      	strge	r3, [sp, #28]
 8015104:	9307      	strlt	r3, [sp, #28]
 8015106:	bfb8      	it	lt
 8015108:	9204      	strlt	r2, [sp, #16]
 801510a:	7823      	ldrb	r3, [r4, #0]
 801510c:	2b2e      	cmp	r3, #46	@ 0x2e
 801510e:	d10a      	bne.n	8015126 <_vfiprintf_r+0x156>
 8015110:	7863      	ldrb	r3, [r4, #1]
 8015112:	2b2a      	cmp	r3, #42	@ 0x2a
 8015114:	d132      	bne.n	801517c <_vfiprintf_r+0x1ac>
 8015116:	9b03      	ldr	r3, [sp, #12]
 8015118:	1d1a      	adds	r2, r3, #4
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	9203      	str	r2, [sp, #12]
 801511e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015122:	3402      	adds	r4, #2
 8015124:	9305      	str	r3, [sp, #20]
 8015126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80151fc <_vfiprintf_r+0x22c>
 801512a:	7821      	ldrb	r1, [r4, #0]
 801512c:	2203      	movs	r2, #3
 801512e:	4650      	mov	r0, sl
 8015130:	f7eb f86e 	bl	8000210 <memchr>
 8015134:	b138      	cbz	r0, 8015146 <_vfiprintf_r+0x176>
 8015136:	9b04      	ldr	r3, [sp, #16]
 8015138:	eba0 000a 	sub.w	r0, r0, sl
 801513c:	2240      	movs	r2, #64	@ 0x40
 801513e:	4082      	lsls	r2, r0
 8015140:	4313      	orrs	r3, r2
 8015142:	3401      	adds	r4, #1
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801514a:	4829      	ldr	r0, [pc, #164]	@ (80151f0 <_vfiprintf_r+0x220>)
 801514c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015150:	2206      	movs	r2, #6
 8015152:	f7eb f85d 	bl	8000210 <memchr>
 8015156:	2800      	cmp	r0, #0
 8015158:	d03f      	beq.n	80151da <_vfiprintf_r+0x20a>
 801515a:	4b26      	ldr	r3, [pc, #152]	@ (80151f4 <_vfiprintf_r+0x224>)
 801515c:	bb1b      	cbnz	r3, 80151a6 <_vfiprintf_r+0x1d6>
 801515e:	9b03      	ldr	r3, [sp, #12]
 8015160:	3307      	adds	r3, #7
 8015162:	f023 0307 	bic.w	r3, r3, #7
 8015166:	3308      	adds	r3, #8
 8015168:	9303      	str	r3, [sp, #12]
 801516a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801516c:	443b      	add	r3, r7
 801516e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015170:	e76a      	b.n	8015048 <_vfiprintf_r+0x78>
 8015172:	fb0c 3202 	mla	r2, ip, r2, r3
 8015176:	460c      	mov	r4, r1
 8015178:	2001      	movs	r0, #1
 801517a:	e7a8      	b.n	80150ce <_vfiprintf_r+0xfe>
 801517c:	2300      	movs	r3, #0
 801517e:	3401      	adds	r4, #1
 8015180:	9305      	str	r3, [sp, #20]
 8015182:	4619      	mov	r1, r3
 8015184:	f04f 0c0a 	mov.w	ip, #10
 8015188:	4620      	mov	r0, r4
 801518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801518e:	3a30      	subs	r2, #48	@ 0x30
 8015190:	2a09      	cmp	r2, #9
 8015192:	d903      	bls.n	801519c <_vfiprintf_r+0x1cc>
 8015194:	2b00      	cmp	r3, #0
 8015196:	d0c6      	beq.n	8015126 <_vfiprintf_r+0x156>
 8015198:	9105      	str	r1, [sp, #20]
 801519a:	e7c4      	b.n	8015126 <_vfiprintf_r+0x156>
 801519c:	fb0c 2101 	mla	r1, ip, r1, r2
 80151a0:	4604      	mov	r4, r0
 80151a2:	2301      	movs	r3, #1
 80151a4:	e7f0      	b.n	8015188 <_vfiprintf_r+0x1b8>
 80151a6:	ab03      	add	r3, sp, #12
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	462a      	mov	r2, r5
 80151ac:	4b12      	ldr	r3, [pc, #72]	@ (80151f8 <_vfiprintf_r+0x228>)
 80151ae:	a904      	add	r1, sp, #16
 80151b0:	4630      	mov	r0, r6
 80151b2:	f7fd fce9 	bl	8012b88 <_printf_float>
 80151b6:	4607      	mov	r7, r0
 80151b8:	1c78      	adds	r0, r7, #1
 80151ba:	d1d6      	bne.n	801516a <_vfiprintf_r+0x19a>
 80151bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151be:	07d9      	lsls	r1, r3, #31
 80151c0:	d405      	bmi.n	80151ce <_vfiprintf_r+0x1fe>
 80151c2:	89ab      	ldrh	r3, [r5, #12]
 80151c4:	059a      	lsls	r2, r3, #22
 80151c6:	d402      	bmi.n	80151ce <_vfiprintf_r+0x1fe>
 80151c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151ca:	f7fe faa1 	bl	8013710 <__retarget_lock_release_recursive>
 80151ce:	89ab      	ldrh	r3, [r5, #12]
 80151d0:	065b      	lsls	r3, r3, #25
 80151d2:	f53f af1f 	bmi.w	8015014 <_vfiprintf_r+0x44>
 80151d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151d8:	e71e      	b.n	8015018 <_vfiprintf_r+0x48>
 80151da:	ab03      	add	r3, sp, #12
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	462a      	mov	r2, r5
 80151e0:	4b05      	ldr	r3, [pc, #20]	@ (80151f8 <_vfiprintf_r+0x228>)
 80151e2:	a904      	add	r1, sp, #16
 80151e4:	4630      	mov	r0, r6
 80151e6:	f7fd ff67 	bl	80130b8 <_printf_i>
 80151ea:	e7e4      	b.n	80151b6 <_vfiprintf_r+0x1e6>
 80151ec:	08016018 	.word	0x08016018
 80151f0:	08016022 	.word	0x08016022
 80151f4:	08012b89 	.word	0x08012b89
 80151f8:	08014fab 	.word	0x08014fab
 80151fc:	0801601e 	.word	0x0801601e

08015200 <__sflush_r>:
 8015200:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015208:	0716      	lsls	r6, r2, #28
 801520a:	4605      	mov	r5, r0
 801520c:	460c      	mov	r4, r1
 801520e:	d454      	bmi.n	80152ba <__sflush_r+0xba>
 8015210:	684b      	ldr	r3, [r1, #4]
 8015212:	2b00      	cmp	r3, #0
 8015214:	dc02      	bgt.n	801521c <__sflush_r+0x1c>
 8015216:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015218:	2b00      	cmp	r3, #0
 801521a:	dd48      	ble.n	80152ae <__sflush_r+0xae>
 801521c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801521e:	2e00      	cmp	r6, #0
 8015220:	d045      	beq.n	80152ae <__sflush_r+0xae>
 8015222:	2300      	movs	r3, #0
 8015224:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015228:	682f      	ldr	r7, [r5, #0]
 801522a:	6a21      	ldr	r1, [r4, #32]
 801522c:	602b      	str	r3, [r5, #0]
 801522e:	d030      	beq.n	8015292 <__sflush_r+0x92>
 8015230:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015232:	89a3      	ldrh	r3, [r4, #12]
 8015234:	0759      	lsls	r1, r3, #29
 8015236:	d505      	bpl.n	8015244 <__sflush_r+0x44>
 8015238:	6863      	ldr	r3, [r4, #4]
 801523a:	1ad2      	subs	r2, r2, r3
 801523c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801523e:	b10b      	cbz	r3, 8015244 <__sflush_r+0x44>
 8015240:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015242:	1ad2      	subs	r2, r2, r3
 8015244:	2300      	movs	r3, #0
 8015246:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015248:	6a21      	ldr	r1, [r4, #32]
 801524a:	4628      	mov	r0, r5
 801524c:	47b0      	blx	r6
 801524e:	1c43      	adds	r3, r0, #1
 8015250:	89a3      	ldrh	r3, [r4, #12]
 8015252:	d106      	bne.n	8015262 <__sflush_r+0x62>
 8015254:	6829      	ldr	r1, [r5, #0]
 8015256:	291d      	cmp	r1, #29
 8015258:	d82b      	bhi.n	80152b2 <__sflush_r+0xb2>
 801525a:	4a2a      	ldr	r2, [pc, #168]	@ (8015304 <__sflush_r+0x104>)
 801525c:	410a      	asrs	r2, r1
 801525e:	07d6      	lsls	r6, r2, #31
 8015260:	d427      	bmi.n	80152b2 <__sflush_r+0xb2>
 8015262:	2200      	movs	r2, #0
 8015264:	6062      	str	r2, [r4, #4]
 8015266:	04d9      	lsls	r1, r3, #19
 8015268:	6922      	ldr	r2, [r4, #16]
 801526a:	6022      	str	r2, [r4, #0]
 801526c:	d504      	bpl.n	8015278 <__sflush_r+0x78>
 801526e:	1c42      	adds	r2, r0, #1
 8015270:	d101      	bne.n	8015276 <__sflush_r+0x76>
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	b903      	cbnz	r3, 8015278 <__sflush_r+0x78>
 8015276:	6560      	str	r0, [r4, #84]	@ 0x54
 8015278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801527a:	602f      	str	r7, [r5, #0]
 801527c:	b1b9      	cbz	r1, 80152ae <__sflush_r+0xae>
 801527e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015282:	4299      	cmp	r1, r3
 8015284:	d002      	beq.n	801528c <__sflush_r+0x8c>
 8015286:	4628      	mov	r0, r5
 8015288:	f7ff f89e 	bl	80143c8 <_free_r>
 801528c:	2300      	movs	r3, #0
 801528e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015290:	e00d      	b.n	80152ae <__sflush_r+0xae>
 8015292:	2301      	movs	r3, #1
 8015294:	4628      	mov	r0, r5
 8015296:	47b0      	blx	r6
 8015298:	4602      	mov	r2, r0
 801529a:	1c50      	adds	r0, r2, #1
 801529c:	d1c9      	bne.n	8015232 <__sflush_r+0x32>
 801529e:	682b      	ldr	r3, [r5, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d0c6      	beq.n	8015232 <__sflush_r+0x32>
 80152a4:	2b1d      	cmp	r3, #29
 80152a6:	d001      	beq.n	80152ac <__sflush_r+0xac>
 80152a8:	2b16      	cmp	r3, #22
 80152aa:	d11e      	bne.n	80152ea <__sflush_r+0xea>
 80152ac:	602f      	str	r7, [r5, #0]
 80152ae:	2000      	movs	r0, #0
 80152b0:	e022      	b.n	80152f8 <__sflush_r+0xf8>
 80152b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152b6:	b21b      	sxth	r3, r3
 80152b8:	e01b      	b.n	80152f2 <__sflush_r+0xf2>
 80152ba:	690f      	ldr	r7, [r1, #16]
 80152bc:	2f00      	cmp	r7, #0
 80152be:	d0f6      	beq.n	80152ae <__sflush_r+0xae>
 80152c0:	0793      	lsls	r3, r2, #30
 80152c2:	680e      	ldr	r6, [r1, #0]
 80152c4:	bf08      	it	eq
 80152c6:	694b      	ldreq	r3, [r1, #20]
 80152c8:	600f      	str	r7, [r1, #0]
 80152ca:	bf18      	it	ne
 80152cc:	2300      	movne	r3, #0
 80152ce:	eba6 0807 	sub.w	r8, r6, r7
 80152d2:	608b      	str	r3, [r1, #8]
 80152d4:	f1b8 0f00 	cmp.w	r8, #0
 80152d8:	dde9      	ble.n	80152ae <__sflush_r+0xae>
 80152da:	6a21      	ldr	r1, [r4, #32]
 80152dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80152de:	4643      	mov	r3, r8
 80152e0:	463a      	mov	r2, r7
 80152e2:	4628      	mov	r0, r5
 80152e4:	47b0      	blx	r6
 80152e6:	2800      	cmp	r0, #0
 80152e8:	dc08      	bgt.n	80152fc <__sflush_r+0xfc>
 80152ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152f2:	81a3      	strh	r3, [r4, #12]
 80152f4:	f04f 30ff 	mov.w	r0, #4294967295
 80152f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fc:	4407      	add	r7, r0
 80152fe:	eba8 0800 	sub.w	r8, r8, r0
 8015302:	e7e7      	b.n	80152d4 <__sflush_r+0xd4>
 8015304:	dfbffffe 	.word	0xdfbffffe

08015308 <_fflush_r>:
 8015308:	b538      	push	{r3, r4, r5, lr}
 801530a:	690b      	ldr	r3, [r1, #16]
 801530c:	4605      	mov	r5, r0
 801530e:	460c      	mov	r4, r1
 8015310:	b913      	cbnz	r3, 8015318 <_fflush_r+0x10>
 8015312:	2500      	movs	r5, #0
 8015314:	4628      	mov	r0, r5
 8015316:	bd38      	pop	{r3, r4, r5, pc}
 8015318:	b118      	cbz	r0, 8015322 <_fflush_r+0x1a>
 801531a:	6a03      	ldr	r3, [r0, #32]
 801531c:	b90b      	cbnz	r3, 8015322 <_fflush_r+0x1a>
 801531e:	f7fe f877 	bl	8013410 <__sinit>
 8015322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d0f3      	beq.n	8015312 <_fflush_r+0xa>
 801532a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801532c:	07d0      	lsls	r0, r2, #31
 801532e:	d404      	bmi.n	801533a <_fflush_r+0x32>
 8015330:	0599      	lsls	r1, r3, #22
 8015332:	d402      	bmi.n	801533a <_fflush_r+0x32>
 8015334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015336:	f7fe f9ea 	bl	801370e <__retarget_lock_acquire_recursive>
 801533a:	4628      	mov	r0, r5
 801533c:	4621      	mov	r1, r4
 801533e:	f7ff ff5f 	bl	8015200 <__sflush_r>
 8015342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015344:	07da      	lsls	r2, r3, #31
 8015346:	4605      	mov	r5, r0
 8015348:	d4e4      	bmi.n	8015314 <_fflush_r+0xc>
 801534a:	89a3      	ldrh	r3, [r4, #12]
 801534c:	059b      	lsls	r3, r3, #22
 801534e:	d4e1      	bmi.n	8015314 <_fflush_r+0xc>
 8015350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015352:	f7fe f9dd 	bl	8013710 <__retarget_lock_release_recursive>
 8015356:	e7dd      	b.n	8015314 <_fflush_r+0xc>

08015358 <__swbuf_r>:
 8015358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801535a:	460e      	mov	r6, r1
 801535c:	4614      	mov	r4, r2
 801535e:	4605      	mov	r5, r0
 8015360:	b118      	cbz	r0, 801536a <__swbuf_r+0x12>
 8015362:	6a03      	ldr	r3, [r0, #32]
 8015364:	b90b      	cbnz	r3, 801536a <__swbuf_r+0x12>
 8015366:	f7fe f853 	bl	8013410 <__sinit>
 801536a:	69a3      	ldr	r3, [r4, #24]
 801536c:	60a3      	str	r3, [r4, #8]
 801536e:	89a3      	ldrh	r3, [r4, #12]
 8015370:	071a      	lsls	r2, r3, #28
 8015372:	d501      	bpl.n	8015378 <__swbuf_r+0x20>
 8015374:	6923      	ldr	r3, [r4, #16]
 8015376:	b943      	cbnz	r3, 801538a <__swbuf_r+0x32>
 8015378:	4621      	mov	r1, r4
 801537a:	4628      	mov	r0, r5
 801537c:	f000 f82a 	bl	80153d4 <__swsetup_r>
 8015380:	b118      	cbz	r0, 801538a <__swbuf_r+0x32>
 8015382:	f04f 37ff 	mov.w	r7, #4294967295
 8015386:	4638      	mov	r0, r7
 8015388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801538a:	6823      	ldr	r3, [r4, #0]
 801538c:	6922      	ldr	r2, [r4, #16]
 801538e:	1a98      	subs	r0, r3, r2
 8015390:	6963      	ldr	r3, [r4, #20]
 8015392:	b2f6      	uxtb	r6, r6
 8015394:	4283      	cmp	r3, r0
 8015396:	4637      	mov	r7, r6
 8015398:	dc05      	bgt.n	80153a6 <__swbuf_r+0x4e>
 801539a:	4621      	mov	r1, r4
 801539c:	4628      	mov	r0, r5
 801539e:	f7ff ffb3 	bl	8015308 <_fflush_r>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d1ed      	bne.n	8015382 <__swbuf_r+0x2a>
 80153a6:	68a3      	ldr	r3, [r4, #8]
 80153a8:	3b01      	subs	r3, #1
 80153aa:	60a3      	str	r3, [r4, #8]
 80153ac:	6823      	ldr	r3, [r4, #0]
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	6022      	str	r2, [r4, #0]
 80153b2:	701e      	strb	r6, [r3, #0]
 80153b4:	6962      	ldr	r2, [r4, #20]
 80153b6:	1c43      	adds	r3, r0, #1
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d004      	beq.n	80153c6 <__swbuf_r+0x6e>
 80153bc:	89a3      	ldrh	r3, [r4, #12]
 80153be:	07db      	lsls	r3, r3, #31
 80153c0:	d5e1      	bpl.n	8015386 <__swbuf_r+0x2e>
 80153c2:	2e0a      	cmp	r6, #10
 80153c4:	d1df      	bne.n	8015386 <__swbuf_r+0x2e>
 80153c6:	4621      	mov	r1, r4
 80153c8:	4628      	mov	r0, r5
 80153ca:	f7ff ff9d 	bl	8015308 <_fflush_r>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d0d9      	beq.n	8015386 <__swbuf_r+0x2e>
 80153d2:	e7d6      	b.n	8015382 <__swbuf_r+0x2a>

080153d4 <__swsetup_r>:
 80153d4:	b538      	push	{r3, r4, r5, lr}
 80153d6:	4b29      	ldr	r3, [pc, #164]	@ (801547c <__swsetup_r+0xa8>)
 80153d8:	4605      	mov	r5, r0
 80153da:	6818      	ldr	r0, [r3, #0]
 80153dc:	460c      	mov	r4, r1
 80153de:	b118      	cbz	r0, 80153e8 <__swsetup_r+0x14>
 80153e0:	6a03      	ldr	r3, [r0, #32]
 80153e2:	b90b      	cbnz	r3, 80153e8 <__swsetup_r+0x14>
 80153e4:	f7fe f814 	bl	8013410 <__sinit>
 80153e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153ec:	0719      	lsls	r1, r3, #28
 80153ee:	d422      	bmi.n	8015436 <__swsetup_r+0x62>
 80153f0:	06da      	lsls	r2, r3, #27
 80153f2:	d407      	bmi.n	8015404 <__swsetup_r+0x30>
 80153f4:	2209      	movs	r2, #9
 80153f6:	602a      	str	r2, [r5, #0]
 80153f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153fc:	81a3      	strh	r3, [r4, #12]
 80153fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015402:	e033      	b.n	801546c <__swsetup_r+0x98>
 8015404:	0758      	lsls	r0, r3, #29
 8015406:	d512      	bpl.n	801542e <__swsetup_r+0x5a>
 8015408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801540a:	b141      	cbz	r1, 801541e <__swsetup_r+0x4a>
 801540c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015410:	4299      	cmp	r1, r3
 8015412:	d002      	beq.n	801541a <__swsetup_r+0x46>
 8015414:	4628      	mov	r0, r5
 8015416:	f7fe ffd7 	bl	80143c8 <_free_r>
 801541a:	2300      	movs	r3, #0
 801541c:	6363      	str	r3, [r4, #52]	@ 0x34
 801541e:	89a3      	ldrh	r3, [r4, #12]
 8015420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015424:	81a3      	strh	r3, [r4, #12]
 8015426:	2300      	movs	r3, #0
 8015428:	6063      	str	r3, [r4, #4]
 801542a:	6923      	ldr	r3, [r4, #16]
 801542c:	6023      	str	r3, [r4, #0]
 801542e:	89a3      	ldrh	r3, [r4, #12]
 8015430:	f043 0308 	orr.w	r3, r3, #8
 8015434:	81a3      	strh	r3, [r4, #12]
 8015436:	6923      	ldr	r3, [r4, #16]
 8015438:	b94b      	cbnz	r3, 801544e <__swsetup_r+0x7a>
 801543a:	89a3      	ldrh	r3, [r4, #12]
 801543c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015444:	d003      	beq.n	801544e <__swsetup_r+0x7a>
 8015446:	4621      	mov	r1, r4
 8015448:	4628      	mov	r0, r5
 801544a:	f000 f8fb 	bl	8015644 <__smakebuf_r>
 801544e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015452:	f013 0201 	ands.w	r2, r3, #1
 8015456:	d00a      	beq.n	801546e <__swsetup_r+0x9a>
 8015458:	2200      	movs	r2, #0
 801545a:	60a2      	str	r2, [r4, #8]
 801545c:	6962      	ldr	r2, [r4, #20]
 801545e:	4252      	negs	r2, r2
 8015460:	61a2      	str	r2, [r4, #24]
 8015462:	6922      	ldr	r2, [r4, #16]
 8015464:	b942      	cbnz	r2, 8015478 <__swsetup_r+0xa4>
 8015466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801546a:	d1c5      	bne.n	80153f8 <__swsetup_r+0x24>
 801546c:	bd38      	pop	{r3, r4, r5, pc}
 801546e:	0799      	lsls	r1, r3, #30
 8015470:	bf58      	it	pl
 8015472:	6962      	ldrpl	r2, [r4, #20]
 8015474:	60a2      	str	r2, [r4, #8]
 8015476:	e7f4      	b.n	8015462 <__swsetup_r+0x8e>
 8015478:	2000      	movs	r0, #0
 801547a:	e7f7      	b.n	801546c <__swsetup_r+0x98>
 801547c:	20000034 	.word	0x20000034

08015480 <memmove>:
 8015480:	4288      	cmp	r0, r1
 8015482:	b510      	push	{r4, lr}
 8015484:	eb01 0402 	add.w	r4, r1, r2
 8015488:	d902      	bls.n	8015490 <memmove+0x10>
 801548a:	4284      	cmp	r4, r0
 801548c:	4623      	mov	r3, r4
 801548e:	d807      	bhi.n	80154a0 <memmove+0x20>
 8015490:	1e43      	subs	r3, r0, #1
 8015492:	42a1      	cmp	r1, r4
 8015494:	d008      	beq.n	80154a8 <memmove+0x28>
 8015496:	f811 2b01 	ldrb.w	r2, [r1], #1
 801549a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801549e:	e7f8      	b.n	8015492 <memmove+0x12>
 80154a0:	4402      	add	r2, r0
 80154a2:	4601      	mov	r1, r0
 80154a4:	428a      	cmp	r2, r1
 80154a6:	d100      	bne.n	80154aa <memmove+0x2a>
 80154a8:	bd10      	pop	{r4, pc}
 80154aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80154b2:	e7f7      	b.n	80154a4 <memmove+0x24>

080154b4 <_sbrk_r>:
 80154b4:	b538      	push	{r3, r4, r5, lr}
 80154b6:	4d06      	ldr	r5, [pc, #24]	@ (80154d0 <_sbrk_r+0x1c>)
 80154b8:	2300      	movs	r3, #0
 80154ba:	4604      	mov	r4, r0
 80154bc:	4608      	mov	r0, r1
 80154be:	602b      	str	r3, [r5, #0]
 80154c0:	f7ee fe9c 	bl	80041fc <_sbrk>
 80154c4:	1c43      	adds	r3, r0, #1
 80154c6:	d102      	bne.n	80154ce <_sbrk_r+0x1a>
 80154c8:	682b      	ldr	r3, [r5, #0]
 80154ca:	b103      	cbz	r3, 80154ce <_sbrk_r+0x1a>
 80154cc:	6023      	str	r3, [r4, #0]
 80154ce:	bd38      	pop	{r3, r4, r5, pc}
 80154d0:	20006a88 	.word	0x20006a88

080154d4 <__assert_func>:
 80154d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80154d6:	4614      	mov	r4, r2
 80154d8:	461a      	mov	r2, r3
 80154da:	4b09      	ldr	r3, [pc, #36]	@ (8015500 <__assert_func+0x2c>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4605      	mov	r5, r0
 80154e0:	68d8      	ldr	r0, [r3, #12]
 80154e2:	b954      	cbnz	r4, 80154fa <__assert_func+0x26>
 80154e4:	4b07      	ldr	r3, [pc, #28]	@ (8015504 <__assert_func+0x30>)
 80154e6:	461c      	mov	r4, r3
 80154e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80154ec:	9100      	str	r1, [sp, #0]
 80154ee:	462b      	mov	r3, r5
 80154f0:	4905      	ldr	r1, [pc, #20]	@ (8015508 <__assert_func+0x34>)
 80154f2:	f000 f86f 	bl	80155d4 <fiprintf>
 80154f6:	f000 f903 	bl	8015700 <abort>
 80154fa:	4b04      	ldr	r3, [pc, #16]	@ (801550c <__assert_func+0x38>)
 80154fc:	e7f4      	b.n	80154e8 <__assert_func+0x14>
 80154fe:	bf00      	nop
 8015500:	20000034 	.word	0x20000034
 8015504:	0801606e 	.word	0x0801606e
 8015508:	08016040 	.word	0x08016040
 801550c:	08016033 	.word	0x08016033

08015510 <_calloc_r>:
 8015510:	b570      	push	{r4, r5, r6, lr}
 8015512:	fba1 5402 	umull	r5, r4, r1, r2
 8015516:	b93c      	cbnz	r4, 8015528 <_calloc_r+0x18>
 8015518:	4629      	mov	r1, r5
 801551a:	f7fe ffc9 	bl	80144b0 <_malloc_r>
 801551e:	4606      	mov	r6, r0
 8015520:	b928      	cbnz	r0, 801552e <_calloc_r+0x1e>
 8015522:	2600      	movs	r6, #0
 8015524:	4630      	mov	r0, r6
 8015526:	bd70      	pop	{r4, r5, r6, pc}
 8015528:	220c      	movs	r2, #12
 801552a:	6002      	str	r2, [r0, #0]
 801552c:	e7f9      	b.n	8015522 <_calloc_r+0x12>
 801552e:	462a      	mov	r2, r5
 8015530:	4621      	mov	r1, r4
 8015532:	f7fe f818 	bl	8013566 <memset>
 8015536:	e7f5      	b.n	8015524 <_calloc_r+0x14>

08015538 <__ascii_mbtowc>:
 8015538:	b082      	sub	sp, #8
 801553a:	b901      	cbnz	r1, 801553e <__ascii_mbtowc+0x6>
 801553c:	a901      	add	r1, sp, #4
 801553e:	b142      	cbz	r2, 8015552 <__ascii_mbtowc+0x1a>
 8015540:	b14b      	cbz	r3, 8015556 <__ascii_mbtowc+0x1e>
 8015542:	7813      	ldrb	r3, [r2, #0]
 8015544:	600b      	str	r3, [r1, #0]
 8015546:	7812      	ldrb	r2, [r2, #0]
 8015548:	1e10      	subs	r0, r2, #0
 801554a:	bf18      	it	ne
 801554c:	2001      	movne	r0, #1
 801554e:	b002      	add	sp, #8
 8015550:	4770      	bx	lr
 8015552:	4610      	mov	r0, r2
 8015554:	e7fb      	b.n	801554e <__ascii_mbtowc+0x16>
 8015556:	f06f 0001 	mvn.w	r0, #1
 801555a:	e7f8      	b.n	801554e <__ascii_mbtowc+0x16>

0801555c <_realloc_r>:
 801555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	4680      	mov	r8, r0
 8015562:	4615      	mov	r5, r2
 8015564:	460c      	mov	r4, r1
 8015566:	b921      	cbnz	r1, 8015572 <_realloc_r+0x16>
 8015568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801556c:	4611      	mov	r1, r2
 801556e:	f7fe bf9f 	b.w	80144b0 <_malloc_r>
 8015572:	b92a      	cbnz	r2, 8015580 <_realloc_r+0x24>
 8015574:	f7fe ff28 	bl	80143c8 <_free_r>
 8015578:	2400      	movs	r4, #0
 801557a:	4620      	mov	r0, r4
 801557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015580:	f000 f8c5 	bl	801570e <_malloc_usable_size_r>
 8015584:	4285      	cmp	r5, r0
 8015586:	4606      	mov	r6, r0
 8015588:	d802      	bhi.n	8015590 <_realloc_r+0x34>
 801558a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801558e:	d8f4      	bhi.n	801557a <_realloc_r+0x1e>
 8015590:	4629      	mov	r1, r5
 8015592:	4640      	mov	r0, r8
 8015594:	f7fe ff8c 	bl	80144b0 <_malloc_r>
 8015598:	4607      	mov	r7, r0
 801559a:	2800      	cmp	r0, #0
 801559c:	d0ec      	beq.n	8015578 <_realloc_r+0x1c>
 801559e:	42b5      	cmp	r5, r6
 80155a0:	462a      	mov	r2, r5
 80155a2:	4621      	mov	r1, r4
 80155a4:	bf28      	it	cs
 80155a6:	4632      	movcs	r2, r6
 80155a8:	f7fe f8b3 	bl	8013712 <memcpy>
 80155ac:	4621      	mov	r1, r4
 80155ae:	4640      	mov	r0, r8
 80155b0:	f7fe ff0a 	bl	80143c8 <_free_r>
 80155b4:	463c      	mov	r4, r7
 80155b6:	e7e0      	b.n	801557a <_realloc_r+0x1e>

080155b8 <__ascii_wctomb>:
 80155b8:	4603      	mov	r3, r0
 80155ba:	4608      	mov	r0, r1
 80155bc:	b141      	cbz	r1, 80155d0 <__ascii_wctomb+0x18>
 80155be:	2aff      	cmp	r2, #255	@ 0xff
 80155c0:	d904      	bls.n	80155cc <__ascii_wctomb+0x14>
 80155c2:	228a      	movs	r2, #138	@ 0x8a
 80155c4:	601a      	str	r2, [r3, #0]
 80155c6:	f04f 30ff 	mov.w	r0, #4294967295
 80155ca:	4770      	bx	lr
 80155cc:	700a      	strb	r2, [r1, #0]
 80155ce:	2001      	movs	r0, #1
 80155d0:	4770      	bx	lr
	...

080155d4 <fiprintf>:
 80155d4:	b40e      	push	{r1, r2, r3}
 80155d6:	b503      	push	{r0, r1, lr}
 80155d8:	4601      	mov	r1, r0
 80155da:	ab03      	add	r3, sp, #12
 80155dc:	4805      	ldr	r0, [pc, #20]	@ (80155f4 <fiprintf+0x20>)
 80155de:	f853 2b04 	ldr.w	r2, [r3], #4
 80155e2:	6800      	ldr	r0, [r0, #0]
 80155e4:	9301      	str	r3, [sp, #4]
 80155e6:	f7ff fcf3 	bl	8014fd0 <_vfiprintf_r>
 80155ea:	b002      	add	sp, #8
 80155ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80155f0:	b003      	add	sp, #12
 80155f2:	4770      	bx	lr
 80155f4:	20000034 	.word	0x20000034

080155f8 <__swhatbuf_r>:
 80155f8:	b570      	push	{r4, r5, r6, lr}
 80155fa:	460c      	mov	r4, r1
 80155fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015600:	2900      	cmp	r1, #0
 8015602:	b096      	sub	sp, #88	@ 0x58
 8015604:	4615      	mov	r5, r2
 8015606:	461e      	mov	r6, r3
 8015608:	da0d      	bge.n	8015626 <__swhatbuf_r+0x2e>
 801560a:	89a3      	ldrh	r3, [r4, #12]
 801560c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015610:	f04f 0100 	mov.w	r1, #0
 8015614:	bf14      	ite	ne
 8015616:	2340      	movne	r3, #64	@ 0x40
 8015618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801561c:	2000      	movs	r0, #0
 801561e:	6031      	str	r1, [r6, #0]
 8015620:	602b      	str	r3, [r5, #0]
 8015622:	b016      	add	sp, #88	@ 0x58
 8015624:	bd70      	pop	{r4, r5, r6, pc}
 8015626:	466a      	mov	r2, sp
 8015628:	f000 f848 	bl	80156bc <_fstat_r>
 801562c:	2800      	cmp	r0, #0
 801562e:	dbec      	blt.n	801560a <__swhatbuf_r+0x12>
 8015630:	9901      	ldr	r1, [sp, #4]
 8015632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801563a:	4259      	negs	r1, r3
 801563c:	4159      	adcs	r1, r3
 801563e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015642:	e7eb      	b.n	801561c <__swhatbuf_r+0x24>

08015644 <__smakebuf_r>:
 8015644:	898b      	ldrh	r3, [r1, #12]
 8015646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015648:	079d      	lsls	r5, r3, #30
 801564a:	4606      	mov	r6, r0
 801564c:	460c      	mov	r4, r1
 801564e:	d507      	bpl.n	8015660 <__smakebuf_r+0x1c>
 8015650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	6123      	str	r3, [r4, #16]
 8015658:	2301      	movs	r3, #1
 801565a:	6163      	str	r3, [r4, #20]
 801565c:	b003      	add	sp, #12
 801565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015660:	ab01      	add	r3, sp, #4
 8015662:	466a      	mov	r2, sp
 8015664:	f7ff ffc8 	bl	80155f8 <__swhatbuf_r>
 8015668:	9f00      	ldr	r7, [sp, #0]
 801566a:	4605      	mov	r5, r0
 801566c:	4639      	mov	r1, r7
 801566e:	4630      	mov	r0, r6
 8015670:	f7fe ff1e 	bl	80144b0 <_malloc_r>
 8015674:	b948      	cbnz	r0, 801568a <__smakebuf_r+0x46>
 8015676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801567a:	059a      	lsls	r2, r3, #22
 801567c:	d4ee      	bmi.n	801565c <__smakebuf_r+0x18>
 801567e:	f023 0303 	bic.w	r3, r3, #3
 8015682:	f043 0302 	orr.w	r3, r3, #2
 8015686:	81a3      	strh	r3, [r4, #12]
 8015688:	e7e2      	b.n	8015650 <__smakebuf_r+0xc>
 801568a:	89a3      	ldrh	r3, [r4, #12]
 801568c:	6020      	str	r0, [r4, #0]
 801568e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015692:	81a3      	strh	r3, [r4, #12]
 8015694:	9b01      	ldr	r3, [sp, #4]
 8015696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801569a:	b15b      	cbz	r3, 80156b4 <__smakebuf_r+0x70>
 801569c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 f81d 	bl	80156e0 <_isatty_r>
 80156a6:	b128      	cbz	r0, 80156b4 <__smakebuf_r+0x70>
 80156a8:	89a3      	ldrh	r3, [r4, #12]
 80156aa:	f023 0303 	bic.w	r3, r3, #3
 80156ae:	f043 0301 	orr.w	r3, r3, #1
 80156b2:	81a3      	strh	r3, [r4, #12]
 80156b4:	89a3      	ldrh	r3, [r4, #12]
 80156b6:	431d      	orrs	r5, r3
 80156b8:	81a5      	strh	r5, [r4, #12]
 80156ba:	e7cf      	b.n	801565c <__smakebuf_r+0x18>

080156bc <_fstat_r>:
 80156bc:	b538      	push	{r3, r4, r5, lr}
 80156be:	4d07      	ldr	r5, [pc, #28]	@ (80156dc <_fstat_r+0x20>)
 80156c0:	2300      	movs	r3, #0
 80156c2:	4604      	mov	r4, r0
 80156c4:	4608      	mov	r0, r1
 80156c6:	4611      	mov	r1, r2
 80156c8:	602b      	str	r3, [r5, #0]
 80156ca:	f7ee fd6f 	bl	80041ac <_fstat>
 80156ce:	1c43      	adds	r3, r0, #1
 80156d0:	d102      	bne.n	80156d8 <_fstat_r+0x1c>
 80156d2:	682b      	ldr	r3, [r5, #0]
 80156d4:	b103      	cbz	r3, 80156d8 <_fstat_r+0x1c>
 80156d6:	6023      	str	r3, [r4, #0]
 80156d8:	bd38      	pop	{r3, r4, r5, pc}
 80156da:	bf00      	nop
 80156dc:	20006a88 	.word	0x20006a88

080156e0 <_isatty_r>:
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4d06      	ldr	r5, [pc, #24]	@ (80156fc <_isatty_r+0x1c>)
 80156e4:	2300      	movs	r3, #0
 80156e6:	4604      	mov	r4, r0
 80156e8:	4608      	mov	r0, r1
 80156ea:	602b      	str	r3, [r5, #0]
 80156ec:	f7ee fd6e 	bl	80041cc <_isatty>
 80156f0:	1c43      	adds	r3, r0, #1
 80156f2:	d102      	bne.n	80156fa <_isatty_r+0x1a>
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	b103      	cbz	r3, 80156fa <_isatty_r+0x1a>
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	bd38      	pop	{r3, r4, r5, pc}
 80156fc:	20006a88 	.word	0x20006a88

08015700 <abort>:
 8015700:	b508      	push	{r3, lr}
 8015702:	2006      	movs	r0, #6
 8015704:	f000 f834 	bl	8015770 <raise>
 8015708:	2001      	movs	r0, #1
 801570a:	f7ee fd1b 	bl	8004144 <_exit>

0801570e <_malloc_usable_size_r>:
 801570e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015712:	1f18      	subs	r0, r3, #4
 8015714:	2b00      	cmp	r3, #0
 8015716:	bfbc      	itt	lt
 8015718:	580b      	ldrlt	r3, [r1, r0]
 801571a:	18c0      	addlt	r0, r0, r3
 801571c:	4770      	bx	lr

0801571e <_raise_r>:
 801571e:	291f      	cmp	r1, #31
 8015720:	b538      	push	{r3, r4, r5, lr}
 8015722:	4605      	mov	r5, r0
 8015724:	460c      	mov	r4, r1
 8015726:	d904      	bls.n	8015732 <_raise_r+0x14>
 8015728:	2316      	movs	r3, #22
 801572a:	6003      	str	r3, [r0, #0]
 801572c:	f04f 30ff 	mov.w	r0, #4294967295
 8015730:	bd38      	pop	{r3, r4, r5, pc}
 8015732:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015734:	b112      	cbz	r2, 801573c <_raise_r+0x1e>
 8015736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801573a:	b94b      	cbnz	r3, 8015750 <_raise_r+0x32>
 801573c:	4628      	mov	r0, r5
 801573e:	f000 f831 	bl	80157a4 <_getpid_r>
 8015742:	4622      	mov	r2, r4
 8015744:	4601      	mov	r1, r0
 8015746:	4628      	mov	r0, r5
 8015748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801574c:	f000 b818 	b.w	8015780 <_kill_r>
 8015750:	2b01      	cmp	r3, #1
 8015752:	d00a      	beq.n	801576a <_raise_r+0x4c>
 8015754:	1c59      	adds	r1, r3, #1
 8015756:	d103      	bne.n	8015760 <_raise_r+0x42>
 8015758:	2316      	movs	r3, #22
 801575a:	6003      	str	r3, [r0, #0]
 801575c:	2001      	movs	r0, #1
 801575e:	e7e7      	b.n	8015730 <_raise_r+0x12>
 8015760:	2100      	movs	r1, #0
 8015762:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015766:	4620      	mov	r0, r4
 8015768:	4798      	blx	r3
 801576a:	2000      	movs	r0, #0
 801576c:	e7e0      	b.n	8015730 <_raise_r+0x12>
	...

08015770 <raise>:
 8015770:	4b02      	ldr	r3, [pc, #8]	@ (801577c <raise+0xc>)
 8015772:	4601      	mov	r1, r0
 8015774:	6818      	ldr	r0, [r3, #0]
 8015776:	f7ff bfd2 	b.w	801571e <_raise_r>
 801577a:	bf00      	nop
 801577c:	20000034 	.word	0x20000034

08015780 <_kill_r>:
 8015780:	b538      	push	{r3, r4, r5, lr}
 8015782:	4d07      	ldr	r5, [pc, #28]	@ (80157a0 <_kill_r+0x20>)
 8015784:	2300      	movs	r3, #0
 8015786:	4604      	mov	r4, r0
 8015788:	4608      	mov	r0, r1
 801578a:	4611      	mov	r1, r2
 801578c:	602b      	str	r3, [r5, #0]
 801578e:	f7ee fcc9 	bl	8004124 <_kill>
 8015792:	1c43      	adds	r3, r0, #1
 8015794:	d102      	bne.n	801579c <_kill_r+0x1c>
 8015796:	682b      	ldr	r3, [r5, #0]
 8015798:	b103      	cbz	r3, 801579c <_kill_r+0x1c>
 801579a:	6023      	str	r3, [r4, #0]
 801579c:	bd38      	pop	{r3, r4, r5, pc}
 801579e:	bf00      	nop
 80157a0:	20006a88 	.word	0x20006a88

080157a4 <_getpid_r>:
 80157a4:	f7ee bcb6 	b.w	8004114 <_getpid>

080157a8 <_init>:
 80157a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157aa:	bf00      	nop
 80157ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157ae:	bc08      	pop	{r3}
 80157b0:	469e      	mov	lr, r3
 80157b2:	4770      	bx	lr

080157b4 <_fini>:
 80157b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157b6:	bf00      	nop
 80157b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157ba:	bc08      	pop	{r3}
 80157bc:	469e      	mov	lr, r3
 80157be:	4770      	bx	lr
