#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
	sensor->i2cHandle=i2cHandle;
	sensor->rawPressure=0;
	for(int i=0; i<7;i++)
	{
		sensor->calibrationResult[i]=0;
	}
	sensor->rxFlag=0;
	sensor->conversionCompleteFlag=0;
}



uint8_t Bar30reset(Bar30* sensor)
{
	uint8_t cmdByte=RESET_CMD;
	uint8_t numBytes=1;
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
	return halStatus==HAL_OK;
}



uint8_t Bar30getCalibration(Bar30* sensor)
{
	uint8_t errorCount=0;
	uint8_t numTxBytes=1;
	uint8_t numRxBytes=2;
	uint8_t rxBuffer[2];
	uint8_t cmdByte=READ_PROM_CMD_1;

	for (int i=0;i<7;i++)
	{
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
	if(halStatus!=HAL_OK)
	{
		errorCount+=1;
	}
	status==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
	if(halStatus!=HAL_OK)
	{
		errorCount+=1;
	}
	sensor->calibrationResult[i]=(uint16_t)((rxBuffer[1] << 8) | rxBuffer[0]);
	cmdByte+=2;
	}
	return errorCount==0;

}



uint8_t Bar30convertData(Bar30* sensor)
{
	uint8_t conversionGood=1;
	halStatus=initiatePressureConversion(sensor);
	if(halStatus!=HAL_OK)
		conversionGood=0;
	HAL_Delay(1);
	halStatus=readPressureData(sensor);
	if(halStatus!=HAL_OK)
		conversionGood=0;
	halStatus=initiatePressureConversion(sensor);
	if(halStatus!=HAL_OK)
		conversionGood=0;
	HAL_Delay(1);
	halStatus=readTemperatureData(sensor);
	if(halStatus!=0)
		conversionGood=0;
	return conversionGood;

}

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
	return status;


}
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
	return halStatus;

}
HAL_StatusTypeDef readPressureData(Bar30* sensor){
	uint8_t cmdByte=READ_RESULT_CMD;
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
	HAL_Delay(1);
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
	sensor->rawPressure|=rxBuffer[2];
	return halStatus;

}

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
	uint8_t readStatus=0;
	uint8_t cmdByte=READ_RESULT_CMD;
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,10);
	HAL_Delay(1);
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, 10);
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
	sensor->rawTemperature|=rxBuffer[2];
	return halStatus;
}


uint8_t Bar30CRCcheck(Bar30* sensor);



int calculateDepth(Bar30* sensor);






