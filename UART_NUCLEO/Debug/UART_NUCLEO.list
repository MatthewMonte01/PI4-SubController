
UART_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d398  08009ed0  08009ed0  0000aed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017268  08017268  000192d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017268  08017268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017270  08017270  000192d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017270  08017270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017274  08017274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08017278  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200002d8  08017550  000192d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08017550  0001967c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001238d  00000000  00000000  00019308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ff  00000000  00000000  0002b695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0002dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdc  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023178  00000000  00000000  0002fad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f83  00000000  00000000  00052c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d80  00000000  00000000  00066bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  0013b994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00140838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d8 	.word	0x200002d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009eb8 	.word	0x08009eb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002dc 	.word	0x200002dc
 800020c:	08009eb8 	.word	0x08009eb8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <map>:
extern DMA_HandleTypeDef hdma_spi1_tx;


extern uint8_t SPI1_TX_completed_flag;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	69b9      	ldr	r1, [r7, #24]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	fb03 f202 	mul.w	r2, r3, r2
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	4413      	add	r3, r2
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2102      	movs	r1, #2
 8000dbc:	486d      	ldr	r0, [pc, #436]	@ (8000f74 <ILI9488_Init+0x1c0>)
 8000dbe:	f004 f81f 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f003 f950 	bl	8004068 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4869      	ldr	r0, [pc, #420]	@ (8000f74 <ILI9488_Init+0x1c0>)
 8000dce:	f004 f817 	bl	8004e00 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000dd2:	4b69      	ldr	r3, [pc, #420]	@ (8000f78 <ILI9488_Init+0x1c4>)
 8000dd4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000dd8:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000dda:	4b68      	ldr	r3, [pc, #416]	@ (8000f7c <ILI9488_Init+0x1c8>)
 8000ddc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000de0:	801a      	strh	r2, [r3, #0]
//	ILI9488WriteReg( 0x11);
//  	HAL_Delay(120);
//	ILI9488WriteReg( 0x29);


	lcd_write_command(0xE0); //P-Gamma
 8000de2:	20e0      	movs	r0, #224	@ 0xe0
 8000de4:	f000 fa94 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x00);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 fb35 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x13);
 8000dee:	2013      	movs	r0, #19
 8000df0:	f000 fb32 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x18);
 8000df4:	2018      	movs	r0, #24
 8000df6:	f000 fb2f 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x04);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f000 fb2c 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0F);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f000 fb29 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x06);
 8000e06:	2006      	movs	r0, #6
 8000e08:	f000 fb26 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x3A);
 8000e0c:	203a      	movs	r0, #58	@ 0x3a
 8000e0e:	f000 fb23 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x56);
 8000e12:	2056      	movs	r0, #86	@ 0x56
 8000e14:	f000 fb20 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x4D);
 8000e18:	204d      	movs	r0, #77	@ 0x4d
 8000e1a:	f000 fb1d 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x03);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 fb1a 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0A);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f000 fb17 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x06);
 8000e2a:	2006      	movs	r0, #6
 8000e2c:	f000 fb14 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x30);
 8000e30:	2030      	movs	r0, #48	@ 0x30
 8000e32:	f000 fb11 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x3E);
 8000e36:	203e      	movs	r0, #62	@ 0x3e
 8000e38:	f000 fb0e 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0F);
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	f000 fb0b 	bl	8001458 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8000e42:	20e1      	movs	r0, #225	@ 0xe1
 8000e44:	f000 fa64 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x00);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 fb05 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x13);
 8000e4e:	2013      	movs	r0, #19
 8000e50:	f000 fb02 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x18);
 8000e54:	2018      	movs	r0, #24
 8000e56:	f000 faff 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x01);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 fafc 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x11);
 8000e60:	2011      	movs	r0, #17
 8000e62:	f000 faf9 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x06);
 8000e66:	2006      	movs	r0, #6
 8000e68:	f000 faf6 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x38);
 8000e6c:	2038      	movs	r0, #56	@ 0x38
 8000e6e:	f000 faf3 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x34);
 8000e72:	2034      	movs	r0, #52	@ 0x34
 8000e74:	f000 faf0 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x4D);
 8000e78:	204d      	movs	r0, #77	@ 0x4d
 8000e7a:	f000 faed 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x06);
 8000e7e:	2006      	movs	r0, #6
 8000e80:	f000 faea 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0D);
 8000e84:	200d      	movs	r0, #13
 8000e86:	f000 fae7 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0B);
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f000 fae4 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x31);
 8000e90:	2031      	movs	r0, #49	@ 0x31
 8000e92:	f000 fae1 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x37);
 8000e96:	2037      	movs	r0, #55	@ 0x37
 8000e98:	f000 fade 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x0F);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f000 fadb 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xC0);
 8000ea2:	20c0      	movs	r0, #192	@ 0xc0
 8000ea4:	f000 fa34 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x18);
 8000ea8:	2018      	movs	r0, #24
 8000eaa:	f000 fad5 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x16);
 8000eae:	2016      	movs	r0, #22
 8000eb0:	f000 fad2 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xC1);
 8000eb4:	20c1      	movs	r0, #193	@ 0xc1
 8000eb6:	f000 fa2b 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x45);
 8000eba:	2045      	movs	r0, #69	@ 0x45
 8000ebc:	f000 facc 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 8000ec0:	20c5      	movs	r0, #197	@ 0xc5
 8000ec2:	f000 fa25 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 fac6 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x63);
 8000ecc:	2063      	movs	r0, #99	@ 0x63
 8000ece:	f000 fac3 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x01);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fac0 	bl	8001458 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 8000ed8:	2036      	movs	r0, #54	@ 0x36
 8000eda:	f000 fa19 	bl	8001310 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
//	if(LANDSCAPE)
		lcd_write_data(0xF8);
 8000ede:	20f8      	movs	r0, #248	@ 0xf8
 8000ee0:	f000 faba 	bl	8001458 <lcd_write_data>
//	else
//		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8000ee4:	203a      	movs	r0, #58	@ 0x3a
 8000ee6:	f000 fa13 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x66); //16-bit serial mode
 8000eea:	2066      	movs	r0, #102	@ 0x66
 8000eec:	f000 fab4 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 8000ef0:	20b0      	movs	r0, #176	@ 0xb0
 8000ef2:	f000 fa0d 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 8000ef6:	2080      	movs	r0, #128	@ 0x80
 8000ef8:	f000 faae 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 8000efc:	20b1      	movs	r0, #177	@ 0xb1
 8000efe:	f000 fa07 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x00); //
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 faa8 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x10);
 8000f08:	2010      	movs	r0, #16
 8000f0a:	f000 faa5 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xB4);
 8000f0e:	20b4      	movs	r0, #180	@ 0xb4
 8000f10:	f000 f9fe 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x02);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 fa9f 	bl	8001458 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 8000f1a:	20b6      	movs	r0, #182	@ 0xb6
 8000f1c:	f000 f9f8 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x02);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f000 fa99 	bl	8001458 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 8000f26:	20e9      	movs	r0, #233	@ 0xe9
 8000f28:	f000 f9f2 	bl	8001310 <lcd_write_command>
	lcd_write_data(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 fa93 	bl	8001458 <lcd_write_data>
	lcd_write_command(0xF7);
 8000f32:	20f7      	movs	r0, #247	@ 0xf7
 8000f34:	f000 f9ec 	bl	8001310 <lcd_write_command>
	lcd_write_data(0xA9);
 8000f38:	20a9      	movs	r0, #169	@ 0xa9
 8000f3a:	f000 fa8d 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x51);
 8000f3e:	2051      	movs	r0, #81	@ 0x51
 8000f40:	f000 fa8a 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x2C);
 8000f44:	202c      	movs	r0, #44	@ 0x2c
 8000f46:	f000 fa87 	bl	8001458 <lcd_write_data>
	lcd_write_data(0x82);
 8000f4a:	2082      	movs	r0, #130	@ 0x82
 8000f4c:	f000 fa84 	bl	8001458 <lcd_write_data>
	lcd_write_command(0x11);
 8000f50:	2011      	movs	r0, #17
 8000f52:	f000 f9dd 	bl	8001310 <lcd_write_command>
	HAL_Delay(120);
 8000f56:	2078      	movs	r0, #120	@ 0x78
 8000f58:	f003 f886 	bl	8004068 <HAL_Delay>
	lcd_write_command(0x21);
 8000f5c:	2021      	movs	r0, #33	@ 0x21
 8000f5e:	f000 f9d7 	bl	8001310 <lcd_write_command>


	HAL_Delay(120);
 8000f62:	2078      	movs	r0, #120	@ 0x78
 8000f64:	f003 f880 	bl	8004068 <HAL_Delay>
	lcd_write_command(0x29);
 8000f68:	2029      	movs	r0, #41	@ 0x29
 8000f6a:	f000 f9d1 	bl	8001310 <lcd_write_command>


}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020400 	.word	0x40020400
 8000f78:	200002f4 	.word	0x200002f4
 8000f7c:	200002f6 	.word	0x200002f6

08000f80 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	4603      	mov	r3, r0
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000f9e:	202a      	movs	r0, #42	@ 0x2a
 8000fa0:	f000 f994 	bl	80012cc <writecommand>
	writedata(x0 >> 8);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fa31 	bl	8001414 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fa2c 	bl	8001414 <writedata>
	writedata(x1 >> 8);
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fa25 	bl	8001414 <writedata>
	writedata(x1 & 0xFF);     // XEND
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fa20 	bl	8001414 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000fd4:	202b      	movs	r0, #43	@ 0x2b
 8000fd6:	f000 f979 	bl	80012cc <writecommand>
	writedata(y0 >> 8);
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fa16 	bl	8001414 <writedata>
	writedata(y0 & 0xff);     // YSTART
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fa11 	bl	8001414 <writedata>
	writedata(y1 >> 8);
 8000ff2:	883b      	ldrh	r3, [r7, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fa0a 	bl	8001414 <writedata>
	writedata(y1 & 0xff);     // YEND
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fa05 	bl	8001414 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 800100a:	202c      	movs	r0, #44	@ 0x2c
 800100c:	f000 f95e 	bl	80012cc <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <setAddrWindow+0xac>)
 8001016:	f003 fef3 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2104      	movs	r1, #4
 800101e:	4803      	ldr	r0, [pc, #12]	@ (800102c <setAddrWindow+0xac>)
 8001020:	f003 feee 	bl	8004e00 <HAL_GPIO_WritePin>
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	40020400 	.word	0x40020400

08001030 <drawFastHLine>:
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) || (y >= _height))
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <drawFastHLine+0xb8>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001058:	429a      	cmp	r2, r3
 800105a:	da40      	bge.n	80010de <drawFastHLine+0xae>
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <drawFastHLine+0xbc>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	da39      	bge.n	80010de <drawFastHLine+0xae>
		return;
	if ((x + w - 1) >= _width)
 800106a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800106e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001072:	4413      	add	r3, r2
 8001074:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <drawFastHLine+0xb8>)
 8001076:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107a:	4293      	cmp	r3, r2
 800107c:	dd07      	ble.n	800108e <drawFastHLine+0x5e>
		w = _width - x;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <drawFastHLine+0xb8>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	b29a      	uxth	r2, r3
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + w - 1, y);
 800108e:	88f8      	ldrh	r0, [r7, #6]
 8001090:	88b9      	ldrh	r1, [r7, #4]
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	f7ff ff6e 	bl	8000f80 <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2104      	movs	r1, #4
 80010a8:	4811      	ldr	r0, [pc, #68]	@ (80010f0 <drawFastHLine+0xc0>)
 80010aa:	f003 fea9 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2101      	movs	r1, #1
 80010b2:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <drawFastHLine+0xc0>)
 80010b4:	f003 fea4 	bl	8004e00 <HAL_GPIO_WritePin>
	while (w--)
 80010b8:	e003      	b.n	80010c2 <drawFastHLine+0x92>
	{
		write16BitColor(color);
 80010ba:	883b      	ldrh	r3, [r7, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f949 	bl	8001354 <write16BitColor>
	while (w--)
 80010c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	3a01      	subs	r2, #1
 80010ca:	b292      	uxth	r2, r2
 80010cc:	807a      	strh	r2, [r7, #2]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f3      	bne.n	80010ba <drawFastHLine+0x8a>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <drawFastHLine+0xc0>)
 80010d8:	f003 fe92 	bl	8004e00 <HAL_GPIO_WritePin>
 80010dc:	e000      	b.n	80010e0 <drawFastHLine+0xb0>
		return;
 80010de:	bf00      	nop
}
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002f4 	.word	0x200002f4
 80010ec:	200002f6 	.word	0x200002f6
 80010f0:	40020400 	.word	0x40020400

080010f4 <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	4603      	mov	r3, r0
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8001112:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <fillRect+0x11c>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800111c:	429a      	cmp	r2, r3
 800111e:	da73      	bge.n	8001208 <fillRect+0x114>
 8001120:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <fillRect+0x120>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	da6c      	bge.n	8001208 <fillRect+0x114>
		return;
	if ((x + w - 1) >= _width)
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001136:	4413      	add	r3, r2
 8001138:	4a35      	ldr	r2, [pc, #212]	@ (8001210 <fillRect+0x11c>)
 800113a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800113e:	4293      	cmp	r3, r2
 8001140:	dd07      	ble.n	8001152 <fillRect+0x5e>
		w = _width - x;
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <fillRect+0x11c>)
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001148:	b29a      	uxth	r2, r3
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 8001152:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001156:	f9b7 3000 	ldrsh.w	r3, [r7]
 800115a:	4413      	add	r3, r2
 800115c:	4a2d      	ldr	r2, [pc, #180]	@ (8001214 <fillRect+0x120>)
 800115e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001162:	4293      	cmp	r3, r2
 8001164:	dd07      	ble.n	8001176 <fillRect+0x82>
		h = _height - y;
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <fillRect+0x120>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	88b9      	ldrh	r1, [r7, #4]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29c      	uxth	r4, r3
 8001186:	88ba      	ldrh	r2, [r7, #4]
 8001188:	883b      	ldrh	r3, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	4622      	mov	r2, r4
 8001194:	f7ff fef4 	bl	8000f80 <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	481e      	ldr	r0, [pc, #120]	@ (8001218 <fillRect+0x124>)
 800119e:	f003 fe2f 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	481c      	ldr	r0, [pc, #112]	@ (8001218 <fillRect+0x124>)
 80011a8:	f003 fe2a 	bl	8004e00 <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 80011ac:	883b      	ldrh	r3, [r7, #0]
 80011ae:	80bb      	strh	r3, [r7, #4]
 80011b0:	e016      	b.n	80011e0 <fillRect+0xec>
		for (x = w; x > 0; x--) {
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	e009      	b.n	80011cc <fillRect+0xd8>

			write16BitColor(color);
 80011b8:	8b3b      	ldrh	r3, [r7, #24]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f8ca 	bl	8001354 <write16BitColor>
		for (x = w; x > 0; x--) {
 80011c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dcf1      	bgt.n	80011b8 <fillRect+0xc4>
	for (y = h; y > 0; y--) {
 80011d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3b01      	subs	r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	80bb      	strh	r3, [r7, #4]
 80011e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dce4      	bgt.n	80011b2 <fillRect+0xbe>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2101      	movs	r1, #1
 80011ec:	480a      	ldr	r0, [pc, #40]	@ (8001218 <fillRect+0x124>)
 80011ee:	f003 fe07 	bl	8004e00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2104      	movs	r1, #4
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <fillRect+0x124>)
 80011f8:	f003 fe02 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <fillRect+0x124>)
 8001202:	f003 fdfd 	bl	8004e00 <HAL_GPIO_WritePin>
 8001206:	e000      	b.n	800120a <fillRect+0x116>
		return;
 8001208:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	200002f4 	.word	0x200002f4
 8001214:	200002f6 	.word	0x200002f6
 8001218:	40020400 	.word	0x40020400

0800121c <setRotation>:
void setRotation(uint8_t r)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 8001226:	2036      	movs	r0, #54	@ 0x36
 8001228:	f000 f850 	bl	80012cc <writecommand>
	rotation = r % 4; // can't be higher than 3
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <setRotation+0xa4>)
 8001236:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 8001238:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <setRotation+0xa4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d83b      	bhi.n	80012b8 <setRotation+0x9c>
 8001240:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <setRotation+0x2c>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001259 	.word	0x08001259
 800124c:	08001271 	.word	0x08001271
 8001250:	08001289 	.word	0x08001289
 8001254:	080012a1 	.word	0x080012a1
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8001258:	2048      	movs	r0, #72	@ 0x48
 800125a:	f000 f8db 	bl	8001414 <writedata>
		_width = ILI9488_TFTWIDTH;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <setRotation+0xa8>)
 8001260:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001264:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <setRotation+0xac>)
 8001268:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800126c:	801a      	strh	r2, [r3, #0]
		break;
 800126e:	e023      	b.n	80012b8 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8001270:	2028      	movs	r0, #40	@ 0x28
 8001272:	f000 f8cf 	bl	8001414 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <setRotation+0xa8>)
 8001278:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800127c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <setRotation+0xac>)
 8001280:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001284:	801a      	strh	r2, [r3, #0]
		break;
 8001286:	e017      	b.n	80012b8 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001288:	2088      	movs	r0, #136	@ 0x88
 800128a:	f000 f8c3 	bl	8001414 <writedata>
		_width = ILI9488_TFTWIDTH;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <setRotation+0xa8>)
 8001290:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001294:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <setRotation+0xac>)
 8001298:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800129c:	801a      	strh	r2, [r3, #0]
		break;
 800129e:	e00b      	b.n	80012b8 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80012a0:	20e8      	movs	r0, #232	@ 0xe8
 80012a2:	f000 f8b7 	bl	8001414 <writedata>
		_width = ILI9488_TFTHEIGHT;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <setRotation+0xa8>)
 80012a8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012ac:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <setRotation+0xac>)
 80012b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012b4:	801a      	strh	r2, [r3, #0]
		break;
 80012b6:	bf00      	nop
	}

}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002f8 	.word	0x200002f8
 80012c4:	200002f4 	.word	0x200002f4
 80012c8:	200002f6 	.word	0x200002f6

080012cc <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <writecommand+0x3c>)
 80012dc:	f003 fd90 	bl	8004e00 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2101      	movs	r1, #1
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <writecommand+0x3c>)
 80012e6:	f003 fd8b 	bl	8004e00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80012ea:	1df9      	adds	r1, r7, #7
 80012ec:	2301      	movs	r3, #1
 80012ee:	2201      	movs	r2, #1
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <writecommand+0x40>)
 80012f2:	f004 fc10 	bl	8005b16 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <writecommand+0x3c>)
 80012fc:	f003 fd80 	bl	8004e00 <HAL_GPIO_WritePin>

}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020400 	.word	0x40020400
 800130c:	200002fc 	.word	0x200002fc

08001310 <lcd_write_command>:


void lcd_write_command(uint8_t c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2104      	movs	r1, #4
 800131e:	480b      	ldr	r0, [pc, #44]	@ (800134c <lcd_write_command+0x3c>)
 8001320:	f003 fd6e 	bl	8004e00 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <lcd_write_command+0x3c>)
 800132a:	f003 fd69 	bl	8004e00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 800132e:	1df9      	adds	r1, r7, #7
 8001330:	2301      	movs	r3, #1
 8001332:	2201      	movs	r2, #1
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <lcd_write_command+0x40>)
 8001336:	f004 fbee 	bl	8005b16 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2101      	movs	r1, #1
 800133e:	4803      	ldr	r0, [pc, #12]	@ (800134c <lcd_write_command+0x3c>)
 8001340:	f003 fd5e 	bl	8004e00 <HAL_GPIO_WritePin>

}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020400 	.word	0x40020400
 8001350:	200002fc 	.word	0x200002fc

08001354 <write16BitColor>:


void write16BitColor(uint16_t color)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	0adb      	lsrs	r3, r3, #11
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	115b      	asrs	r3, r3, #5
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001372:	b2db      	uxtb	r3, r3
 8001374:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	b2db      	uxtb	r3, r3
 8001380:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <write16BitColor+0xb4>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	441a      	add	r2, r3
 8001394:	1112      	asrs	r2, r2, #4
 8001396:	17db      	asrs	r3, r3, #31
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	4a18      	ldr	r2, [pc, #96]	@ (800140c <write16BitColor+0xb8>)
 80013aa:	fb82 1203 	smull	r1, r2, r2, r3
 80013ae:	441a      	add	r2, r3
 80013b0:	1152      	asrs	r2, r2, #5
 80013b2:	17db      	asrs	r3, r3, #31
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <write16BitColor+0xb4>)
 80013c6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ca:	441a      	add	r2, r3
 80013cc:	1112      	asrs	r2, r2, #4
 80013ce:	17db      	asrs	r3, r3, #31
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 80013d6:	f107 010f 	add.w	r1, r7, #15
 80013da:	2301      	movs	r3, #1
 80013dc:	2201      	movs	r2, #1
 80013de:	480c      	ldr	r0, [pc, #48]	@ (8001410 <write16BitColor+0xbc>)
 80013e0:	f004 fb99 	bl	8005b16 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 80013e4:	f107 010e 	add.w	r1, r7, #14
 80013e8:	2301      	movs	r3, #1
 80013ea:	2201      	movs	r2, #1
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <write16BitColor+0xbc>)
 80013ee:	f004 fb92 	bl	8005b16 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 80013f2:	f107 010d 	add.w	r1, r7, #13
 80013f6:	2301      	movs	r3, #1
 80013f8:	2201      	movs	r2, #1
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <write16BitColor+0xbc>)
 80013fc:	f004 fb8b 	bl	8005b16 <HAL_SPI_Transmit>


}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	84210843 	.word	0x84210843
 800140c:	82082083 	.word	0x82082083
 8001410:	200002fc 	.word	0x200002fc

08001414 <writedata>:
void writedata(uint8_t d)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2104      	movs	r1, #4
 8001422:	480b      	ldr	r0, [pc, #44]	@ (8001450 <writedata+0x3c>)
 8001424:	f003 fcec 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <writedata+0x3c>)
 800142e:	f003 fce7 	bl	8004e00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8001432:	1df9      	adds	r1, r7, #7
 8001434:	2301      	movs	r3, #1
 8001436:	2201      	movs	r2, #1
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <writedata+0x40>)
 800143a:	f004 fb6c 	bl	8005b16 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2101      	movs	r1, #1
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <writedata+0x3c>)
 8001444:	f003 fcdc 	bl	8004e00 <HAL_GPIO_WritePin>

}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020400 	.word	0x40020400
 8001454:	200002fc 	.word	0x200002fc

08001458 <lcd_write_data>:

void lcd_write_data(uint8_t d)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2104      	movs	r1, #4
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <lcd_write_data+0x3c>)
 8001468:	f003 fcca 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2101      	movs	r1, #1
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <lcd_write_data+0x3c>)
 8001472:	f003 fcc5 	bl	8004e00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8001476:	1df9      	adds	r1, r7, #7
 8001478:	2301      	movs	r3, #1
 800147a:	2201      	movs	r2, #1
 800147c:	4806      	ldr	r0, [pc, #24]	@ (8001498 <lcd_write_data+0x40>)
 800147e:	f004 fb4a 	bl	8005b16 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2101      	movs	r1, #1
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <lcd_write_data+0x3c>)
 8001488:	f003 fcba 	bl	8004e00 <HAL_GPIO_WritePin>

}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020400 	.word	0x40020400
 8001498:	200002fc 	.word	0x200002fc

0800149c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800149c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014a0:	b08d      	sub	sp, #52	@ 0x34
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	6039      	str	r1, [r7, #0]
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	466b      	mov	r3, sp
 80014ac:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d802      	bhi.n	80014c4 <ILI9341_Draw_Colour_Burst+0x28>
	{
		Buffer_Size = Size;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014c2:	e002      	b.n	80014ca <ILI9341_Draw_Colour_Burst+0x2e>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80014c4:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2104      	movs	r1, #4
 80014ce:	4868      	ldr	r0, [pc, #416]	@ (8001670 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80014d0:	f003 fc96 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2101      	movs	r1, #1
 80014d8:	4865      	ldr	r0, [pc, #404]	@ (8001670 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80014da:	f003 fc91 	bl	8004e00 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	0adb      	lsrs	r3, r3, #11
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	115b      	asrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  uint8_t b = Colour & 0x001F;
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	  r = (r * 255) / 31;
 8001502:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001506:	4613      	mov	r3, r2
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	4a59      	ldr	r2, [pc, #356]	@ (8001674 <ILI9341_Draw_Colour_Burst+0x1d8>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	441a      	add	r2, r3
 8001514:	1112      	asrs	r2, r2, #4
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  g = (g * 255) / 63;
 800151e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001522:	4613      	mov	r3, r2
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800152a:	fb82 1203 	smull	r1, r2, r2, r3
 800152e:	441a      	add	r2, r3
 8001530:	1152      	asrs	r2, r2, #5
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  b = (b * 255) / 31;
 800153a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800153e:	4613      	mov	r3, r2
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001546:	fb82 1203 	smull	r1, r2, r2, r3
 800154a:	441a      	add	r2, r3
 800154c:	1112      	asrs	r2, r2, #4
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	unsigned char burst_buffer[Buffer_Size];
 8001556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001558:	460b      	mov	r3, r1
 800155a:	3b01      	subs	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	2300      	movs	r3, #0
 8001560:	4688      	mov	r8, r1
 8001562:	4699      	mov	r9, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001570:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001574:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001578:	2300      	movs	r3, #0
 800157a:	460c      	mov	r4, r1
 800157c:	461d      	mov	r5, r3
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	00eb      	lsls	r3, r5, #3
 8001588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800158c:	00e2      	lsls	r2, r4, #3
 800158e:	1dcb      	adds	r3, r1, #7
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	ebad 0d03 	sub.w	sp, sp, r3
 8001598:	466b      	mov	r3, sp
 800159a:	3300      	adds	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015a2:	e014      	b.n	80015ce <ILI9341_Draw_Colour_Burst+0x132>
	{
		burst_buffer[j] = r;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a8:	4413      	add	r3, r2
 80015aa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015ae:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 80015b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b2:	3301      	adds	r3, #1
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80015ba:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 80015bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80015c6:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 80015c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ca:	3303      	adds	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3e6      	bcc.n	80015a4 <ILI9341_Draw_Colour_Burst+0x108>
	}

	uint32_t Sending_Size = Size * 3;
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80015f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015f4:	fb01 f202 	mul.w	r2, r1, r2
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d018      	beq.n	8001634 <ILI9341_Draw_Colour_Burst+0x198>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
 8001606:	e011      	b.n	800162c <ILI9341_Draw_Colour_Burst+0x190>
		{
			SPI1_TX_completed_flag = 0;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <ILI9341_Draw_Colour_Burst+0x1e0>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 800160e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001610:	b29b      	uxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	69b9      	ldr	r1, [r7, #24]
 8001616:	481a      	ldr	r0, [pc, #104]	@ (8001680 <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001618:	f004 fd70 	bl	80060fc <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 800161c:	bf00      	nop
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0fb      	beq.n	800161e <ILI9341_Draw_Colour_Burst+0x182>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
 800162c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3e9      	bcc.n	8001608 <ILI9341_Draw_Colour_Burst+0x16c>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <ILI9341_Draw_Colour_Burst+0x1bc>
	{
		SPI1_TX_completed_flag = 0;
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <ILI9341_Draw_Colour_Burst+0x1e0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	b29b      	uxth	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <ILI9341_Draw_Colour_Burst+0x1e4>)
 800164a:	f004 fd57 	bl	80060fc <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 800164e:	bf00      	nop
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0fb      	beq.n	8001650 <ILI9341_Draw_Colour_Burst+0x1b4>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <ILI9341_Draw_Colour_Burst+0x1d4>)
 800165e:	f003 fbcf 	bl	8004e00 <HAL_GPIO_WritePin>
 8001662:	46b5      	mov	sp, r6
}
 8001664:	bf00      	nop
 8001666:	3734      	adds	r7, #52	@ 0x34
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800166e:	bf00      	nop
 8001670:	40020400 	.word	0x40020400
 8001674:	84210843 	.word	0x84210843
 8001678:	82082083 	.word	0x82082083
 800167c:	20000000 	.word	0x20000000
 8001680:	200002fc 	.word	0x200002fc

08001684 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800168e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001692:	f240 12df 	movw	r2, #479	@ 0x1df
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fc71 	bl	8000f80 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fef9 	bl	800149c <ILI9341_Draw_Colour_Burst>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b08b      	sub	sp, #44	@ 0x2c
 80016b6:	af02      	add	r7, sp, #8
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4603      	mov	r3, r0
 80016be:	81fb      	strh	r3, [r7, #14]
 80016c0:	460b      	mov	r3, r1
 80016c2:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	777b      	strb	r3, [r7, #29]
 80016d4:	2300      	movs	r3, #0
 80016d6:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80016dc:	2300      	movs	r3, #0
 80016de:	763b      	strb	r3, [r7, #24]
 80016e0:	e09b      	b.n	800181a <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	767b      	strb	r3, [r7, #25]
 80016e6:	e056      	b.n	8001796 <LCD_Char+0xe4>
		{
			if (bit == 0)
 80016e8:	7f3b      	ldrb	r3, [r7, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80016ee:	8bfb      	ldrh	r3, [r7, #30]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	83fa      	strh	r2, [r7, #30]
 80016f4:	461a      	mov	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8001702:	7f7a      	ldrb	r2, [r7, #29]
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	4013      	ands	r3, r2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <LCD_Char+0x64>
 800170e:	8b7b      	ldrh	r3, [r7, #26]
 8001710:	3301      	adds	r3, #1
 8001712:	837b      	strh	r3, [r7, #26]
 8001714:	e039      	b.n	800178a <LCD_Char+0xd8>
			else if (set_pixels > 0)
 8001716:	8b7b      	ldrh	r3, [r7, #26]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d036      	beq.n	800178a <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001722:	461a      	mov	r2, r3
 8001724:	7e7b      	ldrb	r3, [r7, #25]
 8001726:	441a      	add	r2, r3
 8001728:	8b7b      	ldrh	r3, [r7, #26]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001732:	b29b      	uxth	r3, r3
 8001734:	fb12 f303 	smulbb	r3, r2, r3
 8001738:	b29a      	uxth	r2, r3
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	b218      	sxth	r0, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001748:	461a      	mov	r2, r3
 800174a:	7e3b      	ldrb	r3, [r7, #24]
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001754:	b29b      	uxth	r3, r3
 8001756:	fb12 f303 	smulbb	r3, r2, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	b219      	sxth	r1, r3
 8001764:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001768:	b29b      	uxth	r3, r3
 800176a:	8b7a      	ldrh	r2, [r7, #26]
 800176c:	fb12 f303 	smulbb	r3, r2, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21a      	sxth	r2, r3
 8001774:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001778:	b21c      	sxth	r4, r3
 800177a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177c:	b29b      	uxth	r3, r3
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4623      	mov	r3, r4
 8001782:	f7ff fcb7 	bl	80010f4 <fillRect>
				set_pixels = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800178a:	7f3b      	ldrb	r3, [r7, #28]
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001790:	7e7b      	ldrb	r3, [r7, #25]
 8001792:	3301      	adds	r3, #1
 8001794:	767b      	strb	r3, [r7, #25]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	7e7a      	ldrb	r2, [r7, #25]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3a3      	bcc.n	80016e8 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80017a0:	8b7b      	ldrh	r3, [r7, #26]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d036      	beq.n	8001814 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80017ac:	461a      	mov	r2, r3
 80017ae:	7e7b      	ldrb	r3, [r7, #25]
 80017b0:	441a      	add	r2, r3
 80017b2:	8b7b      	ldrh	r3, [r7, #26]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017bc:	b29b      	uxth	r3, r3
 80017be:	fb12 f303 	smulbb	r3, r2, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	4413      	add	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b218      	sxth	r0, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017d2:	461a      	mov	r2, r3
 80017d4:	7e3b      	ldrb	r3, [r7, #24]
 80017d6:	4413      	add	r3, r2
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017de:	b29b      	uxth	r3, r3
 80017e0:	fb12 f303 	smulbb	r3, r2, r3
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b219      	sxth	r1, r3
 80017ee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8b7a      	ldrh	r2, [r7, #26]
 80017f6:	fb12 f303 	smulbb	r3, r2, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001802:	b21c      	sxth	r4, r3
 8001804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001806:	b29b      	uxth	r3, r3
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4623      	mov	r3, r4
 800180c:	f7ff fc72 	bl	80010f4 <fillRect>
			set_pixels = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001814:	7e3b      	ldrb	r3, [r7, #24]
 8001816:	3301      	adds	r3, #1
 8001818:	763b      	strb	r3, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	78db      	ldrb	r3, [r3, #3]
 800181e:	7e3a      	ldrb	r2, [r7, #24]
 8001820:	429a      	cmp	r2, r3
 8001822:	f4ff af5e 	bcc.w	80016e2 <LCD_Char+0x30>
		}
	}
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}

08001830 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08f      	sub	sp, #60	@ 0x3c
 8001834:	af02      	add	r7, sp, #8
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4603      	mov	r3, r0
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	460b      	mov	r3, r1
 8001840:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	220c      	movs	r2, #12
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fe60 	bl	8008518 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001858:	2300      	movs	r3, #0
 800185a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800185c:	e056      	b.n	800190c <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 800185e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if (c == '\n')
 800186a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800186e:	2b0a      	cmp	r3, #10
 8001870:	d10f      	bne.n	8001892 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8001876:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800187a:	461a      	mov	r2, r3
 800187c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001880:	b29b      	uxth	r3, r3
 8001882:	fb12 f303 	smulbb	r3, r2, r3
 8001886:	b29a      	uxth	r2, r3
 8001888:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001890:	e039      	b.n	8001906 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001896:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800189a:	429a      	cmp	r2, r3
 800189c:	d333      	bcc.n	8001906 <LCD_Font+0xd6>
 800189e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018a2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d82d      	bhi.n	8001906 <LCD_Font+0xd6>
 80018aa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80018ae:	2b0d      	cmp	r3, #13
 80018b0:	d029      	beq.n	8001906 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80018b8:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80018bc:	1a5b      	subs	r3, r3, r1
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	18d1      	adds	r1, r2, r3
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2208      	movs	r2, #8
 80018c8:	4618      	mov	r0, r3
 80018ca:	f006 fe25 	bl	8008518 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80018ce:	f107 041c 	add.w	r4, r7, #28
 80018d2:	f107 0214 	add.w	r2, r7, #20
 80018d6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80018da:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80018de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7ff fee2 	bl	80016b2 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80018ee:	7e3b      	ldrb	r3, [r7, #24]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	fb12 f303 	smulbb	r3, r2, r3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001900:	4413      	add	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001906:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001908:	3301      	adds	r3, #1
 800190a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800190c:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f7fe fc7e 	bl	8000210 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	429c      	cmp	r4, r3
 8001918:	d3a1      	bcc.n	800185e <LCD_Font+0x2e>
		}
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3734      	adds	r7, #52	@ 0x34
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <fillTriangle>:




void fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08f      	sub	sp, #60	@ 0x3c
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	883b      	ldrh	r3, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90b      	bls.n	8001962 <fillTriangle+0x3e>
    swap(y0, y1); swap(x0, x1);
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800194e:	883b      	ldrh	r3, [r7, #0]
 8001950:	80bb      	strh	r3, [r7, #4]
 8001952:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001954:	803b      	strh	r3, [r7, #0]
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001960:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8001962:	883a      	ldrh	r2, [r7, #0]
 8001964:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001968:	429a      	cmp	r2, r3
 800196a:	d90f      	bls.n	800198c <fillTriangle+0x68>
    swap(y2, y1); swap(x2, x1);
 800196c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001970:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001972:	883b      	ldrh	r3, [r7, #0]
 8001974:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001978:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800197a:	803b      	strh	r3, [r7, #0]
 800197c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001980:	843b      	strh	r3, [r7, #32]
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001988:	8c3b      	ldrh	r3, [r7, #32]
 800198a:	807b      	strh	r3, [r7, #2]
  }
  if (y0 > y1) {
 800198c:	88ba      	ldrh	r2, [r7, #4]
 800198e:	883b      	ldrh	r3, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d90b      	bls.n	80019ac <fillTriangle+0x88>
    swap(y0, y1); swap(x0, x1);
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	83fb      	strh	r3, [r7, #30]
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	80bb      	strh	r3, [r7, #4]
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	803b      	strh	r3, [r7, #0]
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	83bb      	strh	r3, [r7, #28]
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	80fb      	strh	r3, [r7, #6]
 80019a8:	8bbb      	ldrh	r3, [r7, #28]
 80019aa:	807b      	strh	r3, [r7, #2]
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80019ac:	88ba      	ldrh	r2, [r7, #4]
 80019ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d135      	bne.n	8001a22 <fillTriangle+0xfe>
    a = b = x0;
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80019ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if(x1 < a)      a = x1;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80019c4:	429a      	cmp	r2, r3
 80019c6:	da02      	bge.n	80019ce <fillTriangle+0xaa>
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80019cc:	e006      	b.n	80019dc <fillTriangle+0xb8>
    else if(x1 > b) b = x1;
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dd01      	ble.n	80019dc <fillTriangle+0xb8>
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if(x2 < a)      a = x2;
 80019dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80019e4:	429a      	cmp	r2, r3
 80019e6:	da03      	bge.n	80019f0 <fillTriangle+0xcc>
 80019e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80019ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80019ee:	e008      	b.n	8001a02 <fillTriangle+0xde>
    else if(x2 > b) b = x2;
 80019f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019f4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dd02      	ble.n	8001a02 <fillTriangle+0xde>
 80019fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001a00:	86bb      	strh	r3, [r7, #52]	@ 0x34
    drawFastHLine(a, y0, b-a+1, color);
 8001a02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a18:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001a1c:	f7ff fb08 	bl	8001030 <drawFastHLine>
    return;
 8001a20:	e0d1      	b.n	8001bc6 <fillTriangle+0x2a2>
  }

  int16_t
    dx01 = x1 - x0,
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001a2c:	883a      	ldrh	r2, [r7, #0]
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8001a36:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8001a42:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001a4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001a5a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001a5e:	883b      	ldrh	r3, [r7, #0]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	823b      	strh	r3, [r7, #16]
  int32_t
    sa   = 0,
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
 8001a6e:	883a      	ldrh	r2, [r7, #0]
 8001a70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d102      	bne.n	8001a7e <fillTriangle+0x15a>
 8001a78:	883b      	ldrh	r3, [r7, #0]
 8001a7a:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001a7c:	e003      	b.n	8001a86 <fillTriangle+0x162>
  else         last = y1-1; // Skip it
 8001a7e:	883b      	ldrh	r3, [r7, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	863b      	strh	r3, [r7, #48]	@ 0x30

  for(y=y0; y<=last; y++) {
 8001a86:	88bb      	ldrh	r3, [r7, #4]
 8001a88:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001a8a:	e03e      	b.n	8001b0a <fillTriangle+0x1e6>
    a   = x0 + sa / dy01;
 8001a8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    b   = x0 + sb / dy02;
 8001aa0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    sa += dx01;
 8001ab4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aba:	4413      	add	r3, r2
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb += dx02;
 8001abe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac4:	4413      	add	r3, r2
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
 8001ac8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001acc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dd05      	ble.n	8001ae0 <fillTriangle+0x1bc>
 8001ad4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ad6:	81bb      	strh	r3, [r7, #12]
 8001ad8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ada:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001adc:	89bb      	ldrh	r3, [r7, #12]
 8001ade:	86bb      	strh	r3, [r7, #52]	@ 0x34
    drawFastHLine(a, y, b-a+1, color);
 8001ae0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ae2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001af2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001af6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001afa:	f7ff fa99 	bl	8001030 <drawFastHLine>
  for(y=y0; y<=last; y++) {
 8001afe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001b0a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001b0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001b12:	429a      	cmp	r2, r3
 8001b14:	ddba      	ble.n	8001a8c <fillTriangle+0x168>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b1a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001b1e:	883a      	ldrh	r2, [r7, #0]
 8001b20:	1a8a      	subs	r2, r1, r2
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sb = dx02 * (y - y0);
 8001b28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b2c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	1a8a      	subs	r2, r1, r2
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  for(; y<=y2; y++) {
 8001b3a:	e03e      	b.n	8001bba <fillTriangle+0x296>
    a   = x1 + sa / dy12;
 8001b3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    b   = x0 + sb / dy02;
 8001b50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	86bb      	strh	r3, [r7, #52]	@ 0x34
    sa += dx12;
 8001b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b6a:	4413      	add	r3, r2
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb += dx02;
 8001b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b74:	4413      	add	r3, r2
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
 8001b78:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001b7c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dd05      	ble.n	8001b90 <fillTriangle+0x26c>
 8001b84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b86:	81fb      	strh	r3, [r7, #14]
 8001b88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    drawFastHLine(a, y, b-a+1, color);
 8001b90:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ba2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001ba6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001baa:	f7ff fa41 	bl	8001030 <drawFastHLine>
  for(; y<=y2; y++) {
 8001bae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001bba:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001bbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	ddba      	ble.n	8001b3c <fillTriangle+0x218>
  }
}
 8001bc6:	373c      	adds	r7, #60	@ 0x3c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <rainbow>:


uint16_t rainbow(uint16_t value)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to 127 = red

	uint16_t red = 0; // Red is the top 5 bits of a 16 bit colour value
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	81fb      	strh	r3, [r7, #14]
	uint16_t green = 0;// Green is the middle 6 bits
 8001bda:	2300      	movs	r3, #0
 8001bdc:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = 0; // Blue is the bottom 5 bits
 8001bde:	2300      	movs	r3, #0
 8001be0:	817b      	strh	r3, [r7, #10]

	uint16_t quadrant = value / 32;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	813b      	strh	r3, [r7, #8]

  if (quadrant == 0) {
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <rainbow+0x36>
    blue = 31;
 8001bee:	231f      	movs	r3, #31
 8001bf0:	817b      	strh	r3, [r7, #10]
    green = 2 * (value % 32);
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 1) {
 8001c02:	893b      	ldrh	r3, [r7, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d109      	bne.n	8001c1c <rainbow+0x50>
    blue = 31 - (value % 32);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001c14:	233f      	movs	r3, #63	@ 0x3f
 8001c16:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 2) {
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d107      	bne.n	8001c32 <rainbow+0x66>
    blue = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001c26:	233f      	movs	r3, #63	@ 0x3f
 8001c28:	81bb      	strh	r3, [r7, #12]
    red = value % 32;
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 3) {
 8001c32:	893b      	ldrh	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d10c      	bne.n	8001c52 <rainbow+0x86>
    blue = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	817b      	strh	r3, [r7, #10]
    green = 63 - 2 * (value % 32);
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001c4c:	81bb      	strh	r3, [r7, #12]
    red = 31;
 8001c4e:	231f      	movs	r3, #31
 8001c50:	81fb      	strh	r3, [r7, #14]
  }
  return (red << 11) + (green << 5) + blue;
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	02db      	lsls	r3, r3, #11
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	89bb      	ldrh	r3, [r7, #12]
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	0000      	movs	r0, r0
	...

08001c78 <ringMeter1>:
//




int ringMeter1(int value, int vmin, int vmax, int x, int y, int r,int w,uint16_t bcolor, uint16_t scheme){
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b099      	sub	sp, #100	@ 0x64
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c8a:	4413      	add	r3, r2
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c92:	4413      	add	r3, r2
 8001c94:	66bb      	str	r3, [r7, #104]	@ 0x68
//  int w = r / 8;    // Width of outer ring is 1/4 of radius
  int angle = 150;  // Half the sweep angle of meter (300 degrees)
 8001c96:	2396      	movs	r3, #150	@ 0x96
 8001c98:	647b      	str	r3, [r7, #68]	@ 0x44
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 8001c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9c:	425a      	negs	r2, r3
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff f867 	bl	8000d7c <map>
 8001cae:	6438      	str	r0, [r7, #64]	@ 0x40
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	87bb      	strh	r3, [r7, #60]	@ 0x3c

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cba:	425b      	negs	r3, r3
 8001cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cbe:	e1da      	b.n	8002076 <ringMeter1+0x3fe>
    // Choose colour from scheme
    int colour = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    switch (scheme) {
 8001cc4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001cc8:	2b07      	cmp	r3, #7
 8001cca:	d858      	bhi.n	8001d7e <ringMeter1+0x106>
 8001ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <ringMeter1+0x5c>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001cf5 	.word	0x08001cf5
 8001cd8:	08001cfd 	.word	0x08001cfd
 8001cdc:	08001d05 	.word	0x08001d05
 8001ce0:	08001d0b 	.word	0x08001d0b
 8001ce4:	08001d2d 	.word	0x08001d2d
 8001ce8:	08001d4f 	.word	0x08001d4f
 8001cec:	08001d71 	.word	0x08001d71
 8001cf0:	08001d77 	.word	0x08001d77
      case 0: colour = RED; break; // Fixed colour
 8001cf4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cfa:	e043      	b.n	8001d84 <ringMeter1+0x10c>
      case 1: colour = GREEN; break; // Fixed colour
 8001cfc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d02:	e03f      	b.n	8001d84 <ringMeter1+0x10c>
      case 2: colour = BLUE; break; // Fixed colour
 8001d04:	231f      	movs	r3, #31
 8001d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d08:	e03c      	b.n	8001d84 <ringMeter1+0x10c>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 8001d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0c:	4259      	negs	r1, r3
 8001d0e:	237f      	movs	r3, #127	@ 0x7f
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d18:	f7ff f830 	bl	8000d7c <map>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff53 	bl	8001bcc <rainbow>
 8001d26:	4603      	mov	r3, r0
 8001d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d2a:	e02b      	b.n	8001d84 <ringMeter1+0x10c>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	4259      	negs	r1, r3
 8001d30:	237f      	movs	r3, #127	@ 0x7f
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	233f      	movs	r3, #63	@ 0x3f
 8001d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d38:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d3a:	f7ff f81f 	bl	8000d7c <map>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff42 	bl	8001bcc <rainbow>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d4c:	e01a      	b.n	8001d84 <ringMeter1+0x10c>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 8001d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d50:	4259      	negs	r1, r3
 8001d52:	233f      	movs	r3, #63	@ 0x3f
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	237f      	movs	r3, #127	@ 0x7f
 8001d58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d5a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d5c:	f7ff f80e 	bl	8000d7c <map>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff31 	bl	8001bcc <rainbow>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d6e:	e009      	b.n	8001d84 <ringMeter1+0x10c>
      case 6: colour = BLACK; break;
 8001d70:	2300      	movs	r3, #0
 8001d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d74:	e006      	b.n	8001d84 <ringMeter1+0x10c>
      case 7: colour = PINK; break;
 8001d76:	f64f 030e 	movw	r3, #63502	@ 0xf80e
 8001d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d7c:	e002      	b.n	8001d84 <ringMeter1+0x10c>
      default: colour = BLUE; break; // Fixed colour
 8001d7e:	231f      	movs	r3, #31
 8001d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d82:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 8001d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d86:	3b5a      	subs	r3, #90	@ 0x5a
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fd15 	bl	80007b8 <__aeabi_i2d>
 8001d8e:	a3c0      	add	r3, pc, #768	@ (adr r3, 8002090 <ringMeter1+0x418>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fa94 	bl	80002c0 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	ec43 2b17 	vmov	d7, r2, r3
 8001da0:	eeb0 0a47 	vmov.f32	s0, s14
 8001da4:	eef0 0a67 	vmov.f32	s1, s15
 8001da8:	f007 f802 	bl	8008db0 <cos>
 8001dac:	ec53 2b10 	vmov	r2, r3, d0
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe fe1a 	bl	80009ec <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	63bb      	str	r3, [r7, #56]	@ 0x38
    float sy = sin((i - 90) * 0.0174532925);
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dbe:	3b5a      	subs	r3, #90	@ 0x5a
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fcf9 	bl	80007b8 <__aeabi_i2d>
 8001dc6:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002090 <ringMeter1+0x418>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fa78 	bl	80002c0 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	ec43 2b17 	vmov	d7, r2, r3
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	eef0 0a67 	vmov.f32	s1, s15
 8001de0:	f007 f83a 	bl	8008e58 <sin>
 8001de4:	ec53 2b10 	vmov	r2, r3, d0
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fdfe 	bl	80009ec <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t x0 = sx * (r - w) + x;
 8001df4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e02:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001e06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1c:	ee17 3a90 	vmov	r3, s15
 8001e20:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t y0 = sy * (r - w) + y;
 8001e22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e30:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4a:	ee17 3a90 	vmov	r3, s15
 8001e4e:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t x1 = sx * r + x;
 8001e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e74:	ee17 3a90 	vmov	r3, s15
 8001e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t y1 = sy * r + y;
 8001e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e84:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9e:	ee17 3a90 	vmov	r3, s15
 8001ea2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 8001ea4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b5a      	subs	r3, #90	@ 0x5a
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fc83 	bl	80007b8 <__aeabi_i2d>
 8001eb2:	a377      	add	r3, pc, #476	@ (adr r3, 8002090 <ringMeter1+0x418>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fa02 	bl	80002c0 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	ec43 2b17 	vmov	d7, r2, r3
 8001ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec8:	eef0 0a67 	vmov.f32	s1, s15
 8001ecc:	f006 ff70 	bl	8008db0 <cos>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fd88 	bl	80009ec <__aeabi_d2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 8001ee0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b5a      	subs	r3, #90	@ 0x5a
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fc65 	bl	80007b8 <__aeabi_i2d>
 8001eee:	a368      	add	r3, pc, #416	@ (adr r3, 8002090 <ringMeter1+0x418>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe f9e4 	bl	80002c0 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	ec43 2b17 	vmov	d7, r2, r3
 8001f00:	eeb0 0a47 	vmov.f32	s0, s14
 8001f04:	eef0 0a67 	vmov.f32	s1, s15
 8001f08:	f006 ffa6 	bl	8008e58 <sin>
 8001f0c:	ec53 2b10 	vmov	r2, r3, d0
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fd6a 	bl	80009ec <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    int x2 = sx2 * (r - w) + x;
 8001f1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f44:	ee17 3a90 	vmov	r3, s15
 8001f48:	623b      	str	r3, [r7, #32]
    int y2 = sy2 * (r - w) + y;
 8001f4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	61fb      	str	r3, [r7, #28]
    int x3 = sx2 * r + x;
 8001f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9c:	ee17 3a90 	vmov	r3, s15
 8001fa0:	61bb      	str	r3, [r7, #24]
    int y3 = sy2 * r + y;
 8001fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	617b      	str	r3, [r7, #20]

    if (i < v) { // Fill in coloured segments with 2 triangles
 8001fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	da26      	bge.n	8002022 <ringMeter1+0x3aa>
//      my_lcd.Set_Draw_color(colour);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);
//      text_colour = colour; // Save the last colour drawn

    	fillTriangle(x0, y0, x1, y1, x2, y2, colour);
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001fde:	b289      	uxth	r1, r1
 8001fe0:	8dbe      	ldrh	r6, [r7, #44]	@ 0x2c
 8001fe2:	8dfd      	ldrh	r5, [r7, #46]	@ 0x2e
 8001fe4:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8001fe6:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8001fe8:	9102      	str	r1, [sp, #8]
 8001fea:	9201      	str	r2, [sp, #4]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4633      	mov	r3, r6
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	f7ff fc96 	bl	8001924 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, colour);
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	b29d      	uxth	r5, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	b29e      	uxth	r6, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	b29b      	uxth	r3, r3
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	b292      	uxth	r2, r2
 8002008:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800200a:	b289      	uxth	r1, r1
 800200c:	8dbc      	ldrh	r4, [r7, #44]	@ 0x2c
 800200e:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 8002010:	9102      	str	r1, [sp, #8]
 8002012:	9201      	str	r2, [sp, #4]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4633      	mov	r3, r6
 8002018:	462a      	mov	r2, r5
 800201a:	4621      	mov	r1, r4
 800201c:	f7ff fc82 	bl	8001924 <fillTriangle>
 8002020:	e025      	b.n	800206e <ringMeter1+0x3f6>
    {
//      my_lcd.Set_Draw_color(GRAY);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);

    	fillTriangle(x0, y0, x1, y1, x2, y2, bcolor);
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	b29b      	uxth	r3, r3
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	b292      	uxth	r2, r2
 800202a:	8dbe      	ldrh	r6, [r7, #44]	@ 0x2c
 800202c:	8dfd      	ldrh	r5, [r7, #46]	@ 0x2e
 800202e:	8e3c      	ldrh	r4, [r7, #48]	@ 0x30
 8002030:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8002032:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 8002036:	9102      	str	r1, [sp, #8]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4633      	mov	r3, r6
 800203e:	462a      	mov	r2, r5
 8002040:	4621      	mov	r1, r4
 8002042:	f7ff fc6f 	bl	8001924 <fillTriangle>
    	fillTriangle(x1, y1, x2, y2, x3, y3, bcolor);
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	b29d      	uxth	r5, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	b29e      	uxth	r6, r3
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	b29b      	uxth	r3, r3
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	b292      	uxth	r2, r2
 8002056:	8dbc      	ldrh	r4, [r7, #44]	@ 0x2c
 8002058:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800205a:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 800205e:	9102      	str	r1, [sp, #8]
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4633      	mov	r3, r6
 8002066:	462a      	mov	r2, r5
 8002068:	4621      	mov	r1, r4
 800206a:	f7ff fc5b 	bl	8001924 <fillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 800206e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002072:	4413      	add	r3, r2
 8002074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	429a      	cmp	r2, r3
 800207c:	f6ff ae20 	blt.w	8001cc0 <ringMeter1+0x48>
    }


  }

  return x + r;
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002084:	4413      	add	r3, r2
}
 8002086:	4618      	mov	r0, r3
 8002088:	3754      	adds	r7, #84	@ 0x54
 800208a:	46bd      	mov	sp, r7
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208e:	bf00      	nop
 8002090:	a1fae711 	.word	0xa1fae711
 8002094:	3f91df46 	.word	0x3f91df46

08002098 <LCD_Circle_Helper>:




void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af02      	add	r7, sp, #8
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	80fb      	strh	r3, [r7, #6]
 80020aa:	4603      	mov	r3, r0
 80020ac:	80bb      	strh	r3, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	807b      	strh	r3, [r7, #2]
 80020b2:	4613      	mov	r3, r2
 80020b4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	f1c3 0301 	rsb	r3, r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	461a      	mov	r2, r3
 80020c8:	03d2      	lsls	r2, r2, #15
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80020da:	e0e5      	b.n	80022a8 <LCD_Circle_Helper+0x210>
		if (f >= 0) {
 80020dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0e      	blt.n	8002102 <LCD_Circle_Helper+0x6a>
			y--;
 80020e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80020f0:	8a7b      	ldrh	r3, [r7, #18]
 80020f2:	3302      	adds	r3, #2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80020f8:	8afa      	ldrh	r2, [r7, #22]
 80020fa:	8a7b      	ldrh	r3, [r7, #18]
 80020fc:	4413      	add	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002102:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002106:	b29b      	uxth	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800210e:	8abb      	ldrh	r3, [r7, #20]
 8002110:	3302      	adds	r3, #2
 8002112:	b29b      	uxth	r3, r3
 8002114:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002116:	8afa      	ldrh	r2, [r7, #22]
 8002118:	8abb      	ldrh	r3, [r7, #20]
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d02b      	beq.n	8002182 <LCD_Circle_Helper+0xea>
			fillRect(x0 + x, y0 + y, size, size, color24);
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	8a3b      	ldrh	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	b29b      	uxth	r3, r3
 8002132:	b218      	sxth	r0, r3
 8002134:	88ba      	ldrh	r2, [r7, #4]
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4413      	add	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	b219      	sxth	r1, r3
 800213e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002142:	b21a      	sxth	r2, r3
 8002144:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002148:	b21c      	sxth	r4, r3
 800214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214c:	b29b      	uxth	r3, r3
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4623      	mov	r3, r4
 8002152:	f7fe ffcf 	bl	80010f4 <fillRect>
			fillRect(x0 + y, y0 + x, size, size, color24);
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	4413      	add	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	b218      	sxth	r0, r3
 8002160:	88ba      	ldrh	r2, [r7, #4]
 8002162:	8a3b      	ldrh	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	b219      	sxth	r1, r3
 800216a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800216e:	b21a      	sxth	r2, r3
 8002170:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002174:	b21c      	sxth	r4, r3
 8002176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002178:	b29b      	uxth	r3, r3
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4623      	mov	r3, r4
 800217e:	f7fe ffb9 	bl	80010f4 <fillRect>
		}
		if (cornername & 0x2) {
 8002182:	787b      	ldrb	r3, [r7, #1]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02b      	beq.n	80021e4 <LCD_Circle_Helper+0x14c>
			fillRect(x0 + x, y0 - y, size, size, color24);
 800218c:	88fa      	ldrh	r2, [r7, #6]
 800218e:	8a3b      	ldrh	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	b218      	sxth	r0, r3
 8002196:	88ba      	ldrh	r2, [r7, #4]
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	b219      	sxth	r1, r3
 80021a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021aa:	b21c      	sxth	r4, r3
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4623      	mov	r3, r4
 80021b4:	f7fe ff9e 	bl	80010f4 <fillRect>
			fillRect(x0 + y, y0 - x, size, size, color24);
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	4413      	add	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b218      	sxth	r0, r3
 80021c2:	88ba      	ldrh	r2, [r7, #4]
 80021c4:	8a3b      	ldrh	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b219      	sxth	r1, r3
 80021cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021d6:	b21c      	sxth	r4, r3
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	b29b      	uxth	r3, r3
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4623      	mov	r3, r4
 80021e0:	f7fe ff88 	bl	80010f4 <fillRect>
		}
		if (cornername & 0x8) {
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02b      	beq.n	8002246 <LCD_Circle_Helper+0x1ae>
			fillRect(x0 - y, y0 + x, size, size, color24);
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b218      	sxth	r0, r3
 80021f8:	88ba      	ldrh	r2, [r7, #4]
 80021fa:	8a3b      	ldrh	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	b219      	sxth	r1, r3
 8002202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002206:	b21a      	sxth	r2, r3
 8002208:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800220c:	b21c      	sxth	r4, r3
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	b29b      	uxth	r3, r3
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4623      	mov	r3, r4
 8002216:	f7fe ff6d 	bl	80010f4 <fillRect>
			fillRect(x0 - x, y0 + y, size, size, color24);
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	8a3b      	ldrh	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	b218      	sxth	r0, r3
 8002224:	88ba      	ldrh	r2, [r7, #4]
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	4413      	add	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	b219      	sxth	r1, r3
 800222e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002232:	b21a      	sxth	r2, r3
 8002234:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002238:	b21c      	sxth	r4, r3
 800223a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223c:	b29b      	uxth	r3, r3
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4623      	mov	r3, r4
 8002242:	f7fe ff57 	bl	80010f4 <fillRect>
		}
		if (cornername & 0x1) {
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02b      	beq.n	80022a8 <LCD_Circle_Helper+0x210>
			fillRect(x0 - y, y0 - x, size, size, color24);
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	b29b      	uxth	r3, r3
 8002258:	b218      	sxth	r0, r3
 800225a:	88ba      	ldrh	r2, [r7, #4]
 800225c:	8a3b      	ldrh	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	b29b      	uxth	r3, r3
 8002262:	b219      	sxth	r1, r3
 8002264:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800226e:	b21c      	sxth	r4, r3
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	b29b      	uxth	r3, r3
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4623      	mov	r3, r4
 8002278:	f7fe ff3c 	bl	80010f4 <fillRect>
			fillRect(x0 - x, y0 - y, size, size, color24);
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	8a3b      	ldrh	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	b218      	sxth	r0, r3
 8002286:	88ba      	ldrh	r2, [r7, #4]
 8002288:	89fb      	ldrh	r3, [r7, #14]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29b      	uxth	r3, r3
 800228e:	b219      	sxth	r1, r3
 8002290:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002294:	b21a      	sxth	r2, r3
 8002296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800229a:	b21c      	sxth	r4, r3
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	b29b      	uxth	r3, r3
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4623      	mov	r3, r4
 80022a4:	f7fe ff26 	bl	80010f4 <fillRect>
	while (x < y) {
 80022a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80022ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f6ff af13 	blt.w	80020dc <LCD_Circle_Helper+0x44>
		}
	}
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b08b      	sub	sp, #44	@ 0x2c
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	4603      	mov	r3, r0
 80022d4:	80bb      	strh	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
 80022da:	4613      	mov	r3, r2
 80022dc:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bfb8      	it	lt
 80022e8:	425b      	neglt	r3, r3
 80022ea:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80022ec:	883a      	ldrh	r2, [r7, #0]
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bfb8      	it	lt
 80022f6:	425b      	neglt	r3, r3
 80022f8:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d201      	bcs.n	8002306 <LCD_Line+0x46>
 8002302:	2301      	movs	r3, #1
 8002304:	e001      	b.n	800230a <LCD_Line+0x4a>
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800230c:	88ba      	ldrh	r2, [r7, #4]
 800230e:	883b      	ldrh	r3, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d201      	bcs.n	8002318 <LCD_Line+0x58>
 8002314:	2301      	movs	r3, #1
 8002316:	e001      	b.n	800231c <LCD_Line+0x5c>
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		fillRect(x1, y1, size, size, color24);
 800232a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800232e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002332:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002336:	b21a      	sxth	r2, r3
 8002338:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800233c:	b21c      	sxth	r4, r3
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	b29b      	uxth	r3, r3
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4623      	mov	r3, r4
 8002346:	f7fe fed5 	bl	80010f4 <fillRect>
		if (x1 == x2 && y1 == y2)
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	429a      	cmp	r2, r3
 8002350:	d103      	bne.n	800235a <LCD_Line+0x9a>
 8002352:	88ba      	ldrh	r2, [r7, #4]
 8002354:	883b      	ldrh	r3, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d01e      	beq.n	8002398 <LCD_Line+0xd8>
		break;
		error2 = error * 2;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	425b      	negs	r3, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	dd08      	ble.n	800237c <LCD_Line+0xbc>
		{
			error -= deltaY;
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	b29a      	uxth	r2, r3
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	4413      	add	r3, r2
 800237a:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	429a      	cmp	r2, r3
 8002382:	dad2      	bge.n	800232a <LCD_Line+0x6a>
		{
			error += deltaX;
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4413      	add	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b29a      	uxth	r2, r3
 8002390:	88bb      	ldrh	r3, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	80bb      	strh	r3, [r7, #4]
		fillRect(x1, y1, size, size, color24);
 8002396:	e7c8      	b.n	800232a <LCD_Line+0x6a>
		break;
 8002398:	bf00      	nop
		}
	}
}
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}

080023a2 <LCD_Rect_Round>:


void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 80023a2:	b590      	push	{r4, r7, lr}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af02      	add	r7, sp, #8
 80023a8:	4604      	mov	r4, r0
 80023aa:	4608      	mov	r0, r1
 80023ac:	4611      	mov	r1, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	80fb      	strh	r3, [r7, #6]
 80023b4:	4603      	mov	r3, r0
 80023b6:	80bb      	strh	r3, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + r, y, x + length + size - r, y, size, color24);
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	b298      	uxth	r0, r3
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	4413      	add	r3, r2
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	7f3b      	ldrb	r3, [r7, #28]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	8b3b      	ldrh	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	b29a      	uxth	r2, r3
 80023de:	88bc      	ldrh	r4, [r7, #4]
 80023e0:	88b9      	ldrh	r1, [r7, #4]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	7f3b      	ldrb	r3, [r7, #28]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4623      	mov	r3, r4
 80023ec:	f7ff ff68 	bl	80022c0 <LCD_Line>
	LCD_Line(x + r, y + width - 1, x + length + size - r, y + width - 1, size, color24);
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	8b3b      	ldrh	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	b298      	uxth	r0, r3
 80023f8:	88ba      	ldrh	r2, [r7, #4]
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b299      	uxth	r1, r3
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	4413      	add	r3, r2
 800240a:	b29a      	uxth	r2, r3
 800240c:	7f3b      	ldrb	r3, [r7, #28]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	8b3b      	ldrh	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29c      	uxth	r4, r3
 800241a:	88ba      	ldrh	r2, [r7, #4]
 800241c:	883b      	ldrh	r3, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	7f3b      	ldrb	r3, [r7, #28]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	4622      	mov	r2, r4
 8002432:	f7ff ff45 	bl	80022c0 <LCD_Line>
	LCD_Line(x, y + r, x, y + width - size - r, size, color24);
 8002436:	88ba      	ldrh	r2, [r7, #4]
 8002438:	8b3b      	ldrh	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	b299      	uxth	r1, r3
 800243e:	88ba      	ldrh	r2, [r7, #4]
 8002440:	883b      	ldrh	r3, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b29a      	uxth	r2, r3
 8002446:	7f3b      	ldrb	r3, [r7, #28]
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29a      	uxth	r2, r3
 800244e:	8b3b      	ldrh	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	b29c      	uxth	r4, r3
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	88f8      	ldrh	r0, [r7, #6]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	7f3b      	ldrb	r3, [r7, #28]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4623      	mov	r3, r4
 8002462:	f7ff ff2d 	bl	80022c0 <LCD_Line>
	LCD_Line(x + length - 1, y + r, x + length - 1, y + width - size - r, size, color24);
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4413      	add	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b298      	uxth	r0, r3
 8002472:	88ba      	ldrh	r2, [r7, #4]
 8002474:	8b3b      	ldrh	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	b299      	uxth	r1, r3
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29c      	uxth	r4, r3
 8002486:	88ba      	ldrh	r2, [r7, #4]
 8002488:	883b      	ldrh	r3, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b29a      	uxth	r2, r3
 800248e:	7f3b      	ldrb	r3, [r7, #28]
 8002490:	b29b      	uxth	r3, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b29a      	uxth	r2, r3
 8002496:	8b3b      	ldrh	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b29a      	uxth	r2, r3
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	7f3b      	ldrb	r3, [r7, #28]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	4622      	mov	r2, r4
 80024a8:	f7ff ff0a 	bl	80022c0 <LCD_Line>

	LCD_Circle_Helper(x + r, y + r, r, 1, size, color24);
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	8b3b      	ldrh	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b218      	sxth	r0, r3
 80024b6:	88ba      	ldrh	r2, [r7, #4]
 80024b8:	8b3b      	ldrh	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b219      	sxth	r1, r3
 80024c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	7f3b      	ldrb	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	f7ff fde3 	bl	8002098 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - r - 1, y + r, r, 2, size, color24);
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	4413      	add	r3, r2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	8b3b      	ldrh	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	b218      	sxth	r0, r3
 80024e6:	88ba      	ldrh	r2, [r7, #4]
 80024e8:	8b3b      	ldrh	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b219      	sxth	r1, r3
 80024f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	7f3b      	ldrb	r3, [r7, #28]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2302      	movs	r3, #2
 80024fe:	f7ff fdcb 	bl	8002098 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - r - 1, y + width - r - 1, r, 4, size, color24);
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	4413      	add	r3, r2
 8002508:	b29a      	uxth	r2, r3
 800250a:	8b3b      	ldrh	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	b218      	sxth	r0, r3
 8002516:	88ba      	ldrh	r2, [r7, #4]
 8002518:	883b      	ldrh	r3, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
 800251e:	8b3b      	ldrh	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	b219      	sxth	r1, r3
 800252a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	7f3b      	ldrb	r3, [r7, #28]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2304      	movs	r3, #4
 8002538:	f7ff fdae 	bl	8002098 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + r, y + width - r - 1, r, 8, size, color24);
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	8b3b      	ldrh	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	b218      	sxth	r0, r3
 8002546:	88ba      	ldrh	r2, [r7, #4]
 8002548:	883b      	ldrh	r3, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b29a      	uxth	r2, r3
 800254e:	8b3b      	ldrh	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29b      	uxth	r3, r3
 8002558:	b219      	sxth	r1, r3
 800255a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	7f3b      	ldrb	r3, [r7, #28]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2308      	movs	r3, #8
 8002568:	f7ff fd96 	bl	8002098 <LCD_Circle_Helper>
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af02      	add	r7, sp, #8
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4623      	mov	r3, r4
 8002584:	80fb      	strh	r3, [r7, #6]
 8002586:	4603      	mov	r3, r0
 8002588:	80bb      	strh	r3, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	f1c3 0301 	rsb	r3, r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800259c:	2301      	movs	r3, #1
 800259e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	461a      	mov	r2, r3
 80025a4:	03d2      	lsls	r2, r2, #15
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80025b6:	e0ab      	b.n	8002710 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 80025b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0e      	blt.n	80025de <LCD_Circle_Fill_Helper+0x6a>
			y--;
 80025c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80025cc:	8a7b      	ldrh	r3, [r7, #18]
 80025ce:	3302      	adds	r3, #2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80025d4:	8afa      	ldrh	r2, [r7, #22]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	4413      	add	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80025de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80025ea:	8abb      	ldrh	r3, [r7, #20]
 80025ec:	3302      	adds	r3, #2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80025f2:	8afa      	ldrh	r2, [r7, #22]
 80025f4:	8abb      	ldrh	r3, [r7, #20]
 80025f6:	4413      	add	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03f      	beq.n	8002686 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	8a3b      	ldrh	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	b298      	uxth	r0, r3
 800260e:	88ba      	ldrh	r2, [r7, #4]
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	b299      	uxth	r1, r3
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	8a3b      	ldrh	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	b29c      	uxth	r4, r3
 800261e:	88ba      	ldrh	r2, [r7, #4]
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29a      	uxth	r2, r3
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	b29b      	uxth	r3, r3
 800262c:	4413      	add	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002632:	4413      	add	r3, r2
 8002634:	b29a      	uxth	r2, r3
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2301      	movs	r3, #1
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	4622      	mov	r2, r4
 8002642:	f7ff fe3d 	bl	80022c0 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	4413      	add	r3, r2
 800264c:	b298      	uxth	r0, r3
 800264e:	88ba      	ldrh	r2, [r7, #4]
 8002650:	8a3b      	ldrh	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	b299      	uxth	r1, r3
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	4413      	add	r3, r2
 800265c:	b29c      	uxth	r4, r3
 800265e:	88ba      	ldrh	r2, [r7, #4]
 8002660:	8a3b      	ldrh	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29a      	uxth	r2, r3
 8002666:	8a3b      	ldrh	r3, [r7, #16]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b29a      	uxth	r2, r3
 8002670:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002672:	4413      	add	r3, r2
 8002674:	b29a      	uxth	r2, r3
 8002676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2301      	movs	r3, #1
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	4622      	mov	r2, r4
 8002682:	f7ff fe1d 	bl	80022c0 <LCD_Line>
		}
		if (cornername & 0x2) {
 8002686:	787b      	ldrb	r3, [r7, #1]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03f      	beq.n	8002710 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	8a3b      	ldrh	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	b298      	uxth	r0, r3
 8002698:	88ba      	ldrh	r2, [r7, #4]
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	b299      	uxth	r1, r3
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	8a3b      	ldrh	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	b29c      	uxth	r4, r3
 80026a8:	88ba      	ldrh	r2, [r7, #4]
 80026aa:	89fb      	ldrh	r3, [r7, #14]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026bc:	4413      	add	r3, r2
 80026be:	b29a      	uxth	r2, r3
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	4622      	mov	r2, r4
 80026cc:	f7ff fdf8 	bl	80022c0 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b298      	uxth	r0, r3
 80026d8:	88ba      	ldrh	r2, [r7, #4]
 80026da:	8a3b      	ldrh	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	b299      	uxth	r1, r3
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	89fb      	ldrh	r3, [r7, #14]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	b29c      	uxth	r4, r3
 80026e8:	88ba      	ldrh	r2, [r7, #4]
 80026ea:	8a3b      	ldrh	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	8a3b      	ldrh	r3, [r7, #16]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026fc:	4413      	add	r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2301      	movs	r3, #1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	4622      	mov	r2, r4
 800270c:	f7ff fdd8 	bl	80022c0 <LCD_Line>
	while (x < y) {
 8002710:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002718:	429a      	cmp	r2, r3
 800271a:	f6ff af4d 	blt.w	80025b8 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd90      	pop	{r4, r7, pc}

08002728 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b085      	sub	sp, #20
 800272c:	af02      	add	r7, sp, #8
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	80fb      	strh	r3, [r7, #6]
 800273a:	4603      	mov	r3, r0
 800273c:	80bb      	strh	r3, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
 8002742:	4613      	mov	r3, r2
 8002744:	803b      	strh	r3, [r7, #0]
	fillRect(x + r, y, length - 2 * r, width, color24);
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	8b3b      	ldrh	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	b218      	sxth	r0, r3
 8002750:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002754:	8b3b      	ldrh	r3, [r7, #24]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	b29b      	uxth	r3, r3
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	b21a      	sxth	r2, r3
 8002762:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	b29b      	uxth	r3, r3
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	4623      	mov	r3, r4
 800276e:	f7fe fcc1 	bl	80010f4 <fillRect>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4413      	add	r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	8b3b      	ldrh	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29b      	uxth	r3, r3
 8002784:	b218      	sxth	r0, r3
 8002786:	88ba      	ldrh	r2, [r7, #4]
 8002788:	8b3b      	ldrh	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	b219      	sxth	r1, r3
 8002790:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002794:	8b3b      	ldrh	r3, [r7, #24]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	883a      	ldrh	r2, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	9201      	str	r2, [sp, #4]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2301      	movs	r3, #1
 80027ae:	4622      	mov	r2, r4
 80027b0:	f7ff fee0 	bl	8002574 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	8b3b      	ldrh	r3, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b218      	sxth	r0, r3
 80027be:	88ba      	ldrh	r2, [r7, #4]
 80027c0:	8b3b      	ldrh	r3, [r7, #24]
 80027c2:	4413      	add	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b219      	sxth	r1, r3
 80027c8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80027cc:	8b3b      	ldrh	r3, [r7, #24]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	883a      	ldrh	r2, [r7, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	b21b      	sxth	r3, r3
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	9201      	str	r2, [sp, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2302      	movs	r3, #2
 80027e6:	4622      	mov	r2, r4
 80027e8:	f7ff fec4 	bl	8002574 <LCD_Circle_Fill_Helper>
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	rxComplete=1;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_UART_RxCpltCallback+0x20>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
	firstReception=0;
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_UART_RxCpltCallback+0x24>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000515 	.word	0x20000515
 8002818:	2000027a 	.word	0x2000027a

0800281c <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <HAL_SPI_TxCpltCallback+0x1c>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000

0800283c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b092      	sub	sp, #72	@ 0x48
 8002840:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002842:	f001 fb9f 	bl	8003f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002846:	f000 fda7 	bl	8003398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284a:	f000 ff69 	bl	8003720 <MX_GPIO_Init>
  MX_DMA_Init();
 800284e:	f000 ff31 	bl	80036b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002852:	f000 ff05 	bl	8003660 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002856:	f000 fe41 	bl	80034dc <MX_SPI2_Init>
  MX_SPI1_Init();
 800285a:	f000 fe09 	bl	8003470 <MX_SPI1_Init>
  MX_TIM2_Init();
 800285e:	f000 fe73 	bl	8003548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,RxBuffer,25);
 8002862:	2219      	movs	r2, #25
 8002864:	49cf      	ldr	r1, [pc, #828]	@ (8002ba4 <main+0x368>)
 8002866:	48d0      	ldr	r0, [pc, #832]	@ (8002ba8 <main+0x36c>)
 8002868:	f004 fd4e 	bl	8007308 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 800286c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002870:	f001 fbfa 	bl	8004068 <HAL_Delay>
  ILI9488_Init();
 8002874:	f7fe fa9e 	bl	8000db4 <ILI9488_Init>

 //   HAL_Delay(1000);
    setRotation(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f7fe fccf 	bl	800121c <setRotation>



    ILI9341_Fill_Screen(WHITE);
 800287e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002882:	f7fe feff 	bl	8001684 <ILI9341_Fill_Screen>

    uint16_t touchx = 0, touchy = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800288a:	2300      	movs	r3, #0
 800288c:	853b      	strh	r3, [r7, #40]	@ 0x28


    	  	  ILI9341_Fill_Screen(GREEN);
 800288e:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002892:	f7fe fef7 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(BLUE);
 8002896:	201f      	movs	r0, #31
 8002898:	f7fe fef4 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(RED);
 800289c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80028a0:	f7fe fef0 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_MAGENTA);
 80028a4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80028a8:	f7fe feec 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_YELLOW);
 80028ac:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80028b0:	f7fe fee8 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_WHITE);
 80028b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028b8:	f7fe fee4 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_ORANGE);
 80028bc:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 80028c0:	f7fe fee0 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_OLIVE);
 80028c4:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 80028c8:	f7fe fedc 	bl	8001684 <ILI9341_Fill_Screen>

    	  	  ILI9341_Fill_Screen(ILI9488_GREEN);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 80028cc:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80028d0:	f7fe fed8 	bl	8001684 <ILI9341_Fill_Screen>
 80028d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2301      	movs	r3, #1
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4bb3      	ldr	r3, [pc, #716]	@ (8002bac <main+0x370>)
 80028e0:	4ab3      	ldr	r2, [pc, #716]	@ (8002bb0 <main+0x374>)
 80028e2:	2164      	movs	r1, #100	@ 0x64
 80028e4:	2014      	movs	r0, #20
 80028e6:	f7fe ffa3 	bl	8001830 <LCD_Font>
 80028ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	4bad      	ldr	r3, [pc, #692]	@ (8002bac <main+0x370>)
 80028f6:	4aaf      	ldr	r2, [pc, #700]	@ (8002bb4 <main+0x378>)
 80028f8:	21fa      	movs	r1, #250	@ 0xfa
 80028fa:	200a      	movs	r0, #10
 80028fc:	f7fe ff98 	bl	8001830 <LCD_Font>
 8002900:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002904:	f001 fbb0 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_BLUE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002908:	201f      	movs	r0, #31
 800290a:	f7fe febb 	bl	8001684 <ILI9341_Fill_Screen>
 800290e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2301      	movs	r3, #1
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4ba4      	ldr	r3, [pc, #656]	@ (8002bac <main+0x370>)
 800291a:	4aa5      	ldr	r2, [pc, #660]	@ (8002bb0 <main+0x374>)
 800291c:	2164      	movs	r1, #100	@ 0x64
 800291e:	2014      	movs	r0, #20
 8002920:	f7fe ff86 	bl	8001830 <LCD_Font>
 8002924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2301      	movs	r3, #1
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bac <main+0x370>)
 8002930:	4aa0      	ldr	r2, [pc, #640]	@ (8002bb4 <main+0x378>)
 8002932:	21fa      	movs	r1, #250	@ 0xfa
 8002934:	200a      	movs	r0, #10
 8002936:	f7fe ff7b 	bl	8001830 <LCD_Font>
 800293a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800293e:	f001 fb93 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(RED);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002942:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002946:	f7fe fe9d 	bl	8001684 <ILI9341_Fill_Screen>
 800294a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	2301      	movs	r3, #1
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4b95      	ldr	r3, [pc, #596]	@ (8002bac <main+0x370>)
 8002956:	4a96      	ldr	r2, [pc, #600]	@ (8002bb0 <main+0x374>)
 8002958:	2164      	movs	r1, #100	@ 0x64
 800295a:	2014      	movs	r0, #20
 800295c:	f7fe ff68 	bl	8001830 <LCD_Font>
 8002960:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2301      	movs	r3, #1
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4b90      	ldr	r3, [pc, #576]	@ (8002bac <main+0x370>)
 800296c:	4a91      	ldr	r2, [pc, #580]	@ (8002bb4 <main+0x378>)
 800296e:	21fa      	movs	r1, #250	@ 0xfa
 8002970:	200a      	movs	r0, #10
 8002972:	f7fe ff5d 	bl	8001830 <LCD_Font>
 8002976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800297a:	f001 fb75 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_MAGENTA);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 800297e:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002982:	f7fe fe7f 	bl	8001684 <ILI9341_Fill_Screen>
 8002986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4b86      	ldr	r3, [pc, #536]	@ (8002bac <main+0x370>)
 8002992:	4a87      	ldr	r2, [pc, #540]	@ (8002bb0 <main+0x374>)
 8002994:	2164      	movs	r1, #100	@ 0x64
 8002996:	2014      	movs	r0, #20
 8002998:	f7fe ff4a 	bl	8001830 <LCD_Font>
 800299c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b81      	ldr	r3, [pc, #516]	@ (8002bac <main+0x370>)
 80029a8:	4a82      	ldr	r2, [pc, #520]	@ (8002bb4 <main+0x378>)
 80029aa:	21fa      	movs	r1, #250	@ 0xfa
 80029ac:	200a      	movs	r0, #10
 80029ae:	f7fe ff3f 	bl	8001830 <LCD_Font>
 80029b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b6:	f001 fb57 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_YELLOW);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 80029ba:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80029be:	f7fe fe61 	bl	8001684 <ILI9341_Fill_Screen>
 80029c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	2301      	movs	r3, #1
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4b77      	ldr	r3, [pc, #476]	@ (8002bac <main+0x370>)
 80029ce:	4a78      	ldr	r2, [pc, #480]	@ (8002bb0 <main+0x374>)
 80029d0:	2164      	movs	r1, #100	@ 0x64
 80029d2:	2014      	movs	r0, #20
 80029d4:	f7fe ff2c 	bl	8001830 <LCD_Font>
 80029d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2301      	movs	r3, #1
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b72      	ldr	r3, [pc, #456]	@ (8002bac <main+0x370>)
 80029e4:	4a73      	ldr	r2, [pc, #460]	@ (8002bb4 <main+0x378>)
 80029e6:	21fa      	movs	r1, #250	@ 0xfa
 80029e8:	200a      	movs	r0, #10
 80029ea:	f7fe ff21 	bl	8001830 <LCD_Font>
 80029ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029f2:	f001 fb39 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_WHITE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, ILI9488_BLUE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, ILI9488_BLUE);HAL_Delay(1000);
 80029f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029fa:	f7fe fe43 	bl	8001684 <ILI9341_Fill_Screen>
 80029fe:	231f      	movs	r3, #31
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2301      	movs	r3, #1
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4b69      	ldr	r3, [pc, #420]	@ (8002bac <main+0x370>)
 8002a08:	4a69      	ldr	r2, [pc, #420]	@ (8002bb0 <main+0x374>)
 8002a0a:	2164      	movs	r1, #100	@ 0x64
 8002a0c:	2014      	movs	r0, #20
 8002a0e:	f7fe ff0f 	bl	8001830 <LCD_Font>
 8002a12:	231f      	movs	r3, #31
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2301      	movs	r3, #1
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4b64      	ldr	r3, [pc, #400]	@ (8002bac <main+0x370>)
 8002a1c:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <main+0x378>)
 8002a1e:	21fa      	movs	r1, #250	@ 0xfa
 8002a20:	200a      	movs	r0, #10
 8002a22:	f7fe ff05 	bl	8001830 <LCD_Font>
 8002a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a2a:	f001 fb1d 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_ORANGE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002a2e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8002a32:	f7fe fe27 	bl	8001684 <ILI9341_Fill_Screen>
 8002a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4b5a      	ldr	r3, [pc, #360]	@ (8002bac <main+0x370>)
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <main+0x374>)
 8002a44:	2164      	movs	r1, #100	@ 0x64
 8002a46:	2014      	movs	r0, #20
 8002a48:	f7fe fef2 	bl	8001830 <LCD_Font>
 8002a4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2301      	movs	r3, #1
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4b55      	ldr	r3, [pc, #340]	@ (8002bac <main+0x370>)
 8002a58:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <main+0x378>)
 8002a5a:	21fa      	movs	r1, #250	@ 0xfa
 8002a5c:	200a      	movs	r0, #10
 8002a5e:	f7fe fee7 	bl	8001830 <LCD_Font>
 8002a62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a66:	f001 faff 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_OLIVE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002a6a:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8002a6e:	f7fe fe09 	bl	8001684 <ILI9341_Fill_Screen>
 8002a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2301      	movs	r3, #1
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <main+0x370>)
 8002a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb0 <main+0x374>)
 8002a80:	2164      	movs	r1, #100	@ 0x64
 8002a82:	2014      	movs	r0, #20
 8002a84:	f7fe fed4 	bl	8001830 <LCD_Font>
 8002a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <main+0x370>)
 8002a94:	4a47      	ldr	r2, [pc, #284]	@ (8002bb4 <main+0x378>)
 8002a96:	21fa      	movs	r1, #250	@ 0xfa
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f7fe fec9 	bl	8001830 <LCD_Font>
 8002a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa2:	f001 fae1 	bl	8004068 <HAL_Delay>

    	  	  ILI9341_Fill_Screen(GREEN);
 8002aa6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002aaa:	f7fe fdeb 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(BLUE);
 8002aae:	201f      	movs	r0, #31
 8002ab0:	f7fe fde8 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(RED);
 8002ab4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002ab8:	f7fe fde4 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_MAGENTA);
 8002abc:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002ac0:	f7fe fde0 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_YELLOW);
 8002ac4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002ac8:	f7fe fddc 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_WHITE);
 8002acc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ad0:	f7fe fdd8 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_ORANGE);
 8002ad4:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8002ad8:	f7fe fdd4 	bl	8001684 <ILI9341_Fill_Screen>
    	  	  ILI9341_Fill_Screen(ILI9488_OLIVE);
 8002adc:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8002ae0:	f7fe fdd0 	bl	8001684 <ILI9341_Fill_Screen>

    	  	  ILI9341_Fill_Screen(ILI9488_GREEN);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002ae4:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002ae8:	f7fe fdcc 	bl	8001684 <ILI9341_Fill_Screen>
 8002aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <main+0x370>)
 8002af8:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb0 <main+0x374>)
 8002afa:	2164      	movs	r1, #100	@ 0x64
 8002afc:	2014      	movs	r0, #20
 8002afe:	f7fe fe97 	bl	8001830 <LCD_Font>
 8002b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <main+0x370>)
 8002b0e:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <main+0x378>)
 8002b10:	21fa      	movs	r1, #250	@ 0xfa
 8002b12:	200a      	movs	r0, #10
 8002b14:	f7fe fe8c 	bl	8001830 <LCD_Font>
 8002b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b1c:	f001 faa4 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_BLUE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002b20:	201f      	movs	r0, #31
 8002b22:	f7fe fdaf 	bl	8001684 <ILI9341_Fill_Screen>
 8002b26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <main+0x370>)
 8002b32:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <main+0x374>)
 8002b34:	2164      	movs	r1, #100	@ 0x64
 8002b36:	2014      	movs	r0, #20
 8002b38:	f7fe fe7a 	bl	8001830 <LCD_Font>
 8002b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2301      	movs	r3, #1
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <main+0x370>)
 8002b48:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <main+0x378>)
 8002b4a:	21fa      	movs	r1, #250	@ 0xfa
 8002b4c:	200a      	movs	r0, #10
 8002b4e:	f7fe fe6f 	bl	8001830 <LCD_Font>
 8002b52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b56:	f001 fa87 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(RED);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002b5a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002b5e:	f7fe fd91 	bl	8001684 <ILI9341_Fill_Screen>
 8002b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <main+0x370>)
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <main+0x374>)
 8002b70:	2164      	movs	r1, #100	@ 0x64
 8002b72:	2014      	movs	r0, #20
 8002b74:	f7fe fe5c 	bl	8001830 <LCD_Font>
 8002b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <main+0x370>)
 8002b84:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb4 <main+0x378>)
 8002b86:	21fa      	movs	r1, #250	@ 0xfa
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f7fe fe51 	bl	8001830 <LCD_Font>
 8002b8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b92:	f001 fa69 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_MAGENTA);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002b96:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002b9a:	f7fe fd73 	bl	8001684 <ILI9341_Fill_Screen>
 8002b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba2:	e009      	b.n	8002bb8 <main+0x37c>
 8002ba4:	200004fc 	.word	0x200004fc
 8002ba8:	20000454 	.word	0x20000454
 8002bac:	0801702c 	.word	0x0801702c
 8002bb0:	08009ed0 	.word	0x08009ed0
 8002bb4:	08009ed8 	.word	0x08009ed8
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4bc7      	ldr	r3, [pc, #796]	@ (8002edc <main+0x6a0>)
 8002bc0:	4ac7      	ldr	r2, [pc, #796]	@ (8002ee0 <main+0x6a4>)
 8002bc2:	2164      	movs	r1, #100	@ 0x64
 8002bc4:	2014      	movs	r0, #20
 8002bc6:	f7fe fe33 	bl	8001830 <LCD_Font>
 8002bca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4bc1      	ldr	r3, [pc, #772]	@ (8002edc <main+0x6a0>)
 8002bd6:	4ac3      	ldr	r2, [pc, #780]	@ (8002ee4 <main+0x6a8>)
 8002bd8:	21fa      	movs	r1, #250	@ 0xfa
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f7fe fe28 	bl	8001830 <LCD_Font>
 8002be0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002be4:	f001 fa40 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_YELLOW);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002be8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002bec:	f7fe fd4a 	bl	8001684 <ILI9341_Fill_Screen>
 8002bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4bb8      	ldr	r3, [pc, #736]	@ (8002edc <main+0x6a0>)
 8002bfc:	4ab8      	ldr	r2, [pc, #736]	@ (8002ee0 <main+0x6a4>)
 8002bfe:	2164      	movs	r1, #100	@ 0x64
 8002c00:	2014      	movs	r0, #20
 8002c02:	f7fe fe15 	bl	8001830 <LCD_Font>
 8002c06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4bb2      	ldr	r3, [pc, #712]	@ (8002edc <main+0x6a0>)
 8002c12:	4ab4      	ldr	r2, [pc, #720]	@ (8002ee4 <main+0x6a8>)
 8002c14:	21fa      	movs	r1, #250	@ 0xfa
 8002c16:	200a      	movs	r0, #10
 8002c18:	f7fe fe0a 	bl	8001830 <LCD_Font>
 8002c1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c20:	f001 fa22 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_WHITE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, ILI9488_BLUE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, ILI9488_BLUE);HAL_Delay(1000);
 8002c24:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c28:	f7fe fd2c 	bl	8001684 <ILI9341_Fill_Screen>
 8002c2c:	231f      	movs	r3, #31
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	2301      	movs	r3, #1
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4ba9      	ldr	r3, [pc, #676]	@ (8002edc <main+0x6a0>)
 8002c36:	4aaa      	ldr	r2, [pc, #680]	@ (8002ee0 <main+0x6a4>)
 8002c38:	2164      	movs	r1, #100	@ 0x64
 8002c3a:	2014      	movs	r0, #20
 8002c3c:	f7fe fdf8 	bl	8001830 <LCD_Font>
 8002c40:	231f      	movs	r3, #31
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2301      	movs	r3, #1
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4ba4      	ldr	r3, [pc, #656]	@ (8002edc <main+0x6a0>)
 8002c4a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ee4 <main+0x6a8>)
 8002c4c:	21fa      	movs	r1, #250	@ 0xfa
 8002c4e:	200a      	movs	r0, #10
 8002c50:	f7fe fdee 	bl	8001830 <LCD_Font>
 8002c54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c58:	f001 fa06 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_ORANGE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002c5c:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8002c60:	f7fe fd10 	bl	8001684 <ILI9341_Fill_Screen>
 8002c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8002edc <main+0x6a0>)
 8002c70:	4a9b      	ldr	r2, [pc, #620]	@ (8002ee0 <main+0x6a4>)
 8002c72:	2164      	movs	r1, #100	@ 0x64
 8002c74:	2014      	movs	r0, #20
 8002c76:	f7fe fddb 	bl	8001830 <LCD_Font>
 8002c7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2301      	movs	r3, #1
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4b95      	ldr	r3, [pc, #596]	@ (8002edc <main+0x6a0>)
 8002c86:	4a97      	ldr	r2, [pc, #604]	@ (8002ee4 <main+0x6a8>)
 8002c88:	21fa      	movs	r1, #250	@ 0xfa
 8002c8a:	200a      	movs	r0, #10
 8002c8c:	f7fe fdd0 	bl	8001830 <LCD_Font>
 8002c90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c94:	f001 f9e8 	bl	8004068 <HAL_Delay>
    	  	  ILI9341_Fill_Screen(ILI9488_OLIVE);LCD_Font(20, 100, "ISMAIL", _Open_Sans_Bold_112  , 1, WHITE);LCD_Font(10, 250, "STM32", _Open_Sans_Bold_112  , 1, WHITE);HAL_Delay(1000);
 8002c98:	f647 30e0 	movw	r0, #31712	@ 0x7be0
 8002c9c:	f7fe fcf2 	bl	8001684 <ILI9341_Fill_Screen>
 8002ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <main+0x6a0>)
 8002cac:	4a8c      	ldr	r2, [pc, #560]	@ (8002ee0 <main+0x6a4>)
 8002cae:	2164      	movs	r1, #100	@ 0x64
 8002cb0:	2014      	movs	r0, #20
 8002cb2:	f7fe fdbd 	bl	8001830 <LCD_Font>
 8002cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4b86      	ldr	r3, [pc, #536]	@ (8002edc <main+0x6a0>)
 8002cc2:	4a88      	ldr	r2, [pc, #544]	@ (8002ee4 <main+0x6a8>)
 8002cc4:	21fa      	movs	r1, #250	@ 0xfa
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	f7fe fdb2 	bl	8001830 <LCD_Font>
 8002ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cd0:	f001 f9ca 	bl	8004068 <HAL_Delay>
    //	  	  touchY = getY();
    //	  	  sprintf(buf,"x=%3d y=%3d",touchX,touchY);
    //	  	  sprintf(buf1,"x=%3d y=%3d",touchX,touchY);
    //	  	  LCD_Font(25, 25, buf, _Open_Sans_Bold_24  , 1, BLACK);
    //	  	  fillRect(touchX, touchY,2,2, RED);
    	  	ILI9341_Fill_Screen(WHITE);
 8002cd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002cd8:	f7fe fcd4 	bl	8001684 <ILI9341_Fill_Screen>

    LCD_Font(165, 25, "Slider 1", _Open_Sans_Bold_24, 1, BLACK);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b80      	ldr	r3, [pc, #512]	@ (8002ee8 <main+0x6ac>)
 8002ce6:	4a81      	ldr	r2, [pc, #516]	@ (8002eec <main+0x6b0>)
 8002ce8:	2119      	movs	r1, #25
 8002cea:	20a5      	movs	r0, #165	@ 0xa5
 8002cec:	f7fe fda0 	bl	8001830 <LCD_Font>
    LCD_Font(165, 80, "Slider 2", _Open_Sans_Bold_24, 1, BLACK);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee8 <main+0x6ac>)
 8002cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ef0 <main+0x6b4>)
 8002cfc:	2150      	movs	r1, #80	@ 0x50
 8002cfe:	20a5      	movs	r0, #165	@ 0xa5
 8002d00:	f7fe fd96 	bl	8001830 <LCD_Font>
    LCD_Font(165, 145, "Slider 3", _Open_Sans_Bold_24, 1, BLACK);
 8002d04:	2300      	movs	r3, #0
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4b76      	ldr	r3, [pc, #472]	@ (8002ee8 <main+0x6ac>)
 8002d0e:	4a79      	ldr	r2, [pc, #484]	@ (8002ef4 <main+0x6b8>)
 8002d10:	2191      	movs	r1, #145	@ 0x91
 8002d12:	20a5      	movs	r0, #165	@ 0xa5
 8002d14:	f7fe fd8c 	bl	8001830 <LCD_Font>

    LCD_Rect_Round(165, 30, 280, 20, 5,1, BLUE);
 8002d18:	231f      	movs	r3, #31
 8002d1a:	9302      	str	r3, [sp, #8]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	2305      	movs	r3, #5
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2314      	movs	r3, #20
 8002d26:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d2a:	211e      	movs	r1, #30
 8002d2c:	20a5      	movs	r0, #165	@ 0xa5
 8002d2e:	f7ff fb38 	bl	80023a2 <LCD_Rect_Round>
    LCD_Rect_Round(165, 90, 280, 20, 5,1, RED);
 8002d32:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2314      	movs	r3, #20
 8002d42:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d46:	215a      	movs	r1, #90	@ 0x5a
 8002d48:	20a5      	movs	r0, #165	@ 0xa5
 8002d4a:	f7ff fb2a 	bl	80023a2 <LCD_Rect_Round>
    LCD_Rect_Round(165, 150, 280, 20, 5,1, BLACK);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	2301      	movs	r3, #1
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	2305      	movs	r3, #5
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2314      	movs	r3, #20
 8002d5c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d60:	2196      	movs	r1, #150	@ 0x96
 8002d62:	20a5      	movs	r0, #165	@ 0xa5
 8002d64:	f7ff fb1d 	bl	80023a2 <LCD_Rect_Round>


    LCD_Rect_Round_Fill(165, 30, 140, 20, 5, BLUE);
 8002d68:	231f      	movs	r3, #31
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2314      	movs	r3, #20
 8002d72:	228c      	movs	r2, #140	@ 0x8c
 8002d74:	211e      	movs	r1, #30
 8002d76:	20a5      	movs	r0, #165	@ 0xa5
 8002d78:	f7ff fcd6 	bl	8002728 <LCD_Rect_Round_Fill>
    LCD_Rect_Round_Fill(165, 90, 70, 20, 5, RED);
 8002d7c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2305      	movs	r3, #5
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2314      	movs	r3, #20
 8002d88:	2246      	movs	r2, #70	@ 0x46
 8002d8a:	215a      	movs	r1, #90	@ 0x5a
 8002d8c:	20a5      	movs	r0, #165	@ 0xa5
 8002d8e:	f7ff fccb 	bl	8002728 <LCD_Rect_Round_Fill>
    LCD_Rect_Round_Fill(165, 150, 210, 20, 5, GREEN);
 8002d92:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2305      	movs	r3, #5
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2314      	movs	r3, #20
 8002d9e:	22d2      	movs	r2, #210	@ 0xd2
 8002da0:	2196      	movs	r1, #150	@ 0x96
 8002da2:	20a5      	movs	r0, #165	@ 0xa5
 8002da4:	f7ff fcc0 	bl	8002728 <LCD_Rect_Round_Fill>



    LCD_Rect_Round_Fill(190, 200, 100, 50, 5, GREEN_D);
 8002da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2305      	movs	r3, #5
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2332      	movs	r3, #50	@ 0x32
 8002db4:	2264      	movs	r2, #100	@ 0x64
 8002db6:	21c8      	movs	r1, #200	@ 0xc8
 8002db8:	20be      	movs	r0, #190	@ 0xbe
 8002dba:	f7ff fcb5 	bl	8002728 <LCD_Rect_Round_Fill>

    LCD_Rect_Round_Fill(315, 200, 100, 50, 5, GREEN_D);
 8002dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2332      	movs	r3, #50	@ 0x32
 8002dca:	2264      	movs	r2, #100	@ 0x64
 8002dcc:	21c8      	movs	r1, #200	@ 0xc8
 8002dce:	f240 103b 	movw	r0, #315	@ 0x13b
 8002dd2:	f7ff fca9 	bl	8002728 <LCD_Rect_Round_Fill>

    LCD_Font(200, 230, "LED ON", _Open_Sans_Bold_20, 1, WHITE);
 8002dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4b45      	ldr	r3, [pc, #276]	@ (8002ef8 <main+0x6bc>)
 8002de2:	4a46      	ldr	r2, [pc, #280]	@ (8002efc <main+0x6c0>)
 8002de4:	21e6      	movs	r1, #230	@ 0xe6
 8002de6:	20c8      	movs	r0, #200	@ 0xc8
 8002de8:	f7fe fd22 	bl	8001830 <LCD_Font>

    LCD_Font(320, 230, "LED OFF", _Open_Sans_Bold_20, 1, WHITE);
 8002dec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2301      	movs	r3, #1
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <main+0x6bc>)
 8002df8:	4a41      	ldr	r2, [pc, #260]	@ (8002f00 <main+0x6c4>)
 8002dfa:	21e6      	movs	r1, #230	@ 0xe6
 8002dfc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002e00:	f7fe fd16 	bl	8001830 <LCD_Font>

    LCD_Rect_Round_Fill(190, 260, 100, 50, 5, GREEN_D);
 8002e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2332      	movs	r3, #50	@ 0x32
 8002e10:	2264      	movs	r2, #100	@ 0x64
 8002e12:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002e16:	20be      	movs	r0, #190	@ 0xbe
 8002e18:	f7ff fc86 	bl	8002728 <LCD_Rect_Round_Fill>

    LCD_Rect_Round_Fill(315, 260, 100, 50, 5, GREEN_D);
 8002e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2305      	movs	r3, #5
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2332      	movs	r3, #50	@ 0x32
 8002e28:	2264      	movs	r2, #100	@ 0x64
 8002e2a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002e2e:	f240 103b 	movw	r0, #315	@ 0x13b
 8002e32:	f7ff fc79 	bl	8002728 <LCD_Rect_Round_Fill>

    LCD_Font(200, 290, "LED ON", _Open_Sans_Bold_20, 1, WHITE);
 8002e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <main+0x6bc>)
 8002e42:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <main+0x6c0>)
 8002e44:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002e48:	20c8      	movs	r0, #200	@ 0xc8
 8002e4a:	f7fe fcf1 	bl	8001830 <LCD_Font>

    LCD_Font(320, 290, "LED OFF", _Open_Sans_Bold_20, 1, WHITE);
 8002e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2301      	movs	r3, #1
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <main+0x6bc>)
 8002e5a:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <main+0x6c4>)
 8002e5c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002e60:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002e64:	f7fe fce4 	bl	8001830 <LCD_Font>



    ringMeter1(500, 0, 1020, 25, 30, 60,15,YELLOW, RED2RED);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e70:	9303      	str	r3, [sp, #12]
 8002e72:	230f      	movs	r3, #15
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	233c      	movs	r3, #60	@ 0x3c
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	231e      	movs	r3, #30
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2319      	movs	r3, #25
 8002e80:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8002e84:	2100      	movs	r1, #0
 8002e86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e8a:	f7fe fef5 	bl	8001c78 <ringMeter1>
    ringMeter1(750, 0, 1020, 25, 180, 60,15,YELLOW, BLUE2BLUE);
 8002e8e:	2302      	movs	r3, #2
 8002e90:	9304      	str	r3, [sp, #16]
 8002e92:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e96:	9303      	str	r3, [sp, #12]
 8002e98:	230f      	movs	r3, #15
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	233c      	movs	r3, #60	@ 0x3c
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	23b4      	movs	r3, #180	@ 0xb4
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002eb0:	f7fe fee2 	bl	8001c78 <ringMeter1>

 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002eb4:	2104      	movs	r1, #4
 8002eb6:	4813      	ldr	r0, [pc, #76]	@ (8002f04 <main+0x6c8>)
 8002eb8:	f003 fbec 	bl	8006694 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002ebc:	2108      	movs	r1, #8
 8002ebe:	4811      	ldr	r0, [pc, #68]	@ (8002f04 <main+0x6c8>)
 8002ec0:	f003 fbe8 	bl	8006694 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002ec4:	210c      	movs	r1, #12
 8002ec6:	480f      	ldr	r0, [pc, #60]	@ (8002f04 <main+0x6c8>)
 8002ec8:	f003 fbe4 	bl	8006694 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(rxComplete==1)
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <main+0x6cc>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 80ed 	bne.w	80030b0 <main+0x874>
	  {
		  int i;
		      for (i = 0; i < 25; i++) {
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eda:	e0e5      	b.n	80030a8 <main+0x86c>
 8002edc:	0801702c 	.word	0x0801702c
 8002ee0:	08009ed0 	.word	0x08009ed0
 8002ee4:	08009ed8 	.word	0x08009ed8
 8002ee8:	0800b478 	.word	0x0800b478
 8002eec:	08009ee0 	.word	0x08009ee0
 8002ef0:	08009eec 	.word	0x08009eec
 8002ef4:	08009ef8 	.word	0x08009ef8
 8002ef8:	0800a85c 	.word	0x0800a85c
 8002efc:	08009f04 	.word	0x08009f04
 8002f00:	08009f0c 	.word	0x08009f0c
 8002f04:	2000040c 	.word	0x2000040c
 8002f08:	20000515 	.word	0x20000515
		          if (RxBuffer[i] == 'D' && i + 4 < 25) {
 8002f0c:	4a43      	ldr	r2, [pc, #268]	@ (800301c <main+0x7e0>)
 8002f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b44      	cmp	r3, #68	@ 0x44
 8002f16:	d11b      	bne.n	8002f50 <main+0x714>
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1a:	2b14      	cmp	r3, #20
 8002f1c:	dc18      	bgt.n	8002f50 <main+0x714>

		              *((uint8_t*)&depth + 0) = RxBuffer[i + 1];
 8002f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a3f      	ldr	r2, [pc, #252]	@ (8003020 <main+0x7e4>)
 8002f24:	493d      	ldr	r1, [pc, #244]	@ (800301c <main+0x7e0>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&depth + 1) = RxBuffer[i + 2];
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003024 <main+0x7e8>)
 8002f30:	493a      	ldr	r1, [pc, #232]	@ (800301c <main+0x7e0>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&depth + 2) = RxBuffer[i + 3];
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	3303      	adds	r3, #3
 8002f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003028 <main+0x7ec>)
 8002f3c:	4937      	ldr	r1, [pc, #220]	@ (800301c <main+0x7e0>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&depth + 3) = RxBuffer[i + 4];
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	3304      	adds	r3, #4
 8002f46:	4a39      	ldr	r2, [pc, #228]	@ (800302c <main+0x7f0>)
 8002f48:	4934      	ldr	r1, [pc, #208]	@ (800301c <main+0x7e0>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	7013      	strb	r3, [r2, #0]
 8002f4e:	e0a8      	b.n	80030a2 <main+0x866>

		          }
		          else if (RxBuffer[i] == 'R' && i + 4 < 25) {
 8002f50:	4a32      	ldr	r2, [pc, #200]	@ (800301c <main+0x7e0>)
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b52      	cmp	r3, #82	@ 0x52
 8002f5a:	d11b      	bne.n	8002f94 <main+0x758>
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	2b14      	cmp	r3, #20
 8002f60:	dc18      	bgt.n	8002f94 <main+0x758>

		              *((uint8_t*)&roll + 0) = RxBuffer[i + 1];
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a32      	ldr	r2, [pc, #200]	@ (8003030 <main+0x7f4>)
 8002f68:	492c      	ldr	r1, [pc, #176]	@ (800301c <main+0x7e0>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&roll + 1) = RxBuffer[i + 2];
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	3302      	adds	r3, #2
 8002f72:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <main+0x7f8>)
 8002f74:	4929      	ldr	r1, [pc, #164]	@ (800301c <main+0x7e0>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&roll + 2) = RxBuffer[i + 3];
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003038 <main+0x7fc>)
 8002f80:	4926      	ldr	r1, [pc, #152]	@ (800301c <main+0x7e0>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&roll + 3) = RxBuffer[i + 4];
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <main+0x800>)
 8002f8c:	4923      	ldr	r1, [pc, #140]	@ (800301c <main+0x7e0>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	7013      	strb	r3, [r2, #0]
 8002f92:	e086      	b.n	80030a2 <main+0x866>

		          }
		          else if (RxBuffer[i] == 'P' && i + 4 < 25) {
 8002f94:	4a21      	ldr	r2, [pc, #132]	@ (800301c <main+0x7e0>)
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b50      	cmp	r3, #80	@ 0x50
 8002f9e:	d11b      	bne.n	8002fd8 <main+0x79c>
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	2b14      	cmp	r3, #20
 8002fa4:	dc18      	bgt.n	8002fd8 <main+0x79c>

		              *((uint8_t*)&pitch + 0) = RxBuffer[i + 1];
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <main+0x804>)
 8002fac:	491b      	ldr	r1, [pc, #108]	@ (800301c <main+0x7e0>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&pitch + 1) = RxBuffer[i + 2];
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	4a23      	ldr	r2, [pc, #140]	@ (8003044 <main+0x808>)
 8002fb8:	4918      	ldr	r1, [pc, #96]	@ (800301c <main+0x7e0>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&pitch + 2) = RxBuffer[i + 3];
 8002fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	4a21      	ldr	r2, [pc, #132]	@ (8003048 <main+0x80c>)
 8002fc4:	4915      	ldr	r1, [pc, #84]	@ (800301c <main+0x7e0>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&pitch + 3) = RxBuffer[i + 4];
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4a1f      	ldr	r2, [pc, #124]	@ (800304c <main+0x810>)
 8002fd0:	4912      	ldr	r1, [pc, #72]	@ (800301c <main+0x7e0>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	7013      	strb	r3, [r2, #0]
 8002fd6:	e064      	b.n	80030a2 <main+0x866>

		          }

		          else if (RxBuffer[i] == 'V' && i + 4 < 25) {
 8002fd8:	4a10      	ldr	r2, [pc, #64]	@ (800301c <main+0x7e0>)
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b56      	cmp	r3, #86	@ 0x56
 8002fe2:	d13d      	bne.n	8003060 <main+0x824>
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	2b14      	cmp	r3, #20
 8002fe8:	dc3a      	bgt.n	8003060 <main+0x824>

					  *((uint8_t*)&velocity + 0) = RxBuffer[i + 1];
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <main+0x814>)
 8002ff0:	490a      	ldr	r1, [pc, #40]	@ (800301c <main+0x7e0>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	7013      	strb	r3, [r2, #0]
					  *((uint8_t*)&velocity + 1) = RxBuffer[i + 2];
 8002ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <main+0x818>)
 8002ffc:	4907      	ldr	r1, [pc, #28]	@ (800301c <main+0x7e0>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	7013      	strb	r3, [r2, #0]
					  *((uint8_t*)&velocity + 2) = RxBuffer[i + 3];
 8003002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003004:	3303      	adds	r3, #3
 8003006:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <main+0x81c>)
 8003008:	4904      	ldr	r1, [pc, #16]	@ (800301c <main+0x7e0>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	7013      	strb	r3, [r2, #0]
					  *((uint8_t*)&velocity + 3) = RxBuffer[i + 4];
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	3304      	adds	r3, #4
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <main+0x820>)
 8003014:	4901      	ldr	r1, [pc, #4]	@ (800301c <main+0x7e0>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	7013      	strb	r3, [r2, #0]
 800301a:	e042      	b.n	80030a2 <main+0x866>
 800301c:	200004fc 	.word	0x200004fc
 8003020:	20000518 	.word	0x20000518
 8003024:	20000519 	.word	0x20000519
 8003028:	2000051a 	.word	0x2000051a
 800302c:	2000051b 	.word	0x2000051b
 8003030:	20000520 	.word	0x20000520
 8003034:	20000521 	.word	0x20000521
 8003038:	20000522 	.word	0x20000522
 800303c:	20000523 	.word	0x20000523
 8003040:	20000524 	.word	0x20000524
 8003044:	20000525 	.word	0x20000525
 8003048:	20000526 	.word	0x20000526
 800304c:	20000527 	.word	0x20000527
 8003050:	2000051c 	.word	0x2000051c
 8003054:	2000051d 	.word	0x2000051d
 8003058:	2000051e 	.word	0x2000051e
 800305c:	2000051f 	.word	0x2000051f

		         		          }
		          else if (RxBuffer[i] == 'Y' && i + 4 < 25) {
 8003060:	4aaa      	ldr	r2, [pc, #680]	@ (800330c <main+0xad0>)
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b59      	cmp	r3, #89	@ 0x59
 800306a:	d11a      	bne.n	80030a2 <main+0x866>
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	2b14      	cmp	r3, #20
 8003070:	dc17      	bgt.n	80030a2 <main+0x866>

		              *((uint8_t*)&yaw + 0) = RxBuffer[i + 1];
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	3301      	adds	r3, #1
 8003076:	4aa6      	ldr	r2, [pc, #664]	@ (8003310 <main+0xad4>)
 8003078:	49a4      	ldr	r1, [pc, #656]	@ (800330c <main+0xad0>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&yaw + 1) = RxBuffer[i + 2];
 800307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003080:	3302      	adds	r3, #2
 8003082:	4aa4      	ldr	r2, [pc, #656]	@ (8003314 <main+0xad8>)
 8003084:	49a1      	ldr	r1, [pc, #644]	@ (800330c <main+0xad0>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&yaw + 2) = RxBuffer[i + 3];
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	3303      	adds	r3, #3
 800308e:	4aa2      	ldr	r2, [pc, #648]	@ (8003318 <main+0xadc>)
 8003090:	499e      	ldr	r1, [pc, #632]	@ (800330c <main+0xad0>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	7013      	strb	r3, [r2, #0]
		              *((uint8_t*)&yaw + 3) = RxBuffer[i + 4];
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003098:	3304      	adds	r3, #4
 800309a:	4aa0      	ldr	r2, [pc, #640]	@ (800331c <main+0xae0>)
 800309c:	499b      	ldr	r1, [pc, #620]	@ (800330c <main+0xad0>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	7013      	strb	r3, [r2, #0]
		      for (i = 0; i < 25; i++) {
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	3301      	adds	r3, #1
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	2b18      	cmp	r3, #24
 80030ac:	f77f af2e 	ble.w	8002f0c <main+0x6d0>

		          }
		      }
	  }
	  rxComplete=0;
 80030b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003320 <main+0xae4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]

	  LCD_Font(0, 18, buf1, _Open_Sans_Bold_24  , 1, WHITE);
 80030b6:	463a      	mov	r2, r7
 80030b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2301      	movs	r3, #1
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4b98      	ldr	r3, [pc, #608]	@ (8003324 <main+0xae8>)
 80030c4:	2112      	movs	r1, #18
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fe fbb2 	bl	8001830 <LCD_Font>
	 	  	  touchx = getX();
 80030cc:	f000 fefc 	bl	8003ec8 <getX>
 80030d0:	4603      	mov	r3, r0
 80030d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	 	  	  touchy = getY();
 80030d4:	f000 ff12 	bl	8003efc <getY>
 80030d8:	4603      	mov	r3, r0
 80030da:	853b      	strh	r3, [r7, #40]	@ 0x28
	 	  	  sprintf(buf,"x=%3d y=%3d",touchx,touchy);
 80030dc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80030de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030e0:	f107 0014 	add.w	r0, r7, #20
 80030e4:	4990      	ldr	r1, [pc, #576]	@ (8003328 <main+0xaec>)
 80030e6:	f005 f9c3 	bl	8008470 <siprintf>
	 	  	  sprintf(buf1,"x=%3d y=%3d",touchx,touchy);
 80030ea:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80030ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030ee:	4638      	mov	r0, r7
 80030f0:	498d      	ldr	r1, [pc, #564]	@ (8003328 <main+0xaec>)
 80030f2:	f005 f9bd 	bl	8008470 <siprintf>
	 	  	  LCD_Font(0, 18, buf, _Open_Sans_Bold_24  , 1, BLACK);
 80030f6:	f107 0214 	add.w	r2, r7, #20
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2301      	movs	r3, #1
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <main+0xae8>)
 8003104:	2112      	movs	r1, #18
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe fb92 	bl	8001830 <LCD_Font>


	 	  	  	if(touchx >=155 && touchx<=460 && touchy>=20 && touchy<=30)
 800310c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800310e:	2b9a      	cmp	r3, #154	@ 0x9a
 8003110:	d949      	bls.n	80031a6 <main+0x96a>
 8003112:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003114:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8003118:	d845      	bhi.n	80031a6 <main+0x96a>
 800311a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800311c:	2b13      	cmp	r3, #19
 800311e:	d942      	bls.n	80031a6 <main+0x96a>
 8003120:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003122:	2b1e      	cmp	r3, #30
 8003124:	d83f      	bhi.n	80031a6 <main+0x96a>
	 	  		{

	 	  		   LCD_Rect_Round_Fill(165, 30, 280, 20, 5, WHITE);
 8003126:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	2305      	movs	r3, #5
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2314      	movs	r3, #20
 8003132:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003136:	211e      	movs	r1, #30
 8003138:	20a5      	movs	r0, #165	@ 0xa5
 800313a:	f7ff faf5 	bl	8002728 <LCD_Rect_Round_Fill>
	 	  		   LCD_Rect_Round(165, 30, 280, 20, 5,1, BLUE);
 800313e:	231f      	movs	r3, #31
 8003140:	9302      	str	r3, [sp, #8]
 8003142:	2301      	movs	r3, #1
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2305      	movs	r3, #5
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2314      	movs	r3, #20
 800314c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003150:	211e      	movs	r1, #30
 8003152:	20a5      	movs	r0, #165	@ 0xa5
 8003154:	f7ff f925 	bl	80023a2 <LCD_Rect_Round>
	 	  		   LCD_Rect_Round_Fill(165, 30, touchx-155, 20, 5, BLUE);
 8003158:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800315a:	3b9b      	subs	r3, #155	@ 0x9b
 800315c:	b29a      	uxth	r2, r3
 800315e:	231f      	movs	r3, #31
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2305      	movs	r3, #5
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2314      	movs	r3, #20
 8003168:	211e      	movs	r1, #30
 800316a:	20a5      	movs	r0, #165	@ 0xa5
 800316c:	f7ff fadc 	bl	8002728 <LCD_Rect_Round_Fill>

	 	  		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, AA[touchx-150]);
 8003170:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003172:	3b96      	subs	r3, #150	@ 0x96
 8003174:	4a6d      	ldr	r2, [pc, #436]	@ (800332c <main+0xaf0>)
 8003176:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800317a:	4b6d      	ldr	r3, [pc, #436]	@ (8003330 <main+0xaf4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	639a      	str	r2, [r3, #56]	@ 0x38

	 	  		ringMeter1(touchx*2, 0, 1020, 25, 30, 60,15,YELLOW, RED2RED);
 8003180:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003182:	0058      	lsls	r0, r3, #1
 8003184:	2300      	movs	r3, #0
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800318c:	9303      	str	r3, [sp, #12]
 800318e:	230f      	movs	r3, #15
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	233c      	movs	r3, #60	@ 0x3c
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	231e      	movs	r3, #30
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2319      	movs	r3, #25
 800319c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 80031a0:	2100      	movs	r1, #0
 80031a2:	f7fe fd69 	bl	8001c78 <ringMeter1>

	 	  		}

	 	  	  	if(touchx >=155 && touchx<=460 && touchy>=80 && touchy<=100)
 80031a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80031a8:	2b9a      	cmp	r3, #154	@ 0x9a
 80031aa:	d94b      	bls.n	8003244 <main+0xa08>
 80031ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80031ae:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 80031b2:	d847      	bhi.n	8003244 <main+0xa08>
 80031b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80031b8:	d944      	bls.n	8003244 <main+0xa08>
 80031ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031bc:	2b64      	cmp	r3, #100	@ 0x64
 80031be:	d841      	bhi.n	8003244 <main+0xa08>
	 	  		{

	 	  		   LCD_Rect_Round_Fill(165, 90, 280, 20, 5, WHITE);
 80031c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2305      	movs	r3, #5
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2314      	movs	r3, #20
 80031cc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80031d0:	215a      	movs	r1, #90	@ 0x5a
 80031d2:	20a5      	movs	r0, #165	@ 0xa5
 80031d4:	f7ff faa8 	bl	8002728 <LCD_Rect_Round_Fill>
	 	  		   LCD_Rect_Round(165, 90, 280, 20, 5,1, RED);
 80031d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031dc:	9302      	str	r3, [sp, #8]
 80031de:	2301      	movs	r3, #1
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2305      	movs	r3, #5
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2314      	movs	r3, #20
 80031e8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80031ec:	215a      	movs	r1, #90	@ 0x5a
 80031ee:	20a5      	movs	r0, #165	@ 0xa5
 80031f0:	f7ff f8d7 	bl	80023a2 <LCD_Rect_Round>
	 	  		   LCD_Rect_Round_Fill(165, 90, touchx-155, 20, 5, RED);
 80031f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80031f6:	3b9b      	subs	r3, #155	@ 0x9b
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2305      	movs	r3, #5
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2314      	movs	r3, #20
 8003206:	215a      	movs	r1, #90	@ 0x5a
 8003208:	20a5      	movs	r0, #165	@ 0xa5
 800320a:	f7ff fa8d 	bl	8002728 <LCD_Rect_Round_Fill>

	 	  		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, AA[touchx-150]);
 800320e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003210:	3b96      	subs	r3, #150	@ 0x96
 8003212:	4a46      	ldr	r2, [pc, #280]	@ (800332c <main+0xaf0>)
 8003214:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003218:	4b45      	ldr	r3, [pc, #276]	@ (8003330 <main+0xaf4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	63da      	str	r2, [r3, #60]	@ 0x3c

	 	  		ringMeter1(touchx*2, 0, 1020, 25, 180, 60,15,YELLOW, BLUE2BLUE);
 800321e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003220:	0058      	lsls	r0, r3, #1
 8003222:	2302      	movs	r3, #2
 8003224:	9304      	str	r3, [sp, #16]
 8003226:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800322a:	9303      	str	r3, [sp, #12]
 800322c:	230f      	movs	r3, #15
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	233c      	movs	r3, #60	@ 0x3c
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	23b4      	movs	r3, #180	@ 0xb4
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2319      	movs	r3, #25
 800323a:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 800323e:	2100      	movs	r1, #0
 8003240:	f7fe fd1a 	bl	8001c78 <ringMeter1>

	 	  		}


	 	  	  	if(touchx >=155 && touchx<=460 && touchy>=140 && touchy<=160)
 8003244:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003246:	2b9a      	cmp	r3, #154	@ 0x9a
 8003248:	d938      	bls.n	80032bc <main+0xa80>
 800324a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800324c:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8003250:	d834      	bhi.n	80032bc <main+0xa80>
 8003252:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003254:	2b8b      	cmp	r3, #139	@ 0x8b
 8003256:	d931      	bls.n	80032bc <main+0xa80>
 8003258:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800325a:	2ba0      	cmp	r3, #160	@ 0xa0
 800325c:	d82e      	bhi.n	80032bc <main+0xa80>
	 	  		{

	 	  		   LCD_Rect_Round_Fill(165, 150, 280, 20, 5, WHITE);
 800325e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	2305      	movs	r3, #5
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2314      	movs	r3, #20
 800326a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800326e:	2196      	movs	r1, #150	@ 0x96
 8003270:	20a5      	movs	r0, #165	@ 0xa5
 8003272:	f7ff fa59 	bl	8002728 <LCD_Rect_Round_Fill>
	 	  		   LCD_Rect_Round(165, 150, 280, 20, 5,1, GREEN);
 8003276:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800327a:	9302      	str	r3, [sp, #8]
 800327c:	2301      	movs	r3, #1
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	2305      	movs	r3, #5
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2314      	movs	r3, #20
 8003286:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800328a:	2196      	movs	r1, #150	@ 0x96
 800328c:	20a5      	movs	r0, #165	@ 0xa5
 800328e:	f7ff f888 	bl	80023a2 <LCD_Rect_Round>
	 	  		   LCD_Rect_Round_Fill(165, 150, touchx-155, 20, 5, GREEN);
 8003292:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003294:	3b9b      	subs	r3, #155	@ 0x9b
 8003296:	b29a      	uxth	r2, r3
 8003298:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2305      	movs	r3, #5
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2314      	movs	r3, #20
 80032a4:	2196      	movs	r1, #150	@ 0x96
 80032a6:	20a5      	movs	r0, #165	@ 0xa5
 80032a8:	f7ff fa3e 	bl	8002728 <LCD_Rect_Round_Fill>

	 	  		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, AA[touchx-150]);
 80032ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032ae:	3b96      	subs	r3, #150	@ 0x96
 80032b0:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <main+0xaf0>)
 80032b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80032b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <main+0xaf4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40


	 	  		}


	 	  	  	if(touchx >=180 && touchx<=290 && touchy>=190 && touchy<=240)
 80032bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032be:	2bb3      	cmp	r3, #179	@ 0xb3
 80032c0:	d90f      	bls.n	80032e2 <main+0xaa6>
 80032c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032c4:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80032c8:	d80b      	bhi.n	80032e2 <main+0xaa6>
 80032ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032cc:	2bbd      	cmp	r3, #189	@ 0xbd
 80032ce:	d908      	bls.n	80032e2 <main+0xaa6>
 80032d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032d2:	2bf0      	cmp	r3, #240	@ 0xf0
 80032d4:	d805      	bhi.n	80032e2 <main+0xaa6>
	 	  		{
	 	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80032dc:	4815      	ldr	r0, [pc, #84]	@ (8003334 <main+0xaf8>)
 80032de:	f001 fd8f 	bl	8004e00 <HAL_GPIO_WritePin>
	 	  		}

	 	  	  	if(touchx >=180 && touchx<=290 && touchy>=250 && touchy<=295)
 80032e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032e4:	2bb3      	cmp	r3, #179	@ 0xb3
 80032e6:	d927      	bls.n	8003338 <main+0xafc>
 80032e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032ea:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80032ee:	d823      	bhi.n	8003338 <main+0xafc>
 80032f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032f2:	2bf9      	cmp	r3, #249	@ 0xf9
 80032f4:	d920      	bls.n	8003338 <main+0xafc>
 80032f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032f8:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80032fc:	d21c      	bcs.n	8003338 <main+0xafc>
	 	  		{
	 	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032fe:	2200      	movs	r2, #0
 8003300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003304:	480b      	ldr	r0, [pc, #44]	@ (8003334 <main+0xaf8>)
 8003306:	f001 fd7b 	bl	8004e00 <HAL_GPIO_WritePin>
 800330a:	e015      	b.n	8003338 <main+0xafc>
 800330c:	200004fc 	.word	0x200004fc
 8003310:	20000528 	.word	0x20000528
 8003314:	20000529 	.word	0x20000529
 8003318:	2000052a 	.word	0x2000052a
 800331c:	2000052b 	.word	0x2000052b
 8003320:	20000515 	.word	0x20000515
 8003324:	0800b478 	.word	0x0800b478
 8003328:	08009f14 	.word	0x08009f14
 800332c:	20000004 	.word	0x20000004
 8003330:	2000040c 	.word	0x2000040c
 8003334:	40020800 	.word	0x40020800
	 	  		}


	 	  	  	if(touchx >=325 && touchx<=435 && touchy>=190 && touchy<=240)
 8003338:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800333a:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 800333e:	d90f      	bls.n	8003360 <main+0xb24>
 8003340:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003342:	f5b3 7fda 	cmp.w	r3, #436	@ 0x1b4
 8003346:	d20b      	bcs.n	8003360 <main+0xb24>
 8003348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800334a:	2bbd      	cmp	r3, #189	@ 0xbd
 800334c:	d908      	bls.n	8003360 <main+0xb24>
 800334e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003350:	2bf0      	cmp	r3, #240	@ 0xf0
 8003352:	d805      	bhi.n	8003360 <main+0xb24>
	 	  		{
	 	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003354:	2201      	movs	r2, #1
 8003356:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800335a:	480e      	ldr	r0, [pc, #56]	@ (8003394 <main+0xb58>)
 800335c:	f001 fd50 	bl	8004e00 <HAL_GPIO_WritePin>
	 	  		}

	 	  	  	if(touchx >=325 && touchx<=435 && touchy>=250 && touchy<=300)
 8003360:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003362:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8003366:	f67f adb1 	bls.w	8002ecc <main+0x690>
 800336a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800336c:	f5b3 7fda 	cmp.w	r3, #436	@ 0x1b4
 8003370:	f4bf adac 	bcs.w	8002ecc <main+0x690>
 8003374:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003376:	2bf9      	cmp	r3, #249	@ 0xf9
 8003378:	f67f ada8 	bls.w	8002ecc <main+0x690>
 800337c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800337e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003382:	f63f ada3 	bhi.w	8002ecc <main+0x690>
	 	  		{
	 	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003386:	2201      	movs	r2, #1
 8003388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800338c:	4801      	ldr	r0, [pc, #4]	@ (8003394 <main+0xb58>)
 800338e:	f001 fd37 	bl	8004e00 <HAL_GPIO_WritePin>
	  if(rxComplete==1)
 8003392:	e59b      	b.n	8002ecc <main+0x690>
 8003394:	40020800 	.word	0x40020800

08003398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b094      	sub	sp, #80	@ 0x50
 800339c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	2234      	movs	r2, #52	@ 0x34
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 f882 	bl	80084b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	4b29      	ldr	r3, [pc, #164]	@ (8003468 <SystemClock_Config+0xd0>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	4a28      	ldr	r2, [pc, #160]	@ (8003468 <SystemClock_Config+0xd0>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80033cc:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <SystemClock_Config+0xd0>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033d8:	2300      	movs	r3, #0
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <SystemClock_Config+0xd4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80033e4:	4a21      	ldr	r2, [pc, #132]	@ (800346c <SystemClock_Config+0xd4>)
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b1f      	ldr	r3, [pc, #124]	@ (800346c <SystemClock_Config+0xd4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003400:	2310      	movs	r3, #16
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003404:	2302      	movs	r3, #2
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003408:	2300      	movs	r3, #0
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800340c:	2308      	movs	r3, #8
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003410:	2354      	movs	r3, #84	@ 0x54
 8003412:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003414:	2302      	movs	r3, #2
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003418:	2302      	movs	r3, #2
 800341a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800341c:	2302      	movs	r3, #2
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4618      	mov	r0, r3
 8003426:	f002 f84f 	bl	80054c8 <HAL_RCC_OscConfig>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003430:	f000 fa18 	bl	8003864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003434:	230f      	movs	r3, #15
 8003436:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003438:	2302      	movs	r3, #2
 800343a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fcef 	bl	8004e34 <HAL_RCC_ClockConfig>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800345c:	f000 fa02 	bl	8003864 <Error_Handler>
  }
}
 8003460:	bf00      	nop
 8003462:	3750      	adds	r7, #80	@ 0x50
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000

08003470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <MX_SPI1_Init+0x64>)
 8003476:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <MX_SPI1_Init+0x68>)
 8003478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <MX_SPI1_Init+0x64>)
 800347c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003482:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <MX_SPI1_Init+0x64>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <MX_SPI1_Init+0x64>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <MX_SPI1_Init+0x64>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <MX_SPI1_Init+0x64>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800349a:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <MX_SPI1_Init+0x64>)
 800349c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a8:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ae:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b4:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034bc:	220a      	movs	r2, #10
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034c0:	4804      	ldr	r0, [pc, #16]	@ (80034d4 <MX_SPI1_Init+0x64>)
 80034c2:	f002 fa9f 	bl	8005a04 <HAL_SPI_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034cc:	f000 f9ca 	bl	8003864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200002fc 	.word	0x200002fc
 80034d8:	40013000 	.word	0x40013000

080034dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034e0:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <MX_SPI2_Init+0x64>)
 80034e2:	4a18      	ldr	r2, [pc, #96]	@ (8003544 <MX_SPI2_Init+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034e6:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <MX_SPI2_Init+0x64>)
 80034e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034ee:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <MX_SPI2_Init+0x64>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <MX_SPI2_Init+0x64>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <MX_SPI2_Init+0x64>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800350c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003510:	2220      	movs	r2, #32
 8003512:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003516:	2200      	movs	r2, #0
 8003518:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <MX_SPI2_Init+0x64>)
 800351c:	2200      	movs	r2, #0
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <MX_SPI2_Init+0x64>)
 8003528:	220a      	movs	r2, #10
 800352a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800352c:	4804      	ldr	r0, [pc, #16]	@ (8003540 <MX_SPI2_Init+0x64>)
 800352e:	f002 fa69 	bl	8005a04 <HAL_SPI_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003538:	f000 f994 	bl	8003864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000354 	.word	0x20000354
 8003544:	40003800 	.word	0x40003800

08003548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	@ 0x38
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800354e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355c:	f107 0320 	add.w	r3, r7, #32
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
 8003574:	615a      	str	r2, [r3, #20]
 8003576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <MX_TIM2_Init+0x114>)
 800357a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800357e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 336;
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <MX_TIM2_Init+0x114>)
 8003582:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8003586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003588:	4b34      	ldr	r3, [pc, #208]	@ (800365c <MX_TIM2_Init+0x114>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800358e:	4b33      	ldr	r3, [pc, #204]	@ (800365c <MX_TIM2_Init+0x114>)
 8003590:	22ff      	movs	r2, #255	@ 0xff
 8003592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003594:	4b31      	ldr	r3, [pc, #196]	@ (800365c <MX_TIM2_Init+0x114>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359a:	4b30      	ldr	r3, [pc, #192]	@ (800365c <MX_TIM2_Init+0x114>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035a0:	482e      	ldr	r0, [pc, #184]	@ (800365c <MX_TIM2_Init+0x114>)
 80035a2:	f002 ffcf 	bl	8006544 <HAL_TIM_Base_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80035ac:	f000 f95a 	bl	8003864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035ba:	4619      	mov	r1, r3
 80035bc:	4827      	ldr	r0, [pc, #156]	@ (800365c <MX_TIM2_Init+0x114>)
 80035be:	f003 f9f3 	bl	80069a8 <HAL_TIM_ConfigClockSource>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80035c8:	f000 f94c 	bl	8003864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035cc:	4823      	ldr	r0, [pc, #140]	@ (800365c <MX_TIM2_Init+0x114>)
 80035ce:	f003 f808 	bl	80065e2 <HAL_TIM_PWM_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80035d8:	f000 f944 	bl	8003864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4619      	mov	r1, r3
 80035ea:	481c      	ldr	r0, [pc, #112]	@ (800365c <MX_TIM2_Init+0x114>)
 80035ec:	f003 fdc0 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80035f6:	f000 f935 	bl	8003864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fa:	2360      	movs	r3, #96	@ 0x60
 80035fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2204      	movs	r2, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4812      	ldr	r0, [pc, #72]	@ (800365c <MX_TIM2_Init+0x114>)
 8003612:	f003 f907 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800361c:	f000 f922 	bl	8003864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	2208      	movs	r2, #8
 8003624:	4619      	mov	r1, r3
 8003626:	480d      	ldr	r0, [pc, #52]	@ (800365c <MX_TIM2_Init+0x114>)
 8003628:	f003 f8fc 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003632:	f000 f917 	bl	8003864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	220c      	movs	r2, #12
 800363a:	4619      	mov	r1, r3
 800363c:	4807      	ldr	r0, [pc, #28]	@ (800365c <MX_TIM2_Init+0x114>)
 800363e:	f003 f8f1 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8003648:	f000 f90c 	bl	8003864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800364c:	4803      	ldr	r0, [pc, #12]	@ (800365c <MX_TIM2_Init+0x114>)
 800364e:	f000 fa07 	bl	8003a60 <HAL_TIM_MspPostInit>

}
 8003652:	bf00      	nop
 8003654:	3738      	adds	r7, #56	@ 0x38
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	2000040c 	.word	0x2000040c

08003660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <MX_USART1_UART_Init+0x50>)
 8003668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 800366c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003684:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003686:	220c      	movs	r2, #12
 8003688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003690:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003696:	4805      	ldr	r0, [pc, #20]	@ (80036ac <MX_USART1_UART_Init+0x4c>)
 8003698:	f003 fde6 	bl	8007268 <HAL_UART_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036a2:	f000 f8df 	bl	8003864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000454 	.word	0x20000454
 80036b0:	40011000 	.word	0x40011000

080036b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	4b17      	ldr	r3, [pc, #92]	@ (800371c <MX_DMA_Init+0x68>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <MX_DMA_Init+0x68>)
 80036c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <MX_DMA_Init+0x68>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <MX_DMA_Init+0x68>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <MX_DMA_Init+0x68>)
 80036e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <MX_DMA_Init+0x68>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	200f      	movs	r0, #15
 80036f8:	f000 fdb5 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80036fc:	200f      	movs	r0, #15
 80036fe:	f000 fdce 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	203a      	movs	r0, #58	@ 0x3a
 8003708:	f000 fdad 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800370c:	203a      	movs	r0, #58	@ 0x3a
 800370e:	f000 fdc6 	bl	800429e <HAL_NVIC_EnableIRQ>

}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	4b46      	ldr	r3, [pc, #280]	@ (8003854 <MX_GPIO_Init+0x134>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	4a45      	ldr	r2, [pc, #276]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6313      	str	r3, [r2, #48]	@ 0x30
 8003746:	4b43      	ldr	r3, [pc, #268]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	4b3f      	ldr	r3, [pc, #252]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	4a3e      	ldr	r2, [pc, #248]	@ (8003854 <MX_GPIO_Init+0x134>)
 800375c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003760:	6313      	str	r3, [r2, #48]	@ 0x30
 8003762:	4b3c      	ldr	r3, [pc, #240]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a37      	ldr	r2, [pc, #220]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	4b31      	ldr	r3, [pc, #196]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a30      	ldr	r2, [pc, #192]	@ (8003854 <MX_GPIO_Init+0x134>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b2e      	ldr	r3, [pc, #184]	@ (8003854 <MX_GPIO_Init+0x134>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80037a6:	2200      	movs	r2, #0
 80037a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037ac:	482a      	ldr	r0, [pc, #168]	@ (8003858 <MX_GPIO_Init+0x138>)
 80037ae:	f001 fb27 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2107      	movs	r1, #7
 80037b6:	4829      	ldr	r0, [pc, #164]	@ (800385c <MX_GPIO_Init+0x13c>)
 80037b8:	f001 fb22 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80037bc:	2201      	movs	r2, #1
 80037be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037c2:	4826      	ldr	r0, [pc, #152]	@ (800385c <MX_GPIO_Init+0x13c>)
 80037c4:	f001 fb1c 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_IRQ_GPIO_Port, TP_IRQ_Pin, GPIO_PIN_RESET);
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037ce:	4824      	ldr	r0, [pc, #144]	@ (8003860 <MX_GPIO_Init+0x140>)
 80037d0:	f001 fb16 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4619      	mov	r1, r3
 80037ec:	481a      	ldr	r0, [pc, #104]	@ (8003858 <MX_GPIO_Init+0x138>)
 80037ee:	f001 f973 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TP_CS_Pin;
 80037f2:	f241 0301 	movw	r3, #4097	@ 0x1001
 80037f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	4814      	ldr	r0, [pc, #80]	@ (800385c <MX_GPIO_Init+0x13c>)
 800380c:	f001 f964 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin;
 8003810:	2306      	movs	r3, #6
 8003812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003814:	2301      	movs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381c:	2302      	movs	r3, #2
 800381e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	480d      	ldr	r0, [pc, #52]	@ (800385c <MX_GPIO_Init+0x13c>)
 8003828:	f001 f956 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800382c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	4806      	ldr	r0, [pc, #24]	@ (8003860 <MX_GPIO_Init+0x140>)
 8003846:	f001 f947 	bl	8004ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800384a:	bf00      	nop
 800384c:	3728      	adds	r7, #40	@ 0x28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40020800 	.word	0x40020800
 800385c:	40020400 	.word	0x40020400
 8003860:	40020000 	.word	0x40020000

08003864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003868:	b672      	cpsid	i
}
 800386a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <Error_Handler+0x8>

08003870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <HAL_MspInit+0x4c>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	4a0f      	ldr	r2, [pc, #60]	@ (80038bc <HAL_MspInit+0x4c>)
 8003880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003884:	6453      	str	r3, [r2, #68]	@ 0x44
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <HAL_MspInit+0x4c>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_MspInit+0x4c>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <HAL_MspInit+0x4c>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_MspInit+0x4c>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038ae:	2007      	movs	r0, #7
 80038b0:	f000 fcce 	bl	8004250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	@ 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 031c 	add.w	r3, r7, #28
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a49      	ldr	r2, [pc, #292]	@ (8003a04 <HAL_SPI_MspInit+0x144>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d12c      	bne.n	800393c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	4a47      	ldr	r2, [pc, #284]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 80038ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f2:	4b45      	ldr	r3, [pc, #276]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6313      	str	r3, [r2, #48]	@ 0x30
 800390e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800391a:	23e0      	movs	r3, #224	@ 0xe0
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003926:	2303      	movs	r3, #3
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800392a:	2305      	movs	r3, #5
 800392c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	4619      	mov	r1, r3
 8003934:	4835      	ldr	r0, [pc, #212]	@ (8003a0c <HAL_SPI_MspInit+0x14c>)
 8003936:	f001 f8cf 	bl	8004ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800393a:	e05f      	b.n	80039fc <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a33      	ldr	r2, [pc, #204]	@ (8003a10 <HAL_SPI_MspInit+0x150>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d15a      	bne.n	80039fc <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003954:	6413      	str	r3, [r2, #64]	@ 0x40
 8003956:	4b2c      	ldr	r3, [pc, #176]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a27      	ldr	r2, [pc, #156]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_SPI_MspInit+0x148>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800397e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003990:	2305      	movs	r3, #5
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	481e      	ldr	r0, [pc, #120]	@ (8003a14 <HAL_SPI_MspInit+0x154>)
 800399c:	f001 f89c 	bl	8004ad8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <HAL_SPI_MspInit+0x15c>)
 80039a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80039a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b2:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039b8:	4b17      	ldr	r3, [pc, #92]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c0:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c6:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80039cc:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80039d2:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80039d8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039da:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039dc:	2200      	movs	r2, #0
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80039e0:	480d      	ldr	r0, [pc, #52]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039e2:	f000 fc77 	bl	80042d4 <HAL_DMA_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 80039ec:	f7ff ff3a 	bl	8003864 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <HAL_SPI_MspInit+0x158>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	@ 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40013000 	.word	0x40013000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40003800 	.word	0x40003800
 8003a14:	40020400 	.word	0x40020400
 8003a18:	200003ac 	.word	0x200003ac
 8003a1c:	40026070 	.word	0x40026070

08003a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a30:	d10d      	bne.n	8003a4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_TIM_Base_MspInit+0x3c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	4a08      	ldr	r2, [pc, #32]	@ (8003a5c <HAL_TIM_Base_MspInit+0x3c>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_TIM_Base_MspInit+0x3c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d11d      	bne.n	8003abe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_TIM_MspPostInit+0x68>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac8 <HAL_TIM_MspPostInit+0x68>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_TIM_MspPostInit+0x68>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003a9e:	230e      	movs	r3, #14
 8003aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4804      	ldr	r0, [pc, #16]	@ (8003acc <HAL_TIM_MspPostInit+0x6c>)
 8003aba:	f001 f80d 	bl	8004ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003abe:	bf00      	nop
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020000 	.word	0x40020000

08003ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a35      	ldr	r2, [pc, #212]	@ (8003bc4 <HAL_UART_MspInit+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d164      	bne.n	8003bbc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003afc:	f043 0310 	orr.w	r3, r3, #16
 8003b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b02:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <HAL_UART_MspInit+0xf8>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	4821      	ldr	r0, [pc, #132]	@ (8003bcc <HAL_UART_MspInit+0xfc>)
 8003b48:	f000 ffc6 	bl	8004ad8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003b4c:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b4e:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_UART_MspInit+0x104>)
 8003b50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003b52:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003b58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b6e:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b74:	4b16      	ldr	r3, [pc, #88]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003b7a:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b82:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b88:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b90:	480f      	ldr	r0, [pc, #60]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003b92:	f000 fb9f 	bl	80042d4 <HAL_DMA_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003b9c:	f7ff fe62 	bl	8003864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <HAL_UART_MspInit+0x100>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	2100      	movs	r1, #0
 8003bb0:	2025      	movs	r0, #37	@ 0x25
 8003bb2:	f000 fb58 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bb6:	2025      	movs	r0, #37	@ 0x25
 8003bb8:	f000 fb71 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	@ 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40011000 	.word	0x40011000
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	2000049c 	.word	0x2000049c
 8003bd4:	40026440 	.word	0x40026440

08003bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <NMI_Handler+0x4>

08003be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <HardFault_Handler+0x4>

08003be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <MemManage_Handler+0x4>

08003bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	bf00      	nop
 8003bfe:	e7fd      	b.n	8003bfc <UsageFault_Handler+0x4>

08003c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c2e:	f000 f9fb 	bl	8004028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003c3c:	4802      	ldr	r0, [pc, #8]	@ (8003c48 <DMA1_Stream4_IRQHandler+0x10>)
 8003c3e:	f000 fce1 	bl	8004604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200003ac 	.word	0x200003ac

08003c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c50:	4802      	ldr	r0, [pc, #8]	@ (8003c5c <USART1_IRQHandler+0x10>)
 8003c52:	f003 fb7f 	bl	8007354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000454 	.word	0x20000454

08003c60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c64:	4802      	ldr	r0, [pc, #8]	@ (8003c70 <DMA2_Stream2_IRQHandler+0x10>)
 8003c66:	f000 fccd 	bl	8004604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000049c 	.word	0x2000049c

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca4:	f004 fc0c 	bl	80084c0 <__errno>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <_sbrk+0x64>)
 8003cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20020000 	.word	0x20020000
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	2000052c 	.word	0x2000052c
 8003cdc:	20000680 	.word	0x20000680

08003ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <SystemInit+0x20>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <SystemInit+0x20>)
 8003cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <remap>:


extern SPI_HandleTypeDef hspi2;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003d12:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d16:	edc7 1a02 	vstr	s3, [r7, #8]
 8003d1a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003d1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <getRaw>:
	HAL_SPI_Transmit(&hspi2, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d70:	481c      	ldr	r0, [pc, #112]	@ (8003de4 <getRaw+0x84>)
 8003d72:	f001 f845 	bl	8004e00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 f976 	bl	8004068 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, &address, 1, 1000);
 8003d7c:	1df9      	adds	r1, r7, #7
 8003d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d82:	2201      	movs	r2, #1
 8003d84:	4818      	ldr	r0, [pc, #96]	@ (8003de8 <getRaw+0x88>)
 8003d86:	f001 fec6 	bl	8005b16 <HAL_SPI_Transmit>
	address = 0x00;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 8003d8e:	f107 020b 	add.w	r2, r7, #11
 8003d92:	1df9      	adds	r1, r7, #7
 8003d94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4812      	ldr	r0, [pc, #72]	@ (8003de8 <getRaw+0x88>)
 8003d9e:	f001 fffd 	bl	8005d9c <HAL_SPI_TransmitReceive>
	MSB = data;   
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 8003daa:	f107 020b 	add.w	r2, r7, #11
 8003dae:	1df9      	adds	r1, r7, #7
 8003db0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	480b      	ldr	r0, [pc, #44]	@ (8003de8 <getRaw+0x88>)
 8003dba:	f001 ffef 	bl	8005d9c <HAL_SPI_TransmitReceive>
	LSB = data;
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dc8:	4806      	ldr	r0, [pc, #24]	@ (8003de4 <getRaw+0x84>)
 8003dca:	f001 f819 	bl	8004e00 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	89bb      	ldrh	r3, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	10db      	asrs	r3, r3, #3
 8003dd8:	b29b      	uxth	r3, r3
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40020400 	.word	0x40020400
 8003de8:	20000354 	.word	0x20000354

08003dec <X>:

inline static uint16_t X(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8003df2:	20d0      	movs	r0, #208	@ 0xd0
 8003df4:	f7ff ffb4 	bl	8003d60 <getRaw>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8003e50 <X+0x64>
 8003e06:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8003e54 <X+0x68>
 8003e0a:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8003e58 <X+0x6c>
 8003e0e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003e5c <X+0x70>
 8003e12:	eeb0 0a67 	vmov.f32	s0, s15
 8003e16:	f7ff ff75 	bl	8003d04 <remap>
 8003e1a:	eef0 7a40 	vmov.f32	s15, s0
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	ee17 3a90 	vmov	r3, s15
 8003e26:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003e2e:	3301      	adds	r3, #1
 8003e30:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <X+0x58>
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003e3e:	d801      	bhi.n	8003e44 <X+0x58>
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	e000      	b.n	8003e46 <X+0x5a>
	else return 0;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	439f8000 	.word	0x439f8000
 8003e54:	00000000 	.word	0x00000000
 8003e58:	45480000 	.word	0x45480000
 8003e5c:	43960000 	.word	0x43960000

08003e60 <Y>:

inline static uint16_t Y(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8003e66:	2090      	movs	r0, #144	@ 0x90
 8003e68:	f7ff ff7a 	bl	8003d60 <getRaw>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	ed9f 2a10 	vldr	s4, [pc, #64]	@ 8003eb8 <Y+0x58>
 8003e7a:	eddf 1a10 	vldr	s3, [pc, #64]	@ 8003ebc <Y+0x5c>
 8003e7e:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8003ec0 <Y+0x60>
 8003e82:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8003ec4 <Y+0x64>
 8003e86:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8a:	f7ff ff3b 	bl	8003d04 <remap>
 8003e8e:	eef0 7a40 	vmov.f32	s15, s0
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 3a90 	vmov	r3, s15
 8003e9a:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <Y+0x4e>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8003ea8:	d801      	bhi.n	8003eae <Y+0x4e>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	e000      	b.n	8003eb0 <Y+0x50>
	else return 0;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	43ef8000 	.word	0x43ef8000
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	455ac000 	.word	0x455ac000
 8003ec4:	43e10000 	.word	0x43e10000

08003ec8 <getX>:

uint16_t getX(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8003ece:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <getX+0x30>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8003ed4:	e007      	b.n	8003ee6 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
 8003ed6:	f7ff ffc3 	bl	8003e60 <Y>
 8003eda:	4603      	mov	r3, r0
 8003edc:	80bb      	strh	r3, [r7, #4]
 8003ede:	f7ff ffbf 	bl	8003e60 <Y>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8003ee6:	88ba      	ldrh	r2, [r7, #4]
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d1f3      	bne.n	8003ed6 <getX+0xe>
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
 8003eee:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08009f20 	.word	0x08009f20

08003efc <getY>:

uint16_t getY(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <getY+0x30>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8003f08:	e007      	b.n	8003f1a <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
 8003f0a:	f7ff ff6f 	bl	8003dec <X>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	80bb      	strh	r3, [r7, #4]
 8003f12:	f7ff ff6b 	bl	8003dec <X>
 8003f16:	4603      	mov	r3, r0
 8003f18:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8003f1a:	88ba      	ldrh	r2, [r7, #4]
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d1f3      	bne.n	8003f0a <getY+0xe>
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
 8003f22:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08009f20 	.word	0x08009f20

08003f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f34:	f7ff fed4 	bl	8003ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f38:	480c      	ldr	r0, [pc, #48]	@ (8003f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f3a:	490d      	ldr	r1, [pc, #52]	@ (8003f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f40:	e002      	b.n	8003f48 <LoopCopyDataInit>

08003f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f46:	3304      	adds	r3, #4

08003f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f4c:	d3f9      	bcc.n	8003f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f50:	4c0a      	ldr	r4, [pc, #40]	@ (8003f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f54:	e001      	b.n	8003f5a <LoopFillZerobss>

08003f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f58:	3204      	adds	r2, #4

08003f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f5c:	d3fb      	bcc.n	8003f56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003f5e:	f004 fab5 	bl	80084cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f62:	f7fe fc6b 	bl	800283c <main>
  bx  lr    
 8003f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f70:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8003f74:	08017278 	.word	0x08017278
  ldr r2, =_sbss
 8003f78:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8003f7c:	2000067c 	.word	0x2000067c

08003f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f80:	e7fe      	b.n	8003f80 <ADC_IRQHandler>
	...

08003f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f88:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc4 <HAL_Init+0x40>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <HAL_Init+0x40>)
 8003f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_Init+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <HAL_Init+0x40>)
 8003f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fa0:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <HAL_Init+0x40>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fac:	2003      	movs	r0, #3
 8003fae:	f000 f94f 	bl	8004250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f000 f808 	bl	8003fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb8:	f7ff fc5a 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023c00 	.word	0x40023c00

08003fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <HAL_InitTick+0x54>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_InitTick+0x58>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f967 	bl	80042ba <HAL_SYSTICK_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00e      	b.n	8004014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b0f      	cmp	r3, #15
 8003ffa:	d80a      	bhi.n	8004012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f000 f92f 	bl	8004266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004008:	4a06      	ldr	r2, [pc, #24]	@ (8004024 <HAL_InitTick+0x5c>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	2000027c 	.word	0x2000027c
 8004020:	20000284 	.word	0x20000284
 8004024:	20000280 	.word	0x20000280

08004028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_IncTick+0x20>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_IncTick+0x24>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4413      	add	r3, r2
 8004038:	4a04      	ldr	r2, [pc, #16]	@ (800404c <HAL_IncTick+0x24>)
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000284 	.word	0x20000284
 800404c:	20000530 	.word	0x20000530

08004050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return uwTick;
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_GetTick+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000530 	.word	0x20000530

08004068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7ff ffee 	bl	8004050 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d005      	beq.n	800408e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <HAL_Delay+0x44>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800408e:	bf00      	nop
 8004090:	f7ff ffde 	bl	8004050 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d8f7      	bhi.n	8004090 <HAL_Delay+0x28>
  {
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000284 	.word	0x20000284

080040b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e2:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	60d3      	str	r3, [r2, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040fc:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <__NVIC_GetPriorityGrouping+0x18>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 0307 	and.w	r3, r3, #7
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db0b      	blt.n	800413e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	4907      	ldr	r1, [pc, #28]	@ (800414c <__NVIC_EnableIRQ+0x38>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2001      	movs	r0, #1
 8004136:	fa00 f202 	lsl.w	r2, r0, r2
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	@ (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	@ (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	@ 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	@ 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800421c:	d301      	bcc.n	8004222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421e:	2301      	movs	r3, #1
 8004220:	e00f      	b.n	8004242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004222:	4a0a      	ldr	r2, [pc, #40]	@ (800424c <SysTick_Config+0x40>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422a:	210f      	movs	r1, #15
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f7ff ff8e 	bl	8004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <SysTick_Config+0x40>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423a:	4b04      	ldr	r3, [pc, #16]	@ (800424c <SysTick_Config+0x40>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010

08004250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff29 	bl	80040b0 <__NVIC_SetPriorityGrouping>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	4603      	mov	r3, r0
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004278:	f7ff ff3e 	bl	80040f8 <__NVIC_GetPriorityGrouping>
 800427c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff8e 	bl	80041a4 <NVIC_EncodePriority>
 8004288:	4602      	mov	r2, r0
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff5d 	bl	8004150 <__NVIC_SetPriority>
}
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff31 	bl	8004114 <__NVIC_EnableIRQ>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffa2 	bl	800420c <SysTick_Config>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff feb6 	bl	8004050 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e099      	b.n	8004424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004310:	e00f      	b.n	8004332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004312:	f7ff fe9d 	bl	8004050 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b05      	cmp	r3, #5
 800431e:	d908      	bls.n	8004332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e078      	b.n	8004424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e8      	bne.n	8004312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4b38      	ldr	r3, [pc, #224]	@ (800442c <HAL_DMA_Init+0x158>)
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	2b04      	cmp	r3, #4
 800438a:	d107      	bne.n	800439c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d117      	bne.n	80043f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb01 	bl	80049e0 <DMA_CheckFifoParam>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043f2:	2301      	movs	r3, #1
 80043f4:	e016      	b.n	8004424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fab8 	bl	8004974 <DMA_CalcBaseAndBitshift>
 8004404:	4603      	mov	r3, r0
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	223f      	movs	r2, #63	@ 0x3f
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	f010803f 	.word	0xf010803f

08004430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Start_IT+0x26>
 8004452:	2302      	movs	r3, #2
 8004454:	e040      	b.n	80044d8 <HAL_DMA_Start_IT+0xa8>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d12f      	bne.n	80044ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fa4a 	bl	8004918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	223f      	movs	r2, #63	@ 0x3f
 800448a:	409a      	lsls	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0216 	orr.w	r2, r2, #22
 800449e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e005      	b.n	80044d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ee:	f7ff fdaf 	bl	8004050 <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d008      	beq.n	8004512 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2280      	movs	r2, #128	@ 0x80
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e052      	b.n	80045b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0216 	bic.w	r2, r2, #22
 8004520:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004530:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <HAL_DMA_Abort+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0208 	bic.w	r2, r2, #8
 8004550:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004562:	e013      	b.n	800458c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004564:	f7ff fd74 	bl	8004050 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b05      	cmp	r3, #5
 8004570:	d90c      	bls.n	800458c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e015      	b.n	80045b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e4      	bne.n	8004564 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	223f      	movs	r2, #63	@ 0x3f
 80045a0:	409a      	lsls	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	@ 0x80
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e00c      	b.n	80045f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2205      	movs	r2, #5
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004610:	4b8e      	ldr	r3, [pc, #568]	@ (800484c <HAL_DMA_IRQHandler+0x248>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a8e      	ldr	r2, [pc, #568]	@ (8004850 <HAL_DMA_IRQHandler+0x24c>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	0a9b      	lsrs	r3, r3, #10
 800461c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462e:	2208      	movs	r2, #8
 8004630:	409a      	lsls	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01a      	beq.n	8004670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	2208      	movs	r2, #8
 800465e:	409a      	lsls	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004674:	2201      	movs	r2, #1
 8004676:	409a      	lsls	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	2201      	movs	r2, #1
 8004694:	409a      	lsls	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	2204      	movs	r2, #4
 80046ac:	409a      	lsls	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	2204      	movs	r2, #4
 80046ca:	409a      	lsls	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	2210      	movs	r2, #16
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d043      	beq.n	8004774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d03c      	beq.n	8004774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fe:	2210      	movs	r2, #16
 8004700:	409a      	lsls	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d024      	beq.n	8004774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	4798      	blx	r3
 8004732:	e01f      	b.n	8004774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
 8004744:	e016      	b.n	8004774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0208 	bic.w	r2, r2, #8
 8004762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	2220      	movs	r2, #32
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 808f 	beq.w	80048a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8087 	beq.w	80048a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479a:	2220      	movs	r2, #32
 800479c:	409a      	lsls	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d136      	bne.n	800481c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0216 	bic.w	r2, r2, #22
 80047bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <HAL_DMA_IRQHandler+0x1da>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0208 	bic.w	r2, r2, #8
 80047ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f2:	223f      	movs	r2, #63	@ 0x3f
 80047f4:	409a      	lsls	r2, r3
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	2b00      	cmp	r3, #0
 8004810:	d07e      	beq.n	8004910 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
        }
        return;
 800481a:	e079      	b.n	8004910 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10d      	bne.n	8004854 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483c:	2b00      	cmp	r3, #0
 800483e:	d031      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
 8004848:	e02c      	b.n	80048a4 <HAL_DMA_IRQHandler+0x2a0>
 800484a:	bf00      	nop
 800484c:	2000027c 	.word	0x2000027c
 8004850:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d023      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
 8004864:	e01e      	b.n	80048a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0210 	bic.w	r2, r2, #16
 8004882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d032      	beq.n	8004912 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d022      	beq.n	80048fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2205      	movs	r2, #5
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d307      	bcc.n	80048ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f2      	bne.n	80048d0 <HAL_DMA_IRQHandler+0x2cc>
 80048ea:	e000      	b.n	80048ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
 800490e:	e000      	b.n	8004912 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004910:	bf00      	nop
    }
  }
}
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d108      	bne.n	8004958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004956:	e007      	b.n	8004968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3b10      	subs	r3, #16
 8004984:	4a14      	ldr	r2, [pc, #80]	@ (80049d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800498e:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <DMA_CalcBaseAndBitshift+0x68>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d909      	bls.n	80049b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80049b4:	e007      	b.n	80049c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	aaaaaaab 	.word	0xaaaaaaab
 80049dc:	08017050 	.word	0x08017050

080049e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11f      	bne.n	8004a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d856      	bhi.n	8004aae <DMA_CheckFifoParam+0xce>
 8004a00:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <DMA_CheckFifoParam+0x28>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a2b 	.word	0x08004a2b
 8004a10:	08004a19 	.word	0x08004a19
 8004a14:	08004aaf 	.word	0x08004aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d046      	beq.n	8004ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e043      	b.n	8004ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a32:	d140      	bne.n	8004ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a38:	e03d      	b.n	8004ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a42:	d121      	bne.n	8004a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d837      	bhi.n	8004aba <DMA_CheckFifoParam+0xda>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <DMA_CheckFifoParam+0x70>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a61 	.word	0x08004a61
 8004a54:	08004a67 	.word	0x08004a67
 8004a58:	08004a61 	.word	0x08004a61
 8004a5c:	08004a79 	.word	0x08004a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e030      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d025      	beq.n	8004abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a76:	e022      	b.n	8004abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a80:	d11f      	bne.n	8004ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a86:	e01c      	b.n	8004ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d903      	bls.n	8004a96 <DMA_CheckFifoParam+0xb6>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d003      	beq.n	8004a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a94:	e018      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9a:	e015      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e00b      	b.n	8004ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e00a      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e008      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e006      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aba:	bf00      	nop
 8004abc:	e004      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop

08004ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	@ 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e165      	b.n	8004dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004af4:	2201      	movs	r2, #1
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f040 8154 	bne.w	8004dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d005      	beq.n	8004b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d130      	bne.n	8004b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2203      	movs	r2, #3
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b60:	2201      	movs	r2, #1
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 0201 	and.w	r2, r3, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d017      	beq.n	8004bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d123      	bne.n	8004c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	08da      	lsrs	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3208      	adds	r2, #8
 8004bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	220f      	movs	r2, #15
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	2203      	movs	r2, #3
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0203 	and.w	r2, r3, #3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80ae 	beq.w	8004dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd8 <HAL_GPIO_Init+0x300>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd8 <HAL_GPIO_Init+0x300>)
 8004c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd8 <HAL_GPIO_Init+0x300>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7a:	4a58      	ldr	r2, [pc, #352]	@ (8004ddc <HAL_GPIO_Init+0x304>)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3302      	adds	r3, #2
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	220f      	movs	r2, #15
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8004de0 <HAL_GPIO_Init+0x308>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d025      	beq.n	8004cf2 <HAL_GPIO_Init+0x21a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8004de4 <HAL_GPIO_Init+0x30c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01f      	beq.n	8004cee <HAL_GPIO_Init+0x216>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8004de8 <HAL_GPIO_Init+0x310>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d019      	beq.n	8004cea <HAL_GPIO_Init+0x212>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8004dec <HAL_GPIO_Init+0x314>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_GPIO_Init+0x20e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8004df0 <HAL_GPIO_Init+0x318>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_GPIO_Init+0x20a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8004df4 <HAL_GPIO_Init+0x31c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <HAL_GPIO_Init+0x206>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a49      	ldr	r2, [pc, #292]	@ (8004df8 <HAL_GPIO_Init+0x320>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_GPIO_Init+0x202>
 8004cd6:	2306      	movs	r3, #6
 8004cd8:	e00c      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e00a      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004cde:	2305      	movs	r3, #5
 8004ce0:	e008      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e006      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e004      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e002      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_GPIO_Init+0x21c>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	f002 0203 	and.w	r2, r2, #3
 8004cfa:	0092      	lsls	r2, r2, #2
 8004cfc:	4093      	lsls	r3, r2
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d04:	4935      	ldr	r1, [pc, #212]	@ (8004ddc <HAL_GPIO_Init+0x304>)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d12:	4b3a      	ldr	r3, [pc, #232]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d36:	4a31      	ldr	r2, [pc, #196]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d60:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d66:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db4:	4a11      	ldr	r2, [pc, #68]	@ (8004dfc <HAL_GPIO_Init+0x324>)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	f67f ae96 	bls.w	8004af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	40020000 	.word	0x40020000
 8004de4:	40020400 	.word	0x40020400
 8004de8:	40020800 	.word	0x40020800
 8004dec:	40020c00 	.word	0x40020c00
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40021400 	.word	0x40021400
 8004df8:	40021800 	.word	0x40021800
 8004dfc:	40013c00 	.word	0x40013c00

08004e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e10:	787b      	ldrb	r3, [r7, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e1c:	e003      	b.n	8004e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	041a      	lsls	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0cc      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b68      	ldr	r3, [pc, #416]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d90c      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b65      	ldr	r3, [pc, #404]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b63      	ldr	r3, [pc, #396]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b8      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e88:	4b59      	ldr	r3, [pc, #356]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea0:	4b53      	ldr	r3, [pc, #332]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b50      	ldr	r3, [pc, #320]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	494d      	ldr	r1, [pc, #308]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d044      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b47      	ldr	r3, [pc, #284]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d119      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e06f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e067      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f12:	4b37      	ldr	r3, [pc, #220]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 0203 	bic.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4934      	ldr	r1, [pc, #208]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f24:	f7ff f894 	bl	8004050 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2c:	f7ff f890 	bl	8004050 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e04f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f42:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 020c 	and.w	r2, r3, #12
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1eb      	bne.n	8004f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d20c      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e032      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4b19      	ldr	r3, [pc, #100]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4916      	ldr	r1, [pc, #88]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa6:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	490e      	ldr	r1, [pc, #56]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fba:	f000 f855 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490a      	ldr	r1, [pc, #40]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fff4 	bl	8003fc8 <HAL_InitTick>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023c00 	.word	0x40023c00
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	08017038 	.word	0x08017038
 8004ff8:	2000027c 	.word	0x2000027c
 8004ffc:	20000280 	.word	0x20000280

08005000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b03      	ldr	r3, [pc, #12]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000027c 	.word	0x2000027c

08005018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800501c:	f7ff fff0 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0a9b      	lsrs	r3, r3, #10
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	08017048 	.word	0x08017048

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005044:	f7ff ffdc 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0b5b      	lsrs	r3, r3, #13
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	08017048 	.word	0x08017048

08005068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b0ae      	sub	sp, #184	@ 0xb8
 800506e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800508e:	4bcb      	ldr	r3, [pc, #812]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b0c      	cmp	r3, #12
 8005098:	f200 8206 	bhi.w	80054a8 <HAL_RCC_GetSysClockFreq+0x440>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080054a9 	.word	0x080054a9
 80050ac:	080054a9 	.word	0x080054a9
 80050b0:	080054a9 	.word	0x080054a9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080054a9 	.word	0x080054a9
 80050bc:	080054a9 	.word	0x080054a9
 80050c0:	080054a9 	.word	0x080054a9
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080054a9 	.word	0x080054a9
 80050cc:	080054a9 	.word	0x080054a9
 80050d0:	080054a9 	.word	0x080054a9
 80050d4:	080052d9 	.word	0x080052d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4bb9      	ldr	r3, [pc, #740]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80050da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80050de:	e1e7      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e0:	4bb8      	ldr	r3, [pc, #736]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80050e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050e6:	e1e3      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e8:	4bb4      	ldr	r3, [pc, #720]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f4:	4bb1      	ldr	r3, [pc, #708]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d071      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005100:	4bae      	ldr	r3, [pc, #696]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800510c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800511c:	2300      	movs	r3, #0
 800511e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	0159      	lsls	r1, r3, #5
 8005134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005138:	0150      	lsls	r0, r2, #5
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4621      	mov	r1, r4
 8005140:	1a51      	subs	r1, r2, r1
 8005142:	6439      	str	r1, [r7, #64]	@ 0x40
 8005144:	4629      	mov	r1, r5
 8005146:	eb63 0301 	sbc.w	r3, r3, r1
 800514a:	647b      	str	r3, [r7, #68]	@ 0x44
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005158:	4649      	mov	r1, r9
 800515a:	018b      	lsls	r3, r1, #6
 800515c:	4641      	mov	r1, r8
 800515e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005162:	4641      	mov	r1, r8
 8005164:	018a      	lsls	r2, r1, #6
 8005166:	4641      	mov	r1, r8
 8005168:	1a51      	subs	r1, r2, r1
 800516a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800516c:	4649      	mov	r1, r9
 800516e:	eb63 0301 	sbc.w	r3, r3, r1
 8005172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005180:	4649      	mov	r1, r9
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4641      	mov	r1, r8
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4622      	mov	r2, r4
 8005196:	189b      	adds	r3, r3, r2
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
 800519a:	462b      	mov	r3, r5
 800519c:	460a      	mov	r2, r1
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051b0:	4629      	mov	r1, r5
 80051b2:	024b      	lsls	r3, r1, #9
 80051b4:	4621      	mov	r1, r4
 80051b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051ba:	4621      	mov	r1, r4
 80051bc:	024a      	lsls	r2, r1, #9
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80051d4:	f7fb fc5a 	bl	8000a8c <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4613      	mov	r3, r2
 80051de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051e2:	e067      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e4:	4b75      	ldr	r3, [pc, #468]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80051f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051fe:	2300      	movs	r3, #0
 8005200:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	0159      	lsls	r1, r3, #5
 8005214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005218:	0150      	lsls	r0, r2, #5
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4621      	mov	r1, r4
 8005220:	1a51      	subs	r1, r2, r1
 8005222:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005224:	4629      	mov	r1, r5
 8005226:	eb63 0301 	sbc.w	r3, r3, r1
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005238:	4649      	mov	r1, r9
 800523a:	018b      	lsls	r3, r1, #6
 800523c:	4641      	mov	r1, r8
 800523e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005242:	4641      	mov	r1, r8
 8005244:	018a      	lsls	r2, r1, #6
 8005246:	4641      	mov	r1, r8
 8005248:	ebb2 0a01 	subs.w	sl, r2, r1
 800524c:	4649      	mov	r1, r9
 800524e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800525e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005266:	4692      	mov	sl, r2
 8005268:	469b      	mov	fp, r3
 800526a:	4623      	mov	r3, r4
 800526c:	eb1a 0303 	adds.w	r3, sl, r3
 8005270:	623b      	str	r3, [r7, #32]
 8005272:	462b      	mov	r3, r5
 8005274:	eb4b 0303 	adc.w	r3, fp, r3
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005286:	4629      	mov	r1, r5
 8005288:	028b      	lsls	r3, r1, #10
 800528a:	4621      	mov	r1, r4
 800528c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005290:	4621      	mov	r1, r4
 8005292:	028a      	lsls	r2, r1, #10
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800529c:	2200      	movs	r2, #0
 800529e:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80052a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80052a6:	f7fb fbf1 	bl	8000a8c <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4613      	mov	r3, r2
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052b4:	4b41      	ldr	r3, [pc, #260]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	3301      	adds	r3, #1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80052c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052d6:	e0eb      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e4:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06b      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f0:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x354>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	2200      	movs	r2, #0
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	663b      	str	r3, [r7, #96]	@ 0x60
 8005304:	2300      	movs	r3, #0
 8005306:	667b      	str	r3, [r7, #100]	@ 0x64
 8005308:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800530c:	4622      	mov	r2, r4
 800530e:	462b      	mov	r3, r5
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	0159      	lsls	r1, r3, #5
 800531a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531e:	0150      	lsls	r0, r2, #5
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4621      	mov	r1, r4
 8005326:	1a51      	subs	r1, r2, r1
 8005328:	61b9      	str	r1, [r7, #24]
 800532a:	4629      	mov	r1, r5
 800532c:	eb63 0301 	sbc.w	r3, r3, r1
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800533e:	4659      	mov	r1, fp
 8005340:	018b      	lsls	r3, r1, #6
 8005342:	4651      	mov	r1, sl
 8005344:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005348:	4651      	mov	r1, sl
 800534a:	018a      	lsls	r2, r1, #6
 800534c:	4651      	mov	r1, sl
 800534e:	ebb2 0801 	subs.w	r8, r2, r1
 8005352:	4659      	mov	r1, fp
 8005354:	eb63 0901 	sbc.w	r9, r3, r1
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536c:	4690      	mov	r8, r2
 800536e:	4699      	mov	r9, r3
 8005370:	4623      	mov	r3, r4
 8005372:	eb18 0303 	adds.w	r3, r8, r3
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	462b      	mov	r3, r5
 800537a:	eb49 0303 	adc.w	r3, r9, r3
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800538c:	4629      	mov	r1, r5
 800538e:	024b      	lsls	r3, r1, #9
 8005390:	4621      	mov	r1, r4
 8005392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005396:	4621      	mov	r1, r4
 8005398:	024a      	lsls	r2, r1, #9
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a2:	2200      	movs	r2, #0
 80053a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ac:	f7fb fb6e 	bl	8000a8c <__aeabi_uldivmod>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4613      	mov	r3, r2
 80053b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053ba:	e065      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x420>
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c8:	4b3d      	ldr	r3, [pc, #244]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	2200      	movs	r2, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	4611      	mov	r1, r2
 80053d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80053da:	2300      	movs	r3, #0
 80053dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80053de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80053e2:	4642      	mov	r2, r8
 80053e4:	464b      	mov	r3, r9
 80053e6:	f04f 0000 	mov.w	r0, #0
 80053ea:	f04f 0100 	mov.w	r1, #0
 80053ee:	0159      	lsls	r1, r3, #5
 80053f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f4:	0150      	lsls	r0, r2, #5
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4641      	mov	r1, r8
 80053fc:	1a51      	subs	r1, r2, r1
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	4649      	mov	r1, r9
 8005402:	eb63 0301 	sbc.w	r3, r3, r1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005414:	4659      	mov	r1, fp
 8005416:	018b      	lsls	r3, r1, #6
 8005418:	4651      	mov	r1, sl
 800541a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800541e:	4651      	mov	r1, sl
 8005420:	018a      	lsls	r2, r1, #6
 8005422:	4651      	mov	r1, sl
 8005424:	1a54      	subs	r4, r2, r1
 8005426:	4659      	mov	r1, fp
 8005428:	eb63 0501 	sbc.w	r5, r3, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	00eb      	lsls	r3, r5, #3
 8005436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800543a:	00e2      	lsls	r2, r4, #3
 800543c:	4614      	mov	r4, r2
 800543e:	461d      	mov	r5, r3
 8005440:	4643      	mov	r3, r8
 8005442:	18e3      	adds	r3, r4, r3
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	464b      	mov	r3, r9
 8005448:	eb45 0303 	adc.w	r3, r5, r3
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800545a:	4629      	mov	r1, r5
 800545c:	028b      	lsls	r3, r1, #10
 800545e:	4621      	mov	r1, r4
 8005460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005464:	4621      	mov	r1, r4
 8005466:	028a      	lsls	r2, r1, #10
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005470:	2200      	movs	r2, #0
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005474:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800547a:	f7fb fb07 	bl	8000a8c <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4613      	mov	r3, r2
 8005484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005488:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	0f1b      	lsrs	r3, r3, #28
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800549a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054a6:	e003      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a8:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80054aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	37b8      	adds	r7, #184	@ 0xb8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	00f42400 	.word	0x00f42400

080054c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e28d      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8083 	beq.w	80055ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054e8:	4b94      	ldr	r3, [pc, #592]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 030c 	and.w	r3, r3, #12
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d019      	beq.n	8005528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054f4:	4b91      	ldr	r3, [pc, #580]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d106      	bne.n	800550e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005500:	4b8e      	ldr	r3, [pc, #568]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550c:	d00c      	beq.n	8005528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550e:	4b8b      	ldr	r3, [pc, #556]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d112      	bne.n	8005540 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551a:	4b88      	ldr	r3, [pc, #544]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005526:	d10b      	bne.n	8005540 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	4b84      	ldr	r3, [pc, #528]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05b      	beq.n	80055ec <HAL_RCC_OscConfig+0x124>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d157      	bne.n	80055ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e25a      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x90>
 800554a:	4b7c      	ldr	r3, [pc, #496]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a7b      	ldr	r2, [pc, #492]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <HAL_RCC_OscConfig+0xcc>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0xb4>
 8005562:	4b76      	ldr	r3, [pc, #472]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a75      	ldr	r2, [pc, #468]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b73      	ldr	r3, [pc, #460]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a72      	ldr	r2, [pc, #456]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0xcc>
 800557c:	4b6f      	ldr	r3, [pc, #444]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6e      	ldr	r2, [pc, #440]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b6c      	ldr	r3, [pc, #432]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a6b      	ldr	r2, [pc, #428]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800558e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fe fd58 	bl	8004050 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a4:	f7fe fd54 	bl	8004050 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	@ 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e21f      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	4b61      	ldr	r3, [pc, #388]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0xdc>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fe fd44 	bl	8004050 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fe fd40 	bl	8004050 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	@ 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e20b      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	4b57      	ldr	r3, [pc, #348]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x104>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d06f      	beq.n	80056da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055fa:	4b50      	ldr	r3, [pc, #320]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005606:	4b4d      	ldr	r3, [pc, #308]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800560e:	2b08      	cmp	r3, #8
 8005610:	d105      	bne.n	800561e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005612:	4b4a      	ldr	r3, [pc, #296]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561e:	4b47      	ldr	r3, [pc, #284]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005626:	2b0c      	cmp	r3, #12
 8005628:	d11c      	bne.n	8005664 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562a:	4b44      	ldr	r3, [pc, #272]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	4b41      	ldr	r3, [pc, #260]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_RCC_OscConfig+0x186>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e1d3      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564e:	4b3b      	ldr	r3, [pc, #236]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4937      	ldr	r1, [pc, #220]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	e03a      	b.n	80056da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566c:	4b34      	ldr	r3, [pc, #208]	@ (8005740 <HAL_RCC_OscConfig+0x278>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fe fced 	bl	8004050 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800567a:	f7fe fce9 	bl	8004050 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e1b4      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	4b2b      	ldr	r3, [pc, #172]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4b28      	ldr	r3, [pc, #160]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4925      	ldr	r1, [pc, #148]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ae:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <HAL_RCC_OscConfig+0x278>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fe fccc 	bl	8004050 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fe fcc8 	bl	8004050 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e193      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d036      	beq.n	8005754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ee:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fe fcac 	bl	8004050 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fe fca8 	bl	8004050 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e173      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <HAL_RCC_OscConfig+0x274>)
 8005710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x234>
 800571a:	e01b      	b.n	8005754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571c:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <HAL_RCC_OscConfig+0x27c>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005722:	f7fe fc95 	bl	8004050 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005728:	e00e      	b.n	8005748 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800572a:	f7fe fc91 	bl	8004050 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d907      	bls.n	8005748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e15c      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
 800573c:	40023800 	.word	0x40023800
 8005740:	42470000 	.word	0x42470000
 8005744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005748:	4b8a      	ldr	r3, [pc, #552]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800574a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ea      	bne.n	800572a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8097 	beq.w	8005890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005766:	4b83      	ldr	r3, [pc, #524]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10f      	bne.n	8005792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	4b7f      	ldr	r3, [pc, #508]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	4a7e      	ldr	r2, [pc, #504]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	@ 0x40
 8005782:	4b7c      	ldr	r3, [pc, #496]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005792:	4b79      	ldr	r3, [pc, #484]	@ (8005978 <HAL_RCC_OscConfig+0x4b0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d118      	bne.n	80057d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579e:	4b76      	ldr	r3, [pc, #472]	@ (8005978 <HAL_RCC_OscConfig+0x4b0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a75      	ldr	r2, [pc, #468]	@ (8005978 <HAL_RCC_OscConfig+0x4b0>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057aa:	f7fe fc51 	bl	8004050 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fe fc4d 	bl	8004050 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e118      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005978 <HAL_RCC_OscConfig+0x4b0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x31e>
 80057d8:	4b66      	ldr	r3, [pc, #408]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057dc:	4a65      	ldr	r2, [pc, #404]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e4:	e01c      	b.n	8005820 <HAL_RCC_OscConfig+0x358>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b05      	cmp	r3, #5
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x340>
 80057ee:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4a60      	ldr	r2, [pc, #384]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6713      	str	r3, [r2, #112]	@ 0x70
 8005806:	e00b      	b.n	8005820 <HAL_RCC_OscConfig+0x358>
 8005808:	4b5a      	ldr	r3, [pc, #360]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580c:	4a59      	ldr	r2, [pc, #356]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	6713      	str	r3, [r2, #112]	@ 0x70
 8005814:	4b57      	ldr	r3, [pc, #348]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005818:	4a56      	ldr	r2, [pc, #344]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800581a:	f023 0304 	bic.w	r3, r3, #4
 800581e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fe fc12 	bl	8004050 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582e:	e00a      	b.n	8005846 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7fe fc0e 	bl	8004050 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0d7      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005846:	4b4b      	ldr	r3, [pc, #300]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ee      	beq.n	8005830 <HAL_RCC_OscConfig+0x368>
 8005852:	e014      	b.n	800587e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005854:	f7fe fbfc 	bl	8004050 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585a:	e00a      	b.n	8005872 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585c:	f7fe fbf8 	bl	8004050 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0c1      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005872:	4b40      	ldr	r3, [pc, #256]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ee      	bne.n	800585c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d105      	bne.n	8005890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	4a3a      	ldr	r2, [pc, #232]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800588a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80ad 	beq.w	80059f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800589a:	4b36      	ldr	r3, [pc, #216]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d060      	beq.n	8005968 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d145      	bne.n	800593a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ae:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_RCC_OscConfig+0x4b4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fe fbcc 	bl	8004050 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058bc:	f7fe fbc8 	bl	8004050 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e093      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	4b29      	ldr	r3, [pc, #164]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69da      	ldr	r2, [r3, #28]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	019b      	lsls	r3, r3, #6
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	3b01      	subs	r3, #1
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	491b      	ldr	r1, [pc, #108]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590c:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCC_OscConfig+0x4b4>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fe fb9d 	bl	8004050 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591a:	f7fe fb99 	bl	8004050 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e064      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x452>
 8005938:	e05c      	b.n	80059f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <HAL_RCC_OscConfig+0x4b4>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fe fb86 	bl	8004050 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005948:	f7fe fb82 	bl	8004050 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e04d      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_RCC_OscConfig+0x4ac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x480>
 8005966:	e045      	b.n	80059f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e040      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
 8005974:	40023800 	.word	0x40023800
 8005978:	40007000 	.word	0x40007000
 800597c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005980:	4b1f      	ldr	r3, [pc, #124]	@ (8005a00 <HAL_RCC_OscConfig+0x538>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d030      	beq.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d129      	bne.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d122      	bne.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d119      	bne.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d10f      	bne.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800

08005a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e07b      	b.n	8005b0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d108      	bne.n	8005a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a26:	d009      	beq.n	8005a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	61da      	str	r2, [r3, #28]
 8005a2e:	e005      	b.n	8005a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fd ff32 	bl	80038c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac0:	ea42 0103 	orr.w	r1, r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0104 	and.w	r1, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	f003 0210 	and.w	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b088      	sub	sp, #32
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_SPI_Transmit+0x22>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e12d      	b.n	8005d94 <HAL_SPI_Transmit+0x27e>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b40:	f7fe fa86 	bl	8004050 <HAL_GetTick>
 8005b44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b5a:	e116      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x52>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b6c:	e10d      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d007      	beq.n	8005bf4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfc:	d14f      	bne.n	8005c9e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Transmit+0xf6>
 8005c06:	8afb      	ldrh	r3, [r7, #22]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d142      	bne.n	8005c92 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	1c9a      	adds	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c30:	e02f      	b.n	8005c92 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d112      	bne.n	8005c66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c44:	881a      	ldrh	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c50:	1c9a      	adds	r2, r3, #2
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c64:	e015      	b.n	8005c92 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c66:	f7fe f9f3 	bl	8004050 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d803      	bhi.n	8005c7e <HAL_SPI_Transmit+0x168>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d102      	bne.n	8005c84 <HAL_SPI_Transmit+0x16e>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c90:	e07b      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ca      	bne.n	8005c32 <HAL_SPI_Transmit+0x11c>
 8005c9c:	e050      	b.n	8005d40 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Transmit+0x196>
 8005ca6:	8afb      	ldrh	r3, [r7, #22]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d144      	bne.n	8005d36 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cd2:	e030      	b.n	8005d36 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d113      	bne.n	8005d0a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d08:	e015      	b.n	8005d36 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0a:	f7fe f9a1 	bl	8004050 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d803      	bhi.n	8005d22 <HAL_SPI_Transmit+0x20c>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d102      	bne.n	8005d28 <HAL_SPI_Transmit+0x212>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d34:	e029      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1c9      	bne.n	8005cd4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fba9 	bl	800649c <SPI_EndRxTxTransaction>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e003      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d92:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	@ 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005daa:	2301      	movs	r3, #1
 8005dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x26>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e198      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x358>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dca:	f7fe f941 	bl	8004050 <HAL_GetTick>
 8005dce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005de0:	887b      	ldrh	r3, [r7, #2]
 8005de2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00f      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x70>
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005df2:	d107      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x68>
 8005dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d003      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e0a:	e16d      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x82>
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e24:	e160      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d003      	beq.n	8005e3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2205      	movs	r2, #5
 8005e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	887a      	ldrh	r2, [r7, #2]
 8005e50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	887a      	ldrh	r2, [r7, #2]
 8005e62:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d007      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e96:	d17c      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x10a>
 8005ea0:	8b7b      	ldrh	r3, [r7, #26]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d16a      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eca:	e057      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d11b      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x176>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d016      	beq.n	8005f12 <HAL_SPI_TransmitReceive+0x176>
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d113      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d119      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x1b8>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d014      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	b292      	uxth	r2, r2
 8005f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f50:	2301      	movs	r3, #1
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f54:	f7fe f87c 	bl	8004050 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d80b      	bhi.n	8005f7c <HAL_SPI_TransmitReceive+0x1e0>
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d007      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005f7a:	e0b5      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1a2      	bne.n	8005ecc <HAL_SPI_TransmitReceive+0x130>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d19d      	bne.n	8005ecc <HAL_SPI_TransmitReceive+0x130>
 8005f90:	e080      	b.n	8006094 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x204>
 8005f9a:	8b7b      	ldrh	r3, [r7, #26]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d16f      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	7812      	ldrb	r2, [r2, #0]
 8005fac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc6:	e05b      	b.n	8006080 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d11c      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x274>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x274>
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d114      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d119      	bne.n	8006052 <HAL_SPI_TransmitReceive+0x2b6>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d014      	beq.n	8006052 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006052:	f7fd fffd 	bl	8004050 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800605e:	429a      	cmp	r2, r3
 8006060:	d803      	bhi.n	800606a <HAL_SPI_TransmitReceive+0x2ce>
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d102      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x2d4>
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800607e:	e033      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d19e      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x22c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d199      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006096:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f9ff 	bl	800649c <SPI_EndRxTxTransaction>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80060b0:	e01a      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e003      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80060f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	@ 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_SPI_Transmit_DMA+0x20>
 8006118:	2302      	movs	r3, #2
 800611a:	e097      	b.n	800624c <HAL_SPI_Transmit_DMA+0x150>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006130:	2302      	movs	r3, #2
 8006132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006134:	e085      	b.n	8006242 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit_DMA+0x46>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d102      	bne.n	8006148 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006146:	e07c      	b.n	8006242 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2203      	movs	r2, #3
 800614c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618e:	d10f      	bne.n	80061b0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800619e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b4:	4a27      	ldr	r2, [pc, #156]	@ (8006254 <HAL_SPI_Transmit_DMA+0x158>)
 80061b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061bc:	4a26      	ldr	r2, [pc, #152]	@ (8006258 <HAL_SPI_Transmit_DMA+0x15c>)
 80061be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c4:	4a25      	ldr	r2, [pc, #148]	@ (800625c <HAL_SPI_Transmit_DMA+0x160>)
 80061c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061cc:	2200      	movs	r2, #0
 80061ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	4619      	mov	r1, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061e8:	f7fe f922 	bl	8004430 <HAL_DMA_Start_IT>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f6:	f043 0210 	orr.w	r2, r3, #16
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006202:	e01e      	b.n	8006242 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620e:	2b40      	cmp	r3, #64	@ 0x40
 8006210:	d007      	beq.n	8006222 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0220 	orr.w	r2, r2, #32
 8006230:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0202 	orr.w	r2, r2, #2
 8006240:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	08006331 	.word	0x08006331
 8006258:	08006289 	.word	0x08006289
 800625c:	0800634d 	.word	0x0800634d

08006260 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006296:	f7fd fedb 	bl	8004050 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062aa:	d03b      	beq.n	8006324 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0220 	bic.w	r2, r2, #32
 80062ba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0202 	bic.w	r2, r2, #2
 80062ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	2164      	movs	r1, #100	@ 0x64
 80062d0:	6978      	ldr	r0, [r7, #20]
 80062d2:	f000 f8e3 	bl	800649c <SPI_EndRxTxTransaction>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800631c:	6978      	ldr	r0, [r7, #20]
 800631e:	f7ff ffa9 	bl	8006274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006322:	e002      	b.n	800632a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006324:	6978      	ldr	r0, [r7, #20]
 8006326:	f7fc fa79 	bl	800281c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff8e 	bl	8006260 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0203 	bic.w	r2, r2, #3
 8006368:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	f043 0210 	orr.w	r2, r3, #16
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff ff78 	bl	8006274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800639c:	f7fd fe58 	bl	8004050 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	4413      	add	r3, r2
 80063aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063ac:	f7fd fe50 	bl	8004050 <HAL_GetTick>
 80063b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063b2:	4b39      	ldr	r3, [pc, #228]	@ (8006498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	015b      	lsls	r3, r3, #5
 80063b8:	0d1b      	lsrs	r3, r3, #20
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
 80063c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c2:	e054      	b.n	800646e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d050      	beq.n	800646e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063cc:	f7fd fe40 	bl	8004050 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d902      	bls.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d13d      	bne.n	800645e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063fa:	d111      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006404:	d004      	beq.n	8006410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640e:	d107      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800641e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006428:	d10f      	bne.n	800644a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e017      	b.n	800648e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3b01      	subs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d19b      	bne.n	80063c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000027c 	.word	0x2000027c

0800649c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2201      	movs	r2, #1
 80064b0:	2102      	movs	r1, #2
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff ff6a 	bl	800638c <SPI_WaitFlagStateUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c2:	f043 0220 	orr.w	r2, r3, #32
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e032      	b.n	8006534 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064ce:	4b1b      	ldr	r3, [pc, #108]	@ (800653c <SPI_EndRxTxTransaction+0xa0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006540 <SPI_EndRxTxTransaction+0xa4>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	0d5b      	lsrs	r3, r3, #21
 80064da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ec:	d112      	bne.n	8006514 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	@ 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff ff47 	bl	800638c <SPI_WaitFlagStateUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e00f      	b.n	8006534 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	3b01      	subs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652a:	2b80      	cmp	r3, #128	@ 0x80
 800652c:	d0f2      	beq.n	8006514 <SPI_EndRxTxTransaction+0x78>
 800652e:	e000      	b.n	8006532 <SPI_EndRxTxTransaction+0x96>
        break;
 8006530:	bf00      	nop
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	2000027c 	.word	0x2000027c
 8006540:	165e9f81 	.word	0x165e9f81

08006544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e041      	b.n	80065da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fd fa58 	bl	8003a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 fad8 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e041      	b.n	8006678 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f839 	bl	8006680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3304      	adds	r3, #4
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f000 fa89 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <HAL_TIM_PWM_Start+0x24>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	bf14      	ite	ne
 80066b0:	2301      	movne	r3, #1
 80066b2:	2300      	moveq	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e022      	b.n	80066fe <HAL_TIM_PWM_Start+0x6a>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d109      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x3e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	bf14      	ite	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	2300      	moveq	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	e015      	b.n	80066fe <HAL_TIM_PWM_Start+0x6a>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_PWM_Start+0x58>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e008      	b.n	80066fe <HAL_TIM_PWM_Start+0x6a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e07c      	b.n	8006800 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start+0x82>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006714:	e013      	b.n	800673e <HAL_TIM_PWM_Start+0xaa>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d104      	bne.n	8006726 <HAL_TIM_PWM_Start+0x92>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006724:	e00b      	b.n	800673e <HAL_TIM_PWM_Start+0xaa>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d104      	bne.n	8006736 <HAL_TIM_PWM_Start+0xa2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006734:	e003      	b.n	800673e <HAL_TIM_PWM_Start+0xaa>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2201      	movs	r2, #1
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fcec 	bl	8007124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2d      	ldr	r2, [pc, #180]	@ (8006808 <HAL_TIM_PWM_Start+0x174>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <HAL_TIM_PWM_Start+0xcc>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2c      	ldr	r2, [pc, #176]	@ (800680c <HAL_TIM_PWM_Start+0x178>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d101      	bne.n	8006764 <HAL_TIM_PWM_Start+0xd0>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <HAL_TIM_PWM_Start+0xd2>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006778:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a22      	ldr	r2, [pc, #136]	@ (8006808 <HAL_TIM_PWM_Start+0x174>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d022      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678c:	d01d      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1f      	ldr	r2, [pc, #124]	@ (8006810 <HAL_TIM_PWM_Start+0x17c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d018      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <HAL_TIM_PWM_Start+0x180>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006818 <HAL_TIM_PWM_Start+0x184>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00e      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a16      	ldr	r2, [pc, #88]	@ (800680c <HAL_TIM_PWM_Start+0x178>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a18      	ldr	r2, [pc, #96]	@ (800681c <HAL_TIM_PWM_Start+0x188>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d004      	beq.n	80067ca <HAL_TIM_PWM_Start+0x136>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	@ (8006820 <HAL_TIM_PWM_Start+0x18c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b06      	cmp	r3, #6
 80067da:	d010      	beq.n	80067fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ec:	e007      	b.n	80067fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40014000 	.word	0x40014000
 8006820:	40001800 	.word	0x40001800

08006824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800683e:	2302      	movs	r3, #2
 8006840:	e0ae      	b.n	80069a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b0c      	cmp	r3, #12
 800684e:	f200 809f 	bhi.w	8006990 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800688d 	.word	0x0800688d
 800685c:	08006991 	.word	0x08006991
 8006860:	08006991 	.word	0x08006991
 8006864:	08006991 	.word	0x08006991
 8006868:	080068cd 	.word	0x080068cd
 800686c:	08006991 	.word	0x08006991
 8006870:	08006991 	.word	0x08006991
 8006874:	08006991 	.word	0x08006991
 8006878:	0800690f 	.word	0x0800690f
 800687c:	08006991 	.word	0x08006991
 8006880:	08006991 	.word	0x08006991
 8006884:	08006991 	.word	0x08006991
 8006888:	0800694f 	.word	0x0800694f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 f9fc 	bl	8006c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0208 	orr.w	r2, r2, #8
 80068a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0204 	bic.w	r2, r2, #4
 80068b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	619a      	str	r2, [r3, #24]
      break;
 80068ca:	e064      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fa4c 	bl	8006d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	021a      	lsls	r2, r3, #8
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	619a      	str	r2, [r3, #24]
      break;
 800690c:	e043      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 faa1 	bl	8006e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0208 	orr.w	r2, r2, #8
 8006928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0204 	bic.w	r2, r2, #4
 8006938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	61da      	str	r2, [r3, #28]
      break;
 800694c:	e023      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 faf5 	bl	8006f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69d9      	ldr	r1, [r3, #28]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	021a      	lsls	r2, r3, #8
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	61da      	str	r2, [r3, #28]
      break;
 800698e:	e002      	b.n	8006996 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
      break;
 8006994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIM_ConfigClockSource+0x1c>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e0b4      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x186>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fc:	d03e      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0xd4>
 80069fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a02:	f200 8087 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0a:	f000 8086 	beq.w	8006b1a <HAL_TIM_ConfigClockSource+0x172>
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a12:	d87f      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b70      	cmp	r3, #112	@ 0x70
 8006a16:	d01a      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0xa6>
 8006a18:	2b70      	cmp	r3, #112	@ 0x70
 8006a1a:	d87b      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b60      	cmp	r3, #96	@ 0x60
 8006a1e:	d050      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8006a20:	2b60      	cmp	r3, #96	@ 0x60
 8006a22:	d877      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b50      	cmp	r3, #80	@ 0x50
 8006a26:	d03c      	beq.n	8006aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8006a28:	2b50      	cmp	r3, #80	@ 0x50
 8006a2a:	d873      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b40      	cmp	r3, #64	@ 0x40
 8006a2e:	d058      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d86f      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b30      	cmp	r3, #48	@ 0x30
 8006a36:	d064      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15a>
 8006a38:	2b30      	cmp	r3, #48	@ 0x30
 8006a3a:	d86b      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d060      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15a>
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d867      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05c      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15a>
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d05a      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15a>
 8006a4c:	e062      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a5e:	f000 fb41 	bl	80070e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	609a      	str	r2, [r3, #8]
      break;
 8006a7a:	e04f      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a8c:	f000 fb2a 	bl	80070e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a9e:	609a      	str	r2, [r3, #8]
      break;
 8006aa0:	e03c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f000 fa9e 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2150      	movs	r1, #80	@ 0x50
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 faf7 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006ac0:	e02c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 fabd 	bl	800704e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2160      	movs	r1, #96	@ 0x60
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fae7 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e01c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	461a      	mov	r2, r3
 8006af0:	f000 fa7e 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2140      	movs	r1, #64	@ 0x40
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fad7 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b00:	e00c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f000 face 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b12:	e003      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e000      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a46      	ldr	r2, [pc, #280]	@ (8006c64 <TIM_Base_SetConfig+0x12c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a43      	ldr	r2, [pc, #268]	@ (8006c68 <TIM_Base_SetConfig+0x130>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a42      	ldr	r2, [pc, #264]	@ (8006c6c <TIM_Base_SetConfig+0x134>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a41      	ldr	r2, [pc, #260]	@ (8006c70 <TIM_Base_SetConfig+0x138>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a40      	ldr	r2, [pc, #256]	@ (8006c74 <TIM_Base_SetConfig+0x13c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a35      	ldr	r2, [pc, #212]	@ (8006c64 <TIM_Base_SetConfig+0x12c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d02b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b98:	d027      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a32      	ldr	r2, [pc, #200]	@ (8006c68 <TIM_Base_SetConfig+0x130>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d023      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a31      	ldr	r2, [pc, #196]	@ (8006c6c <TIM_Base_SetConfig+0x134>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01f      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a30      	ldr	r2, [pc, #192]	@ (8006c70 <TIM_Base_SetConfig+0x138>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8006c74 <TIM_Base_SetConfig+0x13c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d017      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8006c78 <TIM_Base_SetConfig+0x140>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c7c <TIM_Base_SetConfig+0x144>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006c80 <TIM_Base_SetConfig+0x148>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c84 <TIM_Base_SetConfig+0x14c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c88 <TIM_Base_SetConfig+0x150>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a29      	ldr	r2, [pc, #164]	@ (8006c8c <TIM_Base_SetConfig+0x154>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a10      	ldr	r2, [pc, #64]	@ (8006c64 <TIM_Base_SetConfig+0x12c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0xf8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a12      	ldr	r2, [pc, #72]	@ (8006c74 <TIM_Base_SetConfig+0x13c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d103      	bne.n	8006c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d105      	bne.n	8006c56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	611a      	str	r2, [r3, #16]
  }
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800
 8006c84:	40001800 	.word	0x40001800
 8006c88:	40001c00 	.word	0x40001c00
 8006c8c:	40002000 	.word	0x40002000

08006c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f023 0201 	bic.w	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 0302 	bic.w	r3, r3, #2
 8006cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a20      	ldr	r2, [pc, #128]	@ (8006d68 <TIM_OC1_SetConfig+0xd8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_OC1_SetConfig+0x64>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <TIM_OC1_SetConfig+0xdc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10c      	bne.n	8006d0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0308 	bic.w	r3, r3, #8
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a15      	ldr	r2, [pc, #84]	@ (8006d68 <TIM_OC1_SetConfig+0xd8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC1_SetConfig+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a14      	ldr	r2, [pc, #80]	@ (8006d6c <TIM_OC1_SetConfig+0xdc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d111      	bne.n	8006d42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	621a      	str	r2, [r3, #32]
}
 8006d5c:	bf00      	nop
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40010400 	.word	0x40010400

08006d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f023 0210 	bic.w	r2, r3, #16
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0320 	bic.w	r3, r3, #32
 8006dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a22      	ldr	r2, [pc, #136]	@ (8006e54 <TIM_OC2_SetConfig+0xe4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0x68>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	@ (8006e58 <TIM_OC2_SetConfig+0xe8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10d      	bne.n	8006df4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a17      	ldr	r2, [pc, #92]	@ (8006e54 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x94>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	@ (8006e58 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d113      	bne.n	8006e2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40010400 	.word	0x40010400

08006e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	@ (8006f3c <TIM_OC3_SetConfig+0xe0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC3_SetConfig+0x66>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a20      	ldr	r2, [pc, #128]	@ (8006f40 <TIM_OC3_SetConfig+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10d      	bne.n	8006ede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a16      	ldr	r2, [pc, #88]	@ (8006f3c <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x92>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d113      	bne.n	8006f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40010400 	.word	0x40010400

08006f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a12      	ldr	r2, [pc, #72]	@ (8006fe8 <TIM_OC4_SetConfig+0xa4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC4_SetConfig+0x68>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a11      	ldr	r2, [pc, #68]	@ (8006fec <TIM_OC4_SetConfig+0xa8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d109      	bne.n	8006fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40010400 	.word	0x40010400

08006ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800701a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 030a 	bic.w	r3, r3, #10
 800702c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f023 0210 	bic.w	r2, r3, #16
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800708a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f043 0307 	orr.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	431a      	orrs	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2201      	movs	r2, #1
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	43db      	mvns	r3, r3
 8007146:	401a      	ands	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1a      	ldr	r2, [r3, #32]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	fa01 f303 	lsl.w	r3, r1, r3
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e05a      	b.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a21      	ldr	r2, [pc, #132]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d4:	d01d      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a18      	ldr	r2, [pc, #96]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a17      	ldr	r2, [pc, #92]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a15      	ldr	r2, [pc, #84]	@ (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10c      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4313      	orrs	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40010400 	.word	0x40010400
 8007260:	40014000 	.word	0x40014000
 8007264:	40001800 	.word	0x40001800

08007268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e042      	b.n	8007300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc fc1e 	bl	8003ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2224      	movs	r2, #36	@ 0x24
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fe6b 	bl	8007f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695a      	ldr	r2, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b20      	cmp	r3, #32
 8007320:	d112      	bne.n	8007348 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_UART_Receive_DMA+0x26>
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e00b      	b.n	800734a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	461a      	mov	r2, r3
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fbc2 	bl	8007ac8 <UART_Start_Receive_DMA>
 8007344:	4603      	mov	r3, r0
 8007346:	e000      	b.n	800734a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b0ba      	sub	sp, #232	@ 0xe8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800737a:	2300      	movs	r3, #0
 800737c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
 80073a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fd29 	bl	8007e0a <UART_Receive_IT>
      return;
 80073b8:	e25b      	b.n	8007872 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80de 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
 80073c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80d1 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741e:	f043 0202 	orr.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
 8007432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007442:	f043 0204 	orr.w	r2, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
 8007456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 81f2 	beq.w	8007868 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fcb4 	bl	8007e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_UART_IRQHandler+0x17a>
 80074c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d04f      	beq.n	800756e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fbbc 	bl	8007c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074de:	2b40      	cmp	r3, #64	@ 0x40
 80074e0:	d141      	bne.n	8007566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800750e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800751a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d9      	bne.n	80074e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d013      	beq.n	800755e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753a:	4a7e      	ldr	r2, [pc, #504]	@ (8007734 <HAL_UART_IRQHandler+0x3e0>)
 800753c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007542:	4618      	mov	r0, r3
 8007544:	f7fd f83c 	bl	80045c0 <HAL_DMA_Abort_IT>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	e00e      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f99e 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	e00a      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f99a 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	e006      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f996 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800757a:	e175      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	bf00      	nop
    return;
 800757e:	e173      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 814f 	bne.w	8007828 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8148 	beq.w	8007828 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8141 	beq.w	8007828 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c6:	2b40      	cmp	r3, #64	@ 0x40
 80075c8:	f040 80b6 	bne.w	8007738 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8145 	beq.w	800786c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075ea:	429a      	cmp	r2, r3
 80075ec:	f080 813e 	bcs.w	800786c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007602:	f000 8088 	beq.w	8007716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800761c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800763e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d9      	bne.n	8007606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3314      	adds	r3, #20
 8007672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007676:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800767a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800767e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e1      	bne.n	8007652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800769e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e3      	bne.n	800768e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e6:	f023 0310 	bic.w	r3, r3, #16
 80076ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80076f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e3      	bne.n	80076d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	f7fc fee5 	bl	80044e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007724:	b29b      	uxth	r3, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	b29b      	uxth	r3, r3
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8c1 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007732:	e09b      	b.n	800786c <HAL_UART_IRQHandler+0x518>
 8007734:	08007d13 	.word	0x08007d13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 808e 	beq.w	8007870 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8089 	beq.w	8007870 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800776e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007782:	647a      	str	r2, [r7, #68]	@ 0x44
 8007784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e3      	bne.n	800775e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3314      	adds	r3, #20
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	623b      	str	r3, [r7, #32]
   return(result);
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3314      	adds	r3, #20
 80077b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80077bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e3      	bne.n	8007796 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0310 	bic.w	r3, r3, #16
 80077f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	330c      	adds	r3, #12
 80077fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007800:	61fa      	str	r2, [r7, #28]
 8007802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69b9      	ldr	r1, [r7, #24]
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	617b      	str	r3, [r7, #20]
   return(result);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e3      	bne.n	80077dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800781a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f847 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007826:	e023      	b.n	8007870 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <HAL_UART_IRQHandler+0x4f4>
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa7a 	bl	8007d3a <UART_Transmit_IT>
    return;
 8007846:	e014      	b.n	8007872 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <HAL_UART_IRQHandler+0x51e>
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	d008      	beq.n	8007872 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 faba 	bl	8007dda <UART_EndTransmit_IT>
    return;
 8007866:	e004      	b.n	8007872 <HAL_UART_IRQHandler+0x51e>
    return;
 8007868:	bf00      	nop
 800786a:	e002      	b.n	8007872 <HAL_UART_IRQHandler+0x51e>
      return;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <HAL_UART_IRQHandler+0x51e>
      return;
 8007870:	bf00      	nop
  }
}
 8007872:	37e8      	adds	r7, #232	@ 0xe8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b09c      	sub	sp, #112	@ 0x70
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d172      	bne.n	80079ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80078e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ea:	2200      	movs	r2, #0
 80078ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800790e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007910:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007914:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800791c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3314      	adds	r3, #20
 8007928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	667b      	str	r3, [r7, #100]	@ 0x64
 800793a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3314      	adds	r3, #20
 8007940:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007942:	647a      	str	r2, [r7, #68]	@ 0x44
 8007944:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3314      	adds	r3, #20
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	623b      	str	r3, [r7, #32]
   return(result);
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800796c:	663b      	str	r3, [r7, #96]	@ 0x60
 800796e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3314      	adds	r3, #20
 8007974:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007976:	633a      	str	r2, [r7, #48]	@ 0x30
 8007978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800797c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800798a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800798c:	2220      	movs	r2, #32
 800798e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	2b01      	cmp	r3, #1
 8007998:	d119      	bne.n	80079ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f023 0310 	bic.w	r3, r3, #16
 80079b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079ba:	61fa      	str	r2, [r7, #28]
 80079bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	69b9      	ldr	r1, [r7, #24]
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	617b      	str	r3, [r7, #20]
   return(result);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079d0:	2200      	movs	r2, #0
 80079d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d106      	bne.n	80079ea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079e0:	4619      	mov	r1, r3
 80079e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80079e4:	f7ff ff66 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079e8:	e002      	b.n	80079f0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80079ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80079ec:	f7fa ff02 	bl	80027f4 <HAL_UART_RxCpltCallback>
}
 80079f0:	bf00      	nop
 80079f2:	3770      	adds	r7, #112	@ 0x70
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d108      	bne.n	8007a26 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a18:	085b      	lsrs	r3, r3, #1
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff ff48 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a24:	e002      	b.n	8007a2c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ff30 	bl	800788c <HAL_UART_RxHalfCpltCallback>
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a50:	2b80      	cmp	r3, #128	@ 0x80
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b21      	cmp	r3, #33	@ 0x21
 8007a66:	d108      	bne.n	8007a7a <UART_DMAError+0x46>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 f8c1 	bl	8007bfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b40      	cmp	r3, #64	@ 0x40
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b22      	cmp	r3, #34	@ 0x22
 8007a9a:	d108      	bne.n	8007aae <UART_DMAError+0x7a>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007aa8:	68b8      	ldr	r0, [r7, #8]
 8007aaa:	f000 f8cf 	bl	8007c4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	f043 0210 	orr.w	r2, r3, #16
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aba:	68b8      	ldr	r0, [r7, #8]
 8007abc:	f7ff fef0 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b098      	sub	sp, #96	@ 0x60
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2222      	movs	r2, #34	@ 0x22
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf0 <UART_Start_Receive_DMA+0x128>)
 8007af6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afc:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf4 <UART_Start_Receive_DMA+0x12c>)
 8007afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b04:	4a3c      	ldr	r2, [pc, #240]	@ (8007bf8 <UART_Start_Receive_DMA+0x130>)
 8007b06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b10:	f107 0308 	add.w	r3, r7, #8
 8007b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	f7fc fc82 	bl	8004430 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d019      	beq.n	8007b7e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e5      	bne.n	8007b4a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3314      	adds	r3, #20
 8007b9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007bd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6a39      	ldr	r1, [r7, #32]
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3760      	adds	r7, #96	@ 0x60
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	080078cd 	.word	0x080078cd
 8007bf4:	080079f9 	.word	0x080079f9
 8007bf8:	08007a35 	.word	0x08007a35

08007bfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b089      	sub	sp, #36	@ 0x24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	61ba      	str	r2, [r7, #24]
 8007c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	613b      	str	r3, [r7, #16]
   return(result);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e5      	bne.n	8007c04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007c40:	bf00      	nop
 8007c42:	3724      	adds	r7, #36	@ 0x24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b095      	sub	sp, #84	@ 0x54
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	330c      	adds	r3, #12
 8007c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d119      	bne.n	8007cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ce4:	61ba      	str	r2, [r7, #24]
 8007ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6979      	ldr	r1, [r7, #20]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d06:	bf00      	nop
 8007d08:	3754      	adds	r7, #84	@ 0x54
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fdb7 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b21      	cmp	r3, #33	@ 0x21
 8007d4c:	d13e      	bne.n	8007dcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d56:	d114      	bne.n	8007d82 <UART_Transmit_IT+0x48>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d110      	bne.n	8007d82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	1c9a      	adds	r2, r3, #2
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	621a      	str	r2, [r3, #32]
 8007d80:	e008      	b.n	8007d94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6211      	str	r1, [r2, #32]
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10f      	bne.n	8007dc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007db6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e000      	b.n	8007dce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dcc:	2302      	movs	r3, #2
  }
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fd3c 	bl	8007878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b08c      	sub	sp, #48	@ 0x30
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b22      	cmp	r3, #34	@ 0x22
 8007e1c:	f040 80ae 	bne.w	8007f7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e28:	d117      	bne.n	8007e5a <UART_Receive_IT+0x50>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d113      	bne.n	8007e5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	1c9a      	adds	r2, r3, #2
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e58:	e026      	b.n	8007ea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6c:	d007      	beq.n	8007e7e <UART_Receive_IT+0x74>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <UART_Receive_IT+0x82>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e008      	b.n	8007e9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d15d      	bne.n	8007f78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0220 	bic.w	r2, r2, #32
 8007eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d135      	bne.n	8007f6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	330c      	adds	r3, #12
 8007f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	613b      	str	r3, [r7, #16]
   return(result);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f023 0310 	bic.w	r3, r3, #16
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	330c      	adds	r3, #12
 8007f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f28:	623a      	str	r2, [r7, #32]
 8007f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	69f9      	ldr	r1, [r7, #28]
 8007f2e:	6a3a      	ldr	r2, [r7, #32]
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e5      	bne.n	8007f08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d10a      	bne.n	8007f60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fca4 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
 8007f6c:	e002      	b.n	8007f74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fa fc40 	bl	80027f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e002      	b.n	8007f7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e000      	b.n	8007f7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3730      	adds	r7, #48	@ 0x30
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f8c:	b0c0      	sub	sp, #256	@ 0x100
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa4:	68d9      	ldr	r1, [r3, #12]
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	ea40 0301 	orr.w	r3, r0, r1
 8007fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007fe0:	f021 010c 	bic.w	r1, r1, #12
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008002:	6999      	ldr	r1, [r3, #24]
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	ea40 0301 	orr.w	r3, r0, r1
 800800e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b8f      	ldr	r3, [pc, #572]	@ (8008254 <UART_SetConfig+0x2cc>)
 8008018:	429a      	cmp	r2, r3
 800801a:	d005      	beq.n	8008028 <UART_SetConfig+0xa0>
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b8d      	ldr	r3, [pc, #564]	@ (8008258 <UART_SetConfig+0x2d0>)
 8008024:	429a      	cmp	r2, r3
 8008026:	d104      	bne.n	8008032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008028:	f7fd f80a 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 800802c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008030:	e003      	b.n	800803a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008032:	f7fc fff1 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8008036:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008044:	f040 810c 	bne.w	8008260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008052:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800805a:	4622      	mov	r2, r4
 800805c:	462b      	mov	r3, r5
 800805e:	1891      	adds	r1, r2, r2
 8008060:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008062:	415b      	adcs	r3, r3
 8008064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800806a:	4621      	mov	r1, r4
 800806c:	eb12 0801 	adds.w	r8, r2, r1
 8008070:	4629      	mov	r1, r5
 8008072:	eb43 0901 	adc.w	r9, r3, r1
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808a:	4690      	mov	r8, r2
 800808c:	4699      	mov	r9, r3
 800808e:	4623      	mov	r3, r4
 8008090:	eb18 0303 	adds.w	r3, r8, r3
 8008094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008098:	462b      	mov	r3, r5
 800809a:	eb49 0303 	adc.w	r3, r9, r3
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80080b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080b6:	460b      	mov	r3, r1
 80080b8:	18db      	adds	r3, r3, r3
 80080ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80080bc:	4613      	mov	r3, r2
 80080be:	eb42 0303 	adc.w	r3, r2, r3
 80080c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80080c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80080c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80080cc:	f7f8 fcde 	bl	8000a8c <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4b61      	ldr	r3, [pc, #388]	@ (800825c <UART_SetConfig+0x2d4>)
 80080d6:	fba3 2302 	umull	r2, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	011c      	lsls	r4, r3, #4
 80080de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	1891      	adds	r1, r2, r2
 80080f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80080f8:	415b      	adcs	r3, r3
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008100:	4641      	mov	r1, r8
 8008102:	eb12 0a01 	adds.w	sl, r2, r1
 8008106:	4649      	mov	r1, r9
 8008108:	eb43 0b01 	adc.w	fp, r3, r1
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800811c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008120:	4692      	mov	sl, r2
 8008122:	469b      	mov	fp, r3
 8008124:	4643      	mov	r3, r8
 8008126:	eb1a 0303 	adds.w	r3, sl, r3
 800812a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800812e:	464b      	mov	r3, r9
 8008130:	eb4b 0303 	adc.w	r3, fp, r3
 8008134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008144:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800814c:	460b      	mov	r3, r1
 800814e:	18db      	adds	r3, r3, r3
 8008150:	643b      	str	r3, [r7, #64]	@ 0x40
 8008152:	4613      	mov	r3, r2
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	647b      	str	r3, [r7, #68]	@ 0x44
 800815a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800815e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008162:	f7f8 fc93 	bl	8000a8c <__aeabi_uldivmod>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4611      	mov	r1, r2
 800816c:	4b3b      	ldr	r3, [pc, #236]	@ (800825c <UART_SetConfig+0x2d4>)
 800816e:	fba3 2301 	umull	r2, r3, r3, r1
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	2264      	movs	r2, #100	@ 0x64
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	1acb      	subs	r3, r1, r3
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008182:	4b36      	ldr	r3, [pc, #216]	@ (800825c <UART_SetConfig+0x2d4>)
 8008184:	fba3 2302 	umull	r2, r3, r3, r2
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008190:	441c      	add	r4, r3
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008196:	2200      	movs	r2, #0
 8008198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800819c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80081a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80081ac:	415b      	adcs	r3, r3
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80081b4:	4641      	mov	r1, r8
 80081b6:	1851      	adds	r1, r2, r1
 80081b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80081ba:	4649      	mov	r1, r9
 80081bc:	414b      	adcs	r3, r1
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80081cc:	4659      	mov	r1, fp
 80081ce:	00cb      	lsls	r3, r1, #3
 80081d0:	4651      	mov	r1, sl
 80081d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d6:	4651      	mov	r1, sl
 80081d8:	00ca      	lsls	r2, r1, #3
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	4642      	mov	r2, r8
 80081e2:	189b      	adds	r3, r3, r2
 80081e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e8:	464b      	mov	r3, r9
 80081ea:	460a      	mov	r2, r1
 80081ec:	eb42 0303 	adc.w	r3, r2, r3
 80081f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008200:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008208:	460b      	mov	r3, r1
 800820a:	18db      	adds	r3, r3, r3
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800820e:	4613      	mov	r3, r2
 8008210:	eb42 0303 	adc.w	r3, r2, r3
 8008214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800821a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800821e:	f7f8 fc35 	bl	8000a8c <__aeabi_uldivmod>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <UART_SetConfig+0x2d4>)
 8008228:	fba3 1302 	umull	r1, r3, r3, r2
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	2164      	movs	r1, #100	@ 0x64
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	3332      	adds	r3, #50	@ 0x32
 800823a:	4a08      	ldr	r2, [pc, #32]	@ (800825c <UART_SetConfig+0x2d4>)
 800823c:	fba2 2303 	umull	r2, r3, r2, r3
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	f003 0207 	and.w	r2, r3, #7
 8008246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4422      	add	r2, r4
 800824e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008250:	e106      	b.n	8008460 <UART_SetConfig+0x4d8>
 8008252:	bf00      	nop
 8008254:	40011000 	.word	0x40011000
 8008258:	40011400 	.word	0x40011400
 800825c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008264:	2200      	movs	r2, #0
 8008266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800826a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800826e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008272:	4642      	mov	r2, r8
 8008274:	464b      	mov	r3, r9
 8008276:	1891      	adds	r1, r2, r2
 8008278:	6239      	str	r1, [r7, #32]
 800827a:	415b      	adcs	r3, r3
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
 800827e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008282:	4641      	mov	r1, r8
 8008284:	1854      	adds	r4, r2, r1
 8008286:	4649      	mov	r1, r9
 8008288:	eb43 0501 	adc.w	r5, r3, r1
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	00eb      	lsls	r3, r5, #3
 8008296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800829a:	00e2      	lsls	r2, r4, #3
 800829c:	4614      	mov	r4, r2
 800829e:	461d      	mov	r5, r3
 80082a0:	4643      	mov	r3, r8
 80082a2:	18e3      	adds	r3, r4, r3
 80082a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082a8:	464b      	mov	r3, r9
 80082aa:	eb45 0303 	adc.w	r3, r5, r3
 80082ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80082ce:	4629      	mov	r1, r5
 80082d0:	008b      	lsls	r3, r1, #2
 80082d2:	4621      	mov	r1, r4
 80082d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d8:	4621      	mov	r1, r4
 80082da:	008a      	lsls	r2, r1, #2
 80082dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80082e0:	f7f8 fbd4 	bl	8000a8c <__aeabi_uldivmod>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4b60      	ldr	r3, [pc, #384]	@ (800846c <UART_SetConfig+0x4e4>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	011c      	lsls	r4, r3, #4
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	61b9      	str	r1, [r7, #24]
 800830c:	415b      	adcs	r3, r3
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008314:	4641      	mov	r1, r8
 8008316:	1851      	adds	r1, r2, r1
 8008318:	6139      	str	r1, [r7, #16]
 800831a:	4649      	mov	r1, r9
 800831c:	414b      	adcs	r3, r1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800832c:	4659      	mov	r1, fp
 800832e:	00cb      	lsls	r3, r1, #3
 8008330:	4651      	mov	r1, sl
 8008332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008336:	4651      	mov	r1, sl
 8008338:	00ca      	lsls	r2, r1, #3
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	4603      	mov	r3, r0
 8008340:	4642      	mov	r2, r8
 8008342:	189b      	adds	r3, r3, r2
 8008344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008348:	464b      	mov	r3, r9
 800834a:	460a      	mov	r2, r1
 800834c:	eb42 0303 	adc.w	r3, r2, r3
 8008350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800835e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	f04f 0300 	mov.w	r3, #0
 8008368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800836c:	4649      	mov	r1, r9
 800836e:	008b      	lsls	r3, r1, #2
 8008370:	4641      	mov	r1, r8
 8008372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008376:	4641      	mov	r1, r8
 8008378:	008a      	lsls	r2, r1, #2
 800837a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800837e:	f7f8 fb85 	bl	8000a8c <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4611      	mov	r1, r2
 8008388:	4b38      	ldr	r3, [pc, #224]	@ (800846c <UART_SetConfig+0x4e4>)
 800838a:	fba3 2301 	umull	r2, r3, r3, r1
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2264      	movs	r2, #100	@ 0x64
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	1acb      	subs	r3, r1, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	@ 0x32
 800839c:	4a33      	ldr	r2, [pc, #204]	@ (800846c <UART_SetConfig+0x4e4>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083a8:	441c      	add	r4, r3
 80083aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083ae:	2200      	movs	r2, #0
 80083b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80083b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80083b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	415b      	adcs	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083c8:	4641      	mov	r1, r8
 80083ca:	1851      	adds	r1, r2, r1
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	4649      	mov	r1, r9
 80083d0:	414b      	adcs	r3, r1
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083e0:	4659      	mov	r1, fp
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4651      	mov	r1, sl
 80083e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ea:	4651      	mov	r1, sl
 80083ec:	00ca      	lsls	r2, r1, #3
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	4642      	mov	r2, r8
 80083f6:	189b      	adds	r3, r3, r2
 80083f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083fa:	464b      	mov	r3, r9
 80083fc:	460a      	mov	r2, r1
 80083fe:	eb42 0303 	adc.w	r3, r2, r3
 8008402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	663b      	str	r3, [r7, #96]	@ 0x60
 800840e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800841c:	4649      	mov	r1, r9
 800841e:	008b      	lsls	r3, r1, #2
 8008420:	4641      	mov	r1, r8
 8008422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008426:	4641      	mov	r1, r8
 8008428:	008a      	lsls	r2, r1, #2
 800842a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800842e:	f7f8 fb2d 	bl	8000a8c <__aeabi_uldivmod>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <UART_SetConfig+0x4e4>)
 8008438:	fba3 1302 	umull	r1, r3, r3, r2
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	2164      	movs	r1, #100	@ 0x64
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	3332      	adds	r3, #50	@ 0x32
 800844a:	4a08      	ldr	r2, [pc, #32]	@ (800846c <UART_SetConfig+0x4e4>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	f003 020f 	and.w	r2, r3, #15
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4422      	add	r2, r4
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008466:	46bd      	mov	sp, r7
 8008468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800846c:	51eb851f 	.word	0x51eb851f

08008470 <siprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b500      	push	{lr}
 8008474:	b09c      	sub	sp, #112	@ 0x70
 8008476:	ab1d      	add	r3, sp, #116	@ 0x74
 8008478:	9002      	str	r0, [sp, #8]
 800847a:	9006      	str	r0, [sp, #24]
 800847c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008480:	4809      	ldr	r0, [pc, #36]	@ (80084a8 <siprintf+0x38>)
 8008482:	9107      	str	r1, [sp, #28]
 8008484:	9104      	str	r1, [sp, #16]
 8008486:	4909      	ldr	r1, [pc, #36]	@ (80084ac <siprintf+0x3c>)
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	9105      	str	r1, [sp, #20]
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	a902      	add	r1, sp, #8
 8008494:	f000 f9a2 	bl	80087dc <_svfiprintf_r>
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	b01c      	add	sp, #112	@ 0x70
 80084a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a4:	b003      	add	sp, #12
 80084a6:	4770      	bx	lr
 80084a8:	20000288 	.word	0x20000288
 80084ac:	ffff0208 	.word	0xffff0208

080084b0 <memset>:
 80084b0:	4402      	add	r2, r0
 80084b2:	4603      	mov	r3, r0
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d100      	bne.n	80084ba <memset+0xa>
 80084b8:	4770      	bx	lr
 80084ba:	f803 1b01 	strb.w	r1, [r3], #1
 80084be:	e7f9      	b.n	80084b4 <memset+0x4>

080084c0 <__errno>:
 80084c0:	4b01      	ldr	r3, [pc, #4]	@ (80084c8 <__errno+0x8>)
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000288 	.word	0x20000288

080084cc <__libc_init_array>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008504 <__libc_init_array+0x38>)
 80084d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008508 <__libc_init_array+0x3c>)
 80084d2:	1b64      	subs	r4, r4, r5
 80084d4:	10a4      	asrs	r4, r4, #2
 80084d6:	2600      	movs	r6, #0
 80084d8:	42a6      	cmp	r6, r4
 80084da:	d109      	bne.n	80084f0 <__libc_init_array+0x24>
 80084dc:	4d0b      	ldr	r5, [pc, #44]	@ (800850c <__libc_init_array+0x40>)
 80084de:	4c0c      	ldr	r4, [pc, #48]	@ (8008510 <__libc_init_array+0x44>)
 80084e0:	f001 fcea 	bl	8009eb8 <_init>
 80084e4:	1b64      	subs	r4, r4, r5
 80084e6:	10a4      	asrs	r4, r4, #2
 80084e8:	2600      	movs	r6, #0
 80084ea:	42a6      	cmp	r6, r4
 80084ec:	d105      	bne.n	80084fa <__libc_init_array+0x2e>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f4:	4798      	blx	r3
 80084f6:	3601      	adds	r6, #1
 80084f8:	e7ee      	b.n	80084d8 <__libc_init_array+0xc>
 80084fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fe:	4798      	blx	r3
 8008500:	3601      	adds	r6, #1
 8008502:	e7f2      	b.n	80084ea <__libc_init_array+0x1e>
 8008504:	08017270 	.word	0x08017270
 8008508:	08017270 	.word	0x08017270
 800850c:	08017270 	.word	0x08017270
 8008510:	08017274 	.word	0x08017274

08008514 <__retarget_lock_acquire_recursive>:
 8008514:	4770      	bx	lr

08008516 <__retarget_lock_release_recursive>:
 8008516:	4770      	bx	lr

08008518 <memcpy>:
 8008518:	440a      	add	r2, r1
 800851a:	4291      	cmp	r1, r2
 800851c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008520:	d100      	bne.n	8008524 <memcpy+0xc>
 8008522:	4770      	bx	lr
 8008524:	b510      	push	{r4, lr}
 8008526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800852a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852e:	4291      	cmp	r1, r2
 8008530:	d1f9      	bne.n	8008526 <memcpy+0xe>
 8008532:	bd10      	pop	{r4, pc}

08008534 <_free_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4605      	mov	r5, r0
 8008538:	2900      	cmp	r1, #0
 800853a:	d041      	beq.n	80085c0 <_free_r+0x8c>
 800853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008540:	1f0c      	subs	r4, r1, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfb8      	it	lt
 8008546:	18e4      	addlt	r4, r4, r3
 8008548:	f000 f8e0 	bl	800870c <__malloc_lock>
 800854c:	4a1d      	ldr	r2, [pc, #116]	@ (80085c4 <_free_r+0x90>)
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	b933      	cbnz	r3, 8008560 <_free_r+0x2c>
 8008552:	6063      	str	r3, [r4, #4]
 8008554:	6014      	str	r4, [r2, #0]
 8008556:	4628      	mov	r0, r5
 8008558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855c:	f000 b8dc 	b.w	8008718 <__malloc_unlock>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d908      	bls.n	8008576 <_free_r+0x42>
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	1821      	adds	r1, r4, r0
 8008568:	428b      	cmp	r3, r1
 800856a:	bf01      	itttt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	1809      	addeq	r1, r1, r0
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	e7ed      	b.n	8008552 <_free_r+0x1e>
 8008576:	461a      	mov	r2, r3
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	b10b      	cbz	r3, 8008580 <_free_r+0x4c>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d9fa      	bls.n	8008576 <_free_r+0x42>
 8008580:	6811      	ldr	r1, [r2, #0]
 8008582:	1850      	adds	r0, r2, r1
 8008584:	42a0      	cmp	r0, r4
 8008586:	d10b      	bne.n	80085a0 <_free_r+0x6c>
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	4401      	add	r1, r0
 800858c:	1850      	adds	r0, r2, r1
 800858e:	4283      	cmp	r3, r0
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	d1e0      	bne.n	8008556 <_free_r+0x22>
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	6053      	str	r3, [r2, #4]
 800859a:	4408      	add	r0, r1
 800859c:	6010      	str	r0, [r2, #0]
 800859e:	e7da      	b.n	8008556 <_free_r+0x22>
 80085a0:	d902      	bls.n	80085a8 <_free_r+0x74>
 80085a2:	230c      	movs	r3, #12
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	e7d6      	b.n	8008556 <_free_r+0x22>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	1821      	adds	r1, r4, r0
 80085ac:	428b      	cmp	r3, r1
 80085ae:	bf04      	itt	eq
 80085b0:	6819      	ldreq	r1, [r3, #0]
 80085b2:	685b      	ldreq	r3, [r3, #4]
 80085b4:	6063      	str	r3, [r4, #4]
 80085b6:	bf04      	itt	eq
 80085b8:	1809      	addeq	r1, r1, r0
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	6054      	str	r4, [r2, #4]
 80085be:	e7ca      	b.n	8008556 <_free_r+0x22>
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000678 	.word	0x20000678

080085c8 <sbrk_aligned>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008608 <sbrk_aligned+0x40>)
 80085cc:	460c      	mov	r4, r1
 80085ce:	6831      	ldr	r1, [r6, #0]
 80085d0:	4605      	mov	r5, r0
 80085d2:	b911      	cbnz	r1, 80085da <sbrk_aligned+0x12>
 80085d4:	f000 fba6 	bl	8008d24 <_sbrk_r>
 80085d8:	6030      	str	r0, [r6, #0]
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 fba1 	bl	8008d24 <_sbrk_r>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d103      	bne.n	80085ee <sbrk_aligned+0x26>
 80085e6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ea:	4620      	mov	r0, r4
 80085ec:	bd70      	pop	{r4, r5, r6, pc}
 80085ee:	1cc4      	adds	r4, r0, #3
 80085f0:	f024 0403 	bic.w	r4, r4, #3
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d0f8      	beq.n	80085ea <sbrk_aligned+0x22>
 80085f8:	1a21      	subs	r1, r4, r0
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fb92 	bl	8008d24 <_sbrk_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d1f2      	bne.n	80085ea <sbrk_aligned+0x22>
 8008604:	e7ef      	b.n	80085e6 <sbrk_aligned+0x1e>
 8008606:	bf00      	nop
 8008608:	20000674 	.word	0x20000674

0800860c <_malloc_r>:
 800860c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008610:	1ccd      	adds	r5, r1, #3
 8008612:	f025 0503 	bic.w	r5, r5, #3
 8008616:	3508      	adds	r5, #8
 8008618:	2d0c      	cmp	r5, #12
 800861a:	bf38      	it	cc
 800861c:	250c      	movcc	r5, #12
 800861e:	2d00      	cmp	r5, #0
 8008620:	4606      	mov	r6, r0
 8008622:	db01      	blt.n	8008628 <_malloc_r+0x1c>
 8008624:	42a9      	cmp	r1, r5
 8008626:	d904      	bls.n	8008632 <_malloc_r+0x26>
 8008628:	230c      	movs	r3, #12
 800862a:	6033      	str	r3, [r6, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008708 <_malloc_r+0xfc>
 8008636:	f000 f869 	bl	800870c <__malloc_lock>
 800863a:	f8d8 3000 	ldr.w	r3, [r8]
 800863e:	461c      	mov	r4, r3
 8008640:	bb44      	cbnz	r4, 8008694 <_malloc_r+0x88>
 8008642:	4629      	mov	r1, r5
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff ffbf 	bl	80085c8 <sbrk_aligned>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	4604      	mov	r4, r0
 800864e:	d158      	bne.n	8008702 <_malloc_r+0xf6>
 8008650:	f8d8 4000 	ldr.w	r4, [r8]
 8008654:	4627      	mov	r7, r4
 8008656:	2f00      	cmp	r7, #0
 8008658:	d143      	bne.n	80086e2 <_malloc_r+0xd6>
 800865a:	2c00      	cmp	r4, #0
 800865c:	d04b      	beq.n	80086f6 <_malloc_r+0xea>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4639      	mov	r1, r7
 8008662:	4630      	mov	r0, r6
 8008664:	eb04 0903 	add.w	r9, r4, r3
 8008668:	f000 fb5c 	bl	8008d24 <_sbrk_r>
 800866c:	4581      	cmp	r9, r0
 800866e:	d142      	bne.n	80086f6 <_malloc_r+0xea>
 8008670:	6821      	ldr	r1, [r4, #0]
 8008672:	1a6d      	subs	r5, r5, r1
 8008674:	4629      	mov	r1, r5
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ffa6 	bl	80085c8 <sbrk_aligned>
 800867c:	3001      	adds	r0, #1
 800867e:	d03a      	beq.n	80086f6 <_malloc_r+0xea>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	442b      	add	r3, r5
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	f8d8 3000 	ldr.w	r3, [r8]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	bb62      	cbnz	r2, 80086e8 <_malloc_r+0xdc>
 800868e:	f8c8 7000 	str.w	r7, [r8]
 8008692:	e00f      	b.n	80086b4 <_malloc_r+0xa8>
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	1b52      	subs	r2, r2, r5
 8008698:	d420      	bmi.n	80086dc <_malloc_r+0xd0>
 800869a:	2a0b      	cmp	r2, #11
 800869c:	d917      	bls.n	80086ce <_malloc_r+0xc2>
 800869e:	1961      	adds	r1, r4, r5
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	6025      	str	r5, [r4, #0]
 80086a4:	bf18      	it	ne
 80086a6:	6059      	strne	r1, [r3, #4]
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	bf08      	it	eq
 80086ac:	f8c8 1000 	streq.w	r1, [r8]
 80086b0:	5162      	str	r2, [r4, r5]
 80086b2:	604b      	str	r3, [r1, #4]
 80086b4:	4630      	mov	r0, r6
 80086b6:	f000 f82f 	bl	8008718 <__malloc_unlock>
 80086ba:	f104 000b 	add.w	r0, r4, #11
 80086be:	1d23      	adds	r3, r4, #4
 80086c0:	f020 0007 	bic.w	r0, r0, #7
 80086c4:	1ac2      	subs	r2, r0, r3
 80086c6:	bf1c      	itt	ne
 80086c8:	1a1b      	subne	r3, r3, r0
 80086ca:	50a3      	strne	r3, [r4, r2]
 80086cc:	e7af      	b.n	800862e <_malloc_r+0x22>
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	bf0c      	ite	eq
 80086d4:	f8c8 2000 	streq.w	r2, [r8]
 80086d8:	605a      	strne	r2, [r3, #4]
 80086da:	e7eb      	b.n	80086b4 <_malloc_r+0xa8>
 80086dc:	4623      	mov	r3, r4
 80086de:	6864      	ldr	r4, [r4, #4]
 80086e0:	e7ae      	b.n	8008640 <_malloc_r+0x34>
 80086e2:	463c      	mov	r4, r7
 80086e4:	687f      	ldr	r7, [r7, #4]
 80086e6:	e7b6      	b.n	8008656 <_malloc_r+0x4a>
 80086e8:	461a      	mov	r2, r3
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d1fb      	bne.n	80086e8 <_malloc_r+0xdc>
 80086f0:	2300      	movs	r3, #0
 80086f2:	6053      	str	r3, [r2, #4]
 80086f4:	e7de      	b.n	80086b4 <_malloc_r+0xa8>
 80086f6:	230c      	movs	r3, #12
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f80c 	bl	8008718 <__malloc_unlock>
 8008700:	e794      	b.n	800862c <_malloc_r+0x20>
 8008702:	6005      	str	r5, [r0, #0]
 8008704:	e7d6      	b.n	80086b4 <_malloc_r+0xa8>
 8008706:	bf00      	nop
 8008708:	20000678 	.word	0x20000678

0800870c <__malloc_lock>:
 800870c:	4801      	ldr	r0, [pc, #4]	@ (8008714 <__malloc_lock+0x8>)
 800870e:	f7ff bf01 	b.w	8008514 <__retarget_lock_acquire_recursive>
 8008712:	bf00      	nop
 8008714:	20000670 	.word	0x20000670

08008718 <__malloc_unlock>:
 8008718:	4801      	ldr	r0, [pc, #4]	@ (8008720 <__malloc_unlock+0x8>)
 800871a:	f7ff befc 	b.w	8008516 <__retarget_lock_release_recursive>
 800871e:	bf00      	nop
 8008720:	20000670 	.word	0x20000670

08008724 <__ssputs_r>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	688e      	ldr	r6, [r1, #8]
 800872a:	461f      	mov	r7, r3
 800872c:	42be      	cmp	r6, r7
 800872e:	680b      	ldr	r3, [r1, #0]
 8008730:	4682      	mov	sl, r0
 8008732:	460c      	mov	r4, r1
 8008734:	4690      	mov	r8, r2
 8008736:	d82d      	bhi.n	8008794 <__ssputs_r+0x70>
 8008738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800873c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008740:	d026      	beq.n	8008790 <__ssputs_r+0x6c>
 8008742:	6965      	ldr	r5, [r4, #20]
 8008744:	6909      	ldr	r1, [r1, #16]
 8008746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800874a:	eba3 0901 	sub.w	r9, r3, r1
 800874e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008752:	1c7b      	adds	r3, r7, #1
 8008754:	444b      	add	r3, r9
 8008756:	106d      	asrs	r5, r5, #1
 8008758:	429d      	cmp	r5, r3
 800875a:	bf38      	it	cc
 800875c:	461d      	movcc	r5, r3
 800875e:	0553      	lsls	r3, r2, #21
 8008760:	d527      	bpl.n	80087b2 <__ssputs_r+0x8e>
 8008762:	4629      	mov	r1, r5
 8008764:	f7ff ff52 	bl	800860c <_malloc_r>
 8008768:	4606      	mov	r6, r0
 800876a:	b360      	cbz	r0, 80087c6 <__ssputs_r+0xa2>
 800876c:	6921      	ldr	r1, [r4, #16]
 800876e:	464a      	mov	r2, r9
 8008770:	f7ff fed2 	bl	8008518 <memcpy>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800877a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	6126      	str	r6, [r4, #16]
 8008782:	6165      	str	r5, [r4, #20]
 8008784:	444e      	add	r6, r9
 8008786:	eba5 0509 	sub.w	r5, r5, r9
 800878a:	6026      	str	r6, [r4, #0]
 800878c:	60a5      	str	r5, [r4, #8]
 800878e:	463e      	mov	r6, r7
 8008790:	42be      	cmp	r6, r7
 8008792:	d900      	bls.n	8008796 <__ssputs_r+0x72>
 8008794:	463e      	mov	r6, r7
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	4632      	mov	r2, r6
 800879a:	4641      	mov	r1, r8
 800879c:	f000 faa8 	bl	8008cf0 <memmove>
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	1b9b      	subs	r3, r3, r6
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4433      	add	r3, r6
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	462a      	mov	r2, r5
 80087b4:	f000 fac6 	bl	8008d44 <_realloc_r>
 80087b8:	4606      	mov	r6, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d1e0      	bne.n	8008780 <__ssputs_r+0x5c>
 80087be:	6921      	ldr	r1, [r4, #16]
 80087c0:	4650      	mov	r0, sl
 80087c2:	f7ff feb7 	bl	8008534 <_free_r>
 80087c6:	230c      	movs	r3, #12
 80087c8:	f8ca 3000 	str.w	r3, [sl]
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e7e9      	b.n	80087ae <__ssputs_r+0x8a>
	...

080087dc <_svfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4698      	mov	r8, r3
 80087e2:	898b      	ldrh	r3, [r1, #12]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	b09d      	sub	sp, #116	@ 0x74
 80087e8:	4607      	mov	r7, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	d510      	bpl.n	8008812 <_svfiprintf_r+0x36>
 80087f0:	690b      	ldr	r3, [r1, #16]
 80087f2:	b973      	cbnz	r3, 8008812 <_svfiprintf_r+0x36>
 80087f4:	2140      	movs	r1, #64	@ 0x40
 80087f6:	f7ff ff09 	bl	800860c <_malloc_r>
 80087fa:	6028      	str	r0, [r5, #0]
 80087fc:	6128      	str	r0, [r5, #16]
 80087fe:	b930      	cbnz	r0, 800880e <_svfiprintf_r+0x32>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b01d      	add	sp, #116	@ 0x74
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	2340      	movs	r3, #64	@ 0x40
 8008810:	616b      	str	r3, [r5, #20]
 8008812:	2300      	movs	r3, #0
 8008814:	9309      	str	r3, [sp, #36]	@ 0x24
 8008816:	2320      	movs	r3, #32
 8008818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800881c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008820:	2330      	movs	r3, #48	@ 0x30
 8008822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089c0 <_svfiprintf_r+0x1e4>
 8008826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800882a:	f04f 0901 	mov.w	r9, #1
 800882e:	4623      	mov	r3, r4
 8008830:	469a      	mov	sl, r3
 8008832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008836:	b10a      	cbz	r2, 800883c <_svfiprintf_r+0x60>
 8008838:	2a25      	cmp	r2, #37	@ 0x25
 800883a:	d1f9      	bne.n	8008830 <_svfiprintf_r+0x54>
 800883c:	ebba 0b04 	subs.w	fp, sl, r4
 8008840:	d00b      	beq.n	800885a <_svfiprintf_r+0x7e>
 8008842:	465b      	mov	r3, fp
 8008844:	4622      	mov	r2, r4
 8008846:	4629      	mov	r1, r5
 8008848:	4638      	mov	r0, r7
 800884a:	f7ff ff6b 	bl	8008724 <__ssputs_r>
 800884e:	3001      	adds	r0, #1
 8008850:	f000 80a7 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008856:	445a      	add	r2, fp
 8008858:	9209      	str	r2, [sp, #36]	@ 0x24
 800885a:	f89a 3000 	ldrb.w	r3, [sl]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 809f 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008864:	2300      	movs	r3, #0
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800886e:	f10a 0a01 	add.w	sl, sl, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	9307      	str	r3, [sp, #28]
 8008876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800887a:	931a      	str	r3, [sp, #104]	@ 0x68
 800887c:	4654      	mov	r4, sl
 800887e:	2205      	movs	r2, #5
 8008880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008884:	484e      	ldr	r0, [pc, #312]	@ (80089c0 <_svfiprintf_r+0x1e4>)
 8008886:	f7f7 fccb 	bl	8000220 <memchr>
 800888a:	9a04      	ldr	r2, [sp, #16]
 800888c:	b9d8      	cbnz	r0, 80088c6 <_svfiprintf_r+0xea>
 800888e:	06d0      	lsls	r0, r2, #27
 8008890:	bf44      	itt	mi
 8008892:	2320      	movmi	r3, #32
 8008894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008898:	0711      	lsls	r1, r2, #28
 800889a:	bf44      	itt	mi
 800889c:	232b      	movmi	r3, #43	@ 0x2b
 800889e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a2:	f89a 3000 	ldrb.w	r3, [sl]
 80088a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a8:	d015      	beq.n	80088d6 <_svfiprintf_r+0xfa>
 80088aa:	9a07      	ldr	r2, [sp, #28]
 80088ac:	4654      	mov	r4, sl
 80088ae:	2000      	movs	r0, #0
 80088b0:	f04f 0c0a 	mov.w	ip, #10
 80088b4:	4621      	mov	r1, r4
 80088b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ba:	3b30      	subs	r3, #48	@ 0x30
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d94b      	bls.n	8008958 <_svfiprintf_r+0x17c>
 80088c0:	b1b0      	cbz	r0, 80088f0 <_svfiprintf_r+0x114>
 80088c2:	9207      	str	r2, [sp, #28]
 80088c4:	e014      	b.n	80088f0 <_svfiprintf_r+0x114>
 80088c6:	eba0 0308 	sub.w	r3, r0, r8
 80088ca:	fa09 f303 	lsl.w	r3, r9, r3
 80088ce:	4313      	orrs	r3, r2
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	46a2      	mov	sl, r4
 80088d4:	e7d2      	b.n	800887c <_svfiprintf_r+0xa0>
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	1d19      	adds	r1, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9103      	str	r1, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfbb      	ittet	lt
 80088e2:	425b      	neglt	r3, r3
 80088e4:	f042 0202 	orrlt.w	r2, r2, #2
 80088e8:	9307      	strge	r3, [sp, #28]
 80088ea:	9307      	strlt	r3, [sp, #28]
 80088ec:	bfb8      	it	lt
 80088ee:	9204      	strlt	r2, [sp, #16]
 80088f0:	7823      	ldrb	r3, [r4, #0]
 80088f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088f4:	d10a      	bne.n	800890c <_svfiprintf_r+0x130>
 80088f6:	7863      	ldrb	r3, [r4, #1]
 80088f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088fa:	d132      	bne.n	8008962 <_svfiprintf_r+0x186>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	9203      	str	r2, [sp, #12]
 8008904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008908:	3402      	adds	r4, #2
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089d0 <_svfiprintf_r+0x1f4>
 8008910:	7821      	ldrb	r1, [r4, #0]
 8008912:	2203      	movs	r2, #3
 8008914:	4650      	mov	r0, sl
 8008916:	f7f7 fc83 	bl	8000220 <memchr>
 800891a:	b138      	cbz	r0, 800892c <_svfiprintf_r+0x150>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	eba0 000a 	sub.w	r0, r0, sl
 8008922:	2240      	movs	r2, #64	@ 0x40
 8008924:	4082      	lsls	r2, r0
 8008926:	4313      	orrs	r3, r2
 8008928:	3401      	adds	r4, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	4824      	ldr	r0, [pc, #144]	@ (80089c4 <_svfiprintf_r+0x1e8>)
 8008932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008936:	2206      	movs	r2, #6
 8008938:	f7f7 fc72 	bl	8000220 <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d036      	beq.n	80089ae <_svfiprintf_r+0x1d2>
 8008940:	4b21      	ldr	r3, [pc, #132]	@ (80089c8 <_svfiprintf_r+0x1ec>)
 8008942:	bb1b      	cbnz	r3, 800898c <_svfiprintf_r+0x1b0>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	4433      	add	r3, r6
 8008954:	9309      	str	r3, [sp, #36]	@ 0x24
 8008956:	e76a      	b.n	800882e <_svfiprintf_r+0x52>
 8008958:	fb0c 3202 	mla	r2, ip, r2, r3
 800895c:	460c      	mov	r4, r1
 800895e:	2001      	movs	r0, #1
 8008960:	e7a8      	b.n	80088b4 <_svfiprintf_r+0xd8>
 8008962:	2300      	movs	r3, #0
 8008964:	3401      	adds	r4, #1
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	4619      	mov	r1, r3
 800896a:	f04f 0c0a 	mov.w	ip, #10
 800896e:	4620      	mov	r0, r4
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	@ 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_svfiprintf_r+0x1a6>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c6      	beq.n	800890c <_svfiprintf_r+0x130>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c4      	b.n	800890c <_svfiprintf_r+0x130>
 8008982:	fb0c 2101 	mla	r1, ip, r1, r2
 8008986:	4604      	mov	r4, r0
 8008988:	2301      	movs	r3, #1
 800898a:	e7f0      	b.n	800896e <_svfiprintf_r+0x192>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	462a      	mov	r2, r5
 8008992:	4b0e      	ldr	r3, [pc, #56]	@ (80089cc <_svfiprintf_r+0x1f0>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4638      	mov	r0, r7
 8008998:	f3af 8000 	nop.w
 800899c:	1c42      	adds	r2, r0, #1
 800899e:	4606      	mov	r6, r0
 80089a0:	d1d6      	bne.n	8008950 <_svfiprintf_r+0x174>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	065b      	lsls	r3, r3, #25
 80089a6:	f53f af2d 	bmi.w	8008804 <_svfiprintf_r+0x28>
 80089aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089ac:	e72c      	b.n	8008808 <_svfiprintf_r+0x2c>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <_svfiprintf_r+0x1f0>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4638      	mov	r0, r7
 80089ba:	f000 f879 	bl	8008ab0 <_printf_i>
 80089be:	e7ed      	b.n	800899c <_svfiprintf_r+0x1c0>
 80089c0:	08017058 	.word	0x08017058
 80089c4:	08017062 	.word	0x08017062
 80089c8:	00000000 	.word	0x00000000
 80089cc:	08008725 	.word	0x08008725
 80089d0:	0801705e 	.word	0x0801705e

080089d4 <_printf_common>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	4616      	mov	r6, r2
 80089da:	4698      	mov	r8, r3
 80089dc:	688a      	ldr	r2, [r1, #8]
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfb8      	it	lt
 80089e8:	4613      	movlt	r3, r2
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089f0:	4607      	mov	r7, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b10a      	cbz	r2, 80089fa <_printf_common+0x26>
 80089f6:	3301      	adds	r3, #1
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	6833      	ldrmi	r3, [r6, #0]
 8008a02:	3302      	addmi	r3, #2
 8008a04:	6033      	strmi	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f015 0506 	ands.w	r5, r5, #6
 8008a0c:	d106      	bne.n	8008a1c <_printf_common+0x48>
 8008a0e:	f104 0a19 	add.w	sl, r4, #25
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc26      	bgt.n	8008a6a <_printf_common+0x96>
 8008a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	3b00      	subs	r3, #0
 8008a24:	bf18      	it	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	0692      	lsls	r2, r2, #26
 8008a2a:	d42b      	bmi.n	8008a84 <_printf_common+0xb0>
 8008a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a30:	4641      	mov	r1, r8
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c8      	blx	r9
 8008a36:	3001      	adds	r0, #1
 8008a38:	d01e      	beq.n	8008a78 <_printf_common+0xa4>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	f003 0306 	and.w	r3, r3, #6
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	bf02      	ittt	eq
 8008a46:	68e5      	ldreq	r5, [r4, #12]
 8008a48:	6833      	ldreq	r3, [r6, #0]
 8008a4a:	1aed      	subeq	r5, r5, r3
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	bf0c      	ite	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	2500      	movne	r5, #0
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bfc4      	itt	gt
 8008a5a:	1a9b      	subgt	r3, r3, r2
 8008a5c:	18ed      	addgt	r5, r5, r3
 8008a5e:	2600      	movs	r6, #0
 8008a60:	341a      	adds	r4, #26
 8008a62:	42b5      	cmp	r5, r6
 8008a64:	d11a      	bne.n	8008a9c <_printf_common+0xc8>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e008      	b.n	8008a7c <_printf_common+0xa8>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4638      	mov	r0, r7
 8008a72:	47c8      	blx	r9
 8008a74:	3001      	adds	r0, #1
 8008a76:	d103      	bne.n	8008a80 <_printf_common+0xac>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a80:	3501      	adds	r5, #1
 8008a82:	e7c6      	b.n	8008a12 <_printf_common+0x3e>
 8008a84:	18e1      	adds	r1, r4, r3
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	2030      	movs	r0, #48	@ 0x30
 8008a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a8e:	4422      	add	r2, r4
 8008a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a98:	3302      	adds	r3, #2
 8008a9a:	e7c7      	b.n	8008a2c <_printf_common+0x58>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c8      	blx	r9
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0e6      	beq.n	8008a78 <_printf_common+0xa4>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7d9      	b.n	8008a62 <_printf_common+0x8e>
	...

08008ab0 <_printf_i>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	7e0f      	ldrb	r7, [r1, #24]
 8008ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab8:	2f78      	cmp	r7, #120	@ 0x78
 8008aba:	4691      	mov	r9, r2
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ac6:	d807      	bhi.n	8008ad8 <_printf_i+0x28>
 8008ac8:	2f62      	cmp	r7, #98	@ 0x62
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x32>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	f000 80d2 	beq.w	8008c76 <_printf_i+0x1c6>
 8008ad2:	2f58      	cmp	r7, #88	@ 0x58
 8008ad4:	f000 80b9 	beq.w	8008c4a <_printf_i+0x19a>
 8008ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ae0:	e03a      	b.n	8008b58 <_printf_i+0xa8>
 8008ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ae6:	2b15      	cmp	r3, #21
 8008ae8:	d8f6      	bhi.n	8008ad8 <_printf_i+0x28>
 8008aea:	a101      	add	r1, pc, #4	@ (adr r1, 8008af0 <_printf_i+0x40>)
 8008aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008ad9 	.word	0x08008ad9
 8008afc:	08008ad9 	.word	0x08008ad9
 8008b00:	08008ad9 	.word	0x08008ad9
 8008b04:	08008ad9 	.word	0x08008ad9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008ad9 	.word	0x08008ad9
 8008b10:	08008ad9 	.word	0x08008ad9
 8008b14:	08008ad9 	.word	0x08008ad9
 8008b18:	08008ad9 	.word	0x08008ad9
 8008b1c:	08008c5d 	.word	0x08008c5d
 8008b20:	08008b87 	.word	0x08008b87
 8008b24:	08008c17 	.word	0x08008c17
 8008b28:	08008ad9 	.word	0x08008ad9
 8008b2c:	08008ad9 	.word	0x08008ad9
 8008b30:	08008c7f 	.word	0x08008c7f
 8008b34:	08008ad9 	.word	0x08008ad9
 8008b38:	08008b87 	.word	0x08008b87
 8008b3c:	08008ad9 	.word	0x08008ad9
 8008b40:	08008ad9 	.word	0x08008ad9
 8008b44:	08008c1f 	.word	0x08008c1f
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6032      	str	r2, [r6, #0]
 8008b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e09d      	b.n	8008c98 <_printf_i+0x1e8>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	6031      	str	r1, [r6, #0]
 8008b64:	0606      	lsls	r6, r0, #24
 8008b66:	d501      	bpl.n	8008b6c <_printf_i+0xbc>
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	e003      	b.n	8008b74 <_printf_i+0xc4>
 8008b6c:	0645      	lsls	r5, r0, #25
 8008b6e:	d5fb      	bpl.n	8008b68 <_printf_i+0xb8>
 8008b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	da03      	bge.n	8008b80 <_printf_i+0xd0>
 8008b78:	232d      	movs	r3, #45	@ 0x2d
 8008b7a:	426d      	negs	r5, r5
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b80:	4859      	ldr	r0, [pc, #356]	@ (8008ce8 <_printf_i+0x238>)
 8008b82:	230a      	movs	r3, #10
 8008b84:	e011      	b.n	8008baa <_printf_i+0xfa>
 8008b86:	6821      	ldr	r1, [r4, #0]
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	0608      	lsls	r0, r1, #24
 8008b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b90:	d402      	bmi.n	8008b98 <_printf_i+0xe8>
 8008b92:	0649      	lsls	r1, r1, #25
 8008b94:	bf48      	it	mi
 8008b96:	b2ad      	uxthmi	r5, r5
 8008b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b9a:	4853      	ldr	r0, [pc, #332]	@ (8008ce8 <_printf_i+0x238>)
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	bf14      	ite	ne
 8008ba0:	230a      	movne	r3, #10
 8008ba2:	2308      	moveq	r3, #8
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008baa:	6866      	ldr	r6, [r4, #4]
 8008bac:	60a6      	str	r6, [r4, #8]
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	bfa2      	ittt	ge
 8008bb2:	6821      	ldrge	r1, [r4, #0]
 8008bb4:	f021 0104 	bicge.w	r1, r1, #4
 8008bb8:	6021      	strge	r1, [r4, #0]
 8008bba:	b90d      	cbnz	r5, 8008bc0 <_printf_i+0x110>
 8008bbc:	2e00      	cmp	r6, #0
 8008bbe:	d04b      	beq.n	8008c58 <_printf_i+0x1a8>
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bca:	5dc7      	ldrb	r7, [r0, r7]
 8008bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bd0:	462f      	mov	r7, r5
 8008bd2:	42bb      	cmp	r3, r7
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	d9f4      	bls.n	8008bc2 <_printf_i+0x112>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d10b      	bne.n	8008bf4 <_printf_i+0x144>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	07df      	lsls	r7, r3, #31
 8008be0:	d508      	bpl.n	8008bf4 <_printf_i+0x144>
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	6861      	ldr	r1, [r4, #4]
 8008be6:	4299      	cmp	r1, r3
 8008be8:	bfde      	ittt	le
 8008bea:	2330      	movle	r3, #48	@ 0x30
 8008bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bf4:	1b92      	subs	r2, r2, r6
 8008bf6:	6122      	str	r2, [r4, #16]
 8008bf8:	f8cd a000 	str.w	sl, [sp]
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	aa03      	add	r2, sp, #12
 8008c00:	4621      	mov	r1, r4
 8008c02:	4640      	mov	r0, r8
 8008c04:	f7ff fee6 	bl	80089d4 <_printf_common>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d14a      	bne.n	8008ca2 <_printf_i+0x1f2>
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	b004      	add	sp, #16
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f043 0320 	orr.w	r3, r3, #32
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	4833      	ldr	r0, [pc, #204]	@ (8008cec <_printf_i+0x23c>)
 8008c20:	2778      	movs	r7, #120	@ 0x78
 8008c22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	6831      	ldr	r1, [r6, #0]
 8008c2a:	061f      	lsls	r7, r3, #24
 8008c2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c30:	d402      	bmi.n	8008c38 <_printf_i+0x188>
 8008c32:	065f      	lsls	r7, r3, #25
 8008c34:	bf48      	it	mi
 8008c36:	b2ad      	uxthmi	r5, r5
 8008c38:	6031      	str	r1, [r6, #0]
 8008c3a:	07d9      	lsls	r1, r3, #31
 8008c3c:	bf44      	itt	mi
 8008c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c42:	6023      	strmi	r3, [r4, #0]
 8008c44:	b11d      	cbz	r5, 8008c4e <_printf_i+0x19e>
 8008c46:	2310      	movs	r3, #16
 8008c48:	e7ac      	b.n	8008ba4 <_printf_i+0xf4>
 8008c4a:	4827      	ldr	r0, [pc, #156]	@ (8008ce8 <_printf_i+0x238>)
 8008c4c:	e7e9      	b.n	8008c22 <_printf_i+0x172>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f023 0320 	bic.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	e7f6      	b.n	8008c46 <_printf_i+0x196>
 8008c58:	4616      	mov	r6, r2
 8008c5a:	e7bd      	b.n	8008bd8 <_printf_i+0x128>
 8008c5c:	6833      	ldr	r3, [r6, #0]
 8008c5e:	6825      	ldr	r5, [r4, #0]
 8008c60:	6961      	ldr	r1, [r4, #20]
 8008c62:	1d18      	adds	r0, r3, #4
 8008c64:	6030      	str	r0, [r6, #0]
 8008c66:	062e      	lsls	r6, r5, #24
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0x1c0>
 8008c6c:	6019      	str	r1, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0x1c6>
 8008c70:	0668      	lsls	r0, r5, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0x1bc>
 8008c74:	8019      	strh	r1, [r3, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	e7bc      	b.n	8008bf8 <_printf_i+0x148>
 8008c7e:	6833      	ldr	r3, [r6, #0]
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	6032      	str	r2, [r6, #0]
 8008c84:	681e      	ldr	r6, [r3, #0]
 8008c86:	6862      	ldr	r2, [r4, #4]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7f7 fac8 	bl	8000220 <memchr>
 8008c90:	b108      	cbz	r0, 8008c96 <_printf_i+0x1e6>
 8008c92:	1b80      	subs	r0, r0, r6
 8008c94:	6060      	str	r0, [r4, #4]
 8008c96:	6863      	ldr	r3, [r4, #4]
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	e7aa      	b.n	8008bf8 <_printf_i+0x148>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d0ad      	beq.n	8008c0c <_printf_i+0x15c>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	079b      	lsls	r3, r3, #30
 8008cb4:	d413      	bmi.n	8008cde <_printf_i+0x22e>
 8008cb6:	68e0      	ldr	r0, [r4, #12]
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	bfb8      	it	lt
 8008cbe:	4618      	movlt	r0, r3
 8008cc0:	e7a6      	b.n	8008c10 <_printf_i+0x160>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	4640      	mov	r0, r8
 8008cca:	47d0      	blx	sl
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d09d      	beq.n	8008c0c <_printf_i+0x15c>
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	68e3      	ldr	r3, [r4, #12]
 8008cd4:	9903      	ldr	r1, [sp, #12]
 8008cd6:	1a5b      	subs	r3, r3, r1
 8008cd8:	42ab      	cmp	r3, r5
 8008cda:	dcf2      	bgt.n	8008cc2 <_printf_i+0x212>
 8008cdc:	e7eb      	b.n	8008cb6 <_printf_i+0x206>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	f104 0619 	add.w	r6, r4, #25
 8008ce4:	e7f5      	b.n	8008cd2 <_printf_i+0x222>
 8008ce6:	bf00      	nop
 8008ce8:	08017069 	.word	0x08017069
 8008cec:	0801707a 	.word	0x0801707a

08008cf0 <memmove>:
 8008cf0:	4288      	cmp	r0, r1
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	eb01 0402 	add.w	r4, r1, r2
 8008cf8:	d902      	bls.n	8008d00 <memmove+0x10>
 8008cfa:	4284      	cmp	r4, r0
 8008cfc:	4623      	mov	r3, r4
 8008cfe:	d807      	bhi.n	8008d10 <memmove+0x20>
 8008d00:	1e43      	subs	r3, r0, #1
 8008d02:	42a1      	cmp	r1, r4
 8008d04:	d008      	beq.n	8008d18 <memmove+0x28>
 8008d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d0e:	e7f8      	b.n	8008d02 <memmove+0x12>
 8008d10:	4402      	add	r2, r0
 8008d12:	4601      	mov	r1, r0
 8008d14:	428a      	cmp	r2, r1
 8008d16:	d100      	bne.n	8008d1a <memmove+0x2a>
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d22:	e7f7      	b.n	8008d14 <memmove+0x24>

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	@ (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7fa ffa0 	bl	8003c74 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	2000066c 	.word	0x2000066c

08008d44 <_realloc_r>:
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	4680      	mov	r8, r0
 8008d4a:	4615      	mov	r5, r2
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	b921      	cbnz	r1, 8008d5a <_realloc_r+0x16>
 8008d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	4611      	mov	r1, r2
 8008d56:	f7ff bc59 	b.w	800860c <_malloc_r>
 8008d5a:	b92a      	cbnz	r2, 8008d68 <_realloc_r+0x24>
 8008d5c:	f7ff fbea 	bl	8008534 <_free_r>
 8008d60:	2400      	movs	r4, #0
 8008d62:	4620      	mov	r0, r4
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d68:	f000 f81a 	bl	8008da0 <_malloc_usable_size_r>
 8008d6c:	4285      	cmp	r5, r0
 8008d6e:	4606      	mov	r6, r0
 8008d70:	d802      	bhi.n	8008d78 <_realloc_r+0x34>
 8008d72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d76:	d8f4      	bhi.n	8008d62 <_realloc_r+0x1e>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	f7ff fc46 	bl	800860c <_malloc_r>
 8008d80:	4607      	mov	r7, r0
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0ec      	beq.n	8008d60 <_realloc_r+0x1c>
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	bf28      	it	cs
 8008d8e:	4632      	movcs	r2, r6
 8008d90:	f7ff fbc2 	bl	8008518 <memcpy>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff fbcc 	bl	8008534 <_free_r>
 8008d9c:	463c      	mov	r4, r7
 8008d9e:	e7e0      	b.n	8008d62 <_realloc_r+0x1e>

08008da0 <_malloc_usable_size_r>:
 8008da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da4:	1f18      	subs	r0, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	bfbc      	itt	lt
 8008daa:	580b      	ldrlt	r3, [r1, r0]
 8008dac:	18c0      	addlt	r0, r0, r3
 8008dae:	4770      	bx	lr

08008db0 <cos>:
 8008db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db2:	ec53 2b10 	vmov	r2, r3, d0
 8008db6:	4826      	ldr	r0, [pc, #152]	@ (8008e50 <cos+0xa0>)
 8008db8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008dbc:	4281      	cmp	r1, r0
 8008dbe:	d806      	bhi.n	8008dce <cos+0x1e>
 8008dc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008e48 <cos+0x98>
 8008dc4:	b005      	add	sp, #20
 8008dc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dca:	f000 b899 	b.w	8008f00 <__kernel_cos>
 8008dce:	4821      	ldr	r0, [pc, #132]	@ (8008e54 <cos+0xa4>)
 8008dd0:	4281      	cmp	r1, r0
 8008dd2:	d908      	bls.n	8008de6 <cos+0x36>
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f7f7 fba0 	bl	800051c <__aeabi_dsub>
 8008ddc:	ec41 0b10 	vmov	d0, r0, r1
 8008de0:	b005      	add	sp, #20
 8008de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008de6:	4668      	mov	r0, sp
 8008de8:	f000 fa0e 	bl	8009208 <__ieee754_rem_pio2>
 8008dec:	f000 0003 	and.w	r0, r0, #3
 8008df0:	2801      	cmp	r0, #1
 8008df2:	d00b      	beq.n	8008e0c <cos+0x5c>
 8008df4:	2802      	cmp	r0, #2
 8008df6:	d015      	beq.n	8008e24 <cos+0x74>
 8008df8:	b9d8      	cbnz	r0, 8008e32 <cos+0x82>
 8008dfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008dfe:	ed9d 0b00 	vldr	d0, [sp]
 8008e02:	f000 f87d 	bl	8008f00 <__kernel_cos>
 8008e06:	ec51 0b10 	vmov	r0, r1, d0
 8008e0a:	e7e7      	b.n	8008ddc <cos+0x2c>
 8008e0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e10:	ed9d 0b00 	vldr	d0, [sp]
 8008e14:	f000 f93c 	bl	8009090 <__kernel_sin>
 8008e18:	ec53 2b10 	vmov	r2, r3, d0
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008e22:	e7db      	b.n	8008ddc <cos+0x2c>
 8008e24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e28:	ed9d 0b00 	vldr	d0, [sp]
 8008e2c:	f000 f868 	bl	8008f00 <__kernel_cos>
 8008e30:	e7f2      	b.n	8008e18 <cos+0x68>
 8008e32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e36:	ed9d 0b00 	vldr	d0, [sp]
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f000 f928 	bl	8009090 <__kernel_sin>
 8008e40:	e7e1      	b.n	8008e06 <cos+0x56>
 8008e42:	bf00      	nop
 8008e44:	f3af 8000 	nop.w
	...
 8008e50:	3fe921fb 	.word	0x3fe921fb
 8008e54:	7fefffff 	.word	0x7fefffff

08008e58 <sin>:
 8008e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e5a:	ec53 2b10 	vmov	r2, r3, d0
 8008e5e:	4826      	ldr	r0, [pc, #152]	@ (8008ef8 <sin+0xa0>)
 8008e60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e64:	4281      	cmp	r1, r0
 8008e66:	d807      	bhi.n	8008e78 <sin+0x20>
 8008e68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ef0 <sin+0x98>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	b005      	add	sp, #20
 8008e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e74:	f000 b90c 	b.w	8009090 <__kernel_sin>
 8008e78:	4820      	ldr	r0, [pc, #128]	@ (8008efc <sin+0xa4>)
 8008e7a:	4281      	cmp	r1, r0
 8008e7c:	d908      	bls.n	8008e90 <sin+0x38>
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7f7 fb4b 	bl	800051c <__aeabi_dsub>
 8008e86:	ec41 0b10 	vmov	d0, r0, r1
 8008e8a:	b005      	add	sp, #20
 8008e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e90:	4668      	mov	r0, sp
 8008e92:	f000 f9b9 	bl	8009208 <__ieee754_rem_pio2>
 8008e96:	f000 0003 	and.w	r0, r0, #3
 8008e9a:	2801      	cmp	r0, #1
 8008e9c:	d00c      	beq.n	8008eb8 <sin+0x60>
 8008e9e:	2802      	cmp	r0, #2
 8008ea0:	d011      	beq.n	8008ec6 <sin+0x6e>
 8008ea2:	b9e8      	cbnz	r0, 8008ee0 <sin+0x88>
 8008ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ea8:	ed9d 0b00 	vldr	d0, [sp]
 8008eac:	2001      	movs	r0, #1
 8008eae:	f000 f8ef 	bl	8009090 <__kernel_sin>
 8008eb2:	ec51 0b10 	vmov	r0, r1, d0
 8008eb6:	e7e6      	b.n	8008e86 <sin+0x2e>
 8008eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ebc:	ed9d 0b00 	vldr	d0, [sp]
 8008ec0:	f000 f81e 	bl	8008f00 <__kernel_cos>
 8008ec4:	e7f5      	b.n	8008eb2 <sin+0x5a>
 8008ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008eca:	ed9d 0b00 	vldr	d0, [sp]
 8008ece:	2001      	movs	r0, #1
 8008ed0:	f000 f8de 	bl	8009090 <__kernel_sin>
 8008ed4:	ec53 2b10 	vmov	r2, r3, d0
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ede:	e7d2      	b.n	8008e86 <sin+0x2e>
 8008ee0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ee4:	ed9d 0b00 	vldr	d0, [sp]
 8008ee8:	f000 f80a 	bl	8008f00 <__kernel_cos>
 8008eec:	e7f2      	b.n	8008ed4 <sin+0x7c>
 8008eee:	bf00      	nop
	...
 8008ef8:	3fe921fb 	.word	0x3fe921fb
 8008efc:	7fefffff 	.word	0x7fefffff

08008f00 <__kernel_cos>:
 8008f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	ec57 6b10 	vmov	r6, r7, d0
 8008f08:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f0c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008f10:	ed8d 1b00 	vstr	d1, [sp]
 8008f14:	d206      	bcs.n	8008f24 <__kernel_cos+0x24>
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fd3f 	bl	800099c <__aeabi_d2iz>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f000 8088 	beq.w	8009034 <__kernel_cos+0x134>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 f9c8 	bl	80002c0 <__aeabi_dmul>
 8008f30:	4b51      	ldr	r3, [pc, #324]	@ (8009078 <__kernel_cos+0x178>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	f7f7 f9c2 	bl	80002c0 <__aeabi_dmul>
 8008f3c:	a340      	add	r3, pc, #256	@ (adr r3, 8009040 <__kernel_cos+0x140>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	4682      	mov	sl, r0
 8008f44:	468b      	mov	fp, r1
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 f9b9 	bl	80002c0 <__aeabi_dmul>
 8008f4e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009048 <__kernel_cos+0x148>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 fae4 	bl	8000520 <__adddf3>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	f7f7 f9b0 	bl	80002c0 <__aeabi_dmul>
 8008f60:	a33b      	add	r3, pc, #236	@ (adr r3, 8009050 <__kernel_cos+0x150>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 fad9 	bl	800051c <__aeabi_dsub>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	f7f7 f9a7 	bl	80002c0 <__aeabi_dmul>
 8008f72:	a339      	add	r3, pc, #228	@ (adr r3, 8009058 <__kernel_cos+0x158>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fad2 	bl	8000520 <__adddf3>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 f99e 	bl	80002c0 <__aeabi_dmul>
 8008f84:	a336      	add	r3, pc, #216	@ (adr r3, 8009060 <__kernel_cos+0x160>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 fac7 	bl	800051c <__aeabi_dsub>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 f995 	bl	80002c0 <__aeabi_dmul>
 8008f96:	a334      	add	r3, pc, #208	@ (adr r3, 8009068 <__kernel_cos+0x168>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f7f7 fac0 	bl	8000520 <__adddf3>
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	462b      	mov	r3, r5
 8008fa4:	f7f7 f98c 	bl	80002c0 <__aeabi_dmul>
 8008fa8:	4622      	mov	r2, r4
 8008faa:	462b      	mov	r3, r5
 8008fac:	f7f7 f988 	bl	80002c0 <__aeabi_dmul>
 8008fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	4630      	mov	r0, r6
 8008fba:	4639      	mov	r1, r7
 8008fbc:	f7f7 f980 	bl	80002c0 <__aeabi_dmul>
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7f7 faa8 	bl	800051c <__aeabi_dsub>
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800907c <__kernel_cos+0x17c>)
 8008fce:	4598      	cmp	r8, r3
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	d810      	bhi.n	8008ff8 <__kernel_cos+0xf8>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4659      	mov	r1, fp
 8008fde:	f7f7 fa9d 	bl	800051c <__aeabi_dsub>
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4926      	ldr	r1, [pc, #152]	@ (8009080 <__kernel_cos+0x180>)
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f7f7 fa97 	bl	800051c <__aeabi_dsub>
 8008fee:	ec41 0b10 	vmov	d0, r0, r1
 8008ff2:	b003      	add	sp, #12
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	4b22      	ldr	r3, [pc, #136]	@ (8009084 <__kernel_cos+0x184>)
 8008ffa:	4921      	ldr	r1, [pc, #132]	@ (8009080 <__kernel_cos+0x180>)
 8008ffc:	4598      	cmp	r8, r3
 8008ffe:	bf8c      	ite	hi
 8009000:	4d21      	ldrhi	r5, [pc, #132]	@ (8009088 <__kernel_cos+0x188>)
 8009002:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009006:	2400      	movs	r4, #0
 8009008:	4622      	mov	r2, r4
 800900a:	462b      	mov	r3, r5
 800900c:	2000      	movs	r0, #0
 800900e:	f7f7 fa85 	bl	800051c <__aeabi_dsub>
 8009012:	4622      	mov	r2, r4
 8009014:	4680      	mov	r8, r0
 8009016:	4689      	mov	r9, r1
 8009018:	462b      	mov	r3, r5
 800901a:	4650      	mov	r0, sl
 800901c:	4659      	mov	r1, fp
 800901e:	f7f7 fa7d 	bl	800051c <__aeabi_dsub>
 8009022:	4632      	mov	r2, r6
 8009024:	463b      	mov	r3, r7
 8009026:	f7f7 fa79 	bl	800051c <__aeabi_dsub>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	e7da      	b.n	8008fea <__kernel_cos+0xea>
 8009034:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009070 <__kernel_cos+0x170>
 8009038:	e7db      	b.n	8008ff2 <__kernel_cos+0xf2>
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	be8838d4 	.word	0xbe8838d4
 8009044:	bda8fae9 	.word	0xbda8fae9
 8009048:	bdb4b1c4 	.word	0xbdb4b1c4
 800904c:	3e21ee9e 	.word	0x3e21ee9e
 8009050:	809c52ad 	.word	0x809c52ad
 8009054:	3e927e4f 	.word	0x3e927e4f
 8009058:	19cb1590 	.word	0x19cb1590
 800905c:	3efa01a0 	.word	0x3efa01a0
 8009060:	16c15177 	.word	0x16c15177
 8009064:	3f56c16c 	.word	0x3f56c16c
 8009068:	5555554c 	.word	0x5555554c
 800906c:	3fa55555 	.word	0x3fa55555
 8009070:	00000000 	.word	0x00000000
 8009074:	3ff00000 	.word	0x3ff00000
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	3fd33332 	.word	0x3fd33332
 8009080:	3ff00000 	.word	0x3ff00000
 8009084:	3fe90000 	.word	0x3fe90000
 8009088:	3fd20000 	.word	0x3fd20000
 800908c:	00000000 	.word	0x00000000

08009090 <__kernel_sin>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ec55 4b10 	vmov	r4, r5, d0
 8009098:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800909c:	b085      	sub	sp, #20
 800909e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80090a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80090a6:	4680      	mov	r8, r0
 80090a8:	d205      	bcs.n	80090b6 <__kernel_sin+0x26>
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 fc75 	bl	800099c <__aeabi_d2iz>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d052      	beq.n	800915c <__kernel_sin+0xcc>
 80090b6:	4622      	mov	r2, r4
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f8ff 	bl	80002c0 <__aeabi_dmul>
 80090c2:	4682      	mov	sl, r0
 80090c4:	468b      	mov	fp, r1
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 f8f7 	bl	80002c0 <__aeabi_dmul>
 80090d2:	a342      	add	r3, pc, #264	@ (adr r3, 80091dc <__kernel_sin+0x14c>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	e9cd 0100 	strd	r0, r1, [sp]
 80090dc:	4650      	mov	r0, sl
 80090de:	4659      	mov	r1, fp
 80090e0:	f7f7 f8ee 	bl	80002c0 <__aeabi_dmul>
 80090e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80091e4 <__kernel_sin+0x154>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 fa17 	bl	800051c <__aeabi_dsub>
 80090ee:	4652      	mov	r2, sl
 80090f0:	465b      	mov	r3, fp
 80090f2:	f7f7 f8e5 	bl	80002c0 <__aeabi_dmul>
 80090f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80091ec <__kernel_sin+0x15c>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 fa10 	bl	8000520 <__adddf3>
 8009100:	4652      	mov	r2, sl
 8009102:	465b      	mov	r3, fp
 8009104:	f7f7 f8dc 	bl	80002c0 <__aeabi_dmul>
 8009108:	a33a      	add	r3, pc, #232	@ (adr r3, 80091f4 <__kernel_sin+0x164>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa05 	bl	800051c <__aeabi_dsub>
 8009112:	4652      	mov	r2, sl
 8009114:	465b      	mov	r3, fp
 8009116:	f7f7 f8d3 	bl	80002c0 <__aeabi_dmul>
 800911a:	a338      	add	r3, pc, #224	@ (adr r3, 80091fc <__kernel_sin+0x16c>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f9fe 	bl	8000520 <__adddf3>
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	f1b8 0f00 	cmp.w	r8, #0
 800912c:	d11b      	bne.n	8009166 <__kernel_sin+0xd6>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 f8c3 	bl	80002c0 <__aeabi_dmul>
 800913a:	a325      	add	r3, pc, #148	@ (adr r3, 80091d0 <__kernel_sin+0x140>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f9ec 	bl	800051c <__aeabi_dsub>
 8009144:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009148:	f7f7 f8ba 	bl	80002c0 <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4620      	mov	r0, r4
 8009152:	4629      	mov	r1, r5
 8009154:	f7f7 f9e4 	bl	8000520 <__adddf3>
 8009158:	4604      	mov	r4, r0
 800915a:	460d      	mov	r5, r1
 800915c:	ec45 4b10 	vmov	d0, r4, r5
 8009160:	b005      	add	sp, #20
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916a:	4b1b      	ldr	r3, [pc, #108]	@ (80091d8 <__kernel_sin+0x148>)
 800916c:	2200      	movs	r2, #0
 800916e:	f7f7 f8a7 	bl	80002c0 <__aeabi_dmul>
 8009172:	4632      	mov	r2, r6
 8009174:	4680      	mov	r8, r0
 8009176:	4689      	mov	r9, r1
 8009178:	463b      	mov	r3, r7
 800917a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800917e:	f7f7 f89f 	bl	80002c0 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 f9c7 	bl	800051c <__aeabi_dsub>
 800918e:	4652      	mov	r2, sl
 8009190:	465b      	mov	r3, fp
 8009192:	f7f7 f895 	bl	80002c0 <__aeabi_dmul>
 8009196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800919a:	f7f7 f9bf 	bl	800051c <__aeabi_dsub>
 800919e:	a30c      	add	r3, pc, #48	@ (adr r3, 80091d0 <__kernel_sin+0x140>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ac:	f7f7 f888 	bl	80002c0 <__aeabi_dmul>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4630      	mov	r0, r6
 80091b6:	4639      	mov	r1, r7
 80091b8:	f7f7 f9b2 	bl	8000520 <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 f9aa 	bl	800051c <__aeabi_dsub>
 80091c8:	e7c6      	b.n	8009158 <__kernel_sin+0xc8>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
 80091d0:	55555549 	.word	0x55555549
 80091d4:	3fc55555 	.word	0x3fc55555
 80091d8:	3fe00000 	.word	0x3fe00000
 80091dc:	5acfd57c 	.word	0x5acfd57c
 80091e0:	3de5d93a 	.word	0x3de5d93a
 80091e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80091e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80091ec:	57b1fe7d 	.word	0x57b1fe7d
 80091f0:	3ec71de3 	.word	0x3ec71de3
 80091f4:	19c161d5 	.word	0x19c161d5
 80091f8:	3f2a01a0 	.word	0x3f2a01a0
 80091fc:	1110f8a6 	.word	0x1110f8a6
 8009200:	3f811111 	.word	0x3f811111
 8009204:	00000000 	.word	0x00000000

08009208 <__ieee754_rem_pio2>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	ec57 6b10 	vmov	r6, r7, d0
 8009210:	4bc5      	ldr	r3, [pc, #788]	@ (8009528 <__ieee754_rem_pio2+0x320>)
 8009212:	b08d      	sub	sp, #52	@ 0x34
 8009214:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009218:	4598      	cmp	r8, r3
 800921a:	4604      	mov	r4, r0
 800921c:	9704      	str	r7, [sp, #16]
 800921e:	d807      	bhi.n	8009230 <__ieee754_rem_pio2+0x28>
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	ed80 0b00 	vstr	d0, [r0]
 8009228:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800922c:	2500      	movs	r5, #0
 800922e:	e028      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 8009230:	4bbe      	ldr	r3, [pc, #760]	@ (800952c <__ieee754_rem_pio2+0x324>)
 8009232:	4598      	cmp	r8, r3
 8009234:	d878      	bhi.n	8009328 <__ieee754_rem_pio2+0x120>
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	4dbd      	ldr	r5, [pc, #756]	@ (8009530 <__ieee754_rem_pio2+0x328>)
 800923a:	2b00      	cmp	r3, #0
 800923c:	4630      	mov	r0, r6
 800923e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80094f0 <__ieee754_rem_pio2+0x2e8>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	4639      	mov	r1, r7
 8009246:	dd38      	ble.n	80092ba <__ieee754_rem_pio2+0xb2>
 8009248:	f7f7 f968 	bl	800051c <__aeabi_dsub>
 800924c:	45a8      	cmp	r8, r5
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	d01a      	beq.n	800928a <__ieee754_rem_pio2+0x82>
 8009254:	a3a8      	add	r3, pc, #672	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f95f 	bl	800051c <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 f957 	bl	800051c <__aeabi_dsub>
 800926e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 f952 	bl	800051c <__aeabi_dsub>
 8009278:	e9c4 8900 	strd	r8, r9, [r4]
 800927c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009280:	2501      	movs	r5, #1
 8009282:	4628      	mov	r0, r5
 8009284:	b00d      	add	sp, #52	@ 0x34
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	a39d      	add	r3, pc, #628	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f944 	bl	800051c <__aeabi_dsub>
 8009294:	a39c      	add	r3, pc, #624	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	f7f7 f93d 	bl	800051c <__aeabi_dsub>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f7 f935 	bl	800051c <__aeabi_dsub>
 80092b2:	a395      	add	r3, pc, #596	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	e7dc      	b.n	8009274 <__ieee754_rem_pio2+0x6c>
 80092ba:	f7f7 f931 	bl	8000520 <__adddf3>
 80092be:	45a8      	cmp	r8, r5
 80092c0:	4606      	mov	r6, r0
 80092c2:	460f      	mov	r7, r1
 80092c4:	d018      	beq.n	80092f8 <__ieee754_rem_pio2+0xf0>
 80092c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f7 f928 	bl	8000520 <__adddf3>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4680      	mov	r8, r0
 80092d6:	4689      	mov	r9, r1
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	f7f7 f91e 	bl	800051c <__aeabi_dsub>
 80092e0:	a385      	add	r3, pc, #532	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f7 f91b 	bl	8000520 <__adddf3>
 80092ea:	f04f 35ff 	mov.w	r5, #4294967295
 80092ee:	e9c4 8900 	strd	r8, r9, [r4]
 80092f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092f6:	e7c4      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 80092f8:	a381      	add	r3, pc, #516	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f7 f90f 	bl	8000520 <__adddf3>
 8009302:	a381      	add	r3, pc, #516	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	f7f7 f908 	bl	8000520 <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4680      	mov	r8, r0
 8009316:	4689      	mov	r9, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f7 f8fe 	bl	800051c <__aeabi_dsub>
 8009320:	a379      	add	r3, pc, #484	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	e7de      	b.n	80092e6 <__ieee754_rem_pio2+0xde>
 8009328:	4b82      	ldr	r3, [pc, #520]	@ (8009534 <__ieee754_rem_pio2+0x32c>)
 800932a:	4598      	cmp	r8, r3
 800932c:	f200 80d1 	bhi.w	80094d2 <__ieee754_rem_pio2+0x2ca>
 8009330:	f000 f966 	bl	8009600 <fabs>
 8009334:	ec57 6b10 	vmov	r6, r7, d0
 8009338:	a375      	add	r3, pc, #468	@ (adr r3, 8009510 <__ieee754_rem_pio2+0x308>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f6 ffbd 	bl	80002c0 <__aeabi_dmul>
 8009346:	4b7c      	ldr	r3, [pc, #496]	@ (8009538 <__ieee754_rem_pio2+0x330>)
 8009348:	2200      	movs	r2, #0
 800934a:	f7f7 f8e9 	bl	8000520 <__adddf3>
 800934e:	f7f7 fb25 	bl	800099c <__aeabi_d2iz>
 8009352:	4605      	mov	r5, r0
 8009354:	f7f7 fa30 	bl	80007b8 <__aeabi_i2d>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009360:	a363      	add	r3, pc, #396	@ (adr r3, 80094f0 <__ieee754_rem_pio2+0x2e8>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f7f6 ffab 	bl	80002c0 <__aeabi_dmul>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f7 f8d3 	bl	800051c <__aeabi_dsub>
 8009376:	a360      	add	r3, pc, #384	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	4682      	mov	sl, r0
 800937e:	468b      	mov	fp, r1
 8009380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009384:	f7f6 ff9c 	bl	80002c0 <__aeabi_dmul>
 8009388:	2d1f      	cmp	r5, #31
 800938a:	4606      	mov	r6, r0
 800938c:	460f      	mov	r7, r1
 800938e:	dc0c      	bgt.n	80093aa <__ieee754_rem_pio2+0x1a2>
 8009390:	4b6a      	ldr	r3, [pc, #424]	@ (800953c <__ieee754_rem_pio2+0x334>)
 8009392:	1e6a      	subs	r2, r5, #1
 8009394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009398:	4543      	cmp	r3, r8
 800939a:	d006      	beq.n	80093aa <__ieee754_rem_pio2+0x1a2>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	f7f7 f8ba 	bl	800051c <__aeabi_dsub>
 80093a8:	e00e      	b.n	80093c8 <__ieee754_rem_pio2+0x1c0>
 80093aa:	463b      	mov	r3, r7
 80093ac:	4632      	mov	r2, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4659      	mov	r1, fp
 80093b2:	f7f7 f8b3 	bl	800051c <__aeabi_dsub>
 80093b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	dc02      	bgt.n	80093ce <__ieee754_rem_pio2+0x1c6>
 80093c8:	e9c4 0100 	strd	r0, r1, [r4]
 80093cc:	e039      	b.n	8009442 <__ieee754_rem_pio2+0x23a>
 80093ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d8:	f7f6 ff72 	bl	80002c0 <__aeabi_dmul>
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	f7f7 f898 	bl	800051c <__aeabi_dsub>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4680      	mov	r8, r0
 80093f2:	4689      	mov	r9, r1
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f7 f890 	bl	800051c <__aeabi_dsub>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	f7f7 f88c 	bl	800051c <__aeabi_dsub>
 8009404:	a340      	add	r3, pc, #256	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009412:	f7f6 ff55 	bl	80002c0 <__aeabi_dmul>
 8009416:	4632      	mov	r2, r6
 8009418:	463b      	mov	r3, r7
 800941a:	f7f7 f87f 	bl	800051c <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f7 f877 	bl	800051c <__aeabi_dsub>
 800942e:	9a05      	ldr	r2, [sp, #20]
 8009430:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b31      	cmp	r3, #49	@ 0x31
 8009438:	dc20      	bgt.n	800947c <__ieee754_rem_pio2+0x274>
 800943a:	e9c4 0100 	strd	r0, r1, [r4]
 800943e:	46c2      	mov	sl, r8
 8009440:	46cb      	mov	fp, r9
 8009442:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009446:	4650      	mov	r0, sl
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	4659      	mov	r1, fp
 800944e:	f7f7 f865 	bl	800051c <__aeabi_dsub>
 8009452:	463b      	mov	r3, r7
 8009454:	4632      	mov	r2, r6
 8009456:	f7f7 f861 	bl	800051c <__aeabi_dsub>
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009462:	f6bf af0e 	bge.w	8009282 <__ieee754_rem_pio2+0x7a>
 8009466:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009470:	f8c4 8000 	str.w	r8, [r4]
 8009474:	60a0      	str	r0, [r4, #8]
 8009476:	60e3      	str	r3, [r4, #12]
 8009478:	426d      	negs	r5, r5
 800947a:	e702      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 800947c:	a326      	add	r3, pc, #152	@ (adr r3, 8009518 <__ieee754_rem_pio2+0x310>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009486:	f7f6 ff1b 	bl	80002c0 <__aeabi_dmul>
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f7 f841 	bl	800051c <__aeabi_dsub>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4682      	mov	sl, r0
 80094a0:	468b      	mov	fp, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 f839 	bl	800051c <__aeabi_dsub>
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	f7f7 f835 	bl	800051c <__aeabi_dsub>
 80094b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009520 <__ieee754_rem_pio2+0x318>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	4606      	mov	r6, r0
 80094ba:	460f      	mov	r7, r1
 80094bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c0:	f7f6 fefe 	bl	80002c0 <__aeabi_dmul>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	f7f7 f828 	bl	800051c <__aeabi_dsub>
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	e764      	b.n	800939c <__ieee754_rem_pio2+0x194>
 80094d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009540 <__ieee754_rem_pio2+0x338>)
 80094d4:	4598      	cmp	r8, r3
 80094d6:	d935      	bls.n	8009544 <__ieee754_rem_pio2+0x33c>
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f7 f81c 	bl	800051c <__aeabi_dsub>
 80094e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094e8:	e9c4 0100 	strd	r0, r1, [r4]
 80094ec:	e69e      	b.n	800922c <__ieee754_rem_pio2+0x24>
 80094ee:	bf00      	nop
 80094f0:	54400000 	.word	0x54400000
 80094f4:	3ff921fb 	.word	0x3ff921fb
 80094f8:	1a626331 	.word	0x1a626331
 80094fc:	3dd0b461 	.word	0x3dd0b461
 8009500:	1a600000 	.word	0x1a600000
 8009504:	3dd0b461 	.word	0x3dd0b461
 8009508:	2e037073 	.word	0x2e037073
 800950c:	3ba3198a 	.word	0x3ba3198a
 8009510:	6dc9c883 	.word	0x6dc9c883
 8009514:	3fe45f30 	.word	0x3fe45f30
 8009518:	2e000000 	.word	0x2e000000
 800951c:	3ba3198a 	.word	0x3ba3198a
 8009520:	252049c1 	.word	0x252049c1
 8009524:	397b839a 	.word	0x397b839a
 8009528:	3fe921fb 	.word	0x3fe921fb
 800952c:	4002d97b 	.word	0x4002d97b
 8009530:	3ff921fb 	.word	0x3ff921fb
 8009534:	413921fb 	.word	0x413921fb
 8009538:	3fe00000 	.word	0x3fe00000
 800953c:	0801708c 	.word	0x0801708c
 8009540:	7fefffff 	.word	0x7fefffff
 8009544:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009548:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800954c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009550:	4630      	mov	r0, r6
 8009552:	460f      	mov	r7, r1
 8009554:	f7f7 fa22 	bl	800099c <__aeabi_d2iz>
 8009558:	f7f7 f92e 	bl	80007b8 <__aeabi_i2d>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009568:	f7f6 ffd8 	bl	800051c <__aeabi_dsub>
 800956c:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <__ieee754_rem_pio2+0x3f0>)
 800956e:	2200      	movs	r2, #0
 8009570:	f7f6 fea6 	bl	80002c0 <__aeabi_dmul>
 8009574:	460f      	mov	r7, r1
 8009576:	4606      	mov	r6, r0
 8009578:	f7f7 fa10 	bl	800099c <__aeabi_d2iz>
 800957c:	f7f7 f91c 	bl	80007b8 <__aeabi_i2d>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800958c:	f7f6 ffc6 	bl	800051c <__aeabi_dsub>
 8009590:	4b19      	ldr	r3, [pc, #100]	@ (80095f8 <__ieee754_rem_pio2+0x3f0>)
 8009592:	2200      	movs	r2, #0
 8009594:	f7f6 fe94 	bl	80002c0 <__aeabi_dmul>
 8009598:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800959c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80095a0:	f04f 0803 	mov.w	r8, #3
 80095a4:	2600      	movs	r6, #0
 80095a6:	2700      	movs	r7, #0
 80095a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	46c2      	mov	sl, r8
 80095b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80095b6:	f7f7 f9bf 	bl	8000938 <__aeabi_dcmpeq>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d1f4      	bne.n	80095a8 <__ieee754_rem_pio2+0x3a0>
 80095be:	4b0f      	ldr	r3, [pc, #60]	@ (80095fc <__ieee754_rem_pio2+0x3f4>)
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	2302      	movs	r3, #2
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	462a      	mov	r2, r5
 80095c8:	4653      	mov	r3, sl
 80095ca:	4621      	mov	r1, r4
 80095cc:	a806      	add	r0, sp, #24
 80095ce:	f000 f81f 	bl	8009610 <__kernel_rem_pio2>
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	4605      	mov	r5, r0
 80095d8:	f6bf ae53 	bge.w	8009282 <__ieee754_rem_pio2+0x7a>
 80095dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80095e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095e4:	e9c4 2300 	strd	r2, r3, [r4]
 80095e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80095ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80095f4:	e740      	b.n	8009478 <__ieee754_rem_pio2+0x270>
 80095f6:	bf00      	nop
 80095f8:	41700000 	.word	0x41700000
 80095fc:	0801710c 	.word	0x0801710c

08009600 <fabs>:
 8009600:	ec51 0b10 	vmov	r0, r1, d0
 8009604:	4602      	mov	r2, r0
 8009606:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800960a:	ec43 2b10 	vmov	d0, r2, r3
 800960e:	4770      	bx	lr

08009610 <__kernel_rem_pio2>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b02 	vpush	{d8}
 8009618:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800961c:	f112 0f14 	cmn.w	r2, #20
 8009620:	9306      	str	r3, [sp, #24]
 8009622:	9104      	str	r1, [sp, #16]
 8009624:	4bbe      	ldr	r3, [pc, #760]	@ (8009920 <__kernel_rem_pio2+0x310>)
 8009626:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009628:	9008      	str	r0, [sp, #32]
 800962a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	9b06      	ldr	r3, [sp, #24]
 8009632:	f103 33ff 	add.w	r3, r3, #4294967295
 8009636:	bfa8      	it	ge
 8009638:	1ed4      	subge	r4, r2, #3
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	bfb2      	itee	lt
 800963e:	2400      	movlt	r4, #0
 8009640:	2318      	movge	r3, #24
 8009642:	fb94 f4f3 	sdivge	r4, r4, r3
 8009646:	f06f 0317 	mvn.w	r3, #23
 800964a:	fb04 3303 	mla	r3, r4, r3, r3
 800964e:	eb03 0b02 	add.w	fp, r3, r2
 8009652:	9b00      	ldr	r3, [sp, #0]
 8009654:	9a05      	ldr	r2, [sp, #20]
 8009656:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009910 <__kernel_rem_pio2+0x300>
 800965a:	eb03 0802 	add.w	r8, r3, r2
 800965e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009660:	1aa7      	subs	r7, r4, r2
 8009662:	ae20      	add	r6, sp, #128	@ 0x80
 8009664:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009668:	2500      	movs	r5, #0
 800966a:	4545      	cmp	r5, r8
 800966c:	dd13      	ble.n	8009696 <__kernel_rem_pio2+0x86>
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	aa20      	add	r2, sp, #128	@ 0x80
 8009672:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009676:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	9b00      	ldr	r3, [sp, #0]
 8009680:	4598      	cmp	r8, r3
 8009682:	dc31      	bgt.n	80096e8 <__kernel_rem_pio2+0xd8>
 8009684:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009910 <__kernel_rem_pio2+0x300>
 8009688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800968c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009690:	462f      	mov	r7, r5
 8009692:	2600      	movs	r6, #0
 8009694:	e01b      	b.n	80096ce <__kernel_rem_pio2+0xbe>
 8009696:	42ef      	cmn	r7, r5
 8009698:	d407      	bmi.n	80096aa <__kernel_rem_pio2+0x9a>
 800969a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800969e:	f7f7 f88b 	bl	80007b8 <__aeabi_i2d>
 80096a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096a6:	3501      	adds	r5, #1
 80096a8:	e7df      	b.n	800966a <__kernel_rem_pio2+0x5a>
 80096aa:	ec51 0b18 	vmov	r0, r1, d8
 80096ae:	e7f8      	b.n	80096a2 <__kernel_rem_pio2+0x92>
 80096b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80096b8:	f7f6 fe02 	bl	80002c0 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c4:	f7f6 ff2c 	bl	8000520 <__adddf3>
 80096c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096cc:	3601      	adds	r6, #1
 80096ce:	9b05      	ldr	r3, [sp, #20]
 80096d0:	429e      	cmp	r6, r3
 80096d2:	f1a7 0708 	sub.w	r7, r7, #8
 80096d6:	ddeb      	ble.n	80096b0 <__kernel_rem_pio2+0xa0>
 80096d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096dc:	f108 0801 	add.w	r8, r8, #1
 80096e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80096e4:	3508      	adds	r5, #8
 80096e6:	e7ca      	b.n	800967e <__kernel_rem_pio2+0x6e>
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	f8dd 8000 	ldr.w	r8, [sp]
 80096ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80096f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80096f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009704:	ab98      	add	r3, sp, #608	@ 0x260
 8009706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800970a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800970e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009712:	ac0c      	add	r4, sp, #48	@ 0x30
 8009714:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009716:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800971a:	46a1      	mov	r9, r4
 800971c:	46c2      	mov	sl, r8
 800971e:	f1ba 0f00 	cmp.w	sl, #0
 8009722:	f1a5 0508 	sub.w	r5, r5, #8
 8009726:	dc77      	bgt.n	8009818 <__kernel_rem_pio2+0x208>
 8009728:	4658      	mov	r0, fp
 800972a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800972e:	f000 fac7 	bl	8009cc0 <scalbn>
 8009732:	ec57 6b10 	vmov	r6, r7, d0
 8009736:	2200      	movs	r2, #0
 8009738:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 fdbe 	bl	80002c0 <__aeabi_dmul>
 8009744:	ec41 0b10 	vmov	d0, r0, r1
 8009748:	f000 fb3a 	bl	8009dc0 <floor>
 800974c:	4b75      	ldr	r3, [pc, #468]	@ (8009924 <__kernel_rem_pio2+0x314>)
 800974e:	ec51 0b10 	vmov	r0, r1, d0
 8009752:	2200      	movs	r2, #0
 8009754:	f7f6 fdb4 	bl	80002c0 <__aeabi_dmul>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f6 fedc 	bl	800051c <__aeabi_dsub>
 8009764:	460f      	mov	r7, r1
 8009766:	4606      	mov	r6, r0
 8009768:	f7f7 f918 	bl	800099c <__aeabi_d2iz>
 800976c:	9002      	str	r0, [sp, #8]
 800976e:	f7f7 f823 	bl	80007b8 <__aeabi_i2d>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	f7f6 fecf 	bl	800051c <__aeabi_dsub>
 800977e:	f1bb 0f00 	cmp.w	fp, #0
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	dd6c      	ble.n	8009862 <__kernel_rem_pio2+0x252>
 8009788:	f108 31ff 	add.w	r1, r8, #4294967295
 800978c:	ab0c      	add	r3, sp, #48	@ 0x30
 800978e:	9d02      	ldr	r5, [sp, #8]
 8009790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009794:	f1cb 0018 	rsb	r0, fp, #24
 8009798:	fa43 f200 	asr.w	r2, r3, r0
 800979c:	4415      	add	r5, r2
 800979e:	4082      	lsls	r2, r0
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80097a4:	9502      	str	r5, [sp, #8]
 80097a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80097aa:	f1cb 0217 	rsb	r2, fp, #23
 80097ae:	fa43 f902 	asr.w	r9, r3, r2
 80097b2:	f1b9 0f00 	cmp.w	r9, #0
 80097b6:	dd64      	ble.n	8009882 <__kernel_rem_pio2+0x272>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	3301      	adds	r3, #1
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	4615      	mov	r5, r2
 80097c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80097c6:	4590      	cmp	r8, r2
 80097c8:	f300 80b8 	bgt.w	800993c <__kernel_rem_pio2+0x32c>
 80097cc:	f1bb 0f00 	cmp.w	fp, #0
 80097d0:	dd07      	ble.n	80097e2 <__kernel_rem_pio2+0x1d2>
 80097d2:	f1bb 0f01 	cmp.w	fp, #1
 80097d6:	f000 80bf 	beq.w	8009958 <__kernel_rem_pio2+0x348>
 80097da:	f1bb 0f02 	cmp.w	fp, #2
 80097de:	f000 80c6 	beq.w	800996e <__kernel_rem_pio2+0x35e>
 80097e2:	f1b9 0f02 	cmp.w	r9, #2
 80097e6:	d14c      	bne.n	8009882 <__kernel_rem_pio2+0x272>
 80097e8:	4632      	mov	r2, r6
 80097ea:	463b      	mov	r3, r7
 80097ec:	494e      	ldr	r1, [pc, #312]	@ (8009928 <__kernel_rem_pio2+0x318>)
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7f6 fe94 	bl	800051c <__aeabi_dsub>
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d042      	beq.n	8009882 <__kernel_rem_pio2+0x272>
 80097fc:	4658      	mov	r0, fp
 80097fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009918 <__kernel_rem_pio2+0x308>
 8009802:	f000 fa5d 	bl	8009cc0 <scalbn>
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	ec53 2b10 	vmov	r2, r3, d0
 800980e:	f7f6 fe85 	bl	800051c <__aeabi_dsub>
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	e034      	b.n	8009882 <__kernel_rem_pio2+0x272>
 8009818:	4b44      	ldr	r3, [pc, #272]	@ (800992c <__kernel_rem_pio2+0x31c>)
 800981a:	2200      	movs	r2, #0
 800981c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009820:	f7f6 fd4e 	bl	80002c0 <__aeabi_dmul>
 8009824:	f7f7 f8ba 	bl	800099c <__aeabi_d2iz>
 8009828:	f7f6 ffc6 	bl	80007b8 <__aeabi_i2d>
 800982c:	4b40      	ldr	r3, [pc, #256]	@ (8009930 <__kernel_rem_pio2+0x320>)
 800982e:	2200      	movs	r2, #0
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	f7f6 fd44 	bl	80002c0 <__aeabi_dmul>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009840:	f7f6 fe6c 	bl	800051c <__aeabi_dsub>
 8009844:	f7f7 f8aa 	bl	800099c <__aeabi_d2iz>
 8009848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800984c:	f849 0b04 	str.w	r0, [r9], #4
 8009850:	4639      	mov	r1, r7
 8009852:	4630      	mov	r0, r6
 8009854:	f7f6 fe64 	bl	8000520 <__adddf3>
 8009858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800985c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009860:	e75d      	b.n	800971e <__kernel_rem_pio2+0x10e>
 8009862:	d107      	bne.n	8009874 <__kernel_rem_pio2+0x264>
 8009864:	f108 33ff 	add.w	r3, r8, #4294967295
 8009868:	aa0c      	add	r2, sp, #48	@ 0x30
 800986a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009872:	e79e      	b.n	80097b2 <__kernel_rem_pio2+0x1a2>
 8009874:	4b2f      	ldr	r3, [pc, #188]	@ (8009934 <__kernel_rem_pio2+0x324>)
 8009876:	2200      	movs	r2, #0
 8009878:	f7f7 f87c 	bl	8000974 <__aeabi_dcmpge>
 800987c:	2800      	cmp	r0, #0
 800987e:	d143      	bne.n	8009908 <__kernel_rem_pio2+0x2f8>
 8009880:	4681      	mov	r9, r0
 8009882:	2200      	movs	r2, #0
 8009884:	2300      	movs	r3, #0
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	f7f7 f855 	bl	8000938 <__aeabi_dcmpeq>
 800988e:	2800      	cmp	r0, #0
 8009890:	f000 80bf 	beq.w	8009a12 <__kernel_rem_pio2+0x402>
 8009894:	f108 33ff 	add.w	r3, r8, #4294967295
 8009898:	2200      	movs	r2, #0
 800989a:	9900      	ldr	r1, [sp, #0]
 800989c:	428b      	cmp	r3, r1
 800989e:	da6e      	bge.n	800997e <__kernel_rem_pio2+0x36e>
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	f000 8089 	beq.w	80099b8 <__kernel_rem_pio2+0x3a8>
 80098a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80098aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80098ac:	f1ab 0b18 	sub.w	fp, fp, #24
 80098b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0f6      	beq.n	80098a6 <__kernel_rem_pio2+0x296>
 80098b8:	4658      	mov	r0, fp
 80098ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009918 <__kernel_rem_pio2+0x308>
 80098be:	f000 f9ff 	bl	8009cc0 <scalbn>
 80098c2:	f108 0301 	add.w	r3, r8, #1
 80098c6:	00da      	lsls	r2, r3, #3
 80098c8:	9205      	str	r2, [sp, #20]
 80098ca:	ec55 4b10 	vmov	r4, r5, d0
 80098ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 80098d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800992c <__kernel_rem_pio2+0x31c>
 80098d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80098d8:	4646      	mov	r6, r8
 80098da:	f04f 0a00 	mov.w	sl, #0
 80098de:	2e00      	cmp	r6, #0
 80098e0:	f280 80cf 	bge.w	8009a82 <__kernel_rem_pio2+0x472>
 80098e4:	4644      	mov	r4, r8
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	f2c0 80fd 	blt.w	8009ae6 <__kernel_rem_pio2+0x4d6>
 80098ec:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <__kernel_rem_pio2+0x328>)
 80098ee:	461f      	mov	r7, r3
 80098f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80098f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098f6:	9306      	str	r3, [sp, #24]
 80098f8:	f04f 0a00 	mov.w	sl, #0
 80098fc:	f04f 0b00 	mov.w	fp, #0
 8009900:	2600      	movs	r6, #0
 8009902:	eba8 0504 	sub.w	r5, r8, r4
 8009906:	e0e2      	b.n	8009ace <__kernel_rem_pio2+0x4be>
 8009908:	f04f 0902 	mov.w	r9, #2
 800990c:	e754      	b.n	80097b8 <__kernel_rem_pio2+0x1a8>
 800990e:	bf00      	nop
	...
 800991c:	3ff00000 	.word	0x3ff00000
 8009920:	08017258 	.word	0x08017258
 8009924:	40200000 	.word	0x40200000
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	3e700000 	.word	0x3e700000
 8009930:	41700000 	.word	0x41700000
 8009934:	3fe00000 	.word	0x3fe00000
 8009938:	08017218 	.word	0x08017218
 800993c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009940:	b945      	cbnz	r5, 8009954 <__kernel_rem_pio2+0x344>
 8009942:	b123      	cbz	r3, 800994e <__kernel_rem_pio2+0x33e>
 8009944:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009948:	f844 3c04 	str.w	r3, [r4, #-4]
 800994c:	2301      	movs	r3, #1
 800994e:	3201      	adds	r2, #1
 8009950:	461d      	mov	r5, r3
 8009952:	e738      	b.n	80097c6 <__kernel_rem_pio2+0x1b6>
 8009954:	1acb      	subs	r3, r1, r3
 8009956:	e7f7      	b.n	8009948 <__kernel_rem_pio2+0x338>
 8009958:	f108 32ff 	add.w	r2, r8, #4294967295
 800995c:	ab0c      	add	r3, sp, #48	@ 0x30
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009966:	a90c      	add	r1, sp, #48	@ 0x30
 8009968:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800996c:	e739      	b.n	80097e2 <__kernel_rem_pio2+0x1d2>
 800996e:	f108 32ff 	add.w	r2, r8, #4294967295
 8009972:	ab0c      	add	r3, sp, #48	@ 0x30
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800997c:	e7f3      	b.n	8009966 <__kernel_rem_pio2+0x356>
 800997e:	a90c      	add	r1, sp, #48	@ 0x30
 8009980:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009984:	3b01      	subs	r3, #1
 8009986:	430a      	orrs	r2, r1
 8009988:	e787      	b.n	800989a <__kernel_rem_pio2+0x28a>
 800998a:	3401      	adds	r4, #1
 800998c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009990:	2a00      	cmp	r2, #0
 8009992:	d0fa      	beq.n	800998a <__kernel_rem_pio2+0x37a>
 8009994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009996:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800999a:	eb0d 0503 	add.w	r5, sp, r3
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	aa20      	add	r2, sp, #128	@ 0x80
 80099a2:	4443      	add	r3, r8
 80099a4:	f108 0701 	add.w	r7, r8, #1
 80099a8:	3d98      	subs	r5, #152	@ 0x98
 80099aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80099ae:	4444      	add	r4, r8
 80099b0:	42bc      	cmp	r4, r7
 80099b2:	da04      	bge.n	80099be <__kernel_rem_pio2+0x3ae>
 80099b4:	46a0      	mov	r8, r4
 80099b6:	e6a2      	b.n	80096fe <__kernel_rem_pio2+0xee>
 80099b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ba:	2401      	movs	r4, #1
 80099bc:	e7e6      	b.n	800998c <__kernel_rem_pio2+0x37c>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80099c4:	f7f6 fef8 	bl	80007b8 <__aeabi_i2d>
 80099c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009c90 <__kernel_rem_pio2+0x680>
 80099cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80099d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099d8:	46b2      	mov	sl, r6
 80099da:	f04f 0800 	mov.w	r8, #0
 80099de:	9b05      	ldr	r3, [sp, #20]
 80099e0:	4598      	cmp	r8, r3
 80099e2:	dd05      	ble.n	80099f0 <__kernel_rem_pio2+0x3e0>
 80099e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e8:	3701      	adds	r7, #1
 80099ea:	eca5 7b02 	vstmia	r5!, {d7}
 80099ee:	e7df      	b.n	80099b0 <__kernel_rem_pio2+0x3a0>
 80099f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80099f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80099f8:	f7f6 fc62 	bl	80002c0 <__aeabi_dmul>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a04:	f7f6 fd8c 	bl	8000520 <__adddf3>
 8009a08:	f108 0801 	add.w	r8, r8, #1
 8009a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a10:	e7e5      	b.n	80099de <__kernel_rem_pio2+0x3ce>
 8009a12:	f1cb 0000 	rsb	r0, fp, #0
 8009a16:	ec47 6b10 	vmov	d0, r6, r7
 8009a1a:	f000 f951 	bl	8009cc0 <scalbn>
 8009a1e:	ec55 4b10 	vmov	r4, r5, d0
 8009a22:	4b9d      	ldr	r3, [pc, #628]	@ (8009c98 <__kernel_rem_pio2+0x688>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f6 ffa3 	bl	8000974 <__aeabi_dcmpge>
 8009a2e:	b300      	cbz	r0, 8009a72 <__kernel_rem_pio2+0x462>
 8009a30:	4b9a      	ldr	r3, [pc, #616]	@ (8009c9c <__kernel_rem_pio2+0x68c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	4620      	mov	r0, r4
 8009a36:	4629      	mov	r1, r5
 8009a38:	f7f6 fc42 	bl	80002c0 <__aeabi_dmul>
 8009a3c:	f7f6 ffae 	bl	800099c <__aeabi_d2iz>
 8009a40:	4606      	mov	r6, r0
 8009a42:	f7f6 feb9 	bl	80007b8 <__aeabi_i2d>
 8009a46:	4b94      	ldr	r3, [pc, #592]	@ (8009c98 <__kernel_rem_pio2+0x688>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f7f6 fc39 	bl	80002c0 <__aeabi_dmul>
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4602      	mov	r2, r0
 8009a52:	4629      	mov	r1, r5
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7f6 fd61 	bl	800051c <__aeabi_dsub>
 8009a5a:	f7f6 ff9f 	bl	800099c <__aeabi_d2iz>
 8009a5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a60:	f10b 0b18 	add.w	fp, fp, #24
 8009a64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a68:	f108 0801 	add.w	r8, r8, #1
 8009a6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009a70:	e722      	b.n	80098b8 <__kernel_rem_pio2+0x2a8>
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 ff91 	bl	800099c <__aeabi_d2iz>
 8009a7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a80:	e71a      	b.n	80098b8 <__kernel_rem_pio2+0x2a8>
 8009a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a88:	f7f6 fe96 	bl	80007b8 <__aeabi_i2d>
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fc16 	bl	80002c0 <__aeabi_dmul>
 8009a94:	4652      	mov	r2, sl
 8009a96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009a9a:	465b      	mov	r3, fp
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fc0e 	bl	80002c0 <__aeabi_dmul>
 8009aa4:	3e01      	subs	r6, #1
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	e718      	b.n	80098de <__kernel_rem_pio2+0x2ce>
 8009aac:	9906      	ldr	r1, [sp, #24]
 8009aae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009ab2:	9106      	str	r1, [sp, #24]
 8009ab4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009ab8:	f7f6 fc02 	bl	80002c0 <__aeabi_dmul>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f7f6 fd2c 	bl	8000520 <__adddf3>
 8009ac8:	3601      	adds	r6, #1
 8009aca:	4682      	mov	sl, r0
 8009acc:	468b      	mov	fp, r1
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	429e      	cmp	r6, r3
 8009ad2:	dc01      	bgt.n	8009ad8 <__kernel_rem_pio2+0x4c8>
 8009ad4:	42b5      	cmp	r5, r6
 8009ad6:	dae9      	bge.n	8009aac <__kernel_rem_pio2+0x49c>
 8009ad8:	ab48      	add	r3, sp, #288	@ 0x120
 8009ada:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009ade:	e9c5 ab00 	strd	sl, fp, [r5]
 8009ae2:	3c01      	subs	r4, #1
 8009ae4:	e6ff      	b.n	80098e6 <__kernel_rem_pio2+0x2d6>
 8009ae6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	dc0b      	bgt.n	8009b04 <__kernel_rem_pio2+0x4f4>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dc39      	bgt.n	8009b64 <__kernel_rem_pio2+0x554>
 8009af0:	d05d      	beq.n	8009bae <__kernel_rem_pio2+0x59e>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	f003 0007 	and.w	r0, r3, #7
 8009af8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009afc:	ecbd 8b02 	vpop	{d8}
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d1f3      	bne.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009b10:	eb0d 0403 	add.w	r4, sp, r3
 8009b14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009b18:	4625      	mov	r5, r4
 8009b1a:	46c2      	mov	sl, r8
 8009b1c:	f1ba 0f00 	cmp.w	sl, #0
 8009b20:	f1a5 0508 	sub.w	r5, r5, #8
 8009b24:	dc6b      	bgt.n	8009bfe <__kernel_rem_pio2+0x5ee>
 8009b26:	4645      	mov	r5, r8
 8009b28:	2d01      	cmp	r5, #1
 8009b2a:	f1a4 0408 	sub.w	r4, r4, #8
 8009b2e:	f300 8087 	bgt.w	8009c40 <__kernel_rem_pio2+0x630>
 8009b32:	9c05      	ldr	r4, [sp, #20]
 8009b34:	ab48      	add	r3, sp, #288	@ 0x120
 8009b36:	441c      	add	r4, r3
 8009b38:	2000      	movs	r0, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f1b8 0f01 	cmp.w	r8, #1
 8009b40:	f300 809c 	bgt.w	8009c7c <__kernel_rem_pio2+0x66c>
 8009b44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009b48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	f040 80a6 	bne.w	8009ca0 <__kernel_rem_pio2+0x690>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	e9c3 7800 	strd	r7, r8, [r3]
 8009b5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009b5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b62:	e7c6      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009b64:	9d05      	ldr	r5, [sp, #20]
 8009b66:	ab48      	add	r3, sp, #288	@ 0x120
 8009b68:	441d      	add	r5, r3
 8009b6a:	4644      	mov	r4, r8
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	2c00      	cmp	r4, #0
 8009b72:	da35      	bge.n	8009be0 <__kernel_rem_pio2+0x5d0>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d038      	beq.n	8009bec <__kernel_rem_pio2+0x5dc>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b80:	9c04      	ldr	r4, [sp, #16]
 8009b82:	e9c4 2300 	strd	r2, r3, [r4]
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009b8e:	f7f6 fcc5 	bl	800051c <__aeabi_dsub>
 8009b92:	ad4a      	add	r5, sp, #296	@ 0x128
 8009b94:	2401      	movs	r4, #1
 8009b96:	45a0      	cmp	r8, r4
 8009b98:	da2b      	bge.n	8009bf2 <__kernel_rem_pio2+0x5e2>
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d002      	beq.n	8009ba6 <__kernel_rem_pio2+0x596>
 8009ba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009bac:	e7a1      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009bae:	9c05      	ldr	r4, [sp, #20]
 8009bb0:	ab48      	add	r3, sp, #288	@ 0x120
 8009bb2:	441c      	add	r4, r3
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	f1b8 0f00 	cmp.w	r8, #0
 8009bbc:	da09      	bge.n	8009bd2 <__kernel_rem_pio2+0x5c2>
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	d002      	beq.n	8009bca <__kernel_rem_pio2+0x5ba>
 8009bc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bc8:	4619      	mov	r1, r3
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	e9c3 0100 	strd	r0, r1, [r3]
 8009bd0:	e78f      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009bd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009bd6:	f7f6 fca3 	bl	8000520 <__adddf3>
 8009bda:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bde:	e7eb      	b.n	8009bb8 <__kernel_rem_pio2+0x5a8>
 8009be0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009be4:	f7f6 fc9c 	bl	8000520 <__adddf3>
 8009be8:	3c01      	subs	r4, #1
 8009bea:	e7c1      	b.n	8009b70 <__kernel_rem_pio2+0x560>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	e7c6      	b.n	8009b80 <__kernel_rem_pio2+0x570>
 8009bf2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009bf6:	f7f6 fc93 	bl	8000520 <__adddf3>
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	e7cb      	b.n	8009b96 <__kernel_rem_pio2+0x586>
 8009bfe:	ed95 7b00 	vldr	d7, [r5]
 8009c02:	ed8d 7b00 	vstr	d7, [sp]
 8009c06:	ed95 7b02 	vldr	d7, [r5, #8]
 8009c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c0e:	ec53 2b17 	vmov	r2, r3, d7
 8009c12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c16:	f7f6 fc83 	bl	8000520 <__adddf3>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c26:	f7f6 fc79 	bl	800051c <__aeabi_dsub>
 8009c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c2e:	f7f6 fc77 	bl	8000520 <__adddf3>
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009c3a:	e9c5 6700 	strd	r6, r7, [r5]
 8009c3e:	e76d      	b.n	8009b1c <__kernel_rem_pio2+0x50c>
 8009c40:	ed94 7b00 	vldr	d7, [r4]
 8009c44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009c48:	ec51 0b17 	vmov	r0, r1, d7
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	465b      	mov	r3, fp
 8009c50:	ed8d 7b00 	vstr	d7, [sp]
 8009c54:	f7f6 fc64 	bl	8000520 <__adddf3>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c64:	f7f6 fc5a 	bl	800051c <__aeabi_dsub>
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	f7f6 fc58 	bl	8000520 <__adddf3>
 8009c70:	3d01      	subs	r5, #1
 8009c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c76:	e9c4 6700 	strd	r6, r7, [r4]
 8009c7a:	e755      	b.n	8009b28 <__kernel_rem_pio2+0x518>
 8009c7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c80:	f7f6 fc4e 	bl	8000520 <__adddf3>
 8009c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c88:	e758      	b.n	8009b3c <__kernel_rem_pio2+0x52c>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
	...
 8009c98:	41700000 	.word	0x41700000
 8009c9c:	3e700000 	.word	0x3e700000
 8009ca0:	9b04      	ldr	r3, [sp, #16]
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	601f      	str	r7, [r3, #0]
 8009ca6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009caa:	605c      	str	r4, [r3, #4]
 8009cac:	609d      	str	r5, [r3, #8]
 8009cae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cb2:	60d3      	str	r3, [r2, #12]
 8009cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cb8:	6110      	str	r0, [r2, #16]
 8009cba:	6153      	str	r3, [r2, #20]
 8009cbc:	e719      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009cbe:	bf00      	nop

08009cc0 <scalbn>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	ec55 4b10 	vmov	r4, r5, d0
 8009cc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009cca:	4606      	mov	r6, r0
 8009ccc:	462b      	mov	r3, r5
 8009cce:	b991      	cbnz	r1, 8009cf6 <scalbn+0x36>
 8009cd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009cd4:	4323      	orrs	r3, r4
 8009cd6:	d03d      	beq.n	8009d54 <scalbn+0x94>
 8009cd8:	4b35      	ldr	r3, [pc, #212]	@ (8009db0 <scalbn+0xf0>)
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f7f6 faee 	bl	80002c0 <__aeabi_dmul>
 8009ce4:	4b33      	ldr	r3, [pc, #204]	@ (8009db4 <scalbn+0xf4>)
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	da0f      	bge.n	8009d0e <scalbn+0x4e>
 8009cee:	a328      	add	r3, pc, #160	@ (adr r3, 8009d90 <scalbn+0xd0>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	e01e      	b.n	8009d34 <scalbn+0x74>
 8009cf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	d10b      	bne.n	8009d16 <scalbn+0x56>
 8009cfe:	4622      	mov	r2, r4
 8009d00:	4620      	mov	r0, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7f6 fc0c 	bl	8000520 <__adddf3>
 8009d08:	4604      	mov	r4, r0
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	e022      	b.n	8009d54 <scalbn+0x94>
 8009d0e:	460b      	mov	r3, r1
 8009d10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009d14:	3936      	subs	r1, #54	@ 0x36
 8009d16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009d1a:	4296      	cmp	r6, r2
 8009d1c:	dd0d      	ble.n	8009d3a <scalbn+0x7a>
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	a11d      	add	r1, pc, #116	@ (adr r1, 8009d98 <scalbn+0xd8>)
 8009d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d26:	da02      	bge.n	8009d2e <scalbn+0x6e>
 8009d28:	a11d      	add	r1, pc, #116	@ (adr r1, 8009da0 <scalbn+0xe0>)
 8009d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8009d98 <scalbn+0xd8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fac4 	bl	80002c0 <__aeabi_dmul>
 8009d38:	e7e6      	b.n	8009d08 <scalbn+0x48>
 8009d3a:	1872      	adds	r2, r6, r1
 8009d3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009d40:	428a      	cmp	r2, r1
 8009d42:	dcec      	bgt.n	8009d1e <scalbn+0x5e>
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	dd08      	ble.n	8009d5a <scalbn+0x9a>
 8009d48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009d50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d54:	ec45 4b10 	vmov	d0, r4, r5
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009d5e:	da08      	bge.n	8009d72 <scalbn+0xb2>
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	a10b      	add	r1, pc, #44	@ (adr r1, 8009d90 <scalbn+0xd0>)
 8009d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d68:	dac1      	bge.n	8009cee <scalbn+0x2e>
 8009d6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009da8 <scalbn+0xe8>)
 8009d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d70:	e7bd      	b.n	8009cee <scalbn+0x2e>
 8009d72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d76:	3236      	adds	r2, #54	@ 0x36
 8009d78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009d7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d80:	4620      	mov	r0, r4
 8009d82:	4b0d      	ldr	r3, [pc, #52]	@ (8009db8 <scalbn+0xf8>)
 8009d84:	4629      	mov	r1, r5
 8009d86:	2200      	movs	r2, #0
 8009d88:	e7d4      	b.n	8009d34 <scalbn+0x74>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
 8009d90:	c2f8f359 	.word	0xc2f8f359
 8009d94:	01a56e1f 	.word	0x01a56e1f
 8009d98:	8800759c 	.word	0x8800759c
 8009d9c:	7e37e43c 	.word	0x7e37e43c
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	fe37e43c 	.word	0xfe37e43c
 8009da8:	c2f8f359 	.word	0xc2f8f359
 8009dac:	81a56e1f 	.word	0x81a56e1f
 8009db0:	43500000 	.word	0x43500000
 8009db4:	ffff3cb0 	.word	0xffff3cb0
 8009db8:	3c900000 	.word	0x3c900000
 8009dbc:	00000000 	.word	0x00000000

08009dc0 <floor>:
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009dd0:	2e13      	cmp	r6, #19
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	dc34      	bgt.n	8009e44 <floor+0x84>
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	da17      	bge.n	8009e0e <floor+0x4e>
 8009dde:	a332      	add	r3, pc, #200	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fb9c 	bl	8000520 <__adddf3>
 8009de8:	2200      	movs	r2, #0
 8009dea:	2300      	movs	r3, #0
 8009dec:	f7f6 fdcc 	bl	8000988 <__aeabi_dcmpgt>
 8009df0:	b150      	cbz	r0, 8009e08 <floor+0x48>
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	da55      	bge.n	8009ea2 <floor+0xe2>
 8009df6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009dfa:	432c      	orrs	r4, r5
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	42ac      	cmp	r4, r5
 8009e00:	4c2b      	ldr	r4, [pc, #172]	@ (8009eb0 <floor+0xf0>)
 8009e02:	bf08      	it	eq
 8009e04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	e023      	b.n	8009e56 <floor+0x96>
 8009e0e:	4f29      	ldr	r7, [pc, #164]	@ (8009eb4 <floor+0xf4>)
 8009e10:	4137      	asrs	r7, r6
 8009e12:	ea01 0307 	and.w	r3, r1, r7
 8009e16:	4303      	orrs	r3, r0
 8009e18:	d01d      	beq.n	8009e56 <floor+0x96>
 8009e1a:	a323      	add	r3, pc, #140	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 fb7e 	bl	8000520 <__adddf3>
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	f7f6 fdae 	bl	8000988 <__aeabi_dcmpgt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d0eb      	beq.n	8009e08 <floor+0x48>
 8009e30:	2c00      	cmp	r4, #0
 8009e32:	bfbe      	ittt	lt
 8009e34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009e38:	4133      	asrlt	r3, r6
 8009e3a:	18e4      	addlt	r4, r4, r3
 8009e3c:	ea24 0407 	bic.w	r4, r4, r7
 8009e40:	2500      	movs	r5, #0
 8009e42:	e7e1      	b.n	8009e08 <floor+0x48>
 8009e44:	2e33      	cmp	r6, #51	@ 0x33
 8009e46:	dd0a      	ble.n	8009e5e <floor+0x9e>
 8009e48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009e4c:	d103      	bne.n	8009e56 <floor+0x96>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	f7f6 fb65 	bl	8000520 <__adddf3>
 8009e56:	ec41 0b10 	vmov	d0, r0, r1
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009e62:	f04f 37ff 	mov.w	r7, #4294967295
 8009e66:	40df      	lsrs	r7, r3
 8009e68:	4207      	tst	r7, r0
 8009e6a:	d0f4      	beq.n	8009e56 <floor+0x96>
 8009e6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 fb55 	bl	8000520 <__adddf3>
 8009e76:	2200      	movs	r2, #0
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f7f6 fd85 	bl	8000988 <__aeabi_dcmpgt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d0c2      	beq.n	8009e08 <floor+0x48>
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	da0a      	bge.n	8009e9c <floor+0xdc>
 8009e86:	2e14      	cmp	r6, #20
 8009e88:	d101      	bne.n	8009e8e <floor+0xce>
 8009e8a:	3401      	adds	r4, #1
 8009e8c:	e006      	b.n	8009e9c <floor+0xdc>
 8009e8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009e92:	2301      	movs	r3, #1
 8009e94:	40b3      	lsls	r3, r6
 8009e96:	441d      	add	r5, r3
 8009e98:	4545      	cmp	r5, r8
 8009e9a:	d3f6      	bcc.n	8009e8a <floor+0xca>
 8009e9c:	ea25 0507 	bic.w	r5, r5, r7
 8009ea0:	e7b2      	b.n	8009e08 <floor+0x48>
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	462c      	mov	r4, r5
 8009ea6:	e7af      	b.n	8009e08 <floor+0x48>
 8009ea8:	8800759c 	.word	0x8800759c
 8009eac:	7e37e43c 	.word	0x7e37e43c
 8009eb0:	bff00000 	.word	0xbff00000
 8009eb4:	000fffff 	.word	0x000fffff

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
